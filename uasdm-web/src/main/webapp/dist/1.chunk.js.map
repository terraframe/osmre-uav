{"version":3,"sources":["webpack:///./src/app/admin/service/system-logo.service.ts","webpack:///./src/app/admin/service/email.service.ts","webpack:///./src/app/admin/service/account.service.ts","webpack:///./src/app/admin/service/session-event.service.ts","webpack:///./src/app/admin/component/session-event/session-event.component.html","webpack:///./src/app/admin/component/session-event/session-event.component.ts","webpack:///./src/app/admin/component/account/account.component.html","webpack:///./src/app/admin/component/account/account.component.ts","webpack:///./src/app/admin/model/account.ts","webpack:///./src/app/admin/component/account/account-invite.component.html","webpack:///./src/app/admin/component/account/account-invite.component.ts","webpack:///./src/app/admin/component/account/accounts.component.html","webpack:///./src/app/admin/component/account/accounts.component.ts","webpack:///./src/app/admin/component/account/account-invite-complete.component.html","webpack:///./src/app/admin/component/account/account-invite-complete.component.ts","webpack:///./src/app/admin/component/logo/system-logo.component.html","webpack:///./src/app/admin/component/logo/system-logo.component.ts","webpack:///./src/app/admin/component/logo/system-logos.component.html","webpack:///./src/app/admin/component/logo/system-logos.component.ts","webpack:///./src/app/admin/component/email/email.component.html","webpack:///./src/app/admin/component/email/email.component.ts","webpack:///./src/app/admin/component/system/system-info.component.ts","webpack:///./src/app/admin/component/system/system-info.component.html","webpack:///./src/app/admin/component/system/system-configuration.component.ts","webpack:///./src/app/admin/component/system/system-configuration.component.html","webpack:///./src/app/admin/admin-routing.module.ts","webpack:///./src/app/admin/admin.module.ts"],"names":["eventService","http","this","start","get","acp","pipe","finalize","complete","toPromise","then","response","icons","oid","headers","post","JSON","stringify","email","setting","criteria","params","set","user","roleIds","account","invite","console","log","token","p","toString","SessionEventComponent","service","res","resultSet","count","pageNumber","pageSize","page","onPageChange","bsModalRef","onAccountChange","Subject","newInstance","hide","unlock","i","groups","length","group","j","roles","role","assigned","push","roleId","changePassword","password","apply","next","UserInvite","bureaus","inviteUser","router","modalService","cols","header","field","type","sortable","filter","config","remove","edit","create","label","refresh","event","onEdit","row","onRemove","show","animated","backdrop","ignoreBackdropClick","content","message","username","data","submitText","onConfirm","subscribe","init","newInvite","inviteUsers","route","uasdmNewInstance","phoneNumber","catch","err","error","sub","window","location","href","inviteComplete","getMessageFromError","dropActive","context","snapshot","options","autoUpload","queueLimit","removeAfterUpload","url","uploader","onBeforeUploadItem","fileItem","onCompleteItem","item","status","onSuccessItem","back","onErrorItem","onBuildItemForm","form","append","that","onAfterAddingFile","uploadElRef","nativeElement","value","reader","FileReader","onload","e","file","result","readAsDataURL","_file","uploadAll","clearQueue","onSubmit","fileOver","cancel","localizeService","getIcons","icon","decode","filtered","el","navigate","custom","server","port","from","to","onSuccess","getInstance","SystemInfoComponent","authService","userName","admin","getUserName","isAdmin","open","routes","path","canActivate","component","title","AdminRoutingModule","provide","useClass","forChild","AdminModule"],"mappings":"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","file":"1.chunk.js","sourcesContent":["///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\n\nimport { SystemLogo } from '../model/system-logo';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SystemLogoService {\n\n    constructor( private eventService: EventService, private http: HttpClient ) { }\n\n    getIcons(): Promise<SystemLogo[]> {\n\n        this.eventService.start();\n\n        return this.http\n            .get<{ icons: SystemLogo[] }>( acp + '/logo/getAll' )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n            .then( response => {\n                return response.icons;\n            } )\n    }\n\n    remove( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/logo/remove', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\n\nimport { Email } from '../model/email';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class EmailService {\n\n\tconstructor(private eventService: EventService, private http: HttpClient) { }\n\n\tgetInstance(): Promise<Email> {\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<Email>(acp + '/email/getInstance')\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tapply(email: Email): Promise<Email> {\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<Email>(acp + '/email/apply', JSON.stringify({ setting: email }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\nimport { PageResult } from '@shared/model/page';\n\nimport { Account, User, UserInvite } from '../model/account';\nimport { GenericTableService } from '@shared/model/generic-table';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class AccountService implements GenericTableService {\n\n    constructor( private eventService: EventService, private http: HttpClient ) { }\n\n    page( criteria: Object ): Promise<PageResult<User>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set('criteria', JSON.stringify(criteria));\n\n        return this.http\n            .get<PageResult<User>>( acp + '/uasdm-account/page', { params: params } )\n            .toPromise()\n    }\n\n    edit( oid: string ): Promise<Account> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Account>( acp + '/uasdm-account/edit', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n\n    uasdmNewInstance(): Promise<User> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<User>( acp + '/uasdm-account/newInstance', JSON.stringify( {} ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n\n    newInvite(): Promise<Account> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Account>( acp + '/uasdm-account/newInvite', JSON.stringify( {} ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n\n    remove( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/uasdm-account/remove', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n\n    apply( user: User, roleIds: string[] ): Promise<User> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<User>( acp + '/uasdm-account/apply', JSON.stringify( { account: user, roleIds: roleIds } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n\n    unlock( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/uasdm-account/unlock', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n\n    inviteUser( invite: UserInvite, roleIds: string[] ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        console.log( \"Submitting to inviteUser : \", JSON.stringify( { invite: invite, roleIds: roleIds } ) );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/uasdm-account/inviteUser', JSON.stringify( { invite: invite, roleIds: roleIds } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n\n    inviteComplete( user: User, token: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/uasdm-account/inviteComplete', JSON.stringify( { user: user, token: token } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\nimport { PageResult } from '@shared/model/page';\n\nimport { SessionEvent } from '../model/session-event';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SessionEventService {\n\n\tconstructor(private eventService: EventService, private http: HttpClient) { }\n\n\tpage(p: number): Promise<PageResult<SessionEvent>> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('pageNumber', p.toString());\n\t\tparams = params.set('pageSize', \"20\");\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<PageResult<SessionEvent>>(acp + '/session-event/page', { params: params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n}\n","<div>\n<!--     <uasdm-header></uasdm-header> -->\n\n<!--     <div id=\"app-container\" class=\"container\"> -->\n\n<!--         <h2> -->\n<!--             Session Event Log -->\n<!--         </h2> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div class=\"list-table-wrapper\">\n                  <table id=\"manage-accounts-table\" class=\"list-table table table-bordered table-striped\">\n                      <thead>\n                          <tr>\n                              <th class=\"label-column\">\n                                  Username\n                              </th>\n                              <th class=\"label-column\">\n                                  Bureau\n                              </th>\n                              <th class=\"label-column\">\n                                  Event Date\n                              </th>\n                              <th class=\"label-column\">\n                                  Event Type\n                              </th>\n                          </tr>\n                      </thead>\n                      <tbody>\n                          <tr *ngFor=\"let event of res.resultSet | paginate: { itemsPerPage: res.pageSize, currentPage: res.pageNumber, totalItems: res.count }\"\n                              class=\"fade-ngRepeat-item\">\n                              <td class=\"label-column username-col\"> {{ event.username }} </td>\n                              <td class=\"label-column firstname-col\"> {{ event.bureau }} </td>\n                              <td class=\"label-column lastname-col\"> {{ event.eventDate | idmdate }} </td>\n                              <td class=\"label-column phone-col\"> {{ event.eventType }} </td>\n                          </tr>\n                      </tbody>\n                  </table>\n                  <pagination-controls (pageChange)=\"onPageChange($event)\" maxSize=\"10\"></pagination-controls>\n              </div>\n            </div>\n        </div>\n<!--     </div> -->\n</div>","import { Component, OnInit } from '@angular/core';\n\nimport { PageResult } from '@shared/model/page';\n\nimport { SessionEvent } from '../../model/session-event';\nimport { SessionEventService } from '../../service/session-event.service';\n\n@Component({\n\tselector: 'session-events',\n\ttemplateUrl: './session-event.component.html',\n\tstyles: ['./accounts.css']\n})\nexport class SessionEventComponent implements OnInit {\n\tres: PageResult<SessionEvent> = {\n\t\tresultSet: [],\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 20\n\t};\n\tp: number = 1;\n\n\tconstructor(private service: SessionEventService) { }\n\n\tngOnInit(): void {\n\t\tthis.service.page(this.p).then(res => {\n\t\t\tthis.res = res;\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tthis.service.page(pageNumber).then(res => {\n\t\t\tthis.res = res;\n\n\t\t\tthis.p = pageNumber;\n\t\t});\n\t}\n}\n","<div *ngIf=\"account != null\" class=\"modal-body\">\n\n\n  <form #form=\"ngForm\" (ngSubmit)=\"form.valid && onSubmit()\" [mustMatch]=\"['password', 'certainPassword']\">\n    <div>\n      <h3>\n        <localize key=\"account.user.heading\"></localize>\n      </h3>\n    </div>\n    <hr>\n    <div class=\"form-group\">\n      <label>\n        <localize key=\"account.firstname\"></localize>\n      </label>\n      <input type=\"text\" [(ngModel)]=\"account.user.firstName\" name=\"firstname\" required>\n    </div>\n    <div class=\"form-group\">\n      <label>\n        <localize key=\"account.lastname\"></localize>\n      </label>\n      <input type=\"text\" [(ngModel)]=\"account.user.lastName\" name=\"lastname\" required>\n    </div>\n    <div class=\"form-group\">\n      <label>\n        <localize key=\"account.phonenumber\"></localize>\n      </label>\n      <input type=\"text\" [(ngModel)]=\"account.user.phoneNumber\" name=\"phoneNumber\" phoneNumber #phoneNumber=\"ngModel\">\n      <div *ngIf=\"phoneNumber.errors?.phoneNumber\" class=\"inline-error-message\">\n        Invalid phone number\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label>\n        <localize key=\"account.email\"></localize>\n      </label>\n      <input type=\"email\" [(ngModel)]=\"account.user.email\" name=\"email\" #aemail=\"ngModel\" required email>\n      <div *ngIf=\"aemail.errors?.email && account.user.email && account.user.email.length > 0\" class=\"inline-error-message\">\n        <localize key=\"account.email.validation\"></localize>\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label>Bureau</label>\n      <select [(ngModel)]=\"account.user.bureau\" name=\"bureau\">\n        <option></option>\n        <option *ngFor=\"let option of account.bureaus\" [value]=\"option.value\">{{option.label}}</option>\n      </select>\n    </div>\n    <div class=\"form-group\">\n      <label>Extra Information</label>\n      <textarea class=\"form-control\" rows=\"5\" [(ngModel)]=\"account.user.information\" name=\"information\"></textarea>\n    </div>\n    <div>\n      <h3>\n        <localize key=\"account.info.heading\"></localize>\n      </h3>\n    </div>\n    <hr>\n    <div class=\"form-group\">\n      <label>\n        <localize key=\"account.username\"></localize>\n      </label>\n      <input type=\"text\" [disabled]=\"!account.user.newInstance && account.user.username === 'admin'\" [(ngModel)]=\"account.user.username\" name=\"username\" required>\n    </div>\n    <div *ngIf=\"!account.user.newInstance\" class=\"form-group\">\n      <boolean-field [(value)]=\"account.changePassword\" [label]=\"'account.changePassword' | localize\"></boolean-field>    \n    </div>\n    <div *ngIf=\"account.changePassword || account.user.newInstance\">\n      <div class=\"form-group\">\n        <label>\n          <localize key=\"account.password\"></localize>\n        </label>\n        <input type=\"password\" [(ngModel)]=\"account.user.password\" name=\"password\" #password=\"ngModel\" required minlength=\"14\" maxlength=\"50\" passwordValidator>\n        <password-strength-bar [passwordToCheck]=\"account.user.password\"></password-strength-bar>\n        <div *ngIf=\"password.errors?.passwordStrength\" class=\"inline-error-message\">\n          The password must be at least 14 characters in length and must contain at least: Two uppercase letters [A-Z], two lowercase letters [a-z], two digits [0-9], and two special characters [e.g.: !@#$*&]\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label>\n          <localize key=\"account.certainPassword\"></localize>\n        </label>\n        <input type=\"password\" name=\"certainPassword\" [ngModel]=\"certainPassword\" #certainPassword=\"ngModel\" required />\n        <div *ngIf=\"certainPassword.errors?.mustMatch\" class=\"inline-error-message\">\n          <localize key=\"account.certainPassword.validation\"></localize>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"(!account.user.newInstance && account.user.username !== 'admin')\" class=\"form-group\">\n      <boolean-field [(value)]=\"account.user.inactive\" [label]=\"'account.inactive' | localize\"></boolean-field>\n    </div>\n\n    <div *ngFor=\"let group of account.groups\">\n      <div>\n        <h3>\n          <localize [key]=\"'com.runwaysdk.ui.userstable.UsersTable.' + group.name\"></localize>\n        </h3>\n      </div>\n      <hr>\n      <div class=\"form-group\">\n        <div *ngFor=\"let role of group.roles\">\n          <boolean-field [(value)]=\"role.assigned\" [label]=\"role.displayLabel\"></boolean-field>\n        </div>\n      </div>\n    </div>\n    <hr>\n\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n      <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n    </div>\n  </form>\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { Account, User } from '../../model/account';\n\nimport { AccountService } from '../../service/account.service';\n\n@Component({\n\tselector: 'account',\n\ttemplateUrl: './account.component.html',\n\tstyles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}']\n})\nexport class AccountComponent implements OnInit {\n\taccount: Account;\n\tcertainPassword: string;\n    /*\n     * Observable subject for Account changes.  Called when create is successful \n     */\n\tpublic onAccountChange: Subject<User>;\n\n\tconstructor(private service: AccountService, public bsModalRef: BsModalRef) { }\n\n\tngOnInit(): void {\n\t\tthis.onAccountChange = new Subject();\n\t}\n\n\tinit(account: Account): void {\n\t\tthis.account = account;\n\t}\n\n\tcancel(): void {\n\t\tif (this.account.user.newInstance === true) {\n\t\t\tthis.bsModalRef.hide();\n\t\t}\n\t\telse {\n\t\t\tthis.service.unlock(this.account.user.oid).then(response => {\n\t\t\t\tthis.bsModalRef.hide();\n\t\t\t});\n\t\t}\n\t}\n\n\tonSubmit(): void {\n\t\tlet roleIds: string[] = [];\n\n\t\tfor (let i = 0; i < this.account.groups.length; i++) {\n\t\t\tlet group = this.account.groups[i];\n\n\t\t\tfor (let j = 0; j < group.roles.length; j++) {\n\t\t\t\tlet role = group.roles[j];\n\n\t\t\t\tif (role.assigned) {\n\t\t\t\t\troleIds.push(role.roleId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this.account.changePassword && !this.account.user.newInstance) {\n\t\t\tdelete this.account.user.password;\n\t\t}\n\n\t\tthis.service.apply(this.account.user, roleIds).then(response => {\n\t\t\tthis.onAccountChange.next(response);\n\t\t\tthis.bsModalRef.hide();\n\t\t});\n\t}\n}","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nexport class UserInvite {\n\temail: string;\n\tbureau: string;\n\tgroups: Group[];\n\tbureaus: { value: string, label: string }[];\n}\n\nexport class User {\n\toid: string;\n\tusername: string;\n\tpassword: string;\n\tfirstName: string;\n\tlastName: string;\n\temail: string;\n\tphoneNumber: string;\n\tbureau: string;\n\tinformation: string;\n\tinactive: boolean;\n\tnewInstance: boolean;\n}\n\nexport class Role {\n\troleId: string;\n\tdisplayLabel: string;\n\tassigned: boolean;\n}\n\nexport class Group {\n\tname: string;\n\troles: Role[];\n}\n\nexport class Account {\n\tuser: User;\n\tgroups: Group[];\n\tbureaus: { value: string, label: string }[];\n\tchangePassword?: boolean;\n}","<div *ngIf=\"invite != null\" class=\"modal-body\">\n\n  <div class=\"modal-title-container\">\n    <h3>Invite a User</h3>\n  </div>\n  \n  <form #form=\"ngForm\" (ngSubmit)=\"form.valid && onSubmit()\">\n    <div class=\"form-group\">\n      <label>\n        <localize key=\"account.email\"></localize>\n      </label>\n      <input type=\"text\" [(ngModel)]=\"invite.email\" name=\"email\" required #aemail=\"ngModel\" email>\n      <div *ngIf=\"aemail.errors?.email && invite.email && invite.email.length > 0\" class=\"inline-error-message\">\n        <localize key=\"account.email.validation\"></localize>\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label>\n        <label>Bureau</label>\n      </label>\n      <select [(ngModel)]=\"invite.bureau\" name=\"bureau\">\n        <option></option>\n        <option *ngFor=\"let option of invite.bureaus\" [value]=\"option.value\">{{option.label}}</option>\n      </select>\n    </div>\n\n    <div *ngFor=\"let group of invite.groups\">\n      <div>\n        <h3>\n          <localize [key]=\"'com.runwaysdk.ui.userstable.UsersTable.' + group.name\"></localize>\n        </h3>\n      </div>\n      <hr>\n      <div class=\"form-group\">\n        <div *ngFor=\"let role of group.roles\">\n          <boolean-field [(value)]=\"role.assigned\" [label]=\"role.displayLabel\"></boolean-field>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n      <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n    </div>\n  </form>\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { Account, UserInvite } from '../../model/account';\n\nimport { AccountService } from '../../service/account.service';\n\n@Component({\n\tselector: 'account-invite',\n\ttemplateUrl: './account-invite.component.html',\n\tstyles: []\n})\nexport class AccountInviteComponent {\n\tinvite: UserInvite;\n\n\tconstructor(private service: AccountService, public bsModalRef: BsModalRef) { }\n\n\tinit(groups, bureaus): void {\n\t\tthis.invite = new UserInvite();\n\t\tthis.invite.groups = groups;\n\t\tthis.invite.bureaus = bureaus;\n\t}\n\n\tcancel(): void {\n\t\tthis.bsModalRef.hide();\n\t}\n\n\tonSubmit(): void {\n\t\tlet roleIds: string[] = [];\n\n\t\tfor (let i = 0; i < this.invite.groups.length; i++) {\n\t\t\tlet group = this.invite.groups[i];\n\n\t\t\tfor (let j = 0; j < group.roles.length; j++) {\n\t\t\t\tlet role = group.roles[j];\n\n\t\t\t\tif (role.assigned) {\n\t\t\t\t\troleIds.push(role.roleId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.service.inviteUser(this.invite, roleIds).then(response => {\n\t\t\tthis.bsModalRef.hide();\n\t\t});\n\t}\n}","<div>\n<!--     <uasdm-header></uasdm-header> -->\n\n<!--     <div id=\"app-container\" class=\"container\"> -->\n\n        <h3>\n            Manage Accounts\n<!--             <localize key=\"accounts.title\"></localize> -->\n        </h3>\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <button (click)=\"inviteUsers()\" class=\"btn btn-primary pull-right\" style=\"margin:10px 0;\">Invite User</button>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <generic-table *ngIf=\"config != null\" [cols]=\"cols\" [config]=\"config\" [refresh]=\"refresh\" (click)=\"onClick($event)\"></generic-table>\n            </div>\n        </div>\n<!--     </div> -->\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from '@shared/model/generic-table';\n\nimport { User, Account } from '../../model/account';\nimport { AccountService } from '../../service/account.service';\nimport { AccountComponent } from './account.component';\nimport { AccountInviteComponent } from './account-invite.component';\nimport { Subject } from 'rxjs';\n\n@Component({\n\tselector: 'accounts',\n\ttemplateUrl: './accounts.component.html',\n\tstyles: ['./accounts.css']\n})\nexport class AccountsComponent implements OnInit {\n\n\tconfig: GenericTableConfig;\n\tcols: GenericTableColumn[] = [\n\t\t{ header: 'Username', field: 'username', type: 'TEXT', sortable: true },\n\t\t{ header: 'First name', field: 'firstName', type: 'TEXT', sortable: true },\n\t\t{ header: 'Last name', field: 'lastName', type: 'TEXT', sortable: true },\n\t\t{ header: 'Phone Number', field: 'phoneNumber', type: 'TEXT', sortable: true },\n\t\t{ header: 'Email Address', field: 'email', type: 'TEXT', sortable: true },\n\t\t{ header: 'Bureau', field: 'bureau', type: 'TEXT', sortable: true, filter: true },\n\t\t{ header: '', type: 'ACTIONS', sortable: false },\n\t];\n\trefresh: Subject<void>;\n\n\t/*\n\t * Reference to the modal current showing\n\t*/\n\tprivate bsModalRef: BsModalRef;\n\n\n\tconstructor(private router: Router, private service: AccountService, private modalService: BsModalService) { }\n\n\tngOnInit(): void {\n\t\tthis.config = {\n\t\t\tservice: this.service,\n\t\t\tremove: true,\n\t\t\tedit: true,\n\t\t\tcreate: true,\n\t\t\tlabel: 'User'\n\t\t}\n\n\t\tthis.refresh = new Subject<void>();\n\t}\n\n\tonClick(event: TableEvent): void {\n\t\tif (event.type === 'edit') {\n\t\t\tthis.onEdit(event.row as User);\n\t\t}\n\t\telse if (event.type === 'remove') {\n\t\t\tthis.onRemove(event.row as User);\n\t\t}\n\t\telse if (event.type === 'create') {\n\t\t\tthis.newInstance();\n\t\t}\n\t}\n\n\n\tonRemove(user: User): void {\n\t\tthis.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = 'Are you sure you want to delete the user [' + user.username + ']?';\n\t\tthis.bsModalRef.content.data = user;\n\t\tthis.bsModalRef.content.type = 'DANGER';\n\t\tthis.bsModalRef.content.submitText = 'Delete';\n\n\t\t(<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n\t\t\tthis.remove(data);\n\t\t});\n\t}\n\n\tremove(user: User): void {\n\t\tthis.service.remove(user.oid).then(response => {\n\t\t\tthis.refresh.next();\n\t\t});\n\t}\n\n\tonEdit(user: User): void {\n\t\tthis.service.edit(user.oid).then(account => {\n\t\t\tthis.bsModalRef = this.modalService.show(AccountComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t\t'class': 'upload-modal'\n\t\t\t});\n\t\t\tthis.bsModalRef.content.init(account);\n\n\t\t\tthis.bsModalRef.content.onAccountChange.subscribe(() => {\n\t\t\t\tthis.refresh.next();\n\t\t\t});\n\t\t});\n\t}\n\n\tnewInstance(): void {\n\t\tthis.service.newInvite().then(account => {\n\t\t\tthis.bsModalRef = this.modalService.show(AccountComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t\t'class': 'upload-modal'\n\t\t\t});\n\t\t\tthis.bsModalRef.content.init(account);\n\n\t\t\tthis.bsModalRef.content.onAccountChange.subscribe(() => {\n\t\t\t\tthis.refresh.next();\n\t\t\t});\n\t\t});\n\t}\n\n\tinviteUsers(): void {\n\n\t\tthis.service.newInvite().then((account: Account) => {\n\t\t\tthis.bsModalRef = this.modalService.show(AccountInviteComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t\t'class': 'upload-modal'\n\t\t\t});\n\t\t\tthis.bsModalRef.content.init(account.groups, account.bureaus);\n\t\t});\n\t}\n}\n","<div id=\"app-container\" class=\"container\">\n\n  <div *ngIf=\"user != null\" class=\"row\">\n    <div class=\"col-lg-2\"></div>\n    <div class=\"col-lg-8\">\n      <form #form=\"ngForm\" (ngSubmit)=\"form.valid && onSubmit()\" [mustMatch]=\"['password', 'certainPassword']\">\n        <div>\n          <h3>User Information</h3>\n        </div>\n        <hr>\n        <div class=\"form-group\">\n          <label>\n            <localize key=\"account.firstname\"></localize>\n          </label>\n          <input type=\"text\" [(ngModel)]=\"user.firstName\" name=\"firstname\" required>\n        </div>\n        <div class=\"form-group\">\n          <label>\n            <localize key=\"account.lastname\"></localize>\n          </label>\n          <input type=\"text\" [(ngModel)]=\"user.lastName\" name=\"lastname\" required>\n        </div>\n        <div class=\"form-group\">\n          <label>\n            <localize key=\"account.phonenumber\"></localize>\n          </label>\n          <input type=\"text\" [(ngModel)]=\"user.phoneNumber\" name=\"phoneNumber\" phoneNumber #phoneNumber=\"ngModel\">\n          <div *ngIf=\"phoneNumber.errors?.phoneNumber\" class=\"inline-error-message\">Invalid phone number</div>\n        </div>\n        <div class=\"form-group\">\n          <label>\n            <localize key=\"account.email\"></localize>\n          </label>\n          <input type=\"email\" [(ngModel)]=\"user.email\" name=\"email\" #aemail=\"ngModel\" required email>\n          <div *ngIf=\"aemail.errors?.email && user.email && user.email.length > 0\" class=\"inline-error-message\">\n            <localize key=\"account.email.validation\"></localize>\n          </div>\n        </div>\n        <div>\n          <h3>\n            <localize key=\"account.info.heading\"></localize>\n          </h3>\n        </div>\n        <hr>\n        <div class=\"form-group\">\n          <label>\n            <localize key=\"account.username\"></localize>\n          </label>\n          <input type=\"text\" [disabled]=\"!user.newInstance && user.username === 'admin'\" [(ngModel)]=\"user.username\" name=\"username\" required>\n        </div>\n        <div class=\"form-group\">\n          <label>\n            <localize key=\"account.password\"></localize>\n          </label>\n          <input type=\"password\" [(ngModel)]=\"user.password\" name=\"password\" #password=\"ngModel\" required minlength=\"5\" maxlength=\"50\" passwordValidator>\n          <password-strength-bar [passwordToCheck]=\"user.password\"></password-strength-bar>\n          <div *ngIf=\"password.errors?.passwordStrength\" class=\"inline-error-message\">\n            The password must be at least 14 characters in length and must contain at least: Two uppercase letters [A-Z], two lowercase letters [a-z], two digits [0-9], and two special characters [e.g.: !@#$*&]\n          </div>          \n        </div>\n        <div class=\"form-group\">\n          <label>\n            <localize key=\"account.certainPassword\"></localize>\n          </label>\n          <input type=\"password\" name=\"certainPassword\" [ngModel]=\"certainPassword\" #certainPassword=\"ngModel\" required />\n          <div *ngIf=\"certainPassword.errors?.mustMatch\" class=\"inline-error-message\">\n            <localize key=\"account.certainPassword.validation\"></localize>\n          </div>\n        </div>\n\n        <hr>\n\n        <div class=\"btn-holder\" style=\"text-align: right;\">\n          <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n          <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n        </div>\n      </form>\n    </div>\n    <div class=\"col-lg-2\"></div>\n  </div>\n\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { User } from '../../model/account';\n\nimport { AccountService } from '../../service/account.service';\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\ndeclare let acp: string;\n\n@Component({\n\tselector: 'account-invite-complete',\n\ttemplateUrl: './account-invite-complete.component.html',\n\tstyles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}']\n})\nexport class AccountInviteCompleteComponent implements OnInit {\n\tuser: User;\n\tprivate sub: any;\n\ttoken: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n\tconstructor(\n\t\tprivate service: AccountService,\n\t\tprivate route: ActivatedRoute,\n\t\tprivate modalService: BsModalService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.uasdmNewInstance().then((user: User) => {\n\t\t\tthis.user = user;\n\t\t\tthis.user.phoneNumber = '';\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\tthis.sub = this.route.params.subscribe(params => {\n\t\t\tthis.token = params['token'];\n\t\t});\n\t}\n\n\tcancel(): void {\n\t\twindow.location.href = acp;\n\t}\n\n\tonSubmit(): void {\n\t\tthis.service.inviteComplete(this.user, this.token).then(response => {\n\t\t\twindow.location.href = acp;\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n\t\t\tthis.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n\t\t}\n\t}\n\n}","<div>\n    <uasdm-header></uasdm-header>\n\n<div>\n  <loading-bar></loading-bar>\n\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">    \n    <div class=\"modal-dialog\">\n      <div class=\"modal-content\">\n        <div class=\"heading\">\n          <h1><localize key=\"system.image.editHeader\"></localize></h1>\n        </div>      \n        \n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n        \n        <fieldset>\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n            </div>          \n            <div class=\"holder\">\n              <span class=\"text\">\n\n                <div>\n                  <!-- For display only when editing an icon-->\n                  <img *ngIf=\"!file\" style=\"max-width:300px;max-height:300px;\" [src]=\"context + '/logo/view?id=' + oid\" class=\"thumb\">\n                      \n                  <!-- Actual uploaded file preview -->\n                  <img *ngIf=\"file\" style=\"max-width:300px;max-height:300px;\" [src]=\"file\" class=\"thumb\">\n                </div>                        \n              \n                <div class=\"drop-box-container\" ng2FileDrop [ngClass]=\"{'drop-active': dropActive}\" (fileOver)=\"fileOver($event)\" [uploader]=\"uploader\" (click)=fileInput.click()>\n                  <div class=\"drop-box\">\n                    <div class=\"inner-drop-box\">\n                      <i class=\"fa fa-cloud-upload\">\n                        <p class=\"upload-text\"><localize key=\"system.image.uploadText\"></localize></p>\n                      </i>\n                    </div>\n                  </div>\n                  <input type=\"file\" #uploadEl ng2FileSelect #fileInput [uploader]=\"uploader\" id=\"uploader-input\" style=\"display:none\" />\n                </div>\n                \n              </span>\n            </div>\n          </div>\n          \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n            </div>                    \n            <div class=\"holder\">\n              <div class=\"button-holder\">\n                <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />              \n                <input type=\"submit\" [value]=\"'category.icon.ok' | localize\" class=\"btn btn-primary\" (disabled)=\"form.invalid\" />                \n              </div>\n            </div>\n          </div>\n        </fieldset>  \n      </div>\n    </div>\n  </form>\n</div>\n\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\n\nimport { FileUploader, FileUploaderOptions } from 'ng2-file-upload';\n\nimport { EventService } from '@shared/service/event.service';\n\ndeclare var acp: any;\n\n@Component( {\n\n    selector: 'system-logo',\n    templateUrl: './system-logo.component.html',\n    styles: []\n} )\nexport class SystemLogoComponent implements OnInit {\n    oid: string;\n    message: string = null;\n\n    public uploader: FileUploader;\n    public dropActive: boolean = false;\n\n    @ViewChild( 'uploadEl' )\n    private uploadElRef: ElementRef;\n\n    file: any;\n    context: string;\n\n    constructor(\n        private route: ActivatedRoute,\n        private location: Location,\n        private eventService: EventService ) {\n        this.context = acp as string;\n    }\n\n    ngOnInit(): void {\n        this.oid = this.route.snapshot.params['oid'];\n\n        let options: FileUploaderOptions = {\n            autoUpload: false,\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: acp + '/logo/apply'\n        };\n\n        this.uploader = new FileUploader( options );\n        this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n            this.location.back();\n        };\n        this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n            this.error( response );\n        };\n        this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n            form.append( 'oid', this.oid );\n        };\n    }\n\n    ngAfterViewInit() {\n        let that = this;\n\n        this.uploader.onAfterAddingFile = ( item => {\n            this.uploadElRef.nativeElement.value = ''\n\n            let reader = new FileReader();\n            reader.onload = function( e: any ) {\n                that.file = reader.result;\n            };\n            reader.readAsDataURL( item._file );\n        } );\n    }\n\n    fileOver( e: any ): void {\n        this.dropActive = e;\n    }\n\n    cancel(): void {\n        this.location.back();\n    }\n\n    onSubmit(): void {\n        if ( this.file == null ) {\n            this.location.back();\n        }\n        else {\n            this.uploader.uploadAll();\n        }\n    }\n\n    clear(): void {\n        this.file = null;\n\n        this.uploader.clearQueue()\n    }\n\n    error( err: string ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = err;\n        }\n    }\n}\n","<div>\n  <!--     <uasdm-header></uasdm-header> -->\n\n  <!-- <div id=\"app-container\" class=\"container\" > -->\n\n  <loading-bar></loading-bar>\n\n  <div>\n    <span>\n      <h3>\n        Manage System Images\n<!--         <localize key=\"system.image.title\"></localize> -->\n      </h3>\n    </span>\n  </div>\n\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div class=\"list-table-wrapper\">\n    <table id=\"manage-icons-table\" class=\"list-table table table-bordered table-striped\">\n      <thead>\n        <tr>\n          <th></th>\n          <th class=\"label-column\"><localize key='system.image.label'></localize></th>\n          <th class=\"label-column\"><localize key='system.image.preview'></localize></th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let icon of icons\" class=\"fade-ngRepeat-item\">\n          <td class=\"button-column\"><span> <a class=\"fa fa-pencil-alt ico-edit\" (click)=\"edit(icon)\" [title]=\"'system.image.editTooltip' | localize\"></a> <a *ngIf=\"icon.custom\" class=\"fa fa-trash-alt ico-remove\"\n              [title]=\"'system.image.removeTooltip' | localize\" (click)=\"onClickRemove(icon)\"\n            ></a>\n          </span></td>\n          <td class=\"label-column\">{{ icon.label }}</td>\n          <td class=\"icon-thumbnail-column\"><img style=\"width: 42px; height: 42px;\" class=\"thumb\" [src]=\"context + '/logo/view?id=' + icon.oid\" alt=\"Icon\"></td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <div *ngIf=\"icons === null\">\n    <localize key='dataset.loadingData'></localize>\n  </div>\n  <!-- </div> -->\n\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Title } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\nimport { LocalizationService } from '@shared/service/localization.service';\n\nimport { SystemLogo } from '../../model/system-logo';\nimport { SystemLogoService } from '../../service/system-logo.service';\n\ndeclare let acp: string;\n\n@Component( {\n\n    selector: 'system-logos',\n    templateUrl: './system-logos.component.html',\n    styleUrls: []\n} )\nexport class SystemLogosComponent implements OnInit {\n    public icons: SystemLogo[];\n    context: string;\n    bsModalRef: BsModalRef;\n    message: string = null;\n\n    constructor(\n        private router: Router,\n        private service: SystemLogoService,\n        private modalService: BsModalService,\n        private localizeService: LocalizationService ) {\n\n        this.context = acp as string;\n    }\n\n    ngOnInit(): void {\n        this.getIcons();\n    }\n\n    onClickRemove( icon ): void {\n        this.bsModalRef = this.modalService.show( BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"system.image.removeContent\" );\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = 'Delete';\n\n        this.bsModalRef.content.onConfirm.subscribe( data => {\n            this.remove( icon );\n        } );\n    }\n\n    getIcons(): void {\n        this.service.getIcons().then( icons => {\n\n\t\t\tvar filtered = icons.filter(function(el) { return el.oid != \"banner\"; }); \n      \t\tthis.icons = filtered;\n        } );\n    }\n\n    edit( icon: SystemLogo ): void {\n        this.router.navigate( ['/admin/logo', icon.oid] );\n    }\n\n    remove( icon: SystemLogo ): void {\n        this.service.remove( icon.oid ).then( response => {\n            icon.custom = false;\n        } );\n    }\n}\n","<div>\n<!--   <uasdm-header></uasdm-header> -->\n\n  <div class=\"col-lg-2\"></div>\n  <div class=\"col-lg-8\">\n    <div class=\"heading\">\n      <h3>Email server configuration</h3>\n    </div>\n\n    <form #form=\"ngForm\" (ngSubmit)=\"form.valid && onSubmit()\">\n      <div class=\"form-group\">\n        <label>\n          <localize key=\"email.server\"></localize>\n        </label>\n        <input type=\"text\" [(ngModel)]=\"email.server\" name=\"server\" required #server=\"ngModel\">\n        <div *ngIf=\"server.errors?.url\" class=\"inline-error-message\">\n          <localize key=\"email.server.validation\"></localize>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label>\n          <localize key=\"email.username\"></localize>\n        </label>\n        <input type=\"text\" [(ngModel)]=\"email.username\" name=\"username\" required>\n      </div>\n      <div class=\"form-group\">\n        <label>\n          <localize key=\"email.password\"></localize>\n        </label>\n        <input type=\"password\" [(ngModel)]=\"email.password\" name=\"password\" required>\n      </div>\n      <div class=\"form-group\">\n        <label>\n          <localize key=\"email.port\"></localize>\n        </label>\n        <input type=\"number\" [(ngModel)]=\"email.port\" name=\"port\" required #port=\"ngModel\" number>\n        <div *ngIf=\"port.errors?.number\" class=\"inline-error-message\">\n          <localize key=\"email.port.validation\"></localize>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label>\n          <localize key=\"email.from\"></localize>\n        </label>\n        <input type=\"email\" [(ngModel)]=\"email.from\" name=\"from\" required #from=\"ngModel\" email>\n        <div *ngIf=\"from.errors?.email\" class=\"inline-error-message\">\n          <localize key=\"email.from.validation\"></localize>\n        </div>\n      </div>\n\n      <hr>\n\n      <div class=\"btn-holder\" style=\"text-align: right;\">\n        <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n      </div>\n    </form>\n  </div>\n  <div class=\"col-lg-2\"></div>\n\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Email } from '../../model/email';\nimport { EmailService } from '../../service/email.service';\n\n\n@Component({\n\n\tselector: 'email',\n\ttemplateUrl: './email.component.html',\n\tstyleUrls: []\n})\nexport class EmailComponent implements OnInit {\n\tpublic email: Email = {\n\t\toid: '',\n\t\tserver: '',\n\t\tusername: '',\n\t\tpassword: '',\n\t\tport: 0,\n\t\tfrom: '',\n\t\tto: '',\n\t};\n    \n    public onSuccess: Subject<any>;\n\n\tconstructor(private service: EmailService) { }\n\n\tngOnInit(): void {\n        this.onSuccess = new Subject();\n        \n\t\tthis.service.getInstance().then(email => {\n\t\t\tthis.email = email;\n\t\t});\n\t}\n\n\tonSubmit(): void {\n        let that = this;\n        \n\t\tthis.service.apply(this.email).then(email => {\n\t\t\tthis.email = email;\n            \n            that.onSuccess.next();\n\t\t});\n\t}\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { EmailComponent } from '@admin/component/email/email.component';\n\nimport { AuthService } from '@shared/service/auth.service';\n\ndeclare let acp: string;\n\n@Component({\n    selector: 'system-info',\n    templateUrl: './system-info.component.html',\n    styles: ['./system-info.css']\n})\nexport class SystemInfoComponent implements OnInit {\n    \n    userName: string = \"\";\n    admin: boolean = false;\n\n    private bsModalRef: BsModalRef;\n    \n    constructor(private modalService: BsModalService, private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.userName = this.authService.getUserName();\n        this.admin = this.authService.isAdmin();\n    }\n\n}\n","<div>\n    <uasdm-header></uasdm-header>\n\n    <div id=\"app-container\" class=\"container\">\n\n        <h2>\n            System Information\n        </h2>\n\n        <h3>Software Versions</h3>\n        <ul>\n            <li>IDM Platform Version: <span id=\"automated-version-replace\">0.15.2</span></li>\n            <li>Open Drone Map (ODM): 2.4.7</li>\n        </ul>\n        \n        <h3>\n            Documentation\n        </h3>\n        \n        <ul>\n            <li><a href=\"https://terraframe.atlassian.net/l/c/iHQKhY3Q\" target=\"_blank\">IDM Documentation</a></li>\n            <li><a href=\"https://geoplatform.atlassian.net/wiki/spaces/BETC\" target=\"_blank\">GeoPlatform Documentation</a> (Access issued through the DOI)</li>\n        </ul>\n        \n        <h3>\n            Public Map Services\n        </h3>\n        IDM hosts both image mosaic and hillshade public OGC compliant map services that are powered by <a href=\"http://geoserver.org/\">GeoServer</a>. \n        \n        <div class=\"panel panel-default\" style=\"background:#f0f0f0;margin-top:5px;\">\n          <div class=\"panel-body\">\n            The public IDM WMS and WMTS map services are accessed by using the appropriate root URL format for the specific service type. \n            <br><br>\n            Root WMS URL:  https://aim.geoplatform.gov/wms?...\n            <br>\n            Root WMTS URL:  https://aim.geoplatform.gov/gwc/service/wms?...\n            <br><br>\n            More detailed information on how to use these services can be found on the GeoServer documentation.\n            <ul>\n                <li><a href=\"https://docs.geoserver.org/latest/en/user/services/wms/reference.html\" target=\"_blank\">GeoServer WMS Documentation</a></li>\n                <li><a href=\"https://docs.geoserver.org/latest/en/user/geowebcache/webadmin/defaults.html\" target=\"_blank\">GeoServer WMTS Documentation (cached & tiled service)</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        <h4>Map Service Previews</h4>\n        <ul>\n            <li><a href=\"https://aim.geoplatform.gov/geoserver/image-public/wms?service=WMS&version=1.1.0&request=GetMap&layers=image-public%3Aimage-public&bbox=-107.47156109532345%2C24.704968062854245%2C-81.3753633911118%2C41.30545938423954&width=768&height=488&srs=EPSG%3A4326&format=application/openlayers\" target=\"_blank\">Image Mosaic WMS Preview</a></li>\n            <li><a href=\"https://aim.geoplatform.gov/geoserver/public-hillshade/wms?service=WMS&version=1.1.0&request=GetMap&layers=public-hillshade%3Apublic-hillshade&bbox=-111.12440739708047%2C38.11520869406993%2C-84.88643383212677%2C39.321076899236274&width=768&height=330&srs=EPSG%3A4326&format=application/openlayers\" target=\"_blank\">Hillshade Mosaic WMS Preview</a></li>\n        </ul>\n        \n    </div>\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { EmailComponent } from '@admin/component/email/email.component';\n\nimport { AuthService } from '@shared/service/auth.service';\n\ndeclare let acp: string;\n\n@Component({\n    selector: 'system-configuration',\n    templateUrl: './system-configuration.component.html',\n    styleUrls: []\n})\nexport class SystemConfigurationComponent implements OnInit {\n    \n    userName: string = \"\";\n    admin: boolean = false;\n\n    private bsModalRef: BsModalRef;\n    \n    constructor(private modalService: BsModalService, private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.userName = this.authService.getUserName();\n        this.admin = this.authService.isAdmin();\n    }\n\n    open(): void {\n        this.bsModalRef = this.modalService.show(EmailComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n\n        (<EmailComponent>this.bsModalRef.content).onSuccess.subscribe(data => {\n            this.bsModalRef.hide();\n        });\n    }\n\n}\n","<div>\n  <uasdm-header></uasdm-header>\n\n  <div id=\"app-container\" class=\"container\">\n\n    <h2>System Configuration</h2>\n    \n    <accounts></accounts>\n\n    <system-logos></system-logos>\n\n    <h3>System Email</h3>\n    <button (click)=\"open()\" class=\"btn btn-primary\" style=\"margin:0;\">Configure Email</button>\n    <br><br>\n    \n    <h3>Session Event Log</h3>\n    <session-events></session-events>\n\n  </div>\n</div>","import { NgModule } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AdminGuardService } from '../shared/service/guard.service';\n\nimport { SessionEventComponent } from './component/session-event/session-event.component';\nimport { AccountsComponent } from './component/account/accounts.component';\nimport { AccountInviteComponent } from './component/account/account-invite.component';\nimport { AccountInviteCompleteComponent } from './component/account/account-invite-complete.component';\nimport { AccountComponent } from './component/account/account.component';\nimport { SystemLogoComponent } from './component/logo/system-logo.component';\nimport { SystemLogosComponent } from './component/logo/system-logos.component';\nimport { EmailComponent } from './component/email/email.component';\nimport { SystemInfoComponent } from './component/system/system-info.component';\nimport { SystemConfigurationComponent } from './component/system/system-configuration.component';\n\nconst routes: Routes = [\n    {\n        path: 'logos',\n        canActivate: [AdminGuardService],\n        component: SystemLogosComponent,\n        data: { title: 'System_Configuration' }\n    },\n    {\n        path: 'logo/:oid',\n        canActivate: [AdminGuardService],\n        component: SystemLogoComponent,\n        data: { title: 'System_Configuration' }\n\n    },\n    {\n        path: 'email',\n        canActivate: [AdminGuardService],\n        component: EmailComponent,\n        data: { title: 'System_Configuration' }\n\n    },\n    {\n        path: 'accounts',\n        canActivate: [AdminGuardService],\n        component: AccountsComponent,\n        data: { title: 'useraccounts.title' }\n    },\n    {\n        path: 'account/:oid',\n        component: AccountComponent,\n        canActivate: [AdminGuardService],\n        data: { title: 'account.title' }\n    },\n    {\n        path: 'invite',\n        component: AccountInviteComponent,\n        data: { title: 'account.title' }\n    },\n    {\n        path: 'invite-complete/:token',\n        component: AccountInviteCompleteComponent,\n        data: { title: 'account.title' }\n    },\n    {\n        path: 'session-events',\n        canActivate: [AdminGuardService],\n        component: SessionEventComponent,\n        data: {}\n    },\n    {\n        path: 'system-info',\n        component: SystemInfoComponent,\n        data: {}\n    },\n    {\n        path: 'system-configuration',\n        component: SystemConfigurationComponent,\n        data: {}\n    }\n];\n\n@NgModule( {\n    imports: [RouterModule.forChild( routes )],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy }\n    ]\n} )\nexport class AdminRoutingModule { }\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { AccordionModule } from 'ngx-bootstrap/accordion';\nimport { AlertModule } from 'ngx-bootstrap/alert';\n\nimport { FileUploadModule } from 'ng2-file-upload';\nimport { NgxPaginationModule } from 'ngx-pagination';\n\nimport { SystemLogoService } from './service/system-logo.service';\nimport { EmailService } from './service/email.service';\nimport { AccountService } from './service/account.service';\nimport { SessionEventService } from './service/session-event.service';\n\nimport { SessionEventComponent } from './component/session-event/session-event.component';\nimport { AccountsComponent } from './component/account/accounts.component';\nimport { AccountInviteComponent } from './component/account/account-invite.component';\nimport { AccountInviteCompleteComponent } from './component/account/account-invite-complete.component';\nimport { AccountComponent } from './component/account/account.component';\nimport { SystemLogoComponent } from './component/logo/system-logo.component';\nimport { SystemLogosComponent } from './component/logo/system-logos.component';\nimport { EmailComponent } from './component/email/email.component';\nimport { SystemInfoComponent } from './component/system/system-info.component';\nimport { SystemConfigurationComponent } from './component/system/system-configuration.component';\n\nimport { AdminRoutingModule } from './admin-routing.module';\n\nimport { SharedModule } from '../shared/shared.module';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tRouterModule,\n\t\tFormsModule,\n\t\tFileUploadModule,\n\t\tNgxPaginationModule,\n\t\tAlertModule,\n\t\tBsDropdownModule,\n\t\tTypeaheadModule,\n\t\tAccordionModule,\n\t\tSharedModule,\n\t\tAdminRoutingModule\n\t],\n\tdeclarations: [\n\t\tSystemLogoComponent,\n\t\tSystemLogosComponent,\n\t\tAccountsComponent,\n\t\tAccountInviteComponent,\n\t\tAccountInviteCompleteComponent,\n\t\tAccountComponent,\n\t\tSystemLogoComponent,\n\t\tSystemLogosComponent,\n\t\tEmailComponent,\n\t\tSystemInfoComponent,\n\t\tSessionEventComponent,\n        SystemConfigurationComponent\n\t],\n\tproviders: [\n\t\tSystemLogoService,\n\t\tEmailService,\n\t\tAccountService,\n\t\tSessionEventService\n\t],\n\tentryComponents: [\n\t]\n})\nexport class AdminModule { }\n"],"sourceRoot":""}