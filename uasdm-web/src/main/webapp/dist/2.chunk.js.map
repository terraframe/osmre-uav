{"version":3,"sources":["webpack:///./src/app/site/service/map.service.ts","webpack:///./src/app/site/component/map-attribute/map-attribute.component.html","webpack:///./src/app/site/component/map-attribute/map-attribute.component.ts","webpack:///./src/app/site/service/management.service.ts","webpack:///./src/app/site/component/modal/image-preview-modal.component.html","webpack:///./src/app/site/component/modal/image-preview-modal.component.ts","webpack:///./src/app/site/model/management.ts","webpack:///./src/app/site/model/sensor.ts","webpack:///./src/app/site/directive/number-only.directive.ts","webpack:///./src/app/site/component/modal/metadata-modal.component.html","webpack:///./src/app/site/component/modal/metadata-modal.component.ts","webpack:///./src/app/site/model/metadata.ts","webpack:///./src/app/site/service/metadata.service.ts","webpack:///./src/app/site/component/modal/leaf-modal.component.html","webpack:///./src/app/site/component/modal/leaf-modal.component.ts","webpack:///./src/app/site/service/product.service.ts","webpack:///./src/app/site/component/modal/product-modal.component.html","webpack:///./src/app/site/component/modal/product-modal.component.ts","webpack:///./src/app/site/component/product-panel/product-panel.component.html","webpack:///./src/app/site/component/product-panel/product-panel.component.ts","webpack:///./src/app/site/component/modal/entity-modal.component.html","webpack:///./src/app/site/component/modal/entity-modal.component.ts","webpack:///./src/app/site/component/modal/upload-modal.component.html","webpack:///./src/app/site/component/modal/upload-modal.component.ts","webpack:///./src/app/site/component/modal/accessible-support-modal.component.html","webpack:///./src/app/site/component/modal/accessible-support-modal.component.ts","webpack:///./src/app/site/component/projects.component.html","webpack:///./src/app/site/component/projects.component.ts","webpack:///./src/app/site/component/upload.component.html","webpack:///./src/app/site/component/upload.component.ts","webpack:///./src/app/site/component/tasks/tasks-panel.component.html","webpack:///./src/app/site/component/tasks/tasks-panel.component.ts","webpack:///./src/app/site/component/tasks.component.html","webpack:///./src/app/site/component/tasks.component.ts","webpack:///./src/app/site/service/sensor.service.ts","webpack:///./src/app/site/service/classification.service.ts","webpack:///./src/app/site/component/sensor/sensors.component.html","webpack:///./src/app/site/component/sensor/sensors.component.ts","webpack:///./src/app/site/component/sensor/sensor.component.html","webpack:///./src/app/site/component/sensor/sensor.component.ts","webpack:///./src/app/site/service/platform.service.ts","webpack:///./src/app/site/component/platform/platforms.component.html","webpack:///./src/app/site/component/platform/platforms.component.ts","webpack:///./src/app/site/component/platform/platform.component.html","webpack:///./src/app/site/component/platform/platform.component.ts","webpack:///./src/app/site/component/classification/classifications.component.html","webpack:///./src/app/site/component/classification/classifications.component.ts","webpack:///./src/app/site/component/classification/classification.component.html","webpack:///./src/app/site/component/classification/classification.component.ts","webpack:///./src/app/site/component/equipment/equipment.component.ts","webpack:///./src/app/site/component/equipment/equipment.component.html","webpack:///./src/app/site/directive/forbidden-name.directive.ts","webpack:///./src/app/site/service/can.deactivate.guard.service.ts","webpack:///./src/app/site/service/uav.service.ts","webpack:///./src/app/site/component/uav/uavs.component.html","webpack:///./src/app/site/component/uav/uavs.component.ts","webpack:///./src/app/site/component/uav/uavs-page.component.ts","webpack:///./src/app/site/component/uav/uavs-page.component.html","webpack:///./src/app/site/component/uav/uav.component.html","webpack:///./src/app/site/component/uav/uav.component.ts","webpack:///./src/app/site/service/report.service.ts","webpack:///./src/app/site/component/report/reports.component.html","webpack:///./src/app/site/component/report/reports.component.ts","webpack:///./src/app/site/site-routing.module.ts","webpack:///./src/app/site/component/metadata-page/metadata-page.component.html","webpack:///./src/app/site/component/metadata-page/metadata-page.component.ts","webpack:///./src/app/site/site.module.ts"],"names":["mapboxKey","http","params","this","get","acp","toPromise","searchText","url","mapService","baseLayers","label","id","selected","center","zoom","coordinate","longitude","latitude","search","dataSource","Observable","create","observer","mbForwardGeocode","then","response","match","features","results","forEach","obj","newObj","hierarchy","place_name","source","push","next","refreshCoordinateFromMap","config","container","style","site","geometry","coordinates","map","on","initMap","remove","modes","static","draw","displayControlsDefault","controls","addControl","$event","onDrawUpdate","onDrawCreate","addLayers","feature","type","properties","oid","name","add","changeMode","featureIds","addSource","data","event","action","length","updateGeometry","console","log","ids","set","layer","baseLayer","setStyle","result","item","flyTo","handleClick","preventDefault","refreshCoordinateFromInput","noErrorHttpClient","eventService","authService","key","pageNumber","pageSize","toString","bounds","JSON","stringify","headers","start","post","pipe","finalize","complete","exclude","entity","parentId","getUserName","componentId","uploadId","folder","file","formData","FormData","append","statuses","token","collectionId","useSpinner","responseType","terms","debounceTime","distinctUntilChanged","switchMap","term","searchEntries","metaObj","json","uavId","sensorId","condition","value","isAdmin","service","bsModalRef","message","open","loading","component","getImage","image","reader","FileReader","addEventListener","imageToShow","readAsDataURL","download","subscribe","blob","createImageFromBlob","error","err","getMessageFromError","SiteObjectsResultSet","WAVELENGTHS","OnlyNumber","el","e","indexOf","keyCode","ctrlKey","shiftKey","disabled","metaObject","pointOfContact","email","platform","otherName","class","serialNumber","faaIdNumber","sensor","model","wavelength","sensorWidth","sensorWidthUnits","sensorHeight","sensorHeightUnits","pixelSizeWidth","pixelSizeHeight","upload","dataType","wavelengths","onMetadataChange","Subject","getMetadataOptions","options","catch","submitCollectionMetadata","hide","checked","splice","handleSubmit","Metadata","root","leaf","drillable","expandable","uploadable","processable","childLabel","cache","fieldName","metadataService","modalService","previous","folders","thumbnails","processRunning","enableSelectableImages","showOrthoRerunMessage","constPageSize","page","video","src","context","ins","init","onNodeChange","count","onSelect","isProcessable","imageData","rootPath","substr","lastIndexOf","fileName","exec","lastPeriod","thumbKey","getData","pn","ps","getObjects","resultSet","i","isImage","getThumbnail","toLowerCase","setExclude","pushToEros","setTimeout","statusMessage","stopPropagation","confirmModalRef","show","animated","backdrop","ignoreBackdropClick","content","submitText","onConfirm","runOrtho","window","location","href","modalRef","metadataUploaded","str","replace","c","toUpperCase","pService","items","showSite","product","imageKey","pDocument","entities","getDetail","detail","target","breadcrumbs","getItems","nodes","initData","rawImagePreviewModal","mService","toggleMapOrtho","toggleMapDem","products","changes","refreshProducts","currentValue","getProducts","len","layers","classification","hasOrthoLayer","emit","hasDemLayer","hasPointcloud","filter","n","togglePublish","p","mapIt","orthoMapped","demMapped","published","userName","admin","newInstance","attributes","applyWithParent","update","node","attribute","readonly","evaluate","differs","objectKeys","Object","keys","importedValues","values","uploader","taskStatusMessages","currentTask","finishedTask","existingTask","pollingIsSet","uploadVisible","selectedContinue","uploadCounter","showFileSelectPanel","taskFinishedNotifications","processUpload","selections","labels","pages","index","selection","hierarchyChange","sensors","platforms","modalStepConfig","differ","find","elem","that","uiOptions","debug","autoUpload","multiple","element","nativeElement","template","request","endpoint","forceMultipart","resume","enabled","recordsExpireIn","chunking","retry","enableAuto","text","defaultResponseError","failedUploadTextDisplay","mode","validation","allowedExtensions","showMessage","callbacks","onUpload","countUpload","onProgress","uploadedBytes","totalBytes","onUploadChunk","chunkData","onUploadChunkSuccess","responseJSON","xhr","taskPolling","interval","task","onComplete","xhrOrXdr","isNew","unsubscribe","clearStoredFiles","clearInterval","uplodeCounterInterfal","success","onUploadComplete","onCancel","removeTask","onError","errorReason","diff","setExistingTask","onHierarchyChange","getHierarchy","findIndex","getChildren","children","child","getResumableFilesData","hasField","uav","collectionDate","uploads","getUploads","collection","nextPage","updateCurrentPageLabel","prevPage","steps","step","uploadStoredFiles","uploadTarget","getUploadTarget","setParams","hasExtraField","uuid","localStorage","clear","thisRef","ct","setInterval","hours","Math","floor","minutes","seconds","hoursStr","minutesStr","secondsStr","returnValue","close","files","droppedFile","fileEntry","isFile","refresh","relativePath","removeObject","route","supportingData","worker","active","loadingSites","baselayerIconHover","tasks","subject","handleExtentChange","searchEntites","isWorker","getCurrentUser","baseUrl","hostname","port","notifier","webSocket","snapshot","handleViewSite","attributionControl","refreshMapPoints","compact","coord","lngLat","wrap","lat","lng","document","getElementById","textContent","queryRenderedFeatures","point","current","focusFeatureId","setFilter","highlightListItem","clearHighlightListItem","addLayer","isMapped","addImageLayer","getBounds","isValidBounds","roots","ne","getNorthEast","sw","getSouthWest","abs","getSource","setData","allPointsBounds","bbox","fitBounds","padding","idx","setNodes","parent","newChild","getCenter","getZoom","edit","refreshEntity","getMetadata","sText","subText","numberOfChildren","highlightMapFeature","clearHighlightMapFeature","hoverFeatureId","view","select","getLayerByClassification","getLayer","removeLayer","removeSource","boundingBox","workspace","encodeURI","layerName","easeTo","getTypeContainsFolders","showLeafModal","addBreadcrumb","expand","staticTabs","tabs","sites","projects","missions","collections","hideUploadPanel","siteId","project","mission","projectId","missionId","uasComponentOid","trim","showUploadPanel","managementService","showUploads","showProcess","showStore","showODMOutput","showError","taskGroups","taskGroupType","actions","deleteTask","pos","totalTaskCount","activeTab","taskPage","errorStatuses","completeStatuses","messages","setTaskData","getMissingMetadata","updateTaskData","tab","parentNode","classList","contains","lis","getElementsByTagName","li","cls","visible","groups","status","taskGroupTypeIndex","setTaskGroupStatuses","latestDate","group","isLatestTask","sortedTasks","sort","a","b","Date","lastUpdateDate","getTime","firstDate","getTasks","setGroupTasks","taskGroup","onMessagePageChange","onTabClick","criteria","Endpoint","router","cols","header","field","sortable","order","onView","row","onRemove","navigate","classificationService","types","original","parse","getAll","WAVE_LENGTH","SENSOR_TYPE","apply","w","sensorService","manufacturers","PLATFORM_MANUFACTURER","PLATFORM_TYPE","s","_metadata","title","metadata","EquipmentComponent","isSensorTypeCollapsed","isSensorWavelengthCollapsed","isPlatformTypeCollapsed","isPlatformManufacturerCollapsed","ForbiddenNameDirective","control","nameRe","RegExp","test","provide","useExisting","multi","CanDeactivateGuardService","canDeactivate","confirm","UAVsPageComponent","platformService","bureaus","resp","urlField","columnType","col","onExportCSV","routes","path","canActivate","columns","SiteRoutingModule","useClass","forChild","uavService","pageChange","metadataOption","getUavInformation","onSensorChange","getUAVMetadata","handlePageChange","reset","handleUavClick","SiteModule","forRoot"],"mappings":"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","file":"2.chunk.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { map } from 'rxjs/operators';\r\n// import 'rxjs/add/operator/toPromise';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { GeoJSONSource } from 'mapbox-gl';\r\n\r\nimport * as mapboxgl from 'mapbox-gl';\r\n\r\n\r\nconst mapboxKey = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNTFnaTYyZ2RuNDlxcmNnejNtNjN6In0.-kmlS8Tgb2fNc1NPb5rJEQ';\r\n\r\n\r\ndeclare var acp: any;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n    constructor( private http: HttpClient ) {\r\n        ( mapboxgl as any ).accessToken = mapboxKey;\r\n    }\r\n\r\n    features(): Promise<{ features: GeoJSONSource, bbox: number[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ features: GeoJSONSource, bbox: number[] }>( acp + '/project/features', { params: params } )\r\n            .toPromise()\r\n    }\r\n\r\n    mbForwardGeocode(searchText: string): Promise<any> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        let url = \"https://api.mapbox.com/geocoding/v5/mapbox.places/\"+ searchText +\".json?proximity=-74.70850,40.78375&access_token=\"+ mapboxKey;\r\n\r\n        return this.http\r\n            .get( url, { params: params } )\r\n            .toPromise()\r\n    }\r\n\r\n}","<div class=\"row-holder\">\n    <div class=\"label-holder\"></div>\n    <div class=\"holder\">\n    <div class=\"modal-body\">\n      <div id=\"search-container\" style=\"position: absolute;z-index: 999;padding: 15px;width: 35%;\">\n        <input class=\"form-control search-input\" type=\"text\" placeholder=\"Search...\" [(ngModel)]=\"search\"\n                          [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"handleClick($event)\"\n                          [typeaheadOptionsLimit]=\"10\" [typeaheadItemTemplate]=\"bsItemTemplate\" typeaheadOptionField=\"label\"\n                          [ngModelOptions]=\"{standalone: true}\" (keydown.enter)=\"$event.preventDefault()\" />\n      </div>\n\t\t  <div id=\"map-attribute-div\" class=\"map-view-port\" style=\"height:300px;\"></div>\n    </div>\n  </div>\n</div>\n<div class=\"row-holder\">\n    <div class=\"label-holder\"><label>Longitude</label></div>\n    <div class=\"holder\">\n    <div class=\"modal-body text-left\">\n      <input name=\"longitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"coordinate.longitude\" (change)=\"refreshCoordinateFromInput()\" required />\n    </div>\n  </div>\n</div>\n<div class=\"row-holder\">\n    <div class=\"label-holder\"><label>Latitude</label></div>\n    <div class=\"holder\">\n    <div class=\"modal-body text-left\">\n      <input name=\"latitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"coordinate.latitude\" (change)=\"refreshCoordinateFromInput()\" required />\n    </div>\n  </div>\n</div>\n\n<ng-template #bsItemTemplate let-match=\"match\" let-query=\"query\">\n  <span *ngIf=\"match.item.filename == null\">\n    <i class=\"fa fa-folder-open\"></i>\n  </span>\n  <span *ngIf=\"match.item.filename != null\">\n    <i class=\"fa fa-file\"></i>\n  </span>\n  <span>\n    <span *ngFor=\"let site of match.item.hierarchy; index as i\">\n        {{site.label}} /\n        <!-- <span *ngIf=\"i < (match.item.hierarchy.length -1)\">/</span> -->\n    </span>\n  </span>\n  <b>{{ match.item.label}}</b>\n</ng-template>","import { Component, OnInit, OnDestroy, AfterViewInit, Input } from '@angular/core';\nimport { Map, LngLat, NavigationControl, ImageSource, MapboxOptions } from 'mapbox-gl';\nimport * as MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport * as StaticMode from '@mapbox/mapbox-gl-draw-static-mode';\nimport { Observable } from 'rxjs';\n\n\nimport { SiteEntity } from '@site/model/management';\nimport { MapService } from '@site/service/map.service';\n\n\n@Component( {\n    selector: 'map-attribute',\n    templateUrl: './map-attribute.component.html',\n    styles: [],\n} )\nexport class MapAttributeComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    /* \n     * mapbox-gl map\n     */\n    map: Map;\n\n    /* \n     * Draw control\n     */\n    draw: MapboxDraw;\n\n    /* \n     * List of base layers\n     */\n    baseLayers: any[] = [{\n        label: 'Outdoors',\n        id: 'outdoors-v11',\n        selected: true\n    }, {\n        label: 'Satellite',\n        id: 'satellite-v9'\n    }, {\n        label: 'Streets',\n        id: 'streets-v11'\n    }];\n\n    @Input() site: SiteEntity;\n\n    @Input() center: LngLat = new LngLat( -78.880453, 42.897852 );\n    @Input() zoom: number = 2;\n\n    coordinate: {\n        longitude: number,\n        latitude: number\n    } = { longitude: null, latitude: null };\n\n    /* \n     * Datasource to get search responses\n     */\n    dataSource: Observable<any>;\n\n    /* \n     * Model for text being searched\n     */\n    search: string = \"\";\n\n    constructor( private mapService: MapService ) { \n        this.dataSource = Observable.create(( observer: any ) => {\n\n            this.mapService.mbForwardGeocode( this.search ).then( response => {\n                const match = response.features;\n                let results = [];\n\n                // Add Mapbox results to any local results\n                match.forEach( obj => {\n                    let newObj = {\n                        id: obj.id,\n                        hierarchy: [],\n                        label: obj.place_name,\n                        center: obj.center,\n                        source: \"MAPBOX\"\n                    }\n\n                    results.push( newObj );\n                } );\n\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.refreshCoordinateFromMap();\n    }\n\n    ngAfterViewInit() {\n\n        // setTimeout(() => {\n        //     if ( this.tree ) {\n        //         this.tree.treeModel.expandAll();\n        //     }\n        // }, 1000 );\n\n        let config: MapboxOptions = {\n            container: 'map-attribute-div',\n            style: 'mapbox://styles/mapbox/outdoors-v11',\n            zoom: this.zoom,\n            center: this.center\n        };\n\n        if ( this.site.geometry != null ) {\n            //                    config.zoom = 10;\n            config.center = this.site.geometry.coordinates;\n        }\n\n\n        this.map = new Map( config );\n\n        this.map.on( 'load', () => {\n            this.initMap();\n        } );\n    }\n\n    ngOnDestroy(): void {\n        this.map.remove();\n    }\n\n    initMap(): void {\n\n        let modes = MapboxDraw.modes;\n        modes.static = StaticMode;\n\n        this.draw = new MapboxDraw( {\n            modes: modes,\n            displayControlsDefault: false,\n            controls: {\n                static: true\n            }\n        } );\n\n        this.map.addControl( this.draw );\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl( new NavigationControl() );\n\n        this.map.on( \"draw.update\", ( $event ) => { this.onDrawUpdate( $event ) } );\n        this.map.on( \"draw.create\", ( $event ) => { this.onDrawCreate( $event ) } );\n        this.map.on( \"draw.modechange\", ( $event ) => { this.onDrawUpdate( $event ) } );\n\n        this.map.on( 'style.load', () => {\n            this.addLayers();\n            //            this.refresh( false );\n        } );\n\n        this.addLayers();\n    }\n\n\n    addLayers(): void {\n\n        if ( this.site.geometry != null ) {\n            let feature = {\n                id: this.site.id,\n                type: 'Feature',\n                properties: {\n                    oid: this.site.id,\n                    name: this.site.name\n                },\n                geometry: this.site.geometry\n            };\n\n            this.draw.add( feature );\n            this.draw.changeMode( 'simple_select', { featureIds: [feature.id] } );\n        }\n        else {\n            this.draw.changeMode( 'draw_point', {} );\n        }\n\n        this.map.addSource( 'sites', {\n            type: 'geojson',\n            data: {\n                \"type\": \"FeatureCollection\",\n                \"features\": []\n            }\n        } );\n    }\n\n    onDrawUpdate( event: any ): void {\n        if ( event.action === 'move' && event.features != null && event.features.length > 0 ) {\n            this.updateGeometry( event.features[0] )\n        }\n    }\n\n    onDrawCreate( event: any ): void {\n        if ( event.features != null && event.features.length > 0 ) {\n\n            let feature = event.features[0];\n            feature.id = this.site.id;\n\n            this.updateGeometry( feature )\n        }\n    }\n\n    updateGeometry( feature: any ): void {\n        this.site.geometry = feature.geometry;\n\n        this.refreshCoordinateFromMap();\n    }\n\n    refreshCoordinateFromMap(): void {\n        if ( this.site != null && this.site.geometry != null ) {\n            this.coordinate.longitude = this.site.geometry.coordinates[0];\n            this.coordinate.latitude = this.site.geometry.coordinates[1];\n        }\n    }\n\n    refreshCoordinateFromInput(): void {\n        if ( this.coordinate.longitude != null && this.coordinate.latitude != null ) {\n            console.log( this.site.geometry );\n\n            if ( this.site.geometry == null ) {\n                this.site.geometry = { type: 'Point' };\n            }\n\n            this.site.geometry.coordinates = [this.coordinate.longitude, this.coordinate.latitude];\n\n            var ids = this.draw.set( {\n                type: 'FeatureCollection',\n                features: [{\n                    id: this.site.id,\n                    type: 'Feature',\n                    properties: {\n                        oid: this.site.id,\n                        name: this.site.name\n                    },\n                    geometry: this.site.geometry\n                }]\n            } );\n\n            this.draw.changeMode( 'simple_select', { featureIds: ids } );\n        }\n    }\n\n    //    zoomToFeature( node: TreeNode ): void {\n    //        if ( node.data.geometry != null ) {\n    //            this.map.flyTo( {\n    //                center: node.data.geometry.coordinates\n    //            } );\n    //        }\n    //    }\n\n    handleStyle( layer: any ): void {\n\n        this.baseLayers.forEach( baseLayer => {\n            baseLayer.selected = false;\n        } );\n\n        layer.selected = true;\n\n        this.map.setStyle( 'mapbox://styles/mapbox/' + layer.id );\n    }\n\n    handleClick( $event: any ): void {\n        let result = $event.item;\n\n        if ( result.center ) {\n            this.map.flyTo( {\n                center: result.center,\n                zoom: 9\n            } )\n        }\n    }\n    \n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\nimport { LngLatBounds } from 'mapbox-gl';\nimport { Observable } from 'rxjs';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize, debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';\n\nimport { AuthService } from '@shared/service/auth.service';\nimport { EventService } from '@shared/service/event.service';\nimport { HttpBackendClient } from '@shared/service/http-backend-client.service';\n\nimport { SiteEntity, Message, Task, AttributeType, Condition, SiteObjectsResultSet, TaskGroup } from '../model/management';\nimport { Sensor } from '../model/sensor';\nimport { Platform } from '../model/platform';\nimport { PageResult } from '@shared/model/page';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ManagementService {\n\n\tconstructor(private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService, private authService: AuthService) { }\n\n\tgetChildren(id: string): Promise<SiteEntity[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\n\t\treturn this.http\n\t\t\t.get<SiteEntity[]>(acp + '/project/get-children', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tgetObjects(id: string, key: string, pageNumber: number, pageSize: number): Promise<SiteObjectsResultSet> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\t\tif (key != null) {\n\t\t\tparams = params.set('key', key);\n\t\t}\n\n\t\tif (pageNumber != null) {\n\t\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\t}\n\t\tif (pageSize != null) {\n\t\t\tparams = params.set('pageSize', pageSize.toString());\n\t\t}\n\n\t\treturn this.http\n\t\t\t.get<SiteObjectsResultSet>(acp + '/project/objects', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tview(id: string): Promise<{ breadcrumbs: SiteEntity[], item: SiteEntity }> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\t\treturn this.http\n\t\t\t.get<{ breadcrumbs: SiteEntity[], item: SiteEntity }>(acp + '/project/view', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tgetItems(id: string, key: string): Promise<SiteEntity[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\t\tif (key != null) {\n\t\t\tparams = params.set('key', key);\n\t\t}\n\n\t\treturn this.http\n\t\t\t.get<SiteEntity[]>(acp + '/project/items', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\troots(id: string, bounds: LngLatBounds): Promise<SiteEntity[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\n\t\tif (id != null) {\n\t\t\tparams = params.set('id', id);\n\t\t}\n\n\t\tif (bounds != null) {\n\t\t\tparams = params.set('bounds', JSON.stringify(bounds));\n\t\t}\n\n\t\treturn this.http\n\t\t\t.get<SiteEntity[]>(acp + '/project/roots', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tedit(id: string): Promise<{ item: SiteEntity, attributes: AttributeType[] }> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<{ item: SiteEntity, attributes: AttributeType[] }>(acp + '/project/edit', JSON.stringify({ id: id }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tsetExclude(id: string, exclude: boolean): Promise<SiteEntity> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<SiteEntity>(acp + '/project/set-exclude', JSON.stringify({ id: id, exclude: exclude }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\trunOrtho(id: string): Promise<{ item: SiteEntity, attributes: AttributeType[] }> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\t//   this.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<{ item: SiteEntity, attributes: AttributeType[] }>(acp + '/project/run-ortho', JSON.stringify({ id: id }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\t//\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tupdate(entity: SiteEntity): Promise<SiteEntity> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.noErrorHttpClient\n\t\t\t.post<SiteEntity>(acp + '/project/update', JSON.stringify({ entity: entity }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tnewChild(parentId: string, type: string): Promise<{ item: SiteEntity, attributes: AttributeType[] }> {\n\n\t\tlet url = '/project/new-default-child';\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tlet params = {} as any;\n\n\t\tif (parentId != null) {\n\t\t\tparams.parentId = parentId;\n\t\t}\n\n\t\tif (type) {\n\t\t\tparams.type = type;\n\n\t\t\turl = '/project/new-child';\n\t\t}\n\n\n\t\tthis.eventService.start();\n\n\n\t\treturn this.http\n\t\t\t.post<{ item: SiteEntity, attributes: AttributeType[] }>(acp + url, JSON.stringify(params), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\n\n\tapplyWithParent(entity: SiteEntity, parentId: string): Promise<SiteEntity> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\n\t\tlet params = { entity: entity } as any;\n\n\t\tif (parentId != null) {\n\t\t\tparams.parentId = parentId;\n\t\t}\n\n\n\t\tthis.eventService.start();\n\n\t\treturn this.noErrorHttpClient\n\t\t\t.post<SiteEntity>(acp + '/project/apply-with-parent', JSON.stringify(params), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tgetCurrentUser(): string {\n\t\t//        let userName: string = \"admin\";\n\t\t//\n\t\t//        if ( this.cookieService.check( \"user\" ) ) {\n\t\t//            let cookieData: string = this.cookieService.get( \"user\" )\n\t\t//            let cookieDataJSON: any = JSON.parse( JSON.parse( cookieData ) );\n\t\t//            userName = cookieDataJSON.userName;\n\t\t//        }\n\t\t//        else {\n\t\t//            console.log( 'Check fails for the existence of the cookie' )\n\t\t//\n\t\t//            let cookieData: string = this.cookieService.get( \"user\" )\n\t\t//\n\t\t//            if ( cookieData != null ) {\n\t\t//                let cookieDataJSON: any = JSON.parse( JSON.parse( cookieData ) );\n\t\t//                userName = cookieDataJSON.userName;\n\t\t//            }\n\t\t//            else {\n\t\t//                console.log( 'Unable to get cookie' );\n\t\t//            }\n\t\t//        }\n\n\t\treturn this.authService.getUserName();\n\t}\n\n\tremove(id: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/project/remove', JSON.stringify({ id: id }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tremoveObject(componentId: string, key: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/project/removeObject', JSON.stringify({ id: componentId, key: key }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tremoveTask(uploadId: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/project/remove-task', JSON.stringify({ uploadId: uploadId }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tupload(id: string, folder: string, file: File): Promise<Document> {\n\n\t\tthis.eventService.start();\n\n\t\tconst formData = new FormData()\n\t\tformData.append('file', file);\n\t\tformData.append('id', id);\n\t\tformData.append('folder', folder);\n\n\t\treturn this.http.post<Document>(acp + '/project/upload', formData)\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\ttasks(statuses: string[], pageSize: number, pageNumber: number, token: number): Promise<PageResult<TaskGroup>> {\n\n\t\t// status options: PROCESSING, COMPLETE, ERROR, QUEUED\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('statuses', JSON.stringify(statuses));\n\t\tparams = params.set('pageSize', pageSize.toString());\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\tparams = params.set('token', token.toString());\n\n\t\treturn this.http\n\t\t\t.get<PageResult<TaskGroup>>(acp + '/project/tasks', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\n\tgetTasks(collectionId: string): Promise<Task[]> {\n\n\t\t// status options: PROCESSING, COMPLETE, ERROR, QUEUED\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('collectionId', collectionId);\n\n\t\treturn this.http\n\t\t\t.get<Task[]>(acp + '/project/collection-tasks', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\ttask(id: string): Promise<{ messages: Message[], task: Task }> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\t\treturn this.http\n\t\t\t.get<{ messages: Message[], task: Task }>(acp + '/project/task', { params: params })\n\t\t\t.toPromise();\n\t}\n\n\tgetMissingMetadata(pageSize: number, pageNumber: number): Promise<PageResult<Message>> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('pageSize', pageSize.toString());\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\n\t\treturn this.http.get<PageResult<Message>>(acp + '/project/missing-metadata', { params: params })\n\t\t\t.toPromise();\n\t}\n\n\tdownload(id: string, key: string, useSpinner: boolean): Observable<Blob> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\t\tparams = params.set('key', key);\n\n\t\tif (useSpinner) {\n\t\t\tthis.eventService.start();\n\t\t}\n\n\t\treturn this.noErrorHttpClient.get<Blob>(acp + '/project/download', { params: params, responseType: 'blob' as 'json' })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tif (useSpinner) {\n\t\t\t\t\tthis.eventService.complete();\n\t\t\t\t}\n\t\t\t}))\n\t}\n\n\tdownloadAll(id: string, key: string, useSpinner: boolean): Observable<Blob> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\t\tparams = params.set('key', key);\n\n\t\tif (useSpinner) {\n\t\t\tthis.eventService.start();\n\t\t}\n\n\t\treturn this.noErrorHttpClient.get<Blob>(acp + '/project/download-all', { params: params, responseType: 'blob' as 'json' })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tif (useSpinner) {\n\t\t\t\t\tthis.eventService.complete();\n\t\t\t\t}\n\t\t\t}))\n\t}\n\n\tsearch(terms: Observable<string>) {\n\t\treturn terms\n\t\t\t.pipe(debounceTime(400))\n\t\t\t.pipe(distinctUntilChanged())\n\t\t\t.pipe(switchMap(term => this.searchEntries(term)));\n\t}\n\n\tsearchEntries(term: string): Observable<string> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('term', term);\n\n\t\treturn this.http\n\t\t\t.get<string>(acp + '/project/search', { params: params })\n\t}\n\n\tsearchEntites(term: string): Promise<any> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('term', term);\n\n\t\treturn this.http\n\t\t\t.get(acp + '/project/search', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tsubmitCollectionMetadata(collectionId: string, metaObj: Object): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.noErrorHttpClient\n\t\t\t.post<void>(acp + '/project/submit-metadata', JSON.stringify({ collectionId: collectionId, json: metaObj }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tpushToEros(collectionId: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/eros/push', JSON.stringify({ collectionId: collectionId }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tgetMetadataOptions(id: string): Promise<{ name: string, email: string, uav: any, sensor: any }> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\n\t\tif (id != null) {\n\t\t\tparams = params.set('id', id);\n\t\t}\n\n\t\treturn this.noErrorHttpClient\n\t\t\t.get<{ name: string, email: string, uav: any, sensor: any }>(acp + '/project/metadata-options', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tgetUAVMetadata(uavId: string, sensorId: string): Promise<{ uav: any, sensor: any }> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('uavId', uavId);\n\t\tparams = params.set('sensorId', sensorId);\n\n\t\treturn this.noErrorHttpClient\n\t\t\t.get<{ uav: any, sensor: any }>(acp + '/project/uav-metadata', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\n\tevaluate(condition: Condition, entity: SiteEntity): boolean {\n\t\tif (condition != null && condition.type === 'eq') {\n\t\t\treturn (entity[condition.name] === condition.value);\n\t\t}\n\t\telse if (condition != null && condition.type === 'admin') {\n\t\t\treturn this.authService.isAdmin();\n\t\t}\n\n\t\treturn false;\n\t}\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"error-container\">\n        <div class=\"label-holder\">\n            <strong>Error</strong>\n        </div>\n        <div class=\"holder\">\n            <div>\n                <p class=\"error-message\">{{message}}</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"image-preview-container\">\n        <i class=\"fa fa-times btn btn-close\" style=\"min-width:0;\" (click)=\"bsModalRef.hide()\"></i>\n        <div class=\"image-container\">\n            <p *ngIf=\"loading\" style=\"text-align: left;\">Loading image...</p>\n            <img *ngIf=\"!loading\" class=\"image-preview img-responsive center-block\" [src]=\"imageToShow | safeHtml\" alt=\"Image\">\n        </div>\n    </div>\n\n    <!-- <form #ngForm=\"ngForm\">\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Cancel</button>\n    </div>\n  </form> -->\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef, Input } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ErrorHandler } from '@shared/component';\n\nimport { ManagementService } from '@site/service/management.service';\n\n\n@Component( {\n    selector: 'image-preview-modal',\n    templateUrl: './image-preview-modal.component.html',\n    styleUrls: []\n} )\nexport class ImagePreviewModalComponent {\n\n    message: string = null;\n    open: boolean = true;\n    loading: boolean = true;\n    imageToShow: any;\n    component: string;\n    key: string;\n\n    constructor( private service: ManagementService, public bsModalRef: BsModalRef ) { }\n\n    init( component: string, key: string ) {\n        this.component = component;\n        this.key = key;\n\n        this.getImage( this.component, this.key );\n    }\n\n    createImageFromBlob( image: Blob ) {\n        let reader = new FileReader();\n        reader.addEventListener( \"load\", () => {\n            this.imageToShow = reader.result;\n        }, false );\n\n        if ( image ) {\n            reader.readAsDataURL( image );\n        }\n    }\n\n    getImage( component: string, key: string ): void {\n\n        this.loading = true;\n\n        this.service.download( component, key, false ).subscribe( blob => {\n            this.createImageFromBlob( blob );\n            this.loading = false;\n        }, error => {\n            this.loading = false;\n\n            this.error( error );\n        } );\n    }\n\n    close(): void {\n        this.open = false;\n    }\n\n    error(err: HttpErrorResponse): void {\n\t  this.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","import { PageResult } from '@shared/model/page';\nimport { Sensor } from './sensor';\nimport { Platform } from './platform';\nimport { UAV } from './uav'\n\nexport class Condition {\n\tname: string;\n\tvalue: string;\n\ttype: string;\n}\n\nexport class AttributeType {\n\tname: string;\n\tlabel: string;\n\ttype: string;\n\trequired: boolean;\n\timmutable: boolean;\n\treadonly: boolean;\n\tcondition: Condition;\n\toptions?: { value: string, label: string }[];\n}\n\nexport class SiteObjectsResultSet {\n\tcount: number;\n\tpageNumber: number;\n\tpageSize: number;\n\tresults: SiteEntity[];\n\tfolder: string;\n}\n\nexport class SiteEntity {\n\tid: string;\n\tname: string;\n\tfolderName: string;\n\ttype: string;\n\tcomponent: string;\n\tkey: string;\n\tmetadataUploaded: boolean;\n\tgeometry?: any;\n\tnumberOfChildren: number;\n\tlastModified?: string;\n\townerName?: string;\n\townerPhone?: string;\n\townerEmail?: string;\n\tprivilegeType?: string;\n\tchildren?: SiteEntity[];\n\tactive?: boolean;\n\texclude?: boolean;\n    sensor: Sensor;\n    platform: Platform;\n    uav: UAV;\n    pilot?: string;\n}\n\nexport class CollectionHierarchy {\n\tsite: string;\n\tproject: string;\n\tmission: string;\n\tcollection: string;\n}\n\nexport class ImageHierarchy {\n\tsite: string;\n\tproject: string;\n\timage: string;\n}\n\nexport class Selection {\n\ttype: string;\n\tisNew: boolean;\n\tvalue: string;\n\tlabel: string;\n\tuav?: string;\n\tsensor?: string;\n\tcollectionDate? : string;\n\tpointOfContact?: {\n\t\tname: string,\n\t\temail: string\n\t}\n};\n\n\nexport class UploadForm {\n\tcreate: boolean;\n\tname: string;\n\toutFileName: string;\n\tuasComponentOid: string;\n\tsite: string;\n\tproject: string;\n\tmission: string;\n\tcollection: any;\n\timagery: any;\n\tuploadTarget: string;\n\tselections: string;\n\tprocessUpload: boolean;\n}\n\nexport class Action {\n\tcreateDate: string;\n\tlastUpdateDate: string;\n\ttype: string;\n\tdescription: string;\n}\n\nexport class Task {\n\toid: string;\n\tlabel: string;\n\tcreateDate: string;\n\tlastUpdateDate: string;\n\tstatus: string;\n\tmessage: string;\n\tactions: Action[];\n\tuploadId: string;\n\todmOutput: string;\n\tcollection: string;\n\tcollectionLabel: string;\n\ttype: string;\n\tvisible?: boolean;\n\tshowError?: boolean;\n\tancestors?: string[];\n\tsensorName?: string;\n}\n\nexport class TaskGroup {\n\tlabel: string;\n\tcollectionId: string;\n\tvisible?: boolean;\n\tloading?: boolean;\n\tgroups: TaskGroupType[];\n\tstatus: string;\n\tlastUpdatedDate: string;\n\tancestors?: string[];\n}\n\nexport class TaskGroupType {\n\ttasks: Task[];\n\tstatus: string;\n\ttype: string;\n}\n\nexport class Message {\n\tcollectionId: string;\n\tcollectionName: string;\n\tancestors: string[];\n\tmessage: string;\n\timageWidth: string;\n\timageHeight: string;\n}\n\nexport class ProductDocument {\n\tid: string;\n\tname: string;\n\tkey: string;\n}\n\nexport class Product {\n\tid: string;\n\tname: string;\n\tentities: SiteEntity[];\n\tpublished: boolean;\n\timageKey?: string;\n\tboundingBox?: number[];\n\tlayers: GeoserverLayer[];\n\torthoMapped?: boolean;\n\tdemMapped?: boolean;\n\thasPointcloud?: boolean;\n}\n\nexport class GeoserverLayer {\n\tworkspace: string;\n\tclassification: string;\n\tkey: string;\n\tisMapped?: boolean;\n}\n\n//export class ProductDetail extends Product {\n//\tpilotName: string;\n//\tdateTime: string;\n//\tsensorName: string;\n//    sensorId: string;\n//    sensorType: string;\n//    sensorModel: string;\n//    sensorDescription: string;\n//\tpage?: PageResult<ProductDocument>;\n//}\n\nexport class ProductDetail extends Product {\n    pilotName: string;\n    dateTime: string;\n    sensor: Sensor;\n    platform: Platform;\n    uav: UAV;\n    page?: PageResult<ProductDocument>;\n}\n","export class Sensor {\n    seq?: string;\n    oid: string;\n    name: string;\n    description?: string;\n    model?: string;\n    dateCreated?: string;\n    dateUpdate?: string;\n    sensorType: SensorType;\n    wavelengths: string[];\n    pixelSizeWidth: number;\n    pixelSizeHeight: number;\n    sensorWidth: number;\n    sensorHeight: number;\n    platforms: {\n        oid: string;\n        name: string;\n    }[];\n\n}\n\nexport class SensorType {\n    name: string;\n    isMultispectral: boolean;\n    oid: string;\n}\n\nexport const WAVELENGTHS: string[] = [\"Natural Color RGB\", \"Thermal\", \"Red Edge\", \"Near Infra Red\", \"LiDAR\", \"Other\"];\n","\nimport { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[OnlyNumber]' \n})\nexport class OnlyNumber {\n\n  constructor(private el: ElementRef) { }\n\n  @Input() OnlyNumber: boolean;\n \n  @HostListener('keydown', ['$event']) onKeyDown(event:any) {\n    let e = <KeyboardEvent> event;\n    if (this.OnlyNumber) {\n      if ([46, 8, 9, 27, 13, 110, 190].indexOf(e.keyCode) !== -1 ||\n        // Allow: Ctrl+A\n        (e.keyCode == 65 && e.ctrlKey === true) ||\n        // Allow: Ctrl+C\n        (e.keyCode == 67 && e.ctrlKey === true) ||\n        // Allow: Ctrl+X\n        (e.keyCode == 88 && e.ctrlKey === true) ||\n        // Allow: home, end, left, right\n        (e.keyCode >= 35 && e.keyCode <= 39)) {\n          // let it happen, don't do anything\n          return;\n        }\n        // Ensure that it is a number and stop the keypress\n        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n            e.preventDefault();\n        }\n      }\n  }\n}\n\n\n","<div class=\"modal-header text-center\">\n    <h2>Collection Metadata</h2>\n</div>\n\n<div class=\"row\">\n    <div class=\"col-md-12\">\n        <form #ngForm=\"ngForm\" class=\"modal-form\">\n            <div class=\"modal-body\">\n\n                <div *ngIf=\"message != null\" class=\"error-container\">\n                    <div class=\"label-holder\">\n                        <strong>Error</strong>\n                    </div>\n                    <div class=\"holder\">\n                        <div>\n                            <p class=\"error-message\">{{message}}</p>\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class=\"panel panel-default\">\n                    <div class=\"panel-heading\">Point Of Contact</div>\n                    <div class=\"panel-body\">\n                        <div class=\"form-group\">\n                            <label for=\"pointOfContact.name\">Name</label>\n                            <input type=\"text\" name=\"pointOfContact.name\" [(ngModel)]=\"metaObject.pointOfContact.name\"\n                                [maxlength]=\"100\" [required]=\"false\" [disabled]=\"false\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"pointOfContact.email\">Email</label>\n                            <input type=\"text\" name=\"pointOfContact.email\" [(ngModel)]=\"metaObject.pointOfContact.email\"\n                                [maxlength]=\"255\" [required]=\"false\" [disabled]=\"false\" />\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"panel panel-default\">\n                    <div class=\"panel-heading\">Platform</div>\n                    <div class=\"panel-body\">\n                        <div class=\"form-group\">\n                            <label for=\"platform.class\">Name</label>\n                            <input type=\"text\" name=\"platform.otherName\" [(ngModel)]=\"metaObject.platform.otherName\"\n                                maxlength=\"20\" required />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"platform.type\">Type</label>\n                            <select [(ngModel)]=\"metaObject.platform.type\" name=\"platform.type\" type=\"input\" class=\"\"\n                                 required>\n                                <option></option>\n                                <option>Fixed Wing</option>\n                                <option>Hybrid</option>\n                                <option>Multi-rotor</option>\n                                <option>Helicopter</option>\n                                <option>VTOL Fixed-wing</option>\n                                <option>Quadcopter</option>\n                            </select>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"platform.serialNumber\">Serial Number</label>\n                            <input type=\"text\" name=\"platform.serialNumber\"\n                                [(ngModel)]=\"metaObject.platform.serialNumber\" [maxlength]=\"50\"\n                                [required]=\"true\" [disabled]=\"false\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"platform.faaIdNumber\">FAA Id Number</label>\n                            <input type=\"text\" name=\"platform.faaIdNumber\" [(ngModel)]=\"metaObject.platform.faaIdNumber\"\n                                [maxlength]=\"30\" [required]=\"true\" [disabled]=\"false\" />\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class=\"panel panel-default\">\n                    <div class=\"panel-heading\">Sensor</div>\n                    <div class=\"panel-body\">\n                        <div class=\"form-group\">\n                            <label for=\"sensor.class\">Name</label>\n                            <input type=\"text\" name=\"sensor.otherName\" [(ngModel)]=\"metaObject.sensor.otherName\"\n                                maxlength=\"20\" required />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.type\">Type</label>\n                            <input type=\"text\" name=\"sensor.type\" [(ngModel)]=\"metaObject.sensor.type\" [maxlength]=\"20\"\n                                [required]=\"true\"  />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.model\">Model</label>\n                            <input type=\"text\" name=\"sensor.model\" [(ngModel)]=\"metaObject.sensor.model\"\n                                [maxlength]=\"20\" [required]=\"true\"  />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.wavelength\">Wave Length</label>\n                            <div *ngFor=\"let wavelength of wavelengths\">\n                              <boolean-field [value]=\"metaObject.sensor.wavelength && (-1 !== metaObject.sensor.wavelength.indexOf(wavelength))\" [label]=\"wavelength\" (valueChange)=\"updateSelectedWaveLength(wavelength, $event)\"></boolean-field>                              \n                            </div>                                                        \n                        </div>\n                        <!-- <div class=\"form-group\">\n                            <label for=\"sensor.imageWidth\">Image Width</label>\n                            <input type=\"text\" name=\"sensor.imageWidth\" [(ngModel)]=\"imageWidth\"\n                                [required]=\"true\" [disabled]=\"true\" OnlyNumber=\"true\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.imageHeight\">Image Height</label>\n                            <input type=\"text\" name=\"sensor.imageHeight\" [(ngModel)]=\"imageHeight\"\n                                [required]=\"true\" [disabled]=\"true\" OnlyNumber=\"true\" />\n                        </div> -->\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorWidth\">Sensor Width</label>\n                            <input type=\"number\" name=\"sensor.sensorWidth\" [(ngModel)]=\"metaObject.sensor.sensorWidth\"\n                                [required]=\"true\" [disabled]=\"false\" OnlyNumber=\"true\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorWidth\">Sensor Width Units</label>\n                            <select [(ngModel)]=\"metaObject.sensor.sensorWidthUnits\" name=\"sensor.sensorWidthUnits\" type=\"input\" required disabled>\n                                <option value=\"mm\" selected>Millimeters</option>\n                            </select>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorHeight\">Sensor Height</label>\n                            <input type=\"number\" name=\"sensor.sensorHeight\" [(ngModel)]=\"metaObject.sensor.sensorHeight\"\n                                [required]=\"true\" [disabled]=\"false\" OnlyNumber=\"true\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorWidth\">Sensor Height Units</label>\n                            <select [(ngModel)]=\"metaObject.sensor.sensorHeightUnits\" name=\"sensor.sensorHeightUnits\" type=\"input\" required disabled>\n                                <option value=\"mm\" selected>Millimeters</option>\n                            </select>                            \n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.pixelSizeWidth\">Pixel Size Width</label>\n                            <input type=\"number\" name=\"sensor.pixelSizeWidth\"\n                                [(ngModel)]=\"metaObject.sensor.pixelSizeWidth\" [required]=\"true\" [disabled]=\"false\"\n                                OnlyNumber=\"true\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.pixelSizeHeight\">Pixel Size Height</label>\n                            <input type=\"number\" name=\"sensor.pixelSizeHeight\"\n                                [(ngModel)]=\"metaObject.sensor.pixelSizeHeight\" [required]=\"true\" [disabled]=\"false\"\n                                OnlyNumber=\"true\" />\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"button-holder\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Cancel</button>\n                    <button type=\"button\" [disabled]=\"!ngForm.valid\" class=\"btn btn-primary\"\n                        (click)=\"handleSubmit()\">\n                        <i class=\"icon-upload icon-white\"></i> Submit\n                    </button>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { ErrorHandler } from '@shared/component';\nimport { ManagementService } from '@site/service/management.service';\n\nimport { WAVELENGTHS } from '@site/model/sensor';\n\n@Component({\n\tselector: 'metadata-modal',\n\ttemplateUrl: './metadata-modal.component.html',\n\tstyleUrls: []\n})\nexport class MetadataModalComponent {\n    /*\n     * collectionId for the metadata\n     */\n\tcollectionId: string;\n\n\tmessage: string = null;\n\n\tdisabled: boolean = false;\n\n\t// imageHeight: string;\n\n\t// imageWidth: string;\n\n\tmetaObject: any = {\n\t\tpointOfContact: {\n\t\t\tname: \"\",\n\t\t\temail: \"\"\n\t\t},\n\t\tplatform: {\n\t\t\totherName: \"\",\n\t\t\tclass: \"\",\n\t\t\ttype: \"\",\n\t\t\tserialNumber: \"\",\n\t\t\tfaaIdNumber: \"\"\n\t\t},\n\t\tsensor: {\n\t\t\totherName: \"\",\n\t\t\ttype: \"\",\n\t\t\tmodel: \"\",\n\t\t\twavelength: [],\n\t\t\tsensorWidth: \"\",\n\t\t\tsensorWidthUnits: \"mm\",\n\t\t\tsensorHeight: \"\",\n\t\t\tsensorHeightUnits: \"mm\",\n\t\t\tpixelSizeWidth: \"\",\n\t\t\tpixelSizeHeight: \"\"\n\t\t},\n\t\tupload: {\n\t\t\tdataType: \"raw\"\n\t\t}\n\t};\n\n    /*\n     * Observable subject called when metadata upload is successful\n     */\n\tpublic onMetadataChange: Subject<string>;\n\n\twavelengths: string[] = WAVELENGTHS;\n\n\tconstructor(public bsModalRef: BsModalRef, private service: ManagementService) { }\n\n\tinit(collectionId: string): void {\n\t\tthis.collectionId = collectionId;\n\n\t\tthis.onMetadataChange = new Subject();\n\n\t\tthis.service.getMetadataOptions(null).then((options) => {\n\n\t\t\tthis.metaObject.pointOfContact.name = options.name;\n\t\t\tthis.metaObject.pointOfContact.email = options.email;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\n\thandleSubmit(): void {\n\n\t\t// this.metaObject.imageWidth = this.imageWidth;\n\t\t// this.metaObject.imageHeight = this.imageHeight;\n\n\t\tthis.service.submitCollectionMetadata(this.collectionId, this.metaObject).then(() => {\n\t\t\tthis.bsModalRef.hide();\n\t\t\tthis.onMetadataChange.next(this.collectionId);\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\t\n\tupdateSelectedWaveLength(wavelength: string, checked: boolean): void {\n\n\t\tconst indexOf = this.metaObject.sensor.wavelength.indexOf(wavelength)\n\n\t\tif (checked) {\n\n\t\t\tif (indexOf < 0) {\n\t\t\t\tthis.metaObject.sensor.wavelength.push(wavelength);\n\n\t\t\t}\n\t\t} else {\n\t\t\tif (indexOf > -1) {\n\t\t\t\tthis.metaObject.sensor.wavelength.splice(indexOf, 1);\n\t\t\t}\n\t\t}\n\t}\t\n\n\terror(err: HttpErrorResponse): void {\n\t  this.message = ErrorHandler.getMessageFromError(err);\n\t}\n}\n","export class Metadata {\n    root: boolean;\n    leaf: boolean;\n    drillable: boolean;\n    expandable: boolean;\n    uploadable: boolean;\n    processable: boolean;\n    childLabel: string;\n\n    constructor( root: boolean, leaf: boolean, drillable: boolean, expandable: boolean, uploadable: boolean, processable: boolean, childLabel: string ) {\n        this.root = root;\n        this.leaf = leaf;\n        this.drillable = drillable;\n        this.expandable = expandable;\n        this.uploadable = uploadable;\n        this.processable = processable;\n        this.childLabel = childLabel;\n    }\n}","import { Injectable } from '@angular/core';\n\nimport { SiteEntity } from '../model/management';\nimport { Metadata } from '../model/metadata';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class MetadataService {\n\n    private cache: any = {};\n\n    constructor() {\n        // ( root, leaf, drillable, expandable, uploadable, processable )\n        this.cache['Site'] = new Metadata( true, false, true, false, false, false, 'Projects' );\n        this.cache['Project'] = new Metadata( false, false, true, false, false, false, 'Missions' );\n        this.cache['Mission'] = new Metadata( false, false, false, true, false, false, 'Collections' );\n        this.cache['Collection'] = new Metadata( false, true, false, false, false, true, 'Images' );\n        this.cache['folder'] = new Metadata( false, true, false, false, true, false, '' );\n\n        // Metadata for specific folder types\n        this.cache['raw'] = new Metadata( false, false, false, false, true, false, '' );\n        this.cache['accessible'] = new Metadata( false, false, false, false, true, false, '' );\n    }\n\n    getMetadata( entity: SiteEntity ): Metadata {\n        return this.cache[entity.type];\n    }\n\n    getTypeContainsFolders( entity: SiteEntity ): boolean {\n        return ( entity.type === 'Collection' );\n    }\n\n    isUploadable( type: string ): boolean {\n        if ( this.cache[type] != null ) {\n            return this.cache[type].uploadable;\n        }\n\n        return false;\n    }\n\n    hasExtraField( type: string, fieldName: string ): boolean {\n        if ( type === 'Collection' ) {\n            return ( fieldName === 'collectionDate' || fieldName === 'sensor' || fieldName === 'uav' );\n        }\n\n        return false;\n    }\n\n    isProcessable( type: string ): boolean {\n        if ( this.cache[type] != null ) {\n            return this.cache[type].processable;\n        }\n\n        return false;\n    }\n\n    getUploadTarget( type: string ): string {\n        if ( type === 'Imagery' ) {\n            return 'imagery';\n        }\n\n        return 'raw';\n    }\n\n    getHierarchy(): string[] {\n\n        return ['Site', 'Project', 'Mission', 'Collection'];\n    }\n}","<div class=\"modal-body\" [@fadeInOnEnter]>\n  <div>\n    <div *ngIf=\"message != null\" class=\"error-container\">\n      <div class=\"label-holder\">\n        <strong>Error</strong>\n      </div>\n      <div class=\"holder\">\n        <div>\n          <p class=\"error-message\">{{message}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"entity != null\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2>{{entity.name}} <span *ngIf=\"!entity.metadataUploaded\" class=\"dot pending\" style=\"margin-left: 0;margin-bottom: 5px;\"></span></h2>\n        </div>\n      </div>\n      \n      \n      \n      \n      <div class=\"row\">\n        <div class=\"col-md-12\">\n<!--           <label>Pilot Name: </label> &nbsp; {{product.pilotName}} -->\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n<!--           <label>Date/Time: </label> &nbsp; {{product.dateTime | idmdate}} -->\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>Sensor Information:</label>\n          <table class=\"table table-bordered\">\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td><a [routerLink]=\"['/site/sensor', entity.sensor.oid]\" target=\"_blank\">{{entity.sensor.name}}</a></td>\n              </tr>\n              <tr>\n                <td>Type</td>\n                <td> {{entity.sensor.sensorType.name}}</td>\n              </tr>\n              <tr>\n                <td>Model</td>\n                <td>{{entity.sensor.model}}</td>\n              </tr>\n              <tr>\n                <td>Description</td>\n                <td>{{entity.sensor.description}}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n      \n      \n      \n      \n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <ul class=\"breadcrumb\" style=\"margin-bottom: 10px;\">\n            <li *ngFor=\"let prev of previous\">\n              <span> {{prev.name}}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-sm-12\" style=\"padding: 0;\">\n          <tabset class=\"nav-full-width\">\n            <tab *ngFor=\"let folder of folders\" [heading]=\"folder.name\" (selectTab)=\"onSelect(folder)\">\n\n              <div [ngSwitch]=\"folder.name\">\n                <div class=\"image-list-container\" *ngSwitchDefault>\n                  <ul class=\"list-group row\">\n                    <li *ngFor=\"let item of page.results\" class=\"list-group-item col-xs-3\">\n                      <a class=\"thumbnail non-clickable\">\n                        <img [src]=\"context + '/net/geoprism/images/thumbnail-default.png'\" alt=\"Image\">\n                        <div class=\"caption\">\n                          <h4 class=\"media-heading\">{{item.name}}</h4>\n                        </div>\n                      </a>\n                    </li>\n                  </ul>\n                </div>\n                \n                <div class=\"image-list-container\" *ngSwitchCase=\"'ortho'\">\n                  <ul class=\"list-group row\">\n                    <li *ngFor=\"let item of page.results\" class=\"list-group-item col-xs-3\">\n                      <a class=\"thumbnail non-clickable\">\n                        <img [src]=\"thumbnails[item.key] != null ? (thumbnails[item.key] | safeHtml) : (context + '/net/geoprism/images/thumbnail-default.png')\" alt=\"Image\">\n                        <div class=\"caption\">\n                          <h4 class=\"media-heading\">{{item.name}}</h4>\n                        </div>\n                      </a>\n                    </li>\n                  </ul>\n                </div>\n\n                <div class=\"image-list-container\" *ngSwitchCase=\"'raw'\">\n                  <ul class=\"list-group row\">\n                    <li\n                      *ngFor=\"let item of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\"\n                      class=\"list-group-item col-xs-3\">\n                      <a class=\"thumbnail\"\n                        [ngClass]=\"{'card-disabled' : item.exclude, 'non-clickable' : !enableSelectableImages}\">\n                        <input type=\"checkbox\" class=\"x-box\" *ngIf=\"enableSelectableImages\"\n                          [checked]=\"item.exclude\" (change)=\"toggleExcludeImage($event, item)\" />\n                        <img style=\"max-height: 150px\" (click)=\"enableSelectableImages ? toggleExcludeImage($event, item) : false\"\n                          [ngClass]=\"{'img-disabled' : item.exclude}\"\n                          [src]=\"thumbnails[item.key] != null ? (thumbnails[item.key] | safeHtml) : (context + '/net/geoprism/images/thumbnail-default.png')\"\n                          alt=\"Image\">\n                        <div class=\"caption\">\n                          <h4 class=\"media-heading\">\n                            {{item.name}}\n                          </h4>\n                        </div>\n                      </a>\n                    </li>\n                  </ul>\n                </div>\n\n                <div *ngSwitchCase=\"'video'\">\n                  <div *ngIf=\"video.src !== null\">\n                    <div class=\"row\">\n                      <div class=\"col-md-1\"></div>\n                      <div class=\"col-md-10\">\n                        <h3>\n                          {{video.name}}\n                          <a (click)=\"handleDownloadVideo(video.src)\"><i class=\"fas fa-download\"></i></a>\n                          <a class=\"pull-right\" (click)=\"closeVideo()\"><i class=\"fa fa-times\"\n                              aria-hidden=\"true\"></i></a>\n                        </h3>\n                      </div>\n                      <div class=\"col-md-1\"></div>\n                    </div>\n                    <div class=\"row\">\n                      <div class=\"col-md-1\"></div>\n                      <div class=\"col-md-10\">\n                        <video style=\"width:100%\" controls>\n                          <source [src]=\"video.src\" type=\"video/mp4\" />\n                          Browser not supported\n                        </video>\n                      </div>\n                      <div class=\"col-md-1\"></div>\n                    </div>\n                  </div>\n\n                  <div class=\"image-list-container\">\n                    <ul class=\"list-group row\">\n                      <li *ngFor=\"let item of page.results\" class=\"list-group-item col-xs-3\">\n                        <a class=\"thumbnail\" (click)=\"showVideo(item)\">\n                          <img [src]=\"context + '/net/geoprism/images/thumbnail-video.png'\" alt=\"Video\">\n                          <div class=\"caption\">\n                            <h4 class=\"media-heading\">{{item.name}}</h4>\n                          </div>\n                        </a>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n\n              </div>\n            </tab>\n          </tabset>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-sm-12\">\n          <pagination-controls *ngIf=\"folder.name === 'raw'\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n          <div *ngIf=\"showOrthoRerunMessage\" style=\"text-align:right;padding-right:20px;\">\n            <p>{{statusMessage}}</p>\n            <p>See this process on\n              <a routerlink=\"/site/tasks\" routerlinkactive=\"active\" href=\"#/site/tasks\">your tasks page</a>\n            </p>\n          </div>\n\n          <div class=\"btn-holder\" style=\"margin: 20px 20px 10px 20px;\">\n            <div class=\"row\">\n              <div class=\"col-sm-2\">\n                <button *ngIf=\"!entity.metadataUploaded\" type=\"button\" class=\"btn btn-warning\"\n                  [disabled]=\"processRunning\" (click)=\"handleSetMetadata()\">\n                  <i class=\"fa fa-plus\" style=\"color:white\"></i>\n                  Add Metadata\n                </button>\n              </div>\n              <div class=\"col-md-10\" style=\"text-align: right;\">\n                <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Close</button>\n                <button *ngIf=\"processable\" type=\"button\" class=\"btn btn-secondary\" title=\"Downloads all files in the {{folder.name}} folder.\" [disabled]=\"processRunning\"\n                  (click)=\"handleDownload()\" style=\"margin-left: 5px;\">\n                  Download All {{capitalize(folder.name)}}\n                </button>\n                <button *ngIf=\"processable\" type=\"button\" class=\"btn btn-secondary\" [disabled]=\"processRunning\"\n                  (click)=\"handleDownloadOdmAll()\" title=\"Downloads the all.zip file generated from ODM.\" style=\"margin-left: 5px;\">\n                  Download All Generated Data\n                </button>\n                <button *ngIf=\"processable && enableSelectableImages\" [disabled]=\"processRunning\"\n                  (click)=\"handleRunOrtho()\" class=\"btn btn-primary\" title=\"Reprocesses the selected raw imagery and generates new products.\" style=\"margin-left: 5px;\">\n                  Reprocess Imagery\n                  <i class=\"fa fa-sync-alt\" [ngClass]=\"{'fa-spin' : processRunning}\" aria-hidden=\"true\"\n                    style=\"color:white;vertical-align: middle;margin-left: 10px;\"></i>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { ErrorHandler, BasicConfirmModalComponent } from '@shared/component';\n\nimport { SiteEntity, SiteObjectsResultSet } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\nimport { MetadataService } from '@site/service/metadata.service';\nimport { MetadataModalComponent } from './metadata-modal.component';\n\nimport {\n\tfadeInOnEnterAnimation,\n\tfadeOutOnLeaveAnimation,\n\tslideInLeftOnEnterAnimation,\n\tslideInRightOnEnterAnimation,\n} from 'angular-animations';\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'leaf-modal',\n\ttemplateUrl: './leaf-modal.component.html',\n\tstyles: [],\n\tproviders: [BasicConfirmModalComponent],\n\tanimations: [\n\t\tfadeInOnEnterAnimation(),\n\t\tfadeOutOnLeaveAnimation(),\n\t\tslideInLeftOnEnterAnimation(),\n\t\tslideInRightOnEnterAnimation(),\n\t]\n})\nexport class LeafModalComponent implements OnInit {\n\tentity: SiteEntity;\n\n\t@Input()\n\tset initData(ins: any) {\n\t\tthis.init(ins.entity, ins.folders, ins.previous)\n\t}\n\n    /* \n     * Breadcrumb of previous sites clicked on\n     */\n\tprevious = [] as SiteEntity[];\n\tfolders: SiteEntity[] = [];\n\tthumbnails: any = {};\n\tprocessRunning: boolean = false;\n\tmessage: string;\n\tstatusMessage: string;\n\tprocessable: boolean = false;\n\tenableSelectableImages: boolean = false;\n\tfolder: SiteEntity;\n\tshowOrthoRerunMessage: boolean = false;\n\n\tconstPageSize: number = 50;\n\n\tpage: SiteObjectsResultSet = new SiteObjectsResultSet();\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate confirmModalRef: BsModalRef;\n\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n\tpublic onNodeChange: Subject<SiteEntity>;\n\n\tvideo: { src: string, name: string } = { src: null, name: null };\n\tcontext: string;\n\n\tconstructor(private service: ManagementService, private metadataService: MetadataService, private modalService: BsModalService, public bsModalRef: BsModalRef) {\n\t\tthis.context = acp;\n\t}\n\n\tngOnInit(): void {\n\t\tthis.onNodeChange = new Subject();\n\n\t\tthis.page.count = 0;\n\t\tthis.page.pageNumber = 1;\n\t\tthis.page.pageSize = this.constPageSize;\n\t\tthis.page.results = [];\n\t}\n\n\tinit(entity: SiteEntity, folders: SiteEntity[], previous: SiteEntity[]): void {\n\t\tthis.entity = entity;\n\t\tthis.folders = folders;\n\t\tthis.previous = [...previous];\n\n\t\tif (this.previous.length > 0 && this.previous[this.previous.length - 1].id !== this.entity.id) {\n\t\t\tthis.previous.push(this.entity);\n\t\t}\n\n\t\tif (this.folders.length > 0) {\n\t\t\tthis.onSelect(this.folders[0]);\n\t\t}\n\n\t\tthis.processable = this.metadataService.isProcessable(entity.type);\n\t}\n\n\tcreateImageFromBlob(image: Blob, imageData: any) {\n\t\tlet reader = new FileReader();\n\t\treader.addEventListener(\"load\", () => {\n\t\t\t// this.imageToShow = reader.result;\n\t\t\tthis.thumbnails[imageData.key] = reader.result;\n\t\t}, false);\n\n\t\tif (image) {\n\t\t\treader.readAsDataURL(image);\n\t\t}\n\t}\n\n\tgetThumbnail(image: any): void {\n\t\tif (image != null) {\n\n\t\t\tlet rootPath: string = image.key.substr(0, image.key.lastIndexOf(\"/\"));\n\t\t\tlet fileName: string = /[^/]*$/.exec(image.key)[0];\n\t\t\tconst lastPeriod: number = fileName.lastIndexOf(\".\");\n\t\t\tconst thumbKey: string = rootPath + \"/thumbnails/\" + fileName.substr(0, lastPeriod) + \".png\";\n\n\t\t\tthis.service.download(image.component, thumbKey, false).subscribe(blob => {\n\t\t\t\tthis.createImageFromBlob(blob, image);\n\t\t\t}, error => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t\t}\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tthis.getData(this.folder.component, this.folder.name, pageNumber, this.page.pageSize);\n\t}\n\n\tonSelect(folder: SiteEntity): void {\n\t\tthis.page.results = [];\n\n\t\tif (folder.name === \"raw\") {\n\t\t\tthis.enableSelectableImages = true;\n\t\t} else {\n\t\t\tthis.enableSelectableImages = false;\n\t\t}\n\n\t\tlet pn: number = null;\n\t\tlet ps: number = null;\n\n\t\tif (folder.name === \"raw\") {\n\t\t\tif (this.page.pageNumber == null) {\n\t\t\t\tpn = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpn = this.page.pageNumber;\n\t\t\t}\n\t\t\tps = this.constPageSize;\n\t\t}\n\n\t\tthis.folder = folder;\n\n\t\tthis.video.src = null;\n\t\tthis.video.name = null;\n\n\t\tthis.getData(folder.component, folder.name, pn, ps);\n\t}\n\n\tgetData(component: string, folder: string, pageNumber: number, pageSize: number) {\n\t\tthis.service.getObjects(component, folder, pageNumber, pageSize).then(resultSet => {\n\t\t\tthis.page = resultSet;\n\n\t\t\tfor (let i = 0; i < this.page.results.length; ++i) {\n\t\t\t\tlet item = this.page.results[i];\n\n\t\t\t\tif (this.isImage(item)) {\n\t\t\t\t\tthis.getThumbnail(item);\n\t\t\t\t}\n\n\t\t\t}\n\t\t});\n\t}\n\n\tisImage(item: any): boolean {\n\t\tif (item.name.toLowerCase().indexOf(\".png\") !== -1 || item.name.toLowerCase().indexOf(\".jpg\") !== -1 ||\n\t\t\titem.name.toLowerCase().indexOf(\".jpeg\") !== -1 || item.name.toLowerCase().indexOf(\".tif\") !== -1 ||\n\t\t\titem.name.toLowerCase().indexOf(\".tiff\") !== -1) {\n\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpreviewImage(event: any, image: any): void {\n\t\t//        this.bsModalRef = this.modalService.show( ImagePreviewModalComponent, {\n\t\t//            animated: true,\n\t\t//            backdrop: true,\n\t\t//            ignoreBackdropClick: true,\n\t\t//            'class': 'image-preview-modal'\n\t\t//        } );\n\t\t//        this.bsModalRef.content.image = image;\n\t\t//        this.bsModalRef.content.src = event.target.src;\n\t}\n\n\ttoggleExcludeImage(event: any, image: any): void {\n\t\tthis.service.setExclude(image.id, !image.exclude).then(result => {\n\t\t\timage.exclude = result.exclude;\n\t\t});\n//\n//\n//\t\tif (image.exclude) {\n//\t\t\tthis.excludes.push(image.name);\n//\t\t}\n//\t\telse {\n//\t\t\tlet position = this.excludes.indexOf(image.name);\n//\t\t\tif (position > -1) {\n//\t\t\t\tthis.excludes.splice(position, 1);\n//\t\t\t}\n//\t\t}\n\t}\n\n\tisProcessable(item: any): boolean {\n\t\treturn this.metadataService.isProcessable(item.type);\n\t}\n\t\n\thandleErosPush(): void {\n\t  this.processRunning = true;\n\t\n\t  this.service.pushToEros(this.entity.id).then(data => {\n\t\t\tthis.processRunning = false;\n\t\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.showOrthoRerunMessage = false;\n\t\t\t\tthis.statusMessage = \"Your process is started.\";\n\t\t\t}, 30000);\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\thandleRunOrtho(): void {\n\n\t\t// this.notificationModalRef = this.modalService.show( NotificationModalComponent, {\n\t\t//     animated: true,\n\t\t//     backdrop: true,\n\t\t//     ignoreBackdropClick: true,\n\t\t//     class: 'modal-dialog-centered'\n\t\t// } );\n\t\t// this.notificationModalRef.content.message = \"Your ortho task is running for [\" + this.entity.name + \"]. You can view the current process and results on your tasks page.\";\n\t\t// this.notificationModalRef.content.submitText = 'OK';\n\n\n\t\tevent.stopPropagation();\n\n\t\tthis.confirmModalRef = this.modalService.show(BasicConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'confirmation-modal'\n\t\t});\n\t\tthis.confirmModalRef.content.message = 'Running this process will replace all output products for this ' + this.entity.type + '. Are you sure you want to re-process this data?';\n\t\t// this.bsModalRef.content.data = node;\n\t\tthis.confirmModalRef.content.type = 'DANGER';\n\t\tthis.confirmModalRef.content.submitText = \"Run Process\";\n\n\t\t(<BasicConfirmModalComponent>this.confirmModalRef.content).onConfirm.subscribe(data => {\n\t\t\tthis.processRunning = true;\n\t\t\tthis.showOrthoRerunMessage = true;\n\n\t\t\tthis.service.runOrtho(this.entity.id).then(data => {\n\t\t\t\tthis.processRunning = false;\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.showOrthoRerunMessage = false;\n\t\t\t\t\tthis.statusMessage = \"Your process is started.\";\n\t\t\t\t}, 30000);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\n\t}\n\n\thandleDownload(): void {\n\n\t\twindow.location.href = acp + '/project/download-all?id=' + this.folder.component + \"&key=\" + this.folder.name;\n\n\t\t//      this.service.downloadAll( data.id ).then( data => {\n\t\t//        \n\t\t//      } ).catch(( err: HttpErrorResponse ) => {\n\t\t//          this.error( err );\n\t\t//      } );\n\t}\n\t\n\thandleDownloadOdmAll(): void {\n\n    window.location.href = acp + '/project/download-odm-all?colId=' + this.entity.id;\n\n    //      this.service.downloadAll( data.id ).then( data => {\n    //        \n    //      } ).catch(( err: HttpErrorResponse ) => {\n    //          this.error( err );\n    //      } );\n  }\n\n\thandleDownloadVideo(src: string): void {\n\n\t\twindow.location.href = src;\n\t}\n\n\thandleDownloadFile(item: SiteEntity): void {\n\t\twindow.location.href = acp + '/project/download?id=' + this.folder.component + \"&key=\" + item.key;\n\t}\n\n\thandleSetMetadata(): void {\n\t\tlet modalRef = this.modalService.show(MetadataModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\t\tmodalRef.content.init(this.entity.id);\n\n\t\tmodalRef.content.onMetadataChange.subscribe(() => {\n\t\t\tthis.entity.metadataUploaded = true;\n\t\t});\n\t}\n\t\n\tcapitalize(str): string {\n        return str.replace(/^\\w/, c => c.toUpperCase());\n    }\n\n\n\tshowVideo(item: SiteEntity): void {\n\t\tthis.video.name = null;\n\t\tthis.video.src = null;\n\n\t\t// We have to null out the video and then set it after angular has refereshed\n\t\t// Otherwise the video tag does not register that the src has changed.\n\t\tsetTimeout(() => {\n\t\t\tthis.video.name = item.name;\n\t\t\tthis.video.src = acp + '/project/download?id=' + this.folder.component + \"&key=\" + item.key; // + \"#\" + Math.random();\n\t\t}, 200);\n\t}\n\n\tcloseVideo(): void {\n\t\tthis.video.name = null;\n\t\tthis.video.src = null;\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t  this.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\n\nimport { Product, ProductDetail } from '../model/management';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ProductService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\tgetProducts(id: string): Promise<Product[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\t\treturn this.http.get<Product[]>(acp + '/product/get-all', { params: params }).toPromise();\n\t}\n\n\tgetDetail(id: string, pageNumber: number, pageSize: number): Promise<ProductDetail> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\tparams = params.set('pageSize', pageSize.toString());\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<ProductDetail>(acp + '/product/detail', { params: params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tremove(id: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/product/remove', JSON.stringify({ id: id }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\ttogglePublish(id: string): Promise<ProductDetail> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<ProductDetail>(acp + '/product/toggle-publish', JSON.stringify({ id: id }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n}\n","<div *ngIf=\"!showSite\" class=\"modal-body\" style=\"padding-bottom: 0;\">\n  <div>\n    <div *ngIf=\"message != null\" class=\"error-container\">\n      <div class=\"label-holder\">\n        <strong>Error</strong>\n      </div>\n      <div class=\"holder\">\n        <div>\n          <p class=\"error-message\">{{message}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"product != null\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2>{{product.name}}</h2>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <ul class=\"breadcrumb\" style=\"margin-bottom: 10px;\">\n            <li *ngFor=\"let entity of product.entities\">\n              <span> {{entity.name}}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"\" *ngIf=\"thumbnails[product.id] != null\">\n            <a class=\"thumbnail non-clickable\">\n              <img class=\"\" [src]=\"thumbnails[product.id] | safeHtml\" (error)=\"getDefaultImgURL($event)\" alt=\"Image\">\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>Pilot Name: </label> &nbsp; {{product.pilotName}}\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>Date/Time: </label> &nbsp; {{product.dateTime | idmdate}}\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>Sensor Information:</label>\n          <table class=\"table table-bordered\">\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td><a [routerLink]=\"['/site/sensor', product.sensor.oid]\" target=\"_blank\">{{product.sensor.name}}</a></td>\n              </tr>\n              <tr>\n                <td>Type</td>\n                <td> {{product.sensor.sensorType.name}}</td>\n              </tr>\n              <tr>\n                <td>Model</td>\n                <td>{{product.sensor.model}}</td>\n              </tr>\n              <tr>\n                <td>Description</td>\n                <td>{{product.sensor.description}}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <!-- <div class=\"row\">\n      <div class=\"col-md-12\">\n        <label>Raw Images</label> \n      </div>\n    </div> -->\n      <div class=\"row\" style=\"background-color: #ececec;\">\n        <div class=\"col-md-12\">\n          <div id=\"image-list-container\">\n            <h3>Raw Images</h3>\n            <ul class=\"list-group row\">\n              <li *ngFor=\"let item of product.page.resultSet | paginate: { itemsPerPage: product.page.pageSize, currentPage: product.page.pageNumber, totalItems: product.page.count }\" class=\"list-group-item col-xs-3\" style=\"background:none;\">\n                <div class=\"\" *ngIf=\"thumbnails[item.id] != null\">\n                  <a class=\"thumbnail\" (click)=\"previewImage(item)\">\n                    <img [src]=\"thumbnails[item.id] | safeHtml\" (error)=\"getDefaultImgURL($event)\" alt=\"Image\">\n                    <div class=\"caption\">\n                      <h4 class=\"media-heading\">{{item.name}}</h4>\n                    </div>\n                  </a>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n      </div>\n\n\n      <div class=\"row\" style=\"background-color: #ececec;\">\n        <div class=\"btn-holder\" style=\"text-align: right;margin:20px 20px 20px 20px;\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Close</button>\n          <button type=\"button\" class=\"btn btn-secondary\" style=\"margin-left: 5px;\" (click)=\"handleDownload()\">Download ODM Files</button>\n          <button (click)=\"handleGoto()\" class=\"btn btn-primary\" style=\"margin-left: 5px;\">\n            Collection Details\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<leaf-modal *ngIf=\"showSite\" [initData]=\"initData\"></leaf-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { LeafModalComponent } from './leaf-modal.component'\nimport { ImagePreviewModalComponent } from '../modal/image-preview-modal.component';\n\nimport { ProductDetail, SiteEntity } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\nimport { ProductService } from '@site/service/product.service';\n\nimport {\n\tfadeInOnEnterAnimation,\n\tfadeOutOnLeaveAnimation,\n\tbounceInOnEnterAnimation,\n} from 'angular-animations';\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'product-modal',\n\ttemplateUrl: './product-modal.component.html',\n\tproviders: [LeafModalComponent],\n\tstyleUrls: [],\n\tanimations: [\n\t\tfadeInOnEnterAnimation(),\n\t\tfadeOutOnLeaveAnimation(),\n\t\tbounceInOnEnterAnimation()\n\t]\n})\nexport class ProductModalComponent implements OnInit {\n\tproduct: ProductDetail;\n\n\tthumbnails: any = {};\n\titems: any[] = [];\n\tshowSite: boolean = false;\n\tmessage: string;\n\tinitData: any;\n\trawImagePreviewModal: BsModalRef;\n\n\tconstructor(private pService: ProductService, private service: ManagementService, public bsModalRef: BsModalRef, private modalService: BsModalService) { }\n\n\tngOnInit(): void {\n\t}\n\n\tinit(product: ProductDetail): void {\n\t\tthis.product = product;\n\n\t\tif (this.product.imageKey) {\n\t\t\tthis.getThumbnail(this.product.id, this.product.imageKey);\n\t\t}\n\n\t\tthis.product.page.resultSet.forEach(pDocument => {\n\t\t\tthis.getThumbnail(pDocument.id, pDocument.key);\n\t\t});\n\t}\n\n\tcreateImageFromBlob(image: Blob, id: string) {\n\t\tlet reader = new FileReader();\n\t\treader.addEventListener(\"load\", () => {\n\t\t\t// this.imageToShow = reader.result;\n\t\t\tthis.thumbnails[id] = reader.result;\n\t\t}, false);\n\n\t\tif (image) {\n\t\t\treader.readAsDataURL(image);\n\t\t}\n\t}\n\n\tgetThumbnail(id: string, key: string): void {\n\n\t\tconst component: string = this.product.entities[this.product.entities.length - 1].id;\n\t\tconst rootPath: string = key.substr(0, key.lastIndexOf(\"/\"));\n\t\tconst fileName: string = /[^/]*$/.exec(key)[0];\n\t\tconst lastPeriod: number = fileName.lastIndexOf(\".\");\n\t\tconst thumbKey: string = rootPath + \"/thumbnails/\" + fileName.substr(0, lastPeriod) + \".png\";\n\n\t\tthis.service.download(component, thumbKey, false).subscribe(blob => {\n\t\t\tthis.createImageFromBlob(blob, id);\n\t\t}, error => {\n\t\t\tconsole.log(error);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tthis.pService.getDetail(this.product.id, pageNumber, 20).then(detail => {\n\t\t\tthis.init(detail);\n\t\t});\n\t}\n\n\tgetDefaultImgURL(event: any): void {\n\t\tevent.target.src = acp + \"/net/geoprism/images/thumbnail-default.png\";\n\t}\n\n\thandleGoto(): void {\n\t\tconst entity = this.product.entities[this.product.entities.length - 1];\n\t\tconst breadcrumbs = this.product.entities;\n\n\n\t\tthis.service.getItems(entity.id, null).then(nodes => {\n\t\t\tthis.initData = { \"entity\": entity, \"folders\": nodes, \"previous\": breadcrumbs }\n\n\t\t\tthis.showSite = true;\n\t\t});\n\n\t}\n\n\tpreviewImage(image: SiteEntity): void {\n\n\t\tthis.rawImagePreviewModal = this.modalService.show(ImagePreviewModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: false,\n\t\t\t'class': 'image-preview-modal'\n\t\t});\n\t\tthis.rawImagePreviewModal.content.init(image.component, image.key);\n\t}\n\n    handleDownload(): void {\n      //const entity = this.product.entities[this.product.entities.length - 1];        \n\n      window.location.href = acp + '/product/get-odm-all?id=' + this.product.id;\n    }\n\n\n\terror(err: HttpErrorResponse): void {\n\t  this.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"list-group\">\n\n    <div *ngIf=\"products.length < 1\" [@fadeInOnEnter] style=\"padding: 10px;text-align: center;color: grey;\">\n        <h4>\n          <span *ngIf=\"loading\">\n            <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i>\n            Loading Products\n          </span>\n          <p *ngIf=\"!loading\">No data found</p>\n        </h4>\n    </div>\n    \n    <div *ngFor=\"let product of products\" class=\"list-group-item\">\n        <div class=\"card card-default\" [@fadeInOnEnter] [@fadeOutOnLeave]>\n            <div class=\"card-body\">\n                <h5 class=\"card-title\" style=\"color:#a0a0a0\">\n                    {{product.name}}\n                </h5>\n\n                <ul class=\"breadcrumb\" style=\"margin: 5px 0 5px 0;\">\n                    <li *ngFor=\"let entity of product.entities\">\n                        <span> {{entity.name}} </span>\n                    </li>\n                </ul>\n\n                <div class=\"card-left\" style=\"width:calc(100% - 7.2em); padding:0px;\">\n                    \n                    <!-- <img src=\"https://via.placeholder.com/150x75\" class=\"img-responsive\"> -->\n\n                    <div *ngIf=\"thumbnails[product.id] != null\">\n                        <a class=\"thumbnail\" (click)=\"previewImage(product)\">\n                            <img class=\"\" [src]=\"thumbnails[product.id] | safeHtml\" (error)=\"getDefaultImgURL($event)\" alt=\"Image\">\n                        </a>\n                    </div>\n                </div>\n                <div class=\"card-right\" style=\"padding:0px; width: 7.2em;\">\n                    <ul style=\"list-style: none;padding: 0;\">\n                        <li style=\"padding: 3px 0 3px 0; min-width:6em;\">\n                            <a class=\"fa fa-globe\" [style]=\"hasOrthoLayer(product) ? '' : 'cursor:not-allowed;'\" aria-hidden=\"true\" (click)=\"handleMapIt(product)\" title=\"View the Orthomosaic generated from the raw data using ODM.\">Aerial</a>\n                            <i *ngIf=\"product.orthoMapped\" [@bounceInOnEnter] [@bounceOutOnLeave] class=\"fas fa-check\" style=\"color: #007276;float: right;vertical-align: middle;line-height: 20px;\"></i>\n                        </li>\n                        <li style=\"padding: 3px 0 3px 0; min-width:7.2em;\">\n                            <a class=\"fa fa-industry\" [style]=\"hasDemLayer(product) ? '' : 'cursor:not-allowed;'\" aria-hidden=\"true\" (click)=\"handleMapDem(product)\" title=\"View the DEM hillshade.\">Hillshade</a>\n                            <i *ngIf=\"product.demMapped\" [@bounceInOnEnter] [@bounceOutOnLeave] class=\"fas fa-check\" style=\"color: #007276;float: right;vertical-align: middle;line-height: 20px;\"></i>\n                        </li>\n                        <li style=\"padding: 3px 0 3px 0;\">\n                            <a class=\"fa fa-cube\" [style]=\"product.hasPointcloud ? '' : 'cursor:not-allowed;'\" aria-hidden=\"true\" (click)=\"handlePointcloud(product)\" title=\"View the 3D pointcloud for this product using the Potree viewer.\">3D</a>\n                        </li>\n                        <li style=\"padding: 3px 0 3px 0;\">\n                            <a class=\"fa fa-info-circle\" (click)=\"handleGetInfo(product)\" title=\"View more information about this product, including raw data.\">Get Info</a>\n                        </li>\n                        <li style=\"padding: 3px 0 3px 0;\">\n                            <a class=\"fa fa-trash-alt\" (click)=\"handleDelete(product, $event)\" title=\"Deletes the product and all associated data and public map services.\">Delete</a>\n                        </li>\n                        <li *ngIf=\"product.published\" style=\"padding: 3px 0 3px 0;\">\n                            <a class=\"fa fa-arrow-alt-circle-down\" (click)=\"handleTogglePublish(product)\" title=\"Unpublishes the layer from the public mosaic. This layer will no longer be publicly accessible from Geoserver.\">Unpublish</a>\n                        </li>\n                        <li *ngIf=\"!product.published\" style=\"padding: 3px 0 3px 0;\">\n                            <a class=\"fa fa-arrow-alt-circle-up\" (click)=\"handleTogglePublish(product)\" title=\"Publish the product to the publish mosaic. The aerial and hillshade services will be publicly accessible.\">Publish</a>\n                        </li>\n                    </ul>             \n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, Input, Output, EventEmitter, SimpleChanges } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\nimport { ImagePreviewModalComponent } from '../modal/image-preview-modal.component';\nimport { ProductModalComponent } from '../modal/product-modal.component';\n\nimport { Product } from '@site/model/management';\nimport { ProductService } from '@site/service/product.service';\nimport { ManagementService } from '@site/service/management.service';\n\nimport {\n    fadeInOnEnterAnimation,\n    fadeOutOnLeaveAnimation,\n    bounceInOnEnterAnimation,\n    bounceOutOnLeaveAnimation\n} from 'angular-animations';\n\ndeclare var acp: string;\n\n@Component({\n    selector: 'product-panel',\n    templateUrl: './product-panel.component.html',\n    animations: [\n        fadeInOnEnterAnimation(),\n        fadeOutOnLeaveAnimation(),\n        bounceInOnEnterAnimation(),\n        bounceOutOnLeaveAnimation()\n    ]\n})\nexport class ProductPanelComponent {\n\n    @Input() id: string;\n\n    @Output() public toggleMapOrtho = new EventEmitter<Product>();\n    \n    @Output() public toggleMapDem = new EventEmitter<Product>();\n\n    /* \n     * List of products for the current node\n     */\n    products: Product[] = [];\n\n    thumbnails: any = {};\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n    \n    loading: boolean = false;\n\n\n    constructor(private pService: ProductService, private mService: ManagementService, private modalService: BsModalService) { }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        this.refreshProducts(changes['id'].currentValue);\n    }\n\n    refreshProducts(id: string): void {\n        this.products = [];\n        this.thumbnails = {};\n        \n        this.loading = true;\n\n        this.pService.getProducts(id).then(products => {\n            this.products = products;\n            this.loading = false;\n\n            this.products.forEach(product => {\n                this.getThumbnail(product);\n            });\n        });\n    }\n\n    createImageFromBlob(image: Blob, product: Product) {\n        let reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n            // this.imageToShow = reader.result;\n            this.thumbnails[product.id] = reader.result;\n        }, false);\n\n        if (image) {\n            reader.readAsDataURL(image);\n        }\n    }\n    \n    hasOrthoLayer(product: Product): boolean {\n      let len = product.layers.length;\n      for (let i = 0; i < len; ++i)\n      {\n        if (product.layers[i].classification === 'ORTHO' && product.layers[i].key != null && product.layers[i].key.length > 0)\n        {\n          return true;\n        }\n      }\n      \n      return false;\n    }\n    \n    hasDemLayer(product: Product): boolean {\n      let len = product.layers.length;\n      for (let i = 0; i < len; ++i)\n      {\n        if ((product.layers[i].classification === 'DEM_DSM' || product.layers[i].classification === 'DEM_DTM') && product.layers[i].key != null && product.layers[i].key.length > 0)\n        {\n          return true;\n        }\n      }\n      \n      return false;\n    }\n\n    getThumbnail(product: Product): void {\n\n        // imageKey only exists if an image actually exists on s3\n        if (product.imageKey) {\n            const component: string = product.entities[product.entities.length - 1].id;\n            const rootPath: string = product.imageKey.substr(0, product.imageKey.lastIndexOf(\"/\"));\n            const fileName: string = /[^/]*$/.exec(product.imageKey)[0];\n            const lastPeriod: number = fileName.lastIndexOf(\".\");\n            const thumbKey: string = rootPath + \"/thumbnails/\" + fileName.substr(0, lastPeriod) + \".png\";\n\n            this.mService.download(component, thumbKey, false).subscribe(blob => {\n                this.createImageFromBlob(blob, product);\n            }, error => {\n                console.log(error);\n\n                this.thumbnails[product.id] = acp + \"/net/geoprism/images/thumbnail-default.png\";\n\n            });\n        }\n        else {\n            this.thumbnails[product.id] = acp + \"/net/geoprism/images/thumbnail-default.png\";\n        }\n    }\n\n    getDefaultImgURL(event: any): void {\n        event.target.src = acp + \"/net/geoprism/images/thumbnail-default.png\";\n    }\n\n    handleMapIt(product: Product): void {\n      if (this.hasOrthoLayer(product))\n      {\n        this.toggleMapOrtho.emit(product);\n      }\n    }\n    \n    handleMapDem(product: Product): void {\n      if (this.hasDemLayer(product))\n      {\n        this.toggleMapDem.emit(product);\n      }\n    }\n    \n    handlePointcloud(product: Product): void {\n      if (product.hasPointcloud)\n      {\n        let componentId: string = product.entities[product.entities.length-1].id;\n      \n        window.open(acp + \"/pointcloud/\" + componentId + \"/potree\");\n      }\n    }\n\n    handleDelete(product: Product, event: any): void {\n\n        event.stopPropagation();\n\n        this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.message = 'Are you sure you want to delete [' + product.name + ']?';\n        this.bsModalRef.content.data = product;\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = 'Delete';\n\n        (<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.remove(data);\n        });\n    }\n\n    remove(product: Product): void {\n        this.pService.remove(product.id).then(response => {\n            this.products = this.products.filter((n: any) => n.id !== product.id);\n        });\n    }\n\n    previewImage(product: Product): void {\n        const component: string = product.entities[product.entities.length - 1].id;\n\n        this.bsModalRef = this.modalService.show(ImagePreviewModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: false,\n            'class': 'image-preview-modal'\n        });\n        this.bsModalRef.content.init(component, product.imageKey);\n    }\n\n    handleGetInfo(product: Product): void {\n        this.pService.getDetail(product.id, 1, 20).then(detail => {\n            this.bsModalRef = this.modalService.show(ProductModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true,\n                'class': 'product-info-modal'\n            });\n            this.bsModalRef.content.init(detail);\n        });\n    }\n\n    handleTogglePublish(product: Product): void {\n        this.pService.togglePublish(product.id).then(p => {\n            const mapIt:boolean = product.orthoMapped;\n            const demMapped:boolean = product.demMapped;\n            \n            if (mapIt) {\n                this.toggleMapOrtho.emit(product);\n            }\n            if (demMapped) {\n                this.toggleMapDem.emit(product);\n            }\n\n            product.published = p.published;\n            product.layers = p.layers;\n\n            if (mapIt) {\n                this.toggleMapOrtho.emit(product);\n            }\n            if (demMapped) {\n                this.toggleMapDem.emit(product);\n            }\n        });\n    }\n}\n","<div *ngIf=\"entity != null\" class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"error-container\">\n    <div class=\"label-holder\">\n      <strong>Error</strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"error-message\">{{message}}</p>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"newInstance\" class=\"modal-title-container\">\n      <h3 >Add new {{entity.type}}</h3>\n  </div>\n\n  <form #ngForm=\"ngForm\">\n    <div *ngFor=\"let attribute of attributes\">\n      <div *ngIf=\"evaluate(attribute)\" class=\"form-group\">\n        <div *ngIf=\"attribute.type === 'text'\">\n          <label>{{attribute.label}}</label>\n          <input [(ngModel)]=\"entity[attribute.name]\" [name]=\"attribute.name\" type=\"input\" class=\"form-control\" [disabled]=\"attribute.readonly\" [placeholder]=\"attribute.label\" [required]=\"attribute.required\" />\n        </div>\n        <div *ngIf=\"attribute.type === 'list'\">\n          <label>{{attribute.label}}</label>\n          <select [(ngModel)]=\"entity[attribute.name]\" [name]=\"attribute.name\" type=\"input\" [disabled]=\"attribute.readonly\" [required]=\"attribute.required\">\n            <option></option>\n            <option *ngFor=\"let option of attribute.options\" [value]=\"option.value\">{{option.label}}</option>\n          </select>\n        </div>\n        <div *ngIf=\"attribute.type === 'text-area'\">\n          <label>{{attribute.label}}</label>\n          <textarea [(ngModel)]=\"entity[attribute.name]\" [name]=\"attribute.name\"  [disabled]=\"attribute.readonly\" class=\"form-control\" [required]=\"attribute.required\">\n          </textarea>\n        </div>\n        <div *ngIf=\"attribute.type === 'point'\">          \n          <map-attribute [(site)]=\"entity\" [center]=\"center\" [zoom]=\"zoom\" ></map-attribute>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"form-group\" *ngIf=\"entity.type === 'Collection' && !newInstance\">\n        <label>Privilege </label>\n        \n        <select style=\"padding:6px 10px;font-size:14px;\" [(ngModel)]=\"entity.privilegeType\" name=\"collection-privilege\" type=\"input\" [required]=\"true\" \n           [disabled]=\"admin === false || entity.ownerName !== userName\">\n            <option value=\"OWNER\">Owner</option>\n            <option value=\"AGENCY\">Agency</option>\n            <option value=\"PUBLIC\">Public</option>\n        </select>\n\n    </div>\n\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Cancel</button>\n      <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\" [disabled]=\"!ngForm.valid\">Apply</button>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { LngLat } from 'mapbox-gl';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { SiteEntity, AttributeType } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\n\n\n@Component({\n\tselector: 'entity-modal',\n\ttemplateUrl: './entity-modal.component.html',\n\tstyleUrls: []\n})\nexport class EntityModalComponent implements OnInit {\n    /*\n     * parent id of the node being created\n     */\n\tparentId: string;\n\tuserName: string = \"\";\n\n\tentity: SiteEntity;\n\n\tattributes: AttributeType[];\n\n\tadmin: boolean = false;\n\n\tnewInstance: boolean = false;\n\n\tmessage: string = null;\n\n\tcenter: LngLat = null;\n\tzoom: number = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n\tpublic onNodeChange: Subject<SiteEntity>;\n\n\tconstructor(private service: ManagementService, public bsModalRef: BsModalRef) { }\n\n\tngOnInit(): void {\n\t\tthis.onNodeChange = new Subject();\n\t}\n\n\tinit(newInstance: boolean, userName: string, admin: boolean, entity: SiteEntity, attributes: AttributeType[], center: LngLat, zoom: number) {\n\t\tthis.newInstance = newInstance;\n\t\tthis.userName = userName;\n\t\tthis.admin = admin;\n\t\tthis.entity = entity;\n\t\tthis.attributes = attributes;\n\t\tthis.center = center;\n\t\tthis.zoom = zoom;\n\t}\n\n\thandleOnSubmit(): void {\n\t\tthis.message = null;\n\n\t\tif (this.entity.type !== 'Site' || this.entity.geometry != null) {\n\t\t\tif (this.newInstance) {\n\t\t\t\tthis.service.applyWithParent(this.entity, this.parentId).then(data => {\n\t\t\t\t\tthis.onNodeChange.next(data);\n\t\t\t\t\tthis.bsModalRef.hide();\n\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\tthis.error(err);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.service.update(this.entity).then(node => {\n\t\t\t\t\tthis.onNodeChange.next(node);\n\n\t\t\t\t\tthis.bsModalRef.hide();\n\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\tconsole.log(err);\n\n\t\t\t\t\tthis.error(err);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.message = \"Sites require a location\";\n\t\t}\n\t}\n\n\tevaluate(attribute: AttributeType): boolean {\n\n\t\tif (this.newInstance && attribute.readonly) {\n\t\t\treturn false;\n\t\t}\n\t\telse if (attribute.condition != null) {\n\t\t\treturn this.service.evaluate(attribute.condition, this.entity);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t  this.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div>\n  <div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n\n\n    <div *ngIf=\"message != null && message.length > 0\" class=\"row error-container\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <div class=\"label-holder\">\n          <strong style=\"color:#8c0000;\">Error</strong>\n        </div>\n        <div class=\"holder\">\n          <div>\n            <p class=\"error-message\">{{message}}</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n\n    <div class=\"row\" *ngIf=\"!existingTask\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <ol class=\"list-group list-group-horizontal\">\n          <!-- \n          <li class=\"list-group-item\" [ngClass]=\"{'list-group-item-success':page.type === 'FILE'}\" >Upload</li>\n -->\n\n          <modal-step-indicator [stepConfig]=\"modalStepConfig\"></modal-step-indicator>\n\n          <!-- <li class=\"list-group-item\" [ngClass]=\"{'list-group-item-success':page.type === 'CATEGORY'}\">Categories</li> -->\n          <!-- <li class=\"list-group-item\" [ngClass]=\"{'list-group-item-success':page.type === 'SUMMARY'}\">Finalize</li> -->\n        </ol>\n      </div>\n    </div>\n\n    <div class=\"row\" *ngIf=\"!existingTask && labels.length > 0\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <ul class=\"breadcrumb\">\n          <li [@fadeInOnEnter] *ngFor=\"let label of labels\">\n            <span> {{label}}</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <!-- Section for each page -->\n    <div class=\"row\" *ngIf=\"page.type === 'CATEGORY'\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n\n        <div class=\"form-group\">\n          <label [for]=\"page.selection.type\">{{page.selection.type}}:</label>\n\n          <div *ngIf=\"!page.selection.isNew\" class=\"row\">\n            <div class=\"col-md-8\">\n              <select [name]=\"page.selection.type\" [(ngModel)]=\"page.selection.value\" [disabled]=\"page.selection.isNew\"\n                required>\n                <option></option>\n                <option *ngFor=\"let option of page.options\" [value]=\"option.id\">{{option.name}}</option>\n              </select>\n            </div>\n            <div class=\"col-md-2\">\n              <button *ngIf=\"!page.selection.isNew\" type=\"button btn btn-primary\" class=\"btn btn-primary\"\n                (click)=\"setIsNew(true)\">\n                Add\n              </button>\n            </div>\n          </div>\n        </div>\n        <div [@fadeInOnEnter] *ngIf=\"page.selection.isNew\" class=\"form-group\">\n          <div class=\"row\">\n            <div class=\"col-md-8\">\n              <input autofocus [(ngModel)]=\"page.selection.label\" name=\"label\" type=\"input\" class=\"form-control\"\n                [placeholder]=\"page.selection.type + ' name...'\" required />\n            </div>\n            <div class=\"col-md-2\">\n              <button type=\"button btn btn-primary\" class=\"btn btn-primary\" (click)=\"setIsNew(false)\">\n                Cancel\n              </button>\n            </div>\n          </div>\n          <div [@fadeInOnEnter] class=\"row\" *ngIf=\"hasField('collectionDate')\">\n            <div class=\"col-md-8\">\n              <label for=\"platform\" style=\"margin-top: 10px;\">Collection Date:</label>\n              <input [(ngModel)]=\"page.selection.collectionDate\" name=\"collectionDate\" type=\"date\" class=\"form-control\" required />\n            </div>\n          </div>\n\n          <metadata-page *ngIf=\"hasField('uav')\" [(page)]=\"page\"></metadata-page>\n        </div>\n      </div>\n    </div>\n\n    <!-- Summary page -->\n    <div [@fadeInOnEnter] class=\"row\" *ngIf=\"page.type === 'SUMMARY' && !existingTask && currentTask == null\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n\n        <div *ngFor=\"let selection of selections\" class=\"form-group\">\n          <label [for]=\"selection.type\">{{selection.type}}:</label>\n          <input [(ngModel)]=\"selection.label\" [name]=\"selection.type\" type=\"input\" class=\"form-control\" disabled\n            required />\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"outFileName\">Output Product Name Prefix</label>\n          <input [(ngModel)]=\"values.outFileName\" name=\"outFileName\" type=\"input\" class=\"form-control\"\n            placeholder=\"Output product name prefix...\" />\n        </div>\n        <div class=\"form-group\">\n          <boolean-field [value]=\"processUpload\" label=\"Generate products from raw images\"\n            (valueChange)=\"updateProcessUpload($event)\"></boolean-field>\n        </div>\n      </div>\n    </div>\n\n    <!-- <div [@fadeInOnEnter] class=\"row\" *ngIf=\"finishedTask != null\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <a (click)=\"handleAddMetadata(finishedTask)\">Add Metadata</a>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div> -->\n\n\n    <div [@fadeInOnEnter] [hidden]=\"page.type !== 'FILE' && page.type !== 'SUMMARY'\" class=\"row\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n\n        <!-- Existing task panel -->\n        <div *ngIf=\"existingTask && !currentTask\">\n          <div class=\"panel panel-warning\" style=\"margin: 30px 0 30px 0;\">\n            <div class=\"panel-heading\" style=\"font-size: 20px;\">Partial Upload Detected</div>\n            <div class=\"panel-body\">\n              <h4>A partial upload was detected. You can either cancel that partial upload or attempt to\n                continue.</h4>\n              <h4>\n                <b>To continue an upload</b>\n                please re-upload your file and we will try our best to continue where you left off.\n              </h4>\n\n              <hr>\n              <button type=\"button\" class=\"btn btn-danger\" style=\"margin-top: 20px;\" (click)=\"removeUpload($event)\">\n                <i class=\"icon-upload icon-white\"></i>\n                Cancel Upload\n              </button>\n              <!-- \n                            <button type=\"button\" class=\"btn btn-primary\" style=\"margin-top: 20px;\"\n                                (click)=\"showUploadPanel()\">\n                                <i class=\"icon-upload icon-white\"></i>\n                                Continue Upload\n                            </button>\n -->\n            </div>\n          </div>\n        </div> <!-- End existing task panel -->\n\n        <!-- Task finished upload notification -->\n        <div *ngFor=\"let note of taskFinishedNotifications\" class=\"panel panel-success\" style=\"margin: 30px 0 30px 0;\">\n          <div class=\"panel-heading\" style=\"font-size: 20px;\">\n            Upload Details\n            <i class=\"fa fa-times btn btn-close pull-right\" style=\"min-width:20px;padding:0;line-height: 27px;\"\n              (click)=\"closeTaskFinishedNotification(note.id)\"></i>\n          </div>\n          <div class=\"panel-body\">\n            <h4>\n              Status:\n              <b> Upload successfully completed </b>\n            </h4>\n            <h4>\n              Message:\n              <b> {{note.message}} </b>\n              <!-- You can view your uploads on the <a href=\"management#/site/tasks\" >Workflow Task page</a>. -->\n            </h4>\n          </div>\n        </div> <!-- End task finished upload notification -->\n\n        <!-- Current upload indicator -->\n        <div class=\"\" [hidden]=\"!uploadVisible\">\n\n          <div class=\"well\">\n            <h4>All files uploaded through the upload wizard must</h4>\n            <ul>\n              <li>be compressed into a .zip or .tar.gz format </li>\n              <li>not contain spaces or special characters such as <,>, -, +, =, !, @, #, $, %, ^, &, *, ?,/,\\ or\n                  apostrophes in any file name</li>\n            </ul>\n\n            <h4>\n              Supported File Formats\n            </h4>\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>Type</th>\n                  <th>Formats</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>RGB Image Data</td>\n                  <td>jpg, jpeg, png</td>\n                </tr>\n                <tr>\n                  <td>Multispectral Image Data</td>\n                  <td>tif</td>\n                </tr>\n                <tr>\n                  <td>Video</td>\n                  <td>mp4</td>\n                </tr>\n              </tbody>\n            </table>\n\n          </div>\n\n          <div *ngIf=\"currentTask\" class=\"panel panel-warning\" style=\"margin: 30px 0 30px 0;\">\n            <div class=\"panel-heading\" style=\"font-size: 20px;\">Upload Details</div>\n            <div class=\"panel-body\">\n              <h4>\n                Status:\n                <b> {{currentTask.status}} </b>\n              </h4>\n              <h4>\n                Message:\n                <b> {{currentTask.message}} </b>\n              </h4>\n              <h4>\n                Upload Started On:\n                <b> {{currentTask.createDate | idmdate}} </b>\n              </h4>\n              <h4>\n                Last Updated:\n                <b> {{currentTask.lastUpdateDate | idmdate}} </b>\n              </h4>\n              <h4>\n                Elapsed Time:\n                <b> {{uploadCounter}} </b>\n              </h4>\n            </div>\n          </div>\n\n          <div class=\"uploader-container\" style=\"margin-top: 20px;\" #uploader></div>\n        </div> <!-- End current upload indicator -->\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n\n    <!-- <div [@fadeInOnEnter] class=\"row\" *ngIf=\"currentTask != null\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <a (click)=\"handleAddMetadata(currentTask)\">Add Metadata</a>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div> -->\n\n  </div>\n  <div class=\"modal-footer\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"btn-holder\" style=\"text-align: right;\">\n          <button type=\"button\" [disabled]=\"disabled\" (click)=\"close()\" [disabled]=\"disabled\" class=\"btn btn-default\"\n            role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n            <span class=\"ui-button-text\">Close</span>\n          </button>\n\n          <button *ngIf=\"!existingTask && page.index > 0\" type=\"button btn btn-primary\" [disabled]=\"disabled\"\n            class=\"btn btn-secondary\" (click)=\"handleBackPage()\">\n            <i class=\"icon-upload icon-white\"></i>\n            Back\n          </button>\n\n          <button *ngIf=\"!existingTask && page.index < (pages.length - 1)\" type=\"button btn btn-primary\"\n            [disabled]=\"!isPageValid(page) || disabled\" class=\"btn btn-primary\" (click)=\"handleNextPage()\">\n            <i class=\"icon-upload icon-white\"></i>\n            Next\n          </button>\n\n          <button *ngIf=\"page.index === (pages.length - 1)\" type=\"button btn btn-primary\"\n            [disabled]=\"!isPageValid(page) || disabled\" class=\"btn btn-primary\" (click)=\"handleUpload()\">\n            <i class=\"icon-upload icon-white\"></i>\n            Upload\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n</div>","import { Component, OnInit, ViewChild, ElementRef, KeyValueDiffers, HostListener } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\n\nimport { interval, Observable, Observer, Subject } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\n//use Fine Uploader UI for traditional endpoints\nimport { FineUploader, UIOptions } from 'fine-uploader';\n\nimport { ErrorHandler, BasicConfirmModalComponent } from '@shared/component';\n\nimport { Sensor } from '@site/model/sensor';\nimport { Platform } from '@site/model/platform';\nimport { SiteEntity, UploadForm, Task, Selection } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\nimport { MetadataService } from '@site/service/metadata.service';\nimport { MetadataModalComponent } from './metadata-modal.component';\n\nimport { StepConfig } from '@shared/modal/step-indicator/modal-step-indicator'\n\nimport {\n\tfadeInOnEnterAnimation,\n\tfadeOutOnLeaveAnimation\n} from 'angular-animations';\n\ndeclare var acp: string;\n\nexport class Page {\n\tindex: number;\n\tselection: Selection;\n\toptions: SiteEntity[];\n\ttype: string\n};\n\n@Component({\n\tselector: 'upload-modal',\n\ttemplateUrl: './upload-modal.component.html',\n\tstyleUrls: ['./upload-modal.component.css'],\n\tanimations: [\n\t\tfadeInOnEnterAnimation(),\n\t\tfadeOutOnLeaveAnimation()\n\t]\n})\nexport class UploadModalComponent implements OnInit {\n\tobjectKeys = Object.keys;\n\n\timportedValues: boolean = false;\n\n\tmessage: string = \"\";\n\n\t/* \n\t * Form values\n\t */\n\tvalues = { create: false } as UploadForm;\n\n\t/*\n\t * FineUploader for uploading large files\n\t */\n\tuploader = null as FineUploader;\n\n\tdisabled: boolean = false;\n\ttaskStatusMessages: string[] = [];\n\tcurrentTask: Task = null;\n\tfinishedTask: Task = null;\n\texistingTask: boolean = false;\n\ttaskPolling: any;\n\tpollingIsSet: boolean = false;\n\tuploadVisible: boolean = true;\n\tselectedContinue: boolean = false;\n\tuploadCounter: string = \"00:00:00\";\n\tuplodeCounterInterfal: any;\n\tdiffer: any;\n\tshowFileSelectPanel: boolean = false;\n\ttaskFinishedNotifications: any[] = [];\n\n\n\t/*\n\t * Flag indicating if the upload should be processed by ODM\n\t */\n\tprocessUpload: boolean = true;\n\n\t/*\n\t * List of hierarchies\n\t */\n\thierarchy: string[] = [];\n\n\t/*\n\t * List of selections: One per hierarchy type\n\t */\n\tselections: Selection[] = [];\n\n\t/*\n\t * List of previous selection labels\n\t */\n\tlabels: string[] = [];\n\n\t/*\n\t * List of pages\n\t */\n\tpages: Page[] = [{\n\t\tindex: 0,\n\t\tselection: null,\n\t\toptions: [],\n\t\ttype: 'FILE',\n\t}];\n\n\t/*\n\t * Current page  \n\t */\n\thierarchyChange: boolean = false;\n\n\t/*\n\t * Current page  \n\t */\n\tpage: Page = this.pages[0];\n\n\tsensors: Sensor[] = [];\n\tplatforms: Platform[] = [];\n\n\tpublic onUploadComplete: Subject<any>;\n\n\tpublic onHierarchyChange: Subject<boolean>;\n\n\t// modalState: any = {\"state\":'category', \"attribute\":\"\", \"termOption\":\"\"}\n\n\tmodalStepConfig: StepConfig = {\n\t\t\"steps\": [\n\t\t\t{ \"label\": \"Category\", \"active\": true, \"enabled\": true },\n\t\t\t{ \"label\": \"Final\", \"active\": true, \"enabled\": false }\n\t\t]\n\t};\n\n\tconstructor(private service: ManagementService, private metadataService: MetadataService, private modalService: BsModalService, public bsModalRef: BsModalRef, differs: KeyValueDiffers) {\n\t\tthis.differ = differs.find([]).create();\n\t}\n\n\t@ViewChild('uploader') set content(elem: ElementRef) {\n\n\t\tconst that = this;\n\n\t\tif (elem != null && this.uploader == null) {\n\n\t\t\tlet uiOptions: UIOptions = {\n\t\t\t\tdebug: false,\n\t\t\t\tautoUpload: false,\n\t\t\t\tmultiple: false,\n\t\t\t\telement: elem.nativeElement,\n\t\t\t\ttemplate: 'qq-template',\n\t\t\t\trequest: {\n\t\t\t\t\tendpoint: acp + \"/file/upload\",\n\t\t\t\t\tforceMultipart: true\n\t\t\t\t},\n\t\t\t\tresume: {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\trecordsExpireIn: 1\n\t\t\t\t},\n\t\t\t\tchunking: {\n\t\t\t\t\tenabled: true\n\t\t\t\t},\n\t\t\t\tretry: {\n\t\t\t\t\tenableAuto: true\n\t\t\t\t},\n\t\t\t\ttext: {\n\t\t\t\t\tdefaultResponseError: \"Upload failed\"\n\t\t\t\t},\n\t\t\t\tfailedUploadTextDisplay: {\n\t\t\t\t\tmode: 'none'\n\t\t\t\t\t//responseProperty: 'error'\n\t\t\t\t},\n\t\t\t\tvalidation: {\n\t\t\t\t\tallowedExtensions: ['zip', 'tar.gz']\n\t\t\t\t},\n\t\t\t\tshowMessage: function (message: string) {\n\t\t\t\t\t// \n\t\t\t\t},\n\t\t\t\tcallbacks: {\n\t\t\t\t\tonUpload: function (id: any, name: any): void {\n\t\t\t\t\t\tthat.disabled = true;\n\t\t\t\t\t\tthis.finishedTask = null;\n\n\t\t\t\t\t\tthat.countUpload(that);\n\n\t\t\t\t\t\tif (that.message && that.message.length > 0) {\n\t\t\t\t\t\t\tthat.message = \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonProgress: function (id: any, name: any, uploadedBytes: any, totalBytes: any): void {\n\t\t\t\t\t},\n\t\t\t\t\tonUploadChunk: function (id: any, name: any, chunkData: any): void {\n\t\t\t\t\t},\n\t\t\t\t\tonUploadChunkSuccess: function (id: any, chunkData: any, responseJSON: any, xhr: any): void {\n\n\t\t\t\t\t\tif (responseJSON.message && responseJSON.message.currentTask && !that.currentTask) {\n\t\t\t\t\t\t\tthat.currentTask = responseJSON.message.currentTask;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (that.currentTask && !that.pollingIsSet) {\n\t\t\t\t\t\t\tthat.pollingIsSet = true;\n\n\t\t\t\t\t\t\tthat.taskPolling = interval(2000).pipe(switchMap(() => {\n\t\t\t\t\t\t\t\tif (that.currentTask) {\n\t\t\t\t\t\t\t\t\treturn that.service.task(that.currentTask.oid);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t\t.pipe(map((data) => data))\n\t\t\t\t\t\t\t\t.subscribe((data) => {\n\t\t\t\t\t\t\t\t\tthat.currentTask = data.task\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonComplete: function (id: any, name: any, responseJSON: any, xhrOrXdr: any): void {\n\t\t\t\t\t\tthat.disabled = false;\n\t\t\t\t\t\tthat.finishedTask = that.currentTask;\n\t\t\t\t\t\tthat.currentTask = null;\n\t\t\t\t\t\tthat.existingTask = false;\n\n\t\t\t\t\t\tif (!that.hierarchyChange) {\n\t\t\t\t\t\t\tfor (let i = 0; i < that.selections.length; i++) {\n\t\t\t\t\t\t\t\tif (that.selections[i].isNew) {\n\t\t\t\t\t\t\t\t\tthat.hierarchyChange = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (that.taskPolling) {\n\t\t\t\t\t\t\tthat.taskPolling.unsubscribe();\n\t\t\t\t\t\t\tthat.pollingIsSet = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.clearStoredFiles();\n\n\t\t\t\t\t\tclearInterval(that.uplodeCounterInterfal);\n\n\t\t\t\t\t\tif (responseJSON.success) {\n\t\t\t\t\t\t\t// let notificationMsg = \"\";\n\t\t\t\t\t\t\t// notificationMsg = \"Your uploaded data is being processed into final image products. You can view the progress at the Workflow Tasks page.\";\n\n\t\t\t\t\t\t\t// that.taskFinishedNotifications.push({\n\t\t\t\t\t\t\t//     'id': id,\n\t\t\t\t\t\t\t//     \"message\": notificationMsg\n\t\t\t\t\t\t\t// })\n\n\t\t\t\t\t\t\tthat.bsModalRef.hide();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthat.onUploadComplete.next();\n\t\t\t\t\t},\n\t\t\t\t\tonCancel: function (id: number, name: string) {\n\t\t\t\t\t\t//that.currentTask = null;\n\n\t\t\t\t\t\tif (that.currentTask && that.currentTask.uploadId) {\n\t\t\t\t\t\t\tthat.service.removeTask(that.currentTask.uploadId)\n\t\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t\tthis.clearStoredFiles();\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch((err: HttpErrorResponse) => {\n\t\t\t\t\t\t\t\t\tthis.error(err);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (that.existingTask) {\n\t\t\t\t\t\t\tthat.page = that.pages[0];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthat.disabled = false;\n\t\t\t\t\t\tthat.currentTask = null;\n\t\t\t\t\t\tthat.existingTask = false;\n\n\t\t\t\t\t\tif (that.taskPolling) {\n\t\t\t\t\t\t\tthat.taskPolling.unsubscribe();\n\t\t\t\t\t\t\tthat.pollingIsSet = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tclearInterval(that.uplodeCounterInterfal);\n\t\t\t\t\t},\n\t\t\t\t\tonError: function (id: number, errorReason: string, xhrOrXdr: string) {\n\t\t\t\t\t\tthat.error({ error: { message: xhrOrXdr } });\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.uploader = new FineUploader(uiOptions);\n\n\t\t}\n\t}\n\n\tngAfterViewInit() {\n\n\t}\n\n\tngDoCheck() {\n\n\t\tif (this.uploader) {\n\t\t\tconst change = this.differ.diff(this.uploader);\n\t\t\tif (change) {\n\t\t\t\tthis.setExistingTask();\n\t\t\t}\n\t\t}\n\t}\n\n\tngOnInit(): void {\n\t\tthis.onUploadComplete = new Subject();\n\t\tthis.onHierarchyChange = new Subject();\n\n\t\t// this.service.getMetadataOptions(null).then((options) => {\n\t\t// \tthis.sensors = options.sensors;\n\t\t// \tthis.platforms = options.platforms;\n\t\t// }).catch((err: HttpErrorResponse) => {\n\t\t// \tthis.error(err);\n\t\t// });\n\t}\n\n\tinit(entities: SiteEntity[]): void {\n\t\tthis.hierarchy = this.metadataService.getHierarchy();\n\t\tthis.selections = [];\n\t\tthis.pages = [];\n\n\t\tfor (let i = 0; i < this.hierarchy.length; i++) {\n\t\t\tconst type = this.hierarchy[i];\n\n\t\t\tconst index = entities.findIndex(entity => { return entity.type === type });\n\n\t\t\tif (index !== -1) {\n\t\t\t\tconst entity = entities[index];\n\n\t\t\t\tthis.selections.push({ type: type, isNew: false, value: entity.id, label: entity.name });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.selections.push({ type: type, isNew: false, value: null, label: '' });\n\t\t\t}\n\n\t\t\tif (i > 0) {\n\t\t\t\tthis.pages.push({\n\t\t\t\t\tindex: (this.pages.length),\n\t\t\t\t\tselection: this.selections[i],\n\t\t\t\t\toptions: [],\n\t\t\t\t\ttype: 'CATEGORY'\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.labels.push(this.selections[0].label);\n\n\t\tthis.pages.push({\n\t\t\tindex: (this.pages.length),\n\t\t\tselection: null,\n\t\t\toptions: [],\n\t\t\ttype: 'SUMMARY'\n\t\t});\n\n\t\tthis.page = this.pages[0];\n\n\t\tthis.service.getChildren(this.selections[0].value).then(children => {\n\t\t\tthis.pages[0].options = children.filter(child => {\n\t\t\t\treturn child.type === this.pages[0].selection.type;\n\t\t\t});\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\t// Handle the case where there is an existing file upload\n\t\tif (this.existingTask) {\n\t\t\tthis.page = this.pages[this.pages.length - 1];\n\t\t}\n\t}\n\n\tclose(): void {\n\t\tif (this.hierarchyChange) {\n\t\t\tthis.onHierarchyChange.next(true);\n\t\t}\n\n\t\tthis.bsModalRef.hide();\n\t}\n\n\tcloseTaskFinishedNotification(id: string): void {\n\t\t// iterate in reverse to allow splice while avoiding the reindex\n\t\t// from affecting any of the next items in the array.\n\t\tlet i = this.taskFinishedNotifications.length;\n\t\twhile (i--) {\n\t\t\tlet note = this.taskFinishedNotifications[i];\n\t\t\tif (id === note.id) {\n\t\t\t\tthis.taskFinishedNotifications.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tsetExistingTask(): void {\n\t\tlet resumable = this.uploader.getResumableFilesData() as any[];\n\t\tif (resumable.length > 0) {\n\t\t\tthis.existingTask = true;\n\t\t\t//            if ( !this.selectedContinue ) {\n\t\t\t//                this.hideUploadPanel();\n\t\t\t//            }\n\t\t}\n\t}\n\n\tisPageValid(page: Page): boolean {\n\t\tif (page.type === 'CATEGORY') {\n\t\t\tif (page.selection != null) {\n\t\t\t\tif (page.selection.value != null && page.selection.value.length > 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse if (page.selection.label != null && page.selection.label.length > 0) {\n\t\t\t\t\tif (this.hasField('uav') && (page.selection.uav == null || page.selection.uav.length === 0)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.hasField('sensor') && (page.selection.sensor == null || page.selection.sensor.length === 0)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.hasField('collectionDate') && (page.selection.collectionDate == null || page.selection.collectionDate.length === 0)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (page.type === 'FILE') {\n\t\t\tif (this.uploader != null) {\n\t\t\t\tconst uploads: any = this.uploader.getUploads();\n\n\t\t\t\treturn (uploads != null && uploads.length > 0);\n\t\t\t};\n\t\t}\n\t\telse if (page.type === 'SUMMARY') {\n\t\t\treturn (this.currentTask == null);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tupdateCurrentPageLabel(): void {\n\t\tthis.page.options.forEach(entity => {\n\t\t\tif (entity.id === this.page.selection.value) {\n\t\t\t\tthis.page.selection.label = entity.name;\n\t\t\t}\n\t\t})\n\t}\n\n\tsetIsNew(isNew: boolean): void {\n\t\tthis.page.selection.isNew = isNew;\n\n\t\tif (isNew) {\n\t\t\tthis.page.selection.value = null;\n\t\t}\n\t\telse {\n\t\t\tthis.page.selection.label = null;\n\t\t}\n\t}\n\n\thandleAddMetadata(task: Task): void {\n\t\tlet modalRef = this.modalService.show(MetadataModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\t\tmodalRef.content.init(task.collection);\n\t}\n\n\thandleNextPage(): void {\n\n\t\tif ((this.page.index + 1) < this.pages.length) {\n\n\t\t\tconst nextPage = this.pages[this.page.index + 1];\n\n\t\t\tif (this.page.type === 'CATEGORY') {\n\t\t\t\tthis.updateCurrentPageLabel();\n\t\t\t\tthis.labels.push(this.page.selection.label);\n\t\t\t}\n\n\t\t\tif (nextPage.type === 'CATEGORY') {\n\n\t\t\t\tif (this.page.type === 'FILE') {\n\t\t\t\t\tthis.page = nextPage;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!this.page.selection.isNew && this.page.selection.value != null && this.page.selection.value.length > 0) {\n\n\t\t\t\t\t\tthis.service.getChildren(this.page.selection.value).then(children => {\n\t\t\t\t\t\t\tnextPage.options = children.filter(child => {\n\t\t\t\t\t\t\t\treturn child.type === nextPage.selection.type;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tthis.page = nextPage;\n\t\t\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\t\t\tthis.error(err);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.page = nextPage;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.page = nextPage;\n\n\t\t\t\tthis.modalStepConfig = {\n\t\t\t\t\t\"steps\": [\n\t\t\t\t\t\t{ \"label\": \"Category\", \"active\": true, \"enabled\": false },\n\t\t\t\t\t\t{ \"label\": \"Final\", \"active\": true, \"enabled\": false }\n\t\t\t\t\t]\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\thandleBackPage(): void {\n\n\t\tif (this.page.index > 0) {\n\n\t\t\tconst prevPage = this.pages[this.page.index - 1];\n\n\t\t\tif (prevPage.type === 'CATEGORY') {\n\t\t\t\tthis.labels.splice(this.labels.length - 1, 1);\n\n\t\t\t\tthis.modalStepConfig.steps.forEach(step => {\n\t\t\t\t\tif (step.label.toLowerCase() === \"category\" && step.enabled === false) {\n\t\t\t\t\t\tthis.modalStepConfig = {\n\t\t\t\t\t\t\t\"steps\": [\n\t\t\t\t\t\t\t\t{ \"label\": \"Category\", \"active\": true, \"enabled\": true },\n\t\t\t\t\t\t\t\t{ \"label\": \"Final\", \"active\": true, \"enabled\": false }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tthis.page = prevPage;\n\t\t}\n\t}\n\n\thandleUpload(): void {\n\n\n\t\tif (!this.existingTask) {\n\t\t\t/*\n\t\t\t * Validate form values before uploading\n\t\t\t */\n\t\t\tconst selection = this.selections[this.selections.length - 1];\n\n\t\t\t//            if ( selection.value == null  ) {\n\t\t\t//                this.message = \"A [\" + selection.type + \"] must first be selected before the file can be uploaded\";\n\t\t\t//            }\n\t\t\t//            else {\n\t\t\t//                this.values.uasComponentOid = selection.value;\n\t\t\tthis.values.selections = JSON.stringify(this.selections);\n\t\t\tthis.values.uploadTarget = this.metadataService.getUploadTarget(selection.type);\n\t\t\tthis.values.processUpload = this.processUpload;\n\n\t\t\tthis.uploader.setParams(this.values);\n\t\t\tthis.uploader.uploadStoredFiles();\n\t\t\t//            }\n\t\t}\n\t\telse {\n\t\t\tthis.uploader.uploadStoredFiles();\n\t\t}\n\t}\n\n\thasField(fieldName: string): boolean {\n\t\treturn this.metadataService.hasExtraField(this.page.selection.type, fieldName);\n\t}\n\n\tremoveUpload(event: any): void {\n\t\tlet that = this;\n\n\t\tthis.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = 'Are you sure you want to cancel the upload of [' + this.uploader.getResumableFilesData()[0].name + ']';\n\t\tthis.bsModalRef.content.type = 'DANGER';\n\t\tthis.bsModalRef.content.submitText = 'Cancel Upload';\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.removeTask(this.uploader.getResumableFilesData()[0].uuid)\n\t\t\t\t.then(() => {\n\t\t\t\t\t//that.uploader.clearStoredFiles();\n\t\t\t\t\t//that.uploader.cancelAll()\n\n\t\t\t\t\t// The above clearStoredFiles() and cancelAll() methods don't appear to work so \n\t\t\t\t\t// we are clearing localStorage manually.\n\t\t\t\t\tlocalStorage.clear();\n\t\t\t\t\tthat.existingTask = false;\n\t\t\t\t\tthis.page = this.pages[0];\n\t\t\t\t\t//                    that.showUploadPanel();\n\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\tthis.error(err);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tupdateProcessUpload(checked: boolean): void {\n\t\tthis.processUpload = checked;\n\t}\n\n\n\t//    hideUploadPanel(): void {\n\t//        this.uploadVisible = false;\n\t//    }\n\t//\n\t//    showUploadPanel(): void {\n\t//        this.uploadVisible = true;\n\t//        this.selectedContinue = true;\n\t//    }\n\n\tcountUpload(thisRef: any): void {\n\t\tlet ct = 0;\n\n\t\tfunction incrementSeconds() {\n\t\t\tct += 1;\n\n\t\t\tlet hours = Math.floor(ct / 3600)\n\t\t\tlet minutes = Math.floor((ct % 3600) / 60);\n\t\t\tlet seconds = Math.floor(ct % 60);\n\n\t\t\tlet hoursStr = minutes < 10 ? \"0\" + hours : hours;\n\t\t\tlet minutesStr = minutes < 10 ? \"0\" + minutes : minutes;\n\t\t\tlet secondsStr = seconds < 10 ? \"0\" + seconds : seconds;\n\n\t\t\tthisRef.uploadCounter = hoursStr + \":\" + minutesStr + \":\" + secondsStr;\n\t\t}\n\n\t\tthisRef.uplodeCounterInterfal = setInterval(incrementSeconds, 1000);\n\t}\n\n\terror(err: any): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n\tpublic canDeactivate(): boolean {\n\t\treturn this.disabled;\n\t}\n\n\t@HostListener('window:beforeunload', ['$event'])\n\tunloadNotification($event: any) {\n\t\tif (this.disabled) {\n\t\t\t$event.returnValue = 'An upload is currently in progress. Are you sure you want to leave?';\n\t\t}\n\t}\n}\n","<div class=\"modal-body\">\n  <div>\n    <div *ngIf=\"message != null\" class=\"error-container\">\n      <div class=\"label-holder\">\n        <strong>Error</strong>\n      </div>\n      <div class=\"holder\">\n        <div>\n          <p class=\"error-message\">{{message}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"entity != null\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2>{{entity.name}}</h2>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <ul class=\"breadcrumb\" style=\"margin-bottom: 10px;\">\n            <li *ngFor=\"let prev of previous\">\n              <span> {{prev.name}}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <tabset class=\"nav-full-width\">\n          <tab *ngFor=\"let folder of folders\" [heading]=\"folder.name\" (selectTab)=\"onSelect(folder)\">\n            <div class=\"row image-list-container\">              \n              <div class=\"col-sm-12\">\n                <table class=\"table table-striped\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\"></th>\n                      <th scope=\"col\">Name</th>\n                      <th scope=\"col\">Date uploaded</th>\n                    </tr>\n                  </thead>\n                  <tbody class=\"upload-name-style\">\n                    <tr *ngFor=\"let item of page.results  | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                      <td class=\"button-column\">\n                        <a class=\"fa fa-download\" (click)=\"handleDownloadFile(item)\" title=\"Download\"></a>\n                        <a style=\"margin-left: 5px;\" class=\"fa fa-trash-alt ico-remove\" (click)=\"handleDelete(item)\" title=\"Remove\"></a>\n                      </td>\n                      <td>{{ item.name }}</td>\n                      <td>{{ item.lastModified }}</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n            <div class=\"row\">\n                   <div class=\"col-sm-12\">\n                <ngx-file-drop dropZoneLabel=\"Drop files here\" (onFileDrop)=\"dropped($event)\">\n                  <ng-template ngx-file-drop-content-tmp let-openFileSelector=\"openFileSelector\">\n                    Drag & Drop File\n                    <button type=\"button\" (click)=\"openFileSelector()\">Browse Files</button>\n                  </ng-template>\n                </ngx-file-drop>\n              </div> \n            </div>\n          </tab>\n        </tabset>\n      </div>\n      \n      <div class=\"row\">      \n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n      </div>\n\n      <div class=\"row\">      \n        <div class=\"btn-holder\" style=\"text-align: right;margin: 20px 20px 10px 20px;\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Close</button>\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"handleDownload()\" style=\"margin-left: 5px;\">Download all</button>\n        </div>\n      </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { NgxFileDropEntry, FileSystemFileEntry, FileSystemDirectoryEntry } from 'ngx-file-drop';\n\nimport { ErrorHandler, BasicConfirmModalComponent } from '@shared/component';\n\nimport { SiteEntity, SiteObjectsResultSet } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\n\ndeclare var acp: string;\n\n@Component({\n    selector: 'accessible-support-modal',\n    templateUrl: './accessible-support-modal.component.html',\n    styles: [],\n})\nexport class AccessibleSupportModalComponent implements OnInit {\n\n    /* \n     * Breadcrumb of previous sites clicked on\n     */\n    previous = [] as SiteEntity[];\n    folders: SiteEntity[] = [];\n    message: string;\n\n    entity: SiteEntity;\n    folder: SiteEntity;\n\n    page: SiteObjectsResultSet = new SiteObjectsResultSet();\n\n    constructor(private service: ManagementService, private modalService: BsModalService, public bsModalRef: BsModalRef) {\n    }\n\n    ngOnInit(): void {\n        this.page.count = 0;\n        this.page.pageNumber = 1;\n        this.page.pageSize = 10;\n        this.page.results = [];\n    }\n\n    init(entity: SiteEntity, folders: SiteEntity[], previous: SiteEntity[]): void {\n\n        this.entity = entity;\n        this.folders = folders;\n        this.previous = [...previous];\n\n        if (this.previous.length > 0 && this.previous[this.previous.length - 1].id !== this.entity.id) {\n            this.previous.push(this.entity);\n        }\n\n        if (this.folders.length > 0) {\n            this.onSelect(this.folders[0]);\n        }\n    }\n\n    onPageChange(pageNumber: number): void {\n        this.getData(this.folder.component, this.folder.name, pageNumber, this.page.pageSize);\n    }\n\n    onSelect(folder: SiteEntity): void {\n\n        this.page.results = [];\n\n        this.folder = folder;\n\n        this.getData(folder.component, folder.name, 1, this.page.pageSize);\n    }\n\n    refresh(): void {\n\n        this.page.results = [];\n\n        this.getData(this.folder.component, this.folder.name, this.page.pageNumber, this.page.pageSize);\n    }\n\n    getData(component: string, folder: string, pageNumber: number, pageSize: number) {\n        this.service.getObjects(component, folder, pageNumber, pageSize).then(page => {\n            this.page = page;\n        });\n    }\n\n    handleDownload(): void {\n        window.location.href = acp + '/project/download-all?id=' + this.folder.component + \"&key=\" + this.folder.name;\n    }\n\n    handleDownloadFile(item: SiteEntity): void {\n        window.location.href = acp + '/project/download?id=' + this.folder.component + \"&key=\" + item.key;\n    }\n\n    dropped(files: NgxFileDropEntry[]): void {\n\n        for (const droppedFile of files) {\n\n            // Is it a file?\n            if (droppedFile.fileEntry.isFile) {\n                const fileEntry: FileSystemFileEntry = droppedFile.fileEntry as FileSystemFileEntry;\n\n                fileEntry.file((file: File) => {\n\n                    this.service.upload(this.folder.component, this.folder.name, file).then(() => {\n                        // Refresh the table\n                        this.refresh();\n                    });\n\n                });\n            } else {\n                // It was a directory (empty directories are added, otherwise only files)\n                const fileEntry: FileSystemDirectoryEntry = droppedFile.fileEntry as FileSystemDirectoryEntry;\n                console.log(droppedFile.relativePath, fileEntry);\n            }\n        }\n    }\n\n    handleDelete(item: SiteEntity): void {\n        let modalRef: BsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        modalRef.content.message = 'Are you sure you want to delete the file [' + item.name + ']?';\n        modalRef.content.type = 'DANGER';\n        modalRef.content.submitText = 'Delete';\n\n        modalRef.content.onConfirm.subscribe(() => {\n            this.remove(item);\n        });\n    }\n\n    remove(item: SiteEntity): void {\n        this.service.removeObject(item.component, item.key).then(() => {\n            // Refresh the table\n            this.refresh();\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div id=\"navigator-header-container\">\n    <uasdm-header [title]=\"'Site Viewer'\"></uasdm-header>\n</div>\n\n<div id=\"app-container\" class=\"container-fluid\" style=\"background: #f7f7f7;\">\n\n    <div class=\"row\">\n        <div id=\"navigator-left-sidebar\" class=\"col-md-3 lw-inner-col\">\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n            \n                  <!-- IF at Site level -->\n                  <div class=\"row\" *ngIf=\"!current\">\n                    <div class=\"col-md-6\" style=\"height: 64px;\">\n                      <h3 style=\"font-weight:bold;\">IDM Sites</h3>\n                    </div>\n                  </div>\n            \n                  <!-- IF lower than Site -->\n                  <div class=\"row\" *ngIf=\"current\">\n                    <div class=\"col-md-12\" style=\"height: 65px; overflow: auto;\">\n                      <ul class=\"breadcrumb\" style=\"background-color: white; vertical-align: middle; line-height:2\">\n                        <li>\n                          <i class=\"fa fa-angle-left breadcrumb-back-ico\" aria-hidden=\"true\"></i>\n                          <a (click)=\"back(null)\" style=\"color: #007276;\">IDM Sites</a>\n                        </li>\n                        <li *ngFor=\"let entity of breadcrumbs; last as isLast\" [ngClass]=\"{'active':isLast}\">\n                          <a *ngIf=\"!isLast\" (click)=\"back(entity)\" style=\"color: #007276;\"> {{entity.name}}</a>\n                          <span *ngIf=\"isLast\"> <b>{{entity.name}}</b> </span>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n            \n                  <!-- Search bar -->\n                  <div class=\"row\">\n                    <div class=\"col-md-12\">\n                      <div class=\"location-management-widget-section\">\n                        <input class=\"form-control search-input\" type=\"text\" placeholder=\"Search...\" [(ngModel)]=\"search\"\n                          [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"handleClick($event)\"\n                          [typeaheadOptionsLimit]=\"10\" [typeaheadItemTemplate]=\"bsItemTemplate\" typeaheadOptionField=\"label\"\n                          [ngModelOptions]=\"{standalone: true}\" (keydown.enter)=\"$event.preventDefault()\" />\n                      </div>\n                    </div>\n                  </div>\n              </div>\n            </div>\n\n            <!-- <hr> -->\n\n            <div class=\"row\">\n                <div class=\"col-md-12\" style=\"background:#f7f7f7; padding:0; height:100%;\">\n                  \n                  <tabset #staticTabs class=\"nav-full-width\">\n                    <tab heading=\"Data\">                \n                      <div id=\"hierarchy-tree-container\" class=\"location-management-widget-section location-management-list-container\"\n                      style=\"height: calc(100vh - 296px);overflow-y: auto;\">\n                        <div class=\"list-group\">\n\n                          <!-- If -->\n                          <div *ngIf=\"nodes.length < 1 && breadcrumbs.length === 0\" [@fadeInOnEnter] style=\"padding: 20px;text-align: center;color: grey;\">\n                            <span *ngIf=\"loadingSites\">\n                              <h4>\n                                <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i>\n                                Loading Sites\n                              </h4>\n                            </span>\n                          \n                            <span *ngIf=\"!loadingSites\">\n                              <h4>No Sites in this area.</h4>\n                              <p>\n                                Zoom out to find sites in other areas of the map.\n                              </p>\n                            </span>\n                          </div>\n\n                          <!-- Else -->\n                          <div *ngIf=\"nodes.length < 1 && breadcrumbs.length > 0\" [@fadeInOnEnter] style=\"padding: 20px;text-align: center;color: grey;\">\n                            <h4>No data at this level.</h4>\n                            <p>\n                              Create data containers as part of the upload process.\n                            </p>\n                          </div>\n\n                          <div *ngFor=\"let node of nodes; let i = index\" [@fadeInOnEnter] class=\"list-group-item\">\n\n                            <!-- Two column layout -->\n                            <div [@fadeInOnEnter] style=\"border-left: solid 15px;\" class=\"card card-default clickable\" *ngIf=\"getMetadata(node).root\" [ngClass]=\"{'active': hoverFeatureId === node.id}\"\n                                (click)=\"select(node, null, $event)\" (mouseenter)=\"onListEntityHover($event, node)\" (mouseleave)=\"onListEntityHoverOff()\">\n                              \n                                <!-- <div class=\"card-header\">Header</div> -->\n                              <div class=\"card-body card-5-7\" >\n                                <div>\n                                   <!-- <i class=\"fas fa-map-marker-alt\" style=\"font-size: 50px;\"></i> -->\n                                   <h4 style=\"word-break: break-all; border-bottom-color:rgba(195, 195, 195, 0.3); border-bottom-style:inset; border-bottom-width: 2px; margin-bottom:10px; padding-bottom:10px;\">\n                                     <!-- <a (click)=\"select(node, $event)\"> -->\n                                      {{node.name}}\n                                     <!-- </a> -->\n                                  </h4>\n                                  <span>\n                                    <span><b>{{node.numberOfChildren}}</b> {{getMetadata(node).childLabel}}</span>\n                                    <span *ngIf=\"node.type !== 'folder'\" class=\"pull-right\">\n\t                                    <a class=\"fa fa-pencil-alt ico-edit\" (click)=\"handleEdit(node, $event)\" title=\"Edit\"></a>\n\t                                    <a class=\"fa fa-trash-alt ico-remove\" (click)=\"handleDelete(node, $event)\" title=\"Delete\"></a>                                   \n\t                                  </span>  \n                                  </span>\n                                </div>\n                              </div>\n                              <!-- <div class=\"card-footer\">Footer</div> -->\n                            </div>\n\n\n                            <!-- Single column card -->\n                            <div [@fadeInOnEnter] class=\"card card-default clickable\" *ngIf=\"!getMetadata(node).root\" (click)=\"select(node, null, $event)\">\n                              <div class=\"card-body\">\n                                  <i (click)=\"handleExpand(node, $event)\" class=\"fa fa-caret-left expand-arrow-ico pull-right\" [ngClass]=\"{'fa-rotate-270':node.active}\" style=\"font-size: 25px; padding: 0 5px\" aria-hidden=\"true\"></i>\n\n                                  <h4 style=\"word-break: break-all;\">{{node.name}}</h4>\n                                  <p><b>{{node.numberOfChildren}}</b> {{getMetadata(node).childLabel}}</p>\n                                  \n                                  <div [collapse]=\"!node.active\" class=\"list-group\" style=\"margin-bottom: 0;\">\n                                    <div *ngFor=\"let child of node.children\" (click)=\"select(child, node, $event)\" class=\"list-group-item\" style=\"background-color: #ececec;border: solid 1px lightgrey;border-radius: 0;\">\n                                      <!-- <a (click)=\"select(child, $event)\"> -->\n                                        {{child.name}}\n                                      <!-- </a> -->\n                                      <span *ngIf=\"child.type !== 'folder'\" class=\"pull-right button-column\">\n                                        <a class=\"fa fa-pencil-alt ico-edit\" (click)=\"handleEdit(child, $event)\" title=\"Edit\"></a>\n                                        <a class=\"fa fa-trash-alt ico-remove\" (click)=\"handleDelete(child, $event)\" title=\"Delete\"></a>                                   \n                                      </span>                                 \n                                    </div>\n                                  </div>\n                              </div>\n                            </div>\n\n                          </div> \n\n                          <div *ngFor=\"let node of supportingData\" class=\"list-group-item\">\n                            <div [@fadeInOnEnter] class=\"card card-default\">\n                              <div class=\"card-body\">\n                                <h4 style=\"word-break: break-all;\">Supporting Data</h4>\n                                <div class=\"list-group\">\n                                  <div class=\"list-group-item\" style=\"background-color: #ececec;border: solid 1px lightgrey;border-radius: 0;\">\n                                    <a (click)=\"select(node, null, $event)\">\n                                      {{node.name}}\n                                    </a>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                        </div>\n                      </div>\n                      <!-- <div *ngIf=\"supportingData.length > 0\" class=\"location-management-widget-section location-management-list-container\">\n                        \n                            <div class=\"card card-default\">\n                              <div class=\"card-body\">\n                                <h4>Supporting Data</h4>\n                                <div class=\"list-group\">\n                                  <div *ngFor=\"let node of supportingData\" class=\"list-group-item\" style=\"background-color: #ececec;border: solid 1px lightgrey;border-radius: 0;\">\n                                    <a (click)=\"select(node, $event)\">\n                                      {{node.name}}\n                                    </a>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                      </div> -->\n\n                    </tab>\n                    <tab *ngIf=\"current != null\" heading=\"Products\">\n                      <div id=\"hierarchy-tree-container\" class=\"location-management-widget-section location-management-list-container\"\n                      style=\"height: calc(100vh - 296px);overflow-y: auto;\">\n                        <product-panel [id]=\"current.id\" (toggleMapOrtho)=\"handleMapOrtho($event)\" (toggleMapDem)=\"handleMapDem($event)\"></product-panel>           \n                      </div>\n                    </tab>\n                  </tabset>\n\n                </div>\n            </div>\n            \n\n            <footer class=\"sidebar-footer\">\n              <div class=\"row\" *ngIf=\"current != null\" style=\"background:white;\">\n                <div class=\"col-md-12\" style=\"text-align: center;padding: 10px;border-top: 1px solid lightgrey;\">\n                  <button (click)=\"handleUploadFile()\" class=\"btn btn-primary\">Upload</button>              \n                </div>\n              </div>\n              <div class=\"row\" *ngIf=\"current == null\" style=\"background:white;\">\n                <div class=\"col-md-12\" style=\"text-align: center;padding: 10px;border-top: 1px solid lightgrey;\">\n                  <button (click)=\"handleCreate(null,null)\" class=\"btn btn-primary\">Add new site</button>\n                </div>\n              </div>\n            </footer>\n            \n        </div>\n        <div class=\"col-md-9\" id=\"site-explorer-map\">\n            <div class=\"row\">\n                <article style=\"position: absolute;z-index: 5;margin-left: 100px;margin-top: 10px;\">\n                  <div class=\"idm-toast\" *ngFor=\"let task of tasks; let idx = index\">\n                    <alert *ngIf=\"task.status === 'Complete' && task.actions.length === 0\" type=\"success\" [dismissible]=\"true\" (onClosed)=\"handleCloseToast(idx)\">\n                      <strong>Upload {{task.status}}</strong> for {{task.collectionLabel}}. <a (click)=\"handleViewSite(task.collection)\">Goto the collection view</a>\n                    </alert>\n                    <alert *ngIf=\"task.status === 'Complete' && task.actions.length !== 0\" type=\"warning\" [dismissible]=\"true\" (onClosed)=\"handleCloseToast(idx)\">\n                      <strong>Upload {{task.status}}</strong> for {{task.collectionLabel}}. Task completed with warnings.  See the <a routerLink=\"/site/tasks\">task page</a> for more details.\n                    </alert>\n                    <alert *ngIf=\"task.status === 'Failed'\" type=\"danger\" [dismissible]=\"true\" (onClosed)=\"handleCloseToast(idx)\">\n                      <strong>Upload {{task.status}}</strong> for {{task.collectionLabel}}. Task completed with errors.  See the <a routerLink=\"/site/tasks\">task page</a> for more details.\n                    </alert>\n                    <alert *ngIf=\"task.status !== 'Failed' && task.status !== 'Complete'\" type=\"info\" [dismissible]=\"true\" (onClosed)=\"handleCloseToast(idx)\">\n                      <strong>Upload {{task.status}}</strong> for {{task.collectionLabel}}.\n                    </alert>\n                  </div>    \n                </article>\n\n\n                <article class=\"base-layer-panel\">\n\n                  <div class=\"layer-toggle\" style=\"cursor: pointer;background:#fff;padding:8px;border-radius:4px;\" (mouseenter)=\"baselayerIconHover = true\"  (mouseleave)=\"baselayerIconHover = false\">\n                    <i class=\"fas fa-layer-group\" *ngIf=\"!baselayerIconHover\" style=\"vertical-align:middle; font-size: 18px;\"></i>\n                    <div *ngIf=\"baselayerIconHover\">\n                      <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n                          <input class=\"layer-toggle-input\" type='radio' name='rtoggle' [value]='baseLayer.id' [checked]=\"baseLayer.selected\" (change)=\"handleStyle(baseLayer)\">\n                          <label class=\"layer-toggle-label\">{{baseLayer.label}}</label>\n                        </div>\n                    </div>\n                  </div>\n                    <!-- <accordion> \n                      <accordion-group heading=\"Base Maps\" style=\"border:none;\">\n                        <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n                          <input class=\"layer-toggle-input\" type='radio' name='rtoggle' [value]='baseLayer.id' [checked]=\"baseLayer.selected\" (change)=\"handleStyle(baseLayer)\">\n                          <label class=\"layer-toggle-label\">{{baseLayer.label}}</label>\n                        </div>\n                      </accordion-group>\n                    </accordion> -->\n                </article>\n\n                <div id=\"mousemove-panel\" class=\"mapboxgl-ctrl-bottom-right\" style=\"background: rgba(255, 255, 255, .5); right: 0; padding: 0 5px 0 5px;bottom: 0px;\"></div>\n\n                <div id=\"map\" class=\"map-view-port\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #bsItemTemplate let-match=\"match\" let-query=\"query\">\n  <span *ngIf=\"match.item.filename == null\">\n    <i class=\"fa fa-folder-open\"></i>\n  </span>\n  <span *ngIf=\"match.item.filename != null\">\n    <i class=\"fa fa-file\"></i>\n  </span>\n  <span>\n    <span *ngFor=\"let site of match.item.hierarchy; index as i\">\n        {{site.label}} /\n        <!-- <span *ngIf=\"i < (match.item.hierarchy.length -1)\">/</span> -->\n    </span>\n  </span>\n  <b>{{ match.item.label}}</b>\n</ng-template>\n\n","import { Component, OnInit, OnDestroy, AfterViewInit, ViewChild, TemplateRef } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { TabsetComponent } from 'ngx-bootstrap';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Map, LngLatBounds, NavigationControl, MapboxEvent, AttributionControl } from 'mapbox-gl';\n\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from \"rxjs/operators\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\nimport { AuthService } from '@shared/service/auth.service';\n\nimport { SiteEntity, Product, Task, GeoserverLayer } from '../model/management';\n\nimport { EntityModalComponent } from './modal/entity-modal.component';\nimport { UploadModalComponent } from './modal/upload-modal.component';\nimport { LeafModalComponent } from './modal/leaf-modal.component';\nimport { AccessibleSupportModalComponent } from './modal/accessible-support-modal.component';\n\nimport { ManagementService } from '../service/management.service';\nimport { MapService } from '../service/map.service';\nimport { MetadataService } from '../service/metadata.service';\n\nimport {\n  fadeInOnEnterAnimation,\n  fadeOutOnLeaveAnimation\n} from 'angular-animations';\nimport { ActivatedRoute } from '@angular/router';\n\n\ndeclare var acp: any;\n\n@Component({\n  selector: 'projects',\n  templateUrl: './projects.component.html',\n  styles: ['./projects.css'],\n  animations: [\n    fadeInOnEnterAnimation(),\n    fadeOutOnLeaveAnimation()\n  ]\n})\nexport class ProjectsComponent implements OnInit, AfterViewInit, OnDestroy {\n\n  @ViewChild('staticTabs') staticTabs: TabsetComponent;\n\n  // imageToShow: any;\n  userName: string = \"\";\n\n    /*\n     * Template for the delete confirmation\n     */\n  @ViewChild('confirmTemplate') public confirmTemplate: TemplateRef<any>;\n\n    /* \n     * Datasource to get search responses\n     */\n  dataSource: Observable<any>;\n\n    /* \n     * Model for text being searched\n     */\n  search: string = \"\";\n\n    /* \n     * Root nodes of the tree\n     */\n  nodes = [] as SiteEntity[];\n  \n  allPointsBounds;\n\n    /* \n     * Root nodes of the tree\n     */\n  supportingData = [] as SiteEntity[];\n\n    /* \n     * Breadcrumb of previous sites clicked on\n     */\n  breadcrumbs = [] as SiteEntity[];\n\n    /* \n     * Root nodes of the tree\n     */\n  current: SiteEntity;\n\n    /* \n     * mapbox-gl map\n     */\n  map: Map;\n\n    /* \n     * Flag denoting if the user is an admin\n     */\n  admin: boolean = false;\n\n    /* \n     * Flag denoting if the user is a worker\n     */\n  worker: boolean = false;\n\n    /* \n     * Flag denoting the draw control is active\n     */\n  active: boolean = false;\n  \n  loadingSites: boolean = true;\n\n    /* \n     * List of base layers\n     */\n  baseLayers: any[] = [{\n    label: 'Outdoors',\n    id: 'outdoors-v11',\n    selected: true\n  }, {\n    label: 'Satellite',\n    id: 'satellite-v9'\n  }, {\n    label: 'Streets',\n    id: 'streets-v11'\n  }];\n\n  layers: GeoserverLayer[] = [];\n\n  baselayerIconHover = false;\n\n  hoverFeatureId: string;\n\n  /* \n     * debounced subject for map extent change events\n     */\n  subject: Subject<MapboxEvent<MouseEvent | TouchEvent | WheelEvent>>;\n\n    /*\n     * Reference to the modal current showing\n    */\n  private bsModalRef: BsModalRef;\n\n  notifier: WebSocketSubject<any>;\n\n  tasks: Task[] = [];\n\n  constructor(private service: ManagementService, private authService: AuthService, private mapService: MapService,\n    private modalService: BsModalService, private metadataService: MetadataService, private route: ActivatedRoute) {\n\n    this.subject = new Subject();\n    this.subject.pipe(debounceTime(300), distinctUntilChanged()).subscribe(event => this.handleExtentChange(event));\n\n    this.dataSource = Observable.create((observer: any) => {\n\n      this.mapService.mbForwardGeocode(this.search).then(response => {\n        const match = response.features;\n\n        this.service.searchEntites(this.search).then(results => {\n\n          // Add Mapbox results to any local results\n          match.forEach(obj => {\n            let newObj = {\n              id: obj.id,\n              hierarchy: [],\n              label: obj.place_name,\n              center: obj.center,\n              source: \"MAPBOX\"\n            }\n\n            results.push(newObj);\n          });\n\n          observer.next(results);\n        });\n      });\n    });\n  }\n\n  ngOnInit(): void {\n    this.admin = this.authService.isAdmin();\n    this.worker = this.authService.isWorker();\n    this.userName = this.service.getCurrentUser();\n\n\n    let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + acp;\n\n    this.notifier = webSocket(baseUrl + '/websocket/notify');\n    this.notifier.subscribe(message => {\n      if (message.type === 'UPLOAD_JOB_CHANGE') {\n        this.tasks.push(message.content);\n      }\n    });\n\n    const oid = this.route.snapshot.params['oid'];\n    const action = this.route.snapshot.params['action'];\n\n    if(oid != null && action != null && action === 'collection') {\n      this.handleViewSite(oid);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.map.remove();\n\n    this.notifier.complete();\n  }\n\n  ngAfterViewInit() {\n\n    this.map = new Map({\n      container: 'map',\n      style: 'mapbox://styles/mapbox/outdoors-v11',\n      zoom: 2,\n      attributionControl: false,\n      center: [-78.880453, 42.897852]\n    });\n\n    this.map.on('load', () => {\n      this.initMap();\n    });\n\n  }\n\n  initMap(): void {\n\n    this.map.on('style.load', () => {\n      this.addLayers();\n      this.refreshMapPoints(false);\n    });\n\n    this.addLayers();\n\n\n    this.refreshMapPoints(true);\n\n    // Add zoom and rotation controls to the map.\n    this.map.addControl(new NavigationControl());\n    this.map.addControl(new AttributionControl({ compact: true }), 'bottom-left');\n\n    this.map.on('mousemove', e => {\n      // e.point is the x, y coordinates of the mousemove event relative\n      // to the top-left corner of the map.\n      // e.lngLat is the longitude, latitude geographical position of the event\n      let coord = e.lngLat.wrap();\n\n      // EPSG:3857 = WGS 84 / Pseudo-Mercator\n      // EPSG:4326 = WGS 84 \n      // let coord4326 = window.proj4(window.proj4.defs('EPSG:3857'), window.proj4.defs('EPSG:4326'), [coord.lng, coord.lat]);\n      // let text = \"Long: \" + coord4326[0] + \" Lat: \" + coord4326[1];\n\n      let text = \"Lat: \" + coord.lat + \" Long: \" + coord.lng;\n      let mousemovePanel = document.getElementById(\"mousemove-panel\");\n      mousemovePanel.textContent = text;\n\n\n      let features = this.map.queryRenderedFeatures(e.point, { layers: ['points'] });\n\n      if (this.current == null) {\n        if (features.length > 0) {\n          let focusFeatureId = features[0].properties.oid; // just the first\n          this.map.setFilter('hover-points', ['all',\n            ['==', 'oid', focusFeatureId]\n          ])\n\n          this.highlightListItem(focusFeatureId)\n        }\n        else {\n          this.map.setFilter('hover-points', ['all',\n            ['==', 'oid', \"NONE\"]\n          ])\n\n          this.clearHighlightListItem();\n        }\n      }\n    });\n\n    this.map.on('zoomend', (e) => {\n      this.subject.next(e);\n    });\n\n    this.map.on('moveend', (e) => {\n      this.subject.next(e);\n    });\n\n    // Sit selection from map\n    this.map.on('dblclick', (e) => {\n      let features = this.map.queryRenderedFeatures(e.point, { layers: ['points'] });\n\n      if (features.length > 0) {\n        let focusFeatureId = features[0].properties.oid; // just the first\n\n        this.handleViewSite(focusFeatureId);\n      }\n    });\n\n    // MapboxGL doesn't have a good way to detect when moving off the map\n    let sidebar = document.getElementById(\"navigator-left-sidebar\");\n    sidebar.addEventListener(\"mouseenter\", function() {\n      let mousemovePanel = document.getElementById(\"mousemove-panel\");\n      mousemovePanel.textContent = \"\";\n    });\n  }\n\n  addLayers(): void {\n\n    this.map.addSource('sites', {\n      type: 'geojson',\n      data: {\n        \"type\": \"FeatureCollection\",\n        \"features\": []\n      }\n    });\n\n\n    // Point layer\n    this.map.addLayer({\n      \"id\": \"points\",\n      \"type\": \"circle\",\n      \"source\": 'sites',\n      \"paint\": {\n        \"circle-radius\": 10,\n        \"circle-color\": '#800000',\n        \"circle-stroke-width\": 2,\n        \"circle-stroke-color\": '#FFFFFF'\n      }\n    });\n\n    // Hover style\n    this.map.addLayer({\n      \"id\": \"hover-points\",\n      \"type\": \"circle\",\n      \"source\": 'sites',\n      \"paint\": {\n        \"circle-radius\": 13,\n        \"circle-color\": '#cf0000',\n        \"circle-stroke-width\": 2,\n        \"circle-stroke-color\": '#FFFFFF'\n      },\n      filter: ['all',\n        ['==', 'id', 'NONE'] // start with a filter that doesn't select anything\n      ]\n    });\n\n\n    // Label layer\n    this.map.addLayer({\n      \"id\": \"points-label\",\n      \"source\": 'sites',\n      \"type\": \"symbol\",\n      \"paint\": {\n        \"text-color\": \"black\",\n        \"text-halo-color\": \"#fff\",\n        \"text-halo-width\": 2\n      },\n      \"layout\": {\n        \"text-field\": \"{name}\",\n        \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\n        \"text-offset\": [0, 0.6],\n        \"text-anchor\": \"top\",\n        \"text-size\": 12,\n      }\n    });\n\n    this.layers.forEach(layer => {\n      if (layer.isMapped)\n      {\n        this.addImageLayer(layer);\n      }\n    });\n  }\n\n  handleExtentChange(e: MapboxEvent<MouseEvent | TouchEvent | WheelEvent>): void {\n    if (this.current == null) {\n      const bounds = this.map.getBounds();\n\n      // Sometimes bounds aren't valid for 4326, so validate it before sending to server\n      if (this.isValidBounds(bounds)) {\n        this.loadingSites = true;\n        this.service.roots(null, bounds).then(nodes => {\n          this.nodes = nodes;\n          this.loadingSites = false;\n        });\n      }\n      else {\n        // console.log(\"Invalid bounds\", bounds);\n      }\n    }\n  }\n\n  isValidBounds(bounds: LngLatBounds): boolean {\n\n    const ne = bounds.getNorthEast();\n    const sw = bounds.getSouthWest();\n\n    if (Math.abs(ne.lng) > 180 || Math.abs(sw.lng) > 180) {\n      return false;\n    }\n\n    if (Math.abs(ne.lat) > 90 || Math.abs(sw.lat) > 90) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Goes to the server and fetches all points for all sites. Returns GeoJSON which is then used to refresh the map.\n   */\n  refreshMapPoints(zoom: boolean): void {\n    this.mapService.features().then(data => {\n      (<any>this.map.getSource('sites')).setData(data.features);\n\n      if (zoom) {\n        this.allPointsBounds = new LngLatBounds([data.bbox[0], data.bbox[1]], [data.bbox[2], data.bbox[3]]);\n\n        this.map.fitBounds(this.allPointsBounds, { padding: 50 });\n      }\n    });\n  }\n\n  isData(node: any): boolean {\n\n    if (node.data.type === \"Site\") {\n      return false;\n    }\n    else if (node.data.type === \"Project\") {\n      return false;\n    }\n    else if (node.data.type === \"Mission\") {\n      return false;\n    }\n    else if (node.data.type === \"Collection\") {\n      return false;\n    }\n    else if (node.data.type === \"Imagery\") {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  handleOnUpdateData(): void {\n    //        this.tree.treeModel.expandAll();\n  }\n\n  handleCloseToast(idx: number): void {\n    this.tasks.splice(idx, 1);\n  }\n\n  handleUploadFile(): void {\n\n    this.bsModalRef = this.modalService.show(UploadModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n      'class': 'upload-modal'\n    });\n    this.bsModalRef.content.init(this.breadcrumbs);\n\n    this.bsModalRef.content.onUploadComplete.subscribe(node => {\n\n      this.service.getItems(this.current.id, null).then(nodes => {\n        this.setNodes(nodes);\n      });\n    });\n  }\n\n\n  handleCreate(parent: SiteEntity, type: string): void {\n    let parentId = parent != null ? parent.id : null;\n\n    this.service.newChild(parentId, type).then(data => {\n      this.bsModalRef = this.modalService.show(EntityModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n        'class': 'upload-modal'\n      });\n      this.bsModalRef.content.init(true, this.userName, this.admin, data.item, data.attributes, this.map.getCenter(), this.map.getZoom());\n\n\n      if (parent != null) {\n        this.bsModalRef.content.parentId = parent.id;\n      }\n\n      this.bsModalRef.content.onNodeChange.subscribe(entity => {\n\n        if (parent != null) {\n\n        }\n        else {\n          if (this.breadcrumbs.length == 0) {\n            this.nodes.push(entity);\n          }\n\n          this.refreshMapPoints(false);\n        }\n      });\n    });\n  }\n\n  zoomToFeature(node: SiteEntity): void {\n    if (node.geometry != null) {\n      this.map.flyTo({\n        center: node.geometry.coordinates\n      });\n    }\n  }\n\n  handleEdit(node: SiteEntity, event: any): void {\n\n    event.stopPropagation();\n\n    this.service.edit(node.id).then(data => {\n      this.bsModalRef = this.modalService.show(EntityModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n        'class': 'edit-modal'\n      });\n      this.bsModalRef.content.init(false, this.userName, this.admin, data.item, data.attributes, this.map.getCenter(), this.map.getZoom());\n\n      this.bsModalRef.content.onNodeChange.subscribe(entity => {\n        // Update the node\n        entity.children = node.children;\n        entity.active = node.active;\n\n        this.refreshEntity(entity, this.nodes);\n        this.refreshEntity(entity, this.breadcrumbs);\n\n        this.nodes.forEach(node => {\n          this.refreshEntity(entity, node.children);\n        });\n\n        if (this.metadataService.getMetadata(entity).root) {\n          this.refreshMapPoints(false);\n        }\n      });\n    });\n  }\n\n  refreshEntity(node: SiteEntity, nodes: SiteEntity[]): void {\n\n    if (nodes != null) {\n      let indexOf = nodes.findIndex(i => i.id === node.id);\n\n      if (indexOf !== -1) {\n        nodes[indexOf] = node;\n      }\n    }\n  }\n\n  handleDownloadAll(node: SiteEntity): void {\n\n    window.location.href = acp + '/project/download-all?id=' + node.component + \"&key=\" + node.name;\n\n    //      this.service.downloadAll( data.id ).then( data => {\n    //        \n    //      } ).catch(( err: HttpErrorResponse ) => {\n    //          this.error( err );\n    //      } );\n  }\n\n  handleDelete(node: SiteEntity, event: any): void {\n\n    event.stopPropagation();\n\n    let sText = '<b>IMPORTANT:</b> [' + node.name + '] will be deleted along with all underlying data including all files in Collections and Accessible Support';\n\n    if (node.type === 'Collection') {\n      sText = '<b>IMPORTANT:</b> [' + node.name + '] will be deleted along with all underlying data including all files.';\n    }\n\n    sText += ' This can <b>NOT</b> be undone';\n\n    this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n    });\n    this.bsModalRef.content.message = 'Are you sure you want to delete [' + node.name + ']?';\n    this.bsModalRef.content.subText = sText;\n    this.bsModalRef.content.data = node;\n    this.bsModalRef.content.type = 'DANGER';\n    this.bsModalRef.content.submitText = 'Delete';\n\n    (<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n      this.remove(data);\n    });\n  }\n\n  remove(node: SiteEntity): void {\n    this.service.remove(node.id).then(() => {\n      this.nodes = this.nodes.filter((n: any) => n.id !== node.id);\n\n      this.nodes.forEach(n => {\n        if (n.children != null) {\n          n.children = n.children.filter((child: any) => child.id !== node.id);\n\n          n.numberOfChildren = n.children.length;\n        }\n      });\n\n      if (node.type === 'Site') {\n        this.refreshMapPoints(false);\n      }\n    });\n  }\n\n\n  handleDownload(node: SiteEntity): void {\n    window.location.href = acp + '/project/download?id=' + node.component + \"&key=\" + node.key;\n\n    //this.service.download( node.data.component, node.data.key, true ).subscribe( blob => {\n    //    importedSaveAs( blob, node.data.name );\n    //} );\n  }\n\n  handleImageDownload(image: any): void {\n    window.location.href = acp + '/project/download?id=' + image.component + \"&key=\" + image.key;\n\n    //this.service.download( node.data.component, node.data.key, true ).subscribe( blob => {\n    //    importedSaveAs( blob, node.data.name );\n    //} );\n  }\n\n  handleStyle(layer: any): void {\n\n    this.baseLayers.forEach(baseLayer => {\n      baseLayer.selected = false;\n    });\n\n    layer.selected = true;\n\n    this.map.setStyle('mapbox://styles/mapbox/' + layer.id);\n  }\n\n  highlightMapFeature(id: string): void {\n\n    this.map.setFilter('hover-points', ['all',\n      ['==', 'oid', id]\n    ])\n\n  }\n\n  clearHighlightMapFeature(): void {\n\n    this.map.setFilter('hover-points', ['all',\n      ['==', 'oid', \"NONE\"]\n    ])\n\n  }\n\n  onListEntityHover(event: any, site: SiteEntity): void {\n    if (this.current == null) {\n      this.highlightMapFeature(site.id);\n    }\n  }\n\n  onListEntityHoverOff(): void {\n    this.clearHighlightMapFeature();\n  }\n\n  highlightListItem(id: string): void {\n    this.nodes.forEach(node => {\n      if (node.id === id) {\n        this.hoverFeatureId = id;\n      }\n    })\n  }\n\n  clearHighlightListItem(): void {\n    if (this.hoverFeatureId) {\n      this.nodes.forEach(node => {\n        if (node.id === this.hoverFeatureId) {\n          this.hoverFeatureId = null;\n        }\n      })\n    }\n  }\n\n\n  handleClick($event: any): void {\n    let result = $event.item;\n\n    if (result.center) {\n      this.map.flyTo({\n        center: result.center,\n        zoom: 18\n      })\n    }\n    else {\n      const index = result.hierarchy.length - 1;\n\n      const selected = result.hierarchy[index];\n\n      this.handleViewSite(selected.id);\n    }\n  }\n\n  handleViewSite(id: string): void {\n    this.service.view(id).then(response => {\n      const node = response.item;\n      const breadcrumbs = response.breadcrumbs;\n\n      if (this.getMetadata(node).leaf) {\n        this.breadcrumbs = breadcrumbs;\n        this.current = breadcrumbs[breadcrumbs.length - 1];\n        this.nodes = this.current.children;\n\n        this.select(node, null, null);\n      }\n      else {\n        const parent = breadcrumbs.length > 0 ? breadcrumbs[breadcrumbs.length - 1] : null;\n        this.breadcrumbs = breadcrumbs;\n\n        this.select(node, parent, null);\n      }\n    });\n\n  }\n  \n  handleMapOrtho(product: Product): void {\n\n    const layer = this.getLayerByClassification(\"ORTHO\", product);\n\n    if (layer != null && layer.key != null) {\n      if (this.map.getLayer(layer.key) != null) {\n        this.map.removeLayer(layer.key);\n        this.map.removeSource(layer.key);\n\n        layer.isMapped = false;\n        product.orthoMapped = false;\n      }\n      else {\n        this.addImageLayer(layer);\n\n        layer.isMapped = true;\n        product.orthoMapped = true;\n\n        if (product.boundingBox != null) {\n          let bbox = product.boundingBox;\n\n          let bounds = new LngLatBounds([bbox[0], bbox[2]], [bbox[1], bbox[3]]);\n\n          this.map.fitBounds(bounds, { padding: 50 });\n        }\n      }\n    }\n  }\n  \n  getLayerByClassification(classification: string, product: Product): GeoserverLayer {\n    let len = product.layers.length;\n  \n    for (let i = 0; i < len; ++i)\n    {\n      let layer: GeoserverLayer = product.layers[i];\n    \n      if (layer.classification === classification)\n      {\n        return layer;\n      }\n    }\n  \n    return null;\n  }\n  \n  handleMapDem(product: Product): void {\n\n    const layer = this.getLayerByClassification(\"DEM_DSM\", product);\n\n    if (layer != null && layer.key != null) {\n      if (this.map.getLayer(layer.key) != null) {\n        this.map.removeLayer(layer.key);\n        this.map.removeSource(layer.key);\n\n        layer.isMapped = false;\n        product.demMapped = false;\n      }\n      else {\n        this.addImageLayer(layer);\n\n        layer.isMapped = true;\n        product.demMapped = true;\n\n        if (product.boundingBox != null) {\n          let bbox = product.boundingBox;\n\n          let bounds = new LngLatBounds([bbox[0], bbox[2]], [bbox[1], bbox[3]]);\n\n          this.map.fitBounds(bounds, { padding: 50 });\n        }\n      }\n    }\n  }\n\n  addImageLayer(layer: GeoserverLayer) {\n    const workspace = encodeURI(layer.workspace);\n    const layerName = encodeURI(layer.workspace + ':' + layer.key);\n\n    this.map.addLayer({\n      'id': layer.key,\n      'type': 'raster',\n      'source': {\n        'type': 'raster',\n        'tiles': [\n          '/geoserver/' + workspace + '/wms?layers=' + layerName + '&bbox={bbox-epsg-3857}&format=image/png&service=WMS&version=1.1.1&request=GetMap&srs=EPSG:3857&transparent=true&width=256&height=256'\n        ],\n        'tileSize': 256\n      },\n      'paint': {}\n    }, \"points\");\n  }\n\n  handleGoto(): void {\n\n    //    -111.12439336274211\n    //    39.32066259372583\n    //    -111.12342302258116\n    // 39.32107716199166\n\n    var bounds = new LngLatBounds([-111.12439336274211, 39.32066259372583, -111.12342302258116, 39.32107716199166]);\n\n    this.map.fitBounds(bounds);\n  }\n\n\n  getMetadata(node: SiteEntity): any {\n    const metadata = this.metadataService.getMetadata(node);\n\n    return metadata;\n  }\n\n\n  select(node: SiteEntity, parent: SiteEntity, event: any): void {\n\n    if (event != null) {\n      event.stopPropagation();\n    }\n    \n    if (node != null && node.geometry != null && node.geometry.type === \"Point\")\n    {\n      //this.map.fitBounds(this.allPointsBounds, { padding: 50 });\n      \n      this.map.easeTo({\n        center: node.geometry.coordinates,\n        zoom: 8\n      });\n    }\n\n    const metadata = this.metadataService.getMetadata(node);\n\n    if (metadata.leaf) {\n      const breadcrumbs = [...this.breadcrumbs];\n\n      if (parent != null) {\n        breadcrumbs.push(parent);\n      }\n\n      if (this.metadataService.getTypeContainsFolders(node)) {\n        this.service.getItems(node.id, null).then(nodes => {\n          this.showLeafModal(node, nodes, breadcrumbs);\n        });\n      }\n      else {\n        this.showLeafModal(this.current, [node], breadcrumbs);\n      }\n    }\n    else if (node.type === \"object\") {\n      // Do nothing there are no children\n      //                return this.service.getItems( node.data.id, node.data.name );\n    }\n    else {\n      this.service.getItems(node.id, null).then(nodes => {\n        this.current = node;\n\n        if (parent != null) {\n          this.addBreadcrumb(parent);\n        }\n\n        this.addBreadcrumb(node);\n        this.setNodes(nodes);\n      });\n    }\n  }\n\n  addBreadcrumb(node: SiteEntity): void {\n\n    if (this.breadcrumbs.length == 0 || this.breadcrumbs[this.breadcrumbs.length - 1].id !== node.id) {\n      this.breadcrumbs.push(node);\n    }\n  }\n\n  handleExpand(node: SiteEntity, event: any): void {\n\n    if (event != null) {\n      event.stopPropagation();\n    }\n\n    if (node.children == null || node.children.length == 0) {\n      this.service.getItems(node.id, null).then(nodes => {\n        node.children = nodes;\n\n        this.expand(node);\n      });\n    }\n    else {\n      // this.expand( node );\n      node.children = [];\n      node.active = false;\n    }\n  }\n\n  handleGotoSite(product: Product): void {\n    const entity = product.entities[product.entities.length - 1];\n\n    const breadcrumbs = product.entities;\n\n    this.service.getItems(entity.id, null).then(nodes => {\n      this.showLeafModal(entity, nodes, breadcrumbs);\n    });\n  }\n\n\n  back(node: SiteEntity): void {\n\n    if (node != null) {\n      if (node.geometry != null && node.geometry.type === \"Point\")\n      {\n        //this.map.fitBounds(this.allPointsBounds, { padding: 50 });\n        \n        this.map.easeTo({\n          center: node.geometry.coordinates,\n          zoom: 8\n        });\n      }\n    \n      this.service.getItems(node.id, null).then(nodes => {\n        var indexOf = this.breadcrumbs.findIndex(i => i.id === node.id);\n\n        this.current = node;\n        this.breadcrumbs.splice(indexOf + 1);\n        this.setNodes(nodes);\n      });\n    }\n    else if (this.breadcrumbs.length > 0) {\n      this.loadingSites = true;\n      this.service.roots(null, null).then(nodes => {\n        this.loadingSites = false;\n        this.breadcrumbs = [];\n        this.setNodes(nodes);\n        this.staticTabs.tabs[0].active = true;\n      \n        this.map.fitBounds(this.allPointsBounds, { padding: 50 });\n        \n        // This hack exists because the handleExtentChange method gets called immediately after we do fitBounds\n        // and it gets called with some really closely zoomed-in bbox which dumps our nodes we just fetched...\n        let that = this;\n        window.setTimeout(function(){\n          that.current = null;\n        }, 500);\n      });\n    }\n  }\n\n  expand(node: SiteEntity) {\n    node.active = true;\n    this.current = node;\n  }\n\n  setNodes(nodes: SiteEntity[]): void {\n    this.nodes = [];\n    this.supportingData = [];\n\n    nodes.forEach(node => {\n      if (node.type === 'folder') {\n        this.supportingData.push(node);\n      }\n      else {\n        this.nodes.push(node);\n      }\n    })\n  }\n\n  showLeafModal(collection: SiteEntity, folders: SiteEntity[], breadcrumbs: SiteEntity[]): void {\n\n    if (collection.type === 'Mission') {\n      this.bsModalRef = this.modalService.show(AccessibleSupportModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n        class: 'leaf-modal modal-lg'\n      });\n      this.bsModalRef.content.init(collection, folders, breadcrumbs);\n    }\n    else {\n      this.bsModalRef = this.modalService.show(LeafModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n        class: 'leaf-modal modal-lg'\n      });\n      this.bsModalRef.content.init(collection, folders, breadcrumbs);\n    }\n  }\n}\n","<uasdm-header [title]=\"'Data Upload'\"></uasdm-header>\n\n<div id=\"app-container\" class=\"container\">\n    <div *ngIf=\"sites.length === 0\" class=\"row\">\n        <div class=\"col-md-2\"></div>\n        <div class=\"col-md-8\">\n            <h4 style=\"margin-top: 50px;\">\n                There are no Sites added to the system. Add a Site, Project, Mission, and Collection using the \n                <a routerlink=\"/viewer\" routerlinkactive=\"active\" href=\"#/viewer\">Site Viewer</a> \n                before uploading data to.\n            </h4>\n        </div>\n        <div class=\"col-md-2\"></div>\n    </div>\n    <div *ngIf=\"sites.length > 0\" class=\"row\">\n        <div class=\"col-md-2\"></div>\n        <div class=\"col-md-8\">\n            <form #ngForm=\"ngForm\">\n\n                <!-- Existing task panel -->\n                <div class=\"\" *ngIf=\"existingTask && !currentTask\">\n                    <div class=\"panel panel-warning\" style=\"margin: 30px 0 30px 0;\">\n                        <div class=\"panel-heading\" style=\"font-size: 20px;\">Partial Upload Detected</div>\n                        <div class=\"panel-body\">\n                            <h4>A partial upload was detected. You can either cancel that partial upload or attempt to\n                                continue.</h4>\n                            <h4>\n                                <b>To continue an upload</b>\n                                please click the Continue Upload button and re-upload your file and we will try our best\n                                to continue where you left off.\n                            </h4>\n\n                            <hr>\n                            <button type=\"button\" class=\"btn btn-danger\" style=\"margin-top: 20px;\"\n                                (click)=\"removeUpload($event)\">\n                                <i class=\"icon-upload icon-white\"></i>\n                                Cancel Upload\n                            </button>\n                            <button type=\"button\" class=\"btn btn-primary\" style=\"margin-top: 20px;\"\n                                (click)=\"showUploadPanel()\">\n                                <i class=\"icon-upload icon-white\"></i>\n                                Continue Upload\n                            </button>\n                        </div>\n                    </div>\n                </div> <!-- End existing task panel -->\n\n                <!-- Task finished upload notification -->\n                <div *ngFor=\"let note of taskFinishedNotifications\" class=\"panel panel-success\" style=\"margin: 30px 0 30px 0;\">\n                    <div class=\"panel-heading\" style=\"font-size: 20px;\">\n                        Upload Details\n                        <i class=\"fa fa-times btn btn-close pull-right\" style=\"min-width:20px;padding:0;line-height: 27px;\" (click)=\"closeTaskFinishedNotification(note.id)\"></i>\n                    </div>\n                    <div class=\"panel-body\">\n                        <h4>\n                            Status:\n                            <b> Upload successfully completed </b>\n                        </h4>\n                        <h4>\n                            Message:\n                            <b> Your uploaded data is being processed into final image products. </b>\n                        </h4>\n                    </div>\n                </div> <!-- End task finished upload notification -->\n\n                <div style=\"margin-top: 30px;\" class=\"\" *ngIf=\"!disabled && !existingTask\">\n                    <div class=\"form-group\">\n                        <label for=\"site\">Site:</label>\n                        <select name=\"site\" (change)=\"onSiteSelect($event.target.value)\" [(ngModel)]=\"values.site\"\n                            required>\n                            <option></option>\n                            <option *ngFor=\"let site of sites\" [value]=\"site.id\">{{site.name}}</option>\n                        </select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"project\">Project:</label>\n                        <select name=\"project\" [attr.disabled]=\"values.site == null ? '' : null\"\n                            (change)=\"onProjectSelect($event.target.value)\" [(ngModel)]=\"values.project\" required>\n                            <option></option>\n                            <option *ngFor=\"let project of projects\" [value]=\"project.id\">{{project.name}}</option>\n                        </select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"mission\">Mission:</label>\n                        <select name=\"mission\" [attr.disabled]=\"values.project == null ? '' : null\"\n                            (change)=\"onMissionSelect($event.target.value)\" [(ngModel)]=\"values.mission\" required>\n                            <option></option>\n                            <option *ngFor=\"let mission of missions\" [value]=\"mission.id\">{{mission.name}}</option>\n                        </select>\n                    </div>\n                    <!-- \n                            <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input type=\"radio\" class=\"form-check-input\" name=\"radioopt\" [(ngModel)]=\"values.create\" [value]=\"true\" (change)=\"handleChange()\" [checked]=\"values.create==true\" />\n                                Create new collection\n                            </label>\n                            </div>\n                            <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input type=\"radio\" class=\"form-check-input\" name=\"radioopt\" value=\"false\" [(ngModel)]=\"values.create\" (change)=\"handleChange()\" [value]=\"false\" [checked]=\"values.create==false\" />\n                                Add to existing collection\n                            </label>\n                            </div>\n                            <div class=\"form-group\" *ngIf=\"values.create === true\">\n                            <label for=\"nameInput\">Name</label>\n                            <input [(ngModel)]=\"values.name\" name=\"name\" type=\"input\" class=\"form-control\" id=\"nameInput\" placeholder=\"Name\" #nameField=\"ngModel\" required forbiddenName>\n                            <div class=\"error-container\" *ngIf=\"nameField.errors && nameField.errors.forbiddenName\">\n                                Invalid name. No spaces or special characters such as <, >, -, +, =, !, @, #, $, %, ^, &, *, ?,/, \\ or apostrophes are allowed.        \n                            </div>\n                            </div>\n                    -->\n                    <div class=\"form-group\">\n                        <label for=\"collection\">Collection:</label>\n                        <select name=\"collection\" [attr.disabled]=\"values.mission == null ? '' : null\"\n                            (change)=\"onCollectionSelect($event.target.value)\" [(ngModel)]=\"values.collection\" required>\n                            <option></option>\n                            <option *ngFor=\"let collection of collections\" [value]=\"collection.id\">{{collection.name}}\n                            </option>\n                        </select>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"outFileName\">Output Product Name Prefix</label>\n                        <input [(ngModel)]=\"values.outFileName\" name=\"outFileName\" type=\"input\" class=\"form-control\" placeholder=\"Output product name prefix...\" />\n                    </div>\n                </div>\n\n                <!-- Current upload indicator -->\n                <div class=\"\" [hidden]=\"!uploadVisible\">\n                    <div *ngIf=\"currentTask\" class=\"panel panel-warning\" style=\"margin: 30px 0 30px 0;\">\n                        <div class=\"panel-heading\" style=\"font-size: 20px;\">Upload Details</div>\n                        <div class=\"panel-body\">\n                            <h4>\n                                Status:\n                                <b> {{currentTask.status}} </b>\n                            </h4>\n                            <h4>\n                                Message:\n                                <b> {{currentTask.message}} </b>\n                            </h4>\n                            <h4>\n                                Upload Started On:\n                                <b> {{currentTask.createDate | idmdate}} </b>\n                            </h4>\n                            <h4>\n                                Last Updated:\n                                <b> {{currentTask.lastUpdateDate | idmdate}} </b>\n                            </h4>\n                            <h4>\n                                Elapsed Time:\n                                <b> {{uploadCounter}} </b>\n                            </h4>\n                        </div>\n                    </div>\n\n                    <div *ngIf=\"showFileSelectPanel\" class=\"uploader-container\" style=\"margin-top: 20px;\" #uploader></div>\n\n                    <button type=\"button btn btn-primary\" [disabled]=\"!ngForm.valid || disabled\" class=\"btn btn-primary\"\n                        style=\"margin-top: 20px;\" (click)=\"handleUpload()\">\n                        <i class=\"icon-upload icon-white\"></i>\n                        Upload\n                    </button>\n                </div> <!-- End current upload indicator -->\n            </form>\n\n        </div>\n        <div class=\"col-md-2\"></div>\n    </div>\n</div>","import { Component, OnInit, AfterViewInit, Inject, ViewChild, ElementRef, KeyValueDiffers, DoCheck, HostListener } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { interval } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\n//use Fine Uploader UI for traditional endpoints\nimport { FineUploader, UIOptions } from 'fine-uploader';\n\nimport { ErrorModalComponent } from '@shared/component/modal/error-modal.component';\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\nimport { SiteEntity, UploadForm, Task } from '../model/management';\nimport { ManagementService } from '../service/management.service';\n\n\ndeclare var acp: string;\n\n@Component( {\n    selector: 'upload',\n    templateUrl: './upload.component.html',\n    styleUrls: []\n} )\nexport class UploadComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n    private bsModalRef: BsModalRef;\n\n    /* \n     * List of sites\n     */\n    sites = [] as SiteEntity[];\n\n    /* \n     * List of projects\n     */\n    projects = [] as SiteEntity[];\n\n    /* \n     * List of missions\n     */\n    missions = [] as SiteEntity[];\n\n    /* \n     * List of collections\n     */\n    collections = [] as SiteEntity[];\n\n    /* \n     * Form values\n     */\n    values = { create: false } as UploadForm;\n\n    /*\n     * FineUploader for uploading large files\n     */\n    uploader = null as FineUploader;\n\n    disabled: boolean = false;\n    taskStatusMessages: string[] = [];\n    currentTask: Task = null;\n    existingTask: boolean = false;\n    taskPolling: any;\n    pollingIsSet: boolean = false;\n    uploadVisible: boolean = true;\n    selectedContinue: boolean = false;\n    uploadCounter: string = \"00:00:00\";\n    uplodeCounterInterfal: any;\n    differ: any;\n    showFileSelectPanel: boolean = false;\n    taskFinishedNotifications: any[] = [];\n\n    constructor( private service: ManagementService, private modalService: BsModalService, differs: KeyValueDiffers ) {\n        this.differ = differs.find( [] ).create();\n    }\n\n    ngDoCheck() {\n\n        if ( this.uploader ) {\n            const change = this.differ.diff( this.uploader );\n            if ( change ) {\n                this.setExistingTask();\n            }\n        }\n    }\n\n    @ViewChild( 'uploader' ) set content( elem: ElementRef ) {\n\n        const that = this;\n\n        if ( elem != null && this.uploader == null ) {\n\n            let uiOptions: UIOptions = {\n                debug: false,\n                autoUpload: false,\n                multiple: false,\n                element: elem.nativeElement,\n                template: 'qq-template',\n                request: {\n                    endpoint: acp + \"/file/upload\",\n                    forceMultipart: true\n                },\n                resume: {\n                    enabled: true,\n                    recordsExpireIn: 1\n                },\n                chunking: {\n                    enabled: true\n                },\n                retry: {\n                    enableAuto: true\n                },\n                text: {\n                    defaultResponseError: \"Upload failed\"\n                },\n                failedUploadTextDisplay: {\n                    mode: 'none'\n                    //responseProperty: 'error'\n                },\n                validation: {\n                    allowedExtensions: ['zip', 'tar.gz']\n                },\n                showMessage: function( message: string ) {\n                    // \n                },\n                callbacks: {\n                    onUpload: function( id: any, name: any ): void {\n                        that.disabled = true;\n\n                        // document.getElementById(\"select-file-button\").className = document.getElementById(\"select-file-button\").className + \" hidden\";\n\n                        that.countUpload( that );\n                    },\n                    onProgress: function( id: any, name: any, uploadedBytes: any, totalBytes: any ): void {\n                    },\n                    onUploadChunk: function( id: any, name: any, chunkData: any ): void {\n                    },\n                    onUploadChunkSuccess: function( id: any, chunkData: any, responseJSON: any, xhr: any ): void {\n\n                        if ( responseJSON.message && responseJSON.message.currentTask && !that.currentTask ) {\n                            that.currentTask = responseJSON.message.currentTask;\n                        }\n\n                        if ( that.currentTask && !that.pollingIsSet ) {\n                            that.pollingIsSet = true;\n\n                            that.taskPolling = interval( 2000 )\n                                .pipe(switchMap(() => {\n                                    if ( that.currentTask ) {\n                                        return that.service.task( that.currentTask.oid );\n                                    }\n                                } ))\n                                .pipe(map(( data ) => data ))\n                                .subscribe(( data ) => {\n                                    that.currentTask = data.task\n                                } );\n                        }\n                    },\n                    onComplete: function( id: any, name: any, responseJSON: any, xhrOrXdr: any ): void {\n                        that.disabled = false;\n                        that.currentTask = null;\n                        that.existingTask = false;\n\n                        if ( that.taskPolling ) {\n                            that.taskPolling.unsubscribe();\n                            that.pollingIsSet = false;\n                        }\n\n                        this.clearStoredFiles();\n\n                        // document.getElementById(\"select-file-button\").classList.remove(\"hidden\");\n\n                        clearInterval( that.uplodeCounterInterfal );\n\n                        that.taskFinishedNotifications.push(\n                            {\n                                'id': id\n                            }\n                        )\n                    },\n                    onCancel: function( id: number, name: string ) {\n                        //that.currentTask = null;\n\n                        if ( that.currentTask && that.currentTask.uploadId ) {\n                            that.service.removeTask( that.currentTask.uploadId )\n                                .then(() => {\n                                    this.clearStoredFiles();\n                                } )\n                                .catch(( err: HttpErrorResponse ) => {\n                                    this.error( err );\n                                } );\n                        }\n\n                        that.disabled = false;\n                        that.currentTask = null;\n                        that.existingTask = false;\n\n                        if ( that.taskPolling ) {\n                            that.taskPolling.unsubscribe();\n                            that.pollingIsSet = false;\n                        }\n\n                        // document.getElementById(\"select-file-button\").classList.remove(\"hidden\");\n\n                        clearInterval( that.uplodeCounterInterfal );\n                    },\n                    onError: function( id: number, errorReason: string, xhrOrXdr: string ) {\n                        that.error( xhrOrXdr );\n                    }\n                }\n            };\n\n            this.uploader = new FineUploader( uiOptions );\n\n        }\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnInit(): void {\n        this.service.roots( null, null ).then( sites => {\n            this.sites = sites;\n        } );\n    }\n\n    closeTaskFinishedNotification( id: string ): void {\n        // iterate in reverse to allow splice while avoiding the reindex\n        // from affecting any of the next items in the array.\n        let i = this.taskFinishedNotifications.length;\n        while ( i-- ) {\n            let note = this.taskFinishedNotifications[i];\n            if ( id === note.id ) {\n                this.taskFinishedNotifications.splice( i, 1 );\n            }\n        }\n    }\n\n\n    setExistingTask(): void {\n        let resumable = this.uploader.getResumableFilesData() as any[];\n        if ( resumable.length > 0 ) {\n            this.existingTask = true;\n\n            if ( !this.selectedContinue ) {\n                this.hideUploadPanel();\n            }\n        }\n    }\n\n    onSiteSelect( siteId: string ): void {\n        this.values.site = siteId;\n\n        if ( siteId != null && siteId.length > 0 ) {\n\n            // Reset select options\n            this.projects = [] as SiteEntity[];\n            this.missions = [] as SiteEntity[];\n            this.collections = [] as SiteEntity[];\n\n            // Reset form values\n            this.values.project = null;\n            this.values.mission = null;\n            this.values.collection = null;\n\n            this.service.getChildren( this.values.site ).then( projects => {\n                this.projects = projects;\n            } );\n        }\n\n        //console.log( this.values );\n    }\n\n    onProjectSelect( projectId: string ): void {\n        this.values.project = projectId;\n\n        // Reset select options\n        this.missions = [] as SiteEntity[];\n        this.collections = [] as SiteEntity[];\n\n        // Reset form values\n        this.values.mission = null;\n        this.values.collection = null;\n\n        if ( projectId != null && projectId.length > 0 ) {\n            this.service.getChildren( this.values.project ).then( missions => {\n                this.missions = missions.filter( mission => {\n                    return mission.type === 'Mission';\n                } );\n            } );\n        }\n    }\n\n    onMissionSelect( missionId: string ): void {\n        this.values.mission = missionId;\n\n        // Reset select options\n        this.collections = [] as SiteEntity[];\n\n        // Reset form values\n        this.values.collection = null;\n        this.values.name = null;\n\n        if ( missionId != null && missionId.length > 0 && !this.values.create ) {\n\n            this.service.getChildren( this.values.mission ).then( collections => {\n                this.collections = collections;\n            } );\n        }\n    }\n\n    handleChange(): void {\n\n        // Reset select options\n        this.collections = [] as SiteEntity[];\n\n        // Reset form values\n        this.values.collection = null;\n        this.values.name = null;\n\n        if ( this.values.mission != null && this.values.mission.length > 0 && !this.values.create ) {\n\n            this.service.getChildren( this.values.mission ).then( collections => {\n                this.collections = collections;\n            } );\n        }\n    }\n\n    onCollectionSelect( collectionId: string ): void {\n        this.values.collection = collectionId;\n        this.values.uasComponentOid = collectionId;\n\n        if ( collectionId && collectionId.trim().length > 0 ) {\n            this.showFileSelectPanel = true;\n        }\n        else {\n            this.showFileSelectPanel = false\n        }\n    }\n\n    handleUpload(): void {\n\n        /*\n         * Validate form values before uploading\n         */\n        if ( !this.values.create && this.values.collection == null && !this.existingTask ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = \"A collection must first be selected before the file can be uploaded\";\n        }\n        else if ( this.values.create && ( this.values.mission == null || this.values.name == null || this.values.name.length == 0 ) && !this.existingTask ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = \"Name is required\";\n        }\n        else {\n            this.uploader.setParams( this.values );\n            this.uploader.uploadStoredFiles();\n        }\n\n    }\n\n    removeUpload( event: any ): void {\n        let that = this;\n\n        this.bsModalRef = this.modalService.show( BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = 'Are you sure you want to cancel the upload of [' + this.uploader.getResumableFilesData()[0].name + ']';\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = 'Cancel Upload';\n\n        ( <BasicConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.service.removeTask( this.uploader.getResumableFilesData()[0].uuid )\n                .then(() => {\n                    //that.uploader.clearStoredFiles();\n                    //that.uploader.cancelAll()\n\n                    // The above clearStoredFiles() and cancelAll() methods don't appear to work so \n                    // we are clearing localStorage manually.\n                    localStorage.clear();\n                    that.existingTask = false;\n                    that.showUploadPanel();\n\n                } );\n        } );\n    }\n\n    hideUploadPanel(): void {\n        this.uploadVisible = false;\n    }\n\n    showUploadPanel(): void {\n        this.uploadVisible = true;\n        this.selectedContinue = true;\n    }\n\n    countUpload( thisRef: any ): void {\n        let ct = 0;\n\n\n        function incrementSeconds() {\n            ct += 1;\n\n            let hours = Math.floor( ct / 3600 )\n            let minutes = Math.floor(( ct % 3600 ) / 60 );\n            let seconds = Math.floor( ct % 60 );\n\n            let hoursStr = minutes < 10 ? \"0\" + hours : hours;\n            let minutesStr = minutes < 10 ? \"0\" + minutes : minutes;\n            let secondsStr = seconds < 10 ? \"0\" + seconds : seconds;\n\n            thisRef.uploadCounter = hoursStr + \":\" + minutesStr + \":\" + secondsStr;\n        }\n\n        thisRef.uplodeCounterInterfal = setInterval( incrementSeconds, 1000 );\n    }\n\n    public canDeactivate(): boolean {\n        return this.disabled;\n    }\n\n    @HostListener( 'window:beforeunload', ['$event'] )\n    unloadNotification( $event: any ) {\n        if ( this.disabled ) {\n            $event.returnValue = 'An upload is currently in progress. Are you sure you want to leave?';\n        }\n    }\n\n    error( message: string ): void {\n        if ( message !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = message;\n        }\n    }\n}\n","<div class=\"panel-group\">\n  <div class=\"panel panel-default\" style=\"background: none;border: none;\">\n    <div class=\"panel-heading panel-heading-light clickable\" style=\"margin-top: 20px;\">\n      <h4 class=\"panel-title\">\n        <a data-toggle=\"collapse\" (click)=\"showProcess = !showProcess\" attr.aria-controls=\"task-group-panel-{{groupTypeId}}\">\n          <h4>{{taskCategory}}</h4>\n        </a>\n      </h4>\n      <span class=\"heading-status-label pull-right\">Current status: <span\n          [ngClass]=\"{'success':taskGroupType.status === 'Complete', 'warning':taskGroupType.status  === 'Warning', 'pending':taskGroupType.status === 'Queued' || taskGroupType.status === 'Processing','fail':taskGroupType.status === 'Failed'}\">{{taskGroupType.status}}</span></span>\n    </div>\n    <div id=\"task-group-panel-{{groupTypeId}}\" class=\"panel-body\" [isAnimated]=\"false\" [collapse]=\"!showProcess\">\n\n      <div class=\"task-container\" *ngFor=\"let task of taskGroupType.tasks; let idx=index\">\n        <div *ngIf=\"task.status !== 'Complete' && task.status !== 'Failed' && task.status !== 'Error'\" >\n          <ul class=\"list-unstyled\" style=\"margin: 0;\">\n            <li>Status: <b\n                [ngClass]=\"{'success':task.status === 'Complete', 'pending':(task.status === 'Queued' || task.status === 'Processing'),'fail':task.status === 'Failed'}\">{{task.status}}</b>\n            </li>\n            <li>Created on: <b>{{task.createDate | idmdate}}</b></li>\n            <li>Last update: <b>{{task.lastUpdateDate | idmdate}}</b></li>\n            <li style=\"word-break: break-all;\">Message: <b>{{task.message}}</b></li>\n            <li *ngIf=\"taskCategory == 'Upload'\">Sensor: <b>{{task.sensorName}}</b></li>\n          </ul>\n          \n          <div class=\"row\">\n            <div class=\"col-sm-12\">\n              <div class=\"button-holder\" style=\"margin-top: 30px;\">\n                <button class=\"btn btn-default\" *ngIf=\"task.actions.length > 0\" (click)=\"task.showError = !task.showError\">{{task.showError ? 'Hide' : 'Show'}} Messages</button>\n                <button class=\"btn btn-default caution\" (click)=\"removeTask(task)\">Delete Task</button>\n              </div>\n            </div>\n          </div>          \n        </div>\n\n        <div *ngIf=\"task.status === 'Complete' || task.status === 'Failed' || task.status === 'Error'\">\n          <ul class=\"list-unstyled\" style=\"margin: 0;\">\n            <li>Status: \n              <b [ngClass]=\"{'success':task.status === 'Complete','pending':(task.status === 'Queued' || task.status === 'Processing'), 'fail':task.status === 'Failed'}\">\n                {{task.status === 'Complete' && task.actions.length > 0 ? 'Complete With Messages' : task.status }}\n              </b>\n            </li>\n            <li>Message: <b>{{task.message}}</b></li>\n            <li>Created on: <b>{{task.createDate | idmdate}}</b></li>\n            <li>Last update: <b>{{task.lastUpdateDate | idmdate}}</b></li>\n            <li *ngIf=\"taskCategory == 'Upload'\">Sensor: <b>{{task.sensorName}}</b></li>\n          </ul>\n\n          <div class=\"row\">\n            <div class=\"col-sm-12\">\n              <div class=\"button-holder\" style=\"margin-top: 30px;\">\n                <button class=\"btn btn-default\" *ngIf=\"task.actions.length > 0\" (click)=\"task.showError = !task.showError\">{{task.showError ? 'Hide' : 'Show'}} Messages</button>\n                <button class=\"btn btn-default\" *ngIf=\"task.odmOutput\" (click)=\"showODMOutput = !showODMOutput\">Show Detailed Log Output</button>\n                <button class=\"btn btn-default caution\" (click)=\"removeTask(task)\">Delete Task</button>\n              </div>\n            </div>\n          </div>\n\n          <div *ngIf=\"task.odmOutput && showODMOutput\" class=\"row\">\n            <div class=\"col-sm-12\">\n              <h4>Output:</h4>\n              <textarea style=\"color:grey;width:500px;height:200px;\" [innerHTML]=\"task.odmOutput\"></textarea>\n            </div>\n          </div>\n        </div>\n        \n        <div *ngIf=\"task.showError\" class=\"row\">\n          <div class=\"col-sm-12\">\n            <h4 *ngIf=\"task.actions.length === 0\" style=\"color:grey;\">There are no actions for this task.</h4>\n            <table *ngIf=\"task.actions.length > 0\" class=\"table table-bordered\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Description</th>\n                  <th>Creation Date</th>\n                  <th>Last Updated</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let action of task.actions; let i=index\">\n                  <th scope=\"row\">{{i + 1}}</th>\n                  <td>{{action.description}}</td>\n                  <td>{{action.createDate | idmdate}}</td>\n                  <td>{{action.lastUpdateDate | idmdate}}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>        \n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\n\nimport { Task, TaskGroup, TaskGroupType } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\n\n\n@Component({\n\tselector: 'tasks-panel',\n\ttemplateUrl: './tasks-panel.component.html',\n\tstyleUrls: ['./tasks-panel.css']\n})\nexport class TasksPanelComponent implements OnInit {\n\n\t@Input() taskGroupType: TaskGroupType;\n\t@Input() groupTypeId: string;\n\t@Input() taskCategory: string;\n    \n\tshowUploads: boolean = false;\n\tshowProcess: boolean = false;\n\tshowStore: boolean = false;\n\tshowODMOutput: boolean = false;\n\tshowError: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n     */\n\tbsModalRef: BsModalRef;\n\n\n    /*\n     * List of tasks\n     */\n\ttaskGroups: TaskGroup[] = [];\n\n\tconstructor(private managementService: ManagementService, private modalService: BsModalService) {\n\n\t}\n\n\tngOnInit(): void {\n\t  if (this.taskGroupType != null && this.taskGroupType.tasks != null)\n\t  {\n\t\t  for (var i = 0; i < this.taskGroupType.tasks.length; ++i)\n\t\t  {\n\t\t    let task = this.taskGroupType.tasks[i];\n\t\t    \n\t\t    if (task.actions.length > 0)\n\t\t    {\n\t\t      task.showError = true;\n\t\t    }\n\t\t  }\n\t  }\n\t}\n\n\tngOnDestroy(): void {\n\t}\n\n\n\tremoveTask(task: Task): void {\n\n\t\tthis.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = 'Are you sure you want to delete [' + task.label + '?';\n\t\tthis.bsModalRef.content.data = task;\n\t\tthis.bsModalRef.content.type = 'DANGER';\n\t\tthis.bsModalRef.content.submitText = 'Delete';\n\n\t\t(<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(task => {\n\t\t\tthis.deleteTask(task);\n\t\t});\n\n\t}\n\n\tdeleteTask(task: Task) {\n\t\tthis.managementService.removeTask(task.uploadId)\n\t\t\t.then(() => {\n\t\t\t\tlet pos = null;\n\t\t\t\tfor (let i = 0; i < this.taskGroupType.tasks.length; i++) {\n\t\t\t\t\tlet thisTask = this.taskGroupType.tasks[i];\n\n\t\t\t\t\tif (thisTask.uploadId === task.uploadId) {\n\t\t\t\t\t\tpos = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (pos !== null) {\n\t\t\t\t\tthis.taskGroupType.tasks.splice(pos, 1);\n\t\t\t\t}\n\t\t\t});\n\t}\n}\n","<uasdm-header [title]=\"'Tasks'\"></uasdm-header>\n\n<div id=\"app-container\" class=\"container-fluid\" style=\"padding-top:20px;\">\n\n  <div class=\"row\">\n    <div class=\"col-sm-1\"></div>\n    <div class=\"col-sm-10\">\n      <div id=\"tasks\">\n\n        <div *ngIf=\"messages && messages.count > 0\">\n          <h2>Tasks</h2>\n\n          <div id=\"tasks-container\">\n            <div class=\"row\">\n              <h3 class=\"col-sm-7\">Issue</h3>\n              <h3 class=\"col-sm-5\" style=\"text-align:right; padding-right: 8em\">Actions</h3>\n            </div>\n            <div class=\"panel panel-default\" *ngFor=\"let message of messages.resultSet | paginate: {id: 'message-pg-ctrl', itemsPerPage: messages.pageSize, currentPage: messages.pageNumber, totalItems: messages.count }\">\n              <!-- <div class=\"panel-heading\">Panel heading without title</div> -->\n          \n              <div class=\"panel-body\">\n                <div class=\"row\">\n                  <div class=\"col-sm-7\">\n                    <div>\n                      <span class=\"dot pending\" style=\"margin-left:0;\"></span>\n                      {{message.message}}\n                    </div>\n                    <div style=\"margin-top:10px;margin-bottom:0;color:grey;\">\n                      <ul class=\"breadcrumb\" style=\"color:grey;\">\n                        <li *ngFor=\"let ancestor of message.ancestors\">\n                          <span > <b>{{ancestor}}</b> </span>\n                        </li>\n                        <li class=\"active\">\n                          <a (click)=\"handleGoto(message.collectionId)\" style=\"color: #007276;\"> {{message.collectionName}}</a>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                  <div class=\"col-sm-5\" style=\"text-align: right;\">\n                    <div>\n                      <button class=\"btn btn-default\" (click)=\"handleGoto(message.collectionId)\">View Collection</button>\n                      <button style=\"margin-left: 10px;\" class=\"btn btn-primary\" (click)=\"handleMessage(message)\">Add Metadata</button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n          \n            </div>\n            <div class=\"row\">\n              <pagination-controls id=\"message-pg-ctrl\" (pageChange)=\"onMessagePageChange($event)\"></pagination-controls>                  \n            </div>\n          </div>\n          \n        </div>\n\n      </div>\n    </div>\n    <div class=\"col-sm-1\"></div>\n  </div>\n\n\n  <div class=\"row\" style=\"margin-bottom: 40px;\">\n    <div class=\"col-sm-1\"></div>\n    <div class=\"col-sm-10\">\n      <h3>Processing Jobs</h3>\n\n      <ul class=\"nav nav-tabs\" role=\"tablist\">\n        <li class=\"active\">\n          <a role=\"tab\" data-toggle=\"tab\" (click)=\"onTabClick($event, 'all')\">All</a>\n        </li>\n        <li>\n          <a role=\"tab\" data-toggle=\"tab\" (click)=\"onTabClick($event, 'action-required')\">Action Required</a>\n        </li>\n<!-- \n        <li>\n          <a role=\"tab\" data-toggle=\"tab\" (click)=\"onTabClick($event, 'success')\">Successful</a>\n        </li>\n -->        \n      </ul>\n\n      <div class=\"tab-content\" >\n\n        <div *ngIf=\"activeTab === 'action-required'\" class=\"tab-pane active\" id=\"action-required\">\n          \n          <div class=\"panel-group\">\n            <div *ngFor=\"let taskGroup of taskPage.resultSet | paginate: { id: 'tasks-pg-ctrl', itemsPerPage: taskPage.pageSize, currentPage: taskPage.pageNumber, totalItems: taskPage.count }; let idx=index\" class=\"panel panel-default\" style=\"background: none;border: none;\">\n            \n                <div class=\"panel-heading clickable\">\n                  <h4 class=\"panel-title\" style=\"display: inline-block; vertical-align: middle;\">\n                    <a data-toggle=\"collapse\" (click)=\"setVisibility(taskGroup)\" [attr.aria-expanded]=\"!visible[taskGroup.collectionId]\"\n                      [attr.aria-controls]=\"'taskGroup'+ idx\">\n                      <h4>{{taskGroup.label}}</h4>\n                    </a>\n                  </h4>\n                  \n                  <span class=\"dot\" [ngClass]=\"{'success':taskGroup.status === 'Complete','warning':taskGroup.status === 'Warning', 'pending blink':taskGroup.status === 'Processing' || taskGroup.status === 'Running' || taskGroup.status === 'Pending' || taskGroup.status === 'Queued','fail':taskGroup.status === 'Failed'}\" ></span>\n\n                  <button class=\"btn btn-default pull-right\" (click)=\"handleGoto(taskGroup.collectionId)\">View Collection</button>\n\n                  <div style=\"margin-top:10px;margin-bottom:0;color:grey;\">\n                    <ul class=\"breadcrumb\" style=\"color:grey;\">\n                      <li *ngFor=\"let ancestor of taskGroup.ancestors\">\n                        <span > <b>{{ancestor}}</b> </span>\n                      </li>\n                      <li class=\"active\">\n                        {{taskGroup.label}}\n                      </li>\n                    </ul>\n                  </div>\n\n                </div>\n                \n                <div class=\"panel-body\" [isAnimated]=\"false\" [collapse]=\"!visible[taskGroup.collectionId]\">\n                  <i *ngIf=\"taskGroup.loading\" class=\"fa fa-spinner fa-spin task-group-loading\"></i>\n                  \n                  <span *ngIf=\"!taskGroup.loading\">\n\t                  <div *ngFor=\"let taskGroupType of taskGroup.groups; let grpi=index\">                  \n\t                    <div *ngIf=\"taskGroupType.tasks.length > 0\" [id]=\"'task'+ grpi\">\n\t\n\t                      <!-- Upload Tasks -->\n\t                      <div *ngIf=\"taskGroupType.type === 'UPLOAD'\">\n\t                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Upload'\" ></tasks-panel>\n\t                      </div>\n\t\n\t                      <!-- Process Tasks -->\n\t                      <div *ngIf=\"taskGroupType.type === 'PROCESS'\">\n\t                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Process'\" ></tasks-panel>\n\t                      </div>\n\t\n\t                      <!-- Store Tasks -->\n\t                      <div *ngIf=\"taskGroupType.type === 'STORE'\">\n\t                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Store'\" ></tasks-panel>\n\t                      </div>\n\t                \n\t                    </div>\n\t                  </div>\n                  </span>\n                </div>\n            </div>\n\n             <pagination-controls id=\"tasks-pg-ctrl\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n        \n        <div *ngIf=\"activeTab === 'success'\" class=\"tab-pane active\" id=\"success\">\n          <div class=\"panel-group\">\n            <div *ngFor=\"let taskGroup of taskPage.resultSet | paginate: {id: 'tasks-pg-ctrl', itemsPerPage: taskPage.pageSize, currentPage: taskPage.pageNumber, totalItems: taskPage.count }; let idx=index\" class=\"panel panel-default\" style=\"background: none;border: none;\">\n            \n                <div class=\"panel-heading clickable\">\n                  <h4 class=\"panel-title\" style=\"display: inline-block; vertical-align: middle;\">\n                    <a data-toggle=\"collapse\" (click)=\"setVisibility(taskGroup)\" [attr.aria-expanded]=\"!visible[taskGroup.collectionId]\"\n                      [attr.aria-controls]=\"'taskGroup'+ idx\">\n                      <h4>{{taskGroup.label}}</h4>\n                    </a>\n                  </h4>\n                  \n                  <span class=\"dot\" [ngClass]=\"{'success':taskGroup.status === 'Complete','warning':taskGroup.status === 'Warning', 'pending blink':taskGroup.status === 'Processing' || taskGroup.status === 'Running' || taskGroup.status === 'Pending' || taskGroup.status === 'Queued', 'fail':taskGroup.status === 'Failed'}\" ></span>\n\n                  <button class=\"btn btn-default pull-right\" (click)=\"handleGoto(taskGroup.collectionId)\">View Collection</button>\n\n                  <div style=\"margin-top:10px;margin-bottom:0;color:grey;\">\n                    <ul class=\"breadcrumb\" style=\"color:grey;\">\n                      <li *ngFor=\"let ancestor of taskGroup.ancestors\">\n                        <span > <b>{{ancestor}}</b> </span>\n                      </li>\n                      <li class=\"active\">\n                        {{taskGroup.label}}\n                      </li>\n                    </ul>\n                  </div>\n\n                </div>\n                \n                <div class=\"panel-body\" [isAnimated]=\"false\" [collapse]=\"!visible[taskGroup.collectionId]\">\n                \n                  <div *ngFor=\"let taskGroupType of taskGroup.groups; let grpi=index\">\n                    <div *ngIf=\"taskGroupType.tasks.length > 0\" [id]=\"'task'+ grpi\">\n\n                      <div *ngIf=\"taskGroupType.type === 'UPLOAD'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Upload'\" ></tasks-panel>\n                      </div>\n\n                      <div *ngIf=\"taskGroupType.type === 'PROCESS'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Process'\" ></tasks-panel>\n                      </div>\n\n                      <div *ngIf=\"taskGroupType.type === 'STORE'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Store'\" ></tasks-panel>\n                      </div>\n                \n                    </div>\n                  </div>\n                </div>\n            </div>\n\n             <pagination-controls id=\"tasks-pg-ctrl\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n\n        <div *ngIf=\"activeTab === 'all'\" class=\"tab-pane active\" id=\"all\">\n          <div class=\"panel-group\">\n            <div *ngFor=\"let taskGroup of taskPage.resultSet | paginate: {id: 'tasks-pg-ctrl', itemsPerPage: taskPage.pageSize, currentPage: taskPage.pageNumber, totalItems: taskPage.count }; let idx=index\" class=\"panel panel-default\" style=\"background: none;border: none;\">\n            \n                <div class=\"panel-heading clickable\">\n                  <h4 class=\"panel-title\" style=\"display: inline-block; vertical-align: middle;\">\n                    <a data-toggle=\"collapse\" (click)=\"setVisibility(taskGroup)\" [attr.aria-expanded]=\"!visible[taskGroup.collectionId]\"\n                      [attr.aria-controls]=\"'taskGroup'+ idx\">\n                      <h4>{{taskGroup.label}}</h4>\n                    </a>\n                  </h4>\n                  \n                  <span class=\"dot\" [ngClass]=\"{'success':taskGroup.status === 'Complete','warning':taskGroup.status === 'Warning', 'pending blink':taskGroup.status === 'Processing' || taskGroup.status === 'Running' || taskGroup.status === 'Pending' || taskGroup.status === 'Queued', 'fail':taskGroup.status === 'Failed'}\" ></span>\n\n                  <button class=\"btn btn-default pull-right\" (click)=\"handleGoto(taskGroup.collectionId)\">View Collection</button>\n\n                  <div style=\"margin-top:10px;margin-bottom:0;color:grey;\">\n                    <ul class=\"breadcrumb\" style=\"color:grey;\">\n                      <li *ngFor=\"let ancestor of taskGroup.ancestors\">\n                        <span > <b>{{ancestor}}</b> </span>\n                      </li>\n                      <li class=\"active\">\n                        {{taskGroup.label}}\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n                \n                <div class=\"panel-body\" [isAnimated]=\"false\" [collapse]=\"!visible[taskGroup.collectionId]\">\n                  <i *ngIf=\"taskGroup.loading\" class=\"fa fa-spinner fa-spin task-group-loading\"></i>\n                  \n                  <span *ngIf=\"!taskGroup.loading\">\n\t                  <div *ngFor=\"let taskGroupType of taskGroup.groups; let grpi=index\">\n\t                    <div *ngIf=\"taskGroupType.tasks.length > 0\" [id]=\"'task'+ grpi\" >\n\t\n\t                      <!-- Upload Tasks -->\n\t                      <div *ngIf=\"taskGroupType.type === 'UPLOAD'\">\n\t                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Upload'\" ></tasks-panel>\n\t                      </div>\n\t\n\t                      <!-- Process Tasks -->\n\t                      <div *ngIf=\"taskGroupType.type === 'PROCESS'\">\n\t                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Process'\" ></tasks-panel>\n\t                      </div>\n\t\n\t                      <!-- Store Tasks -->\n\t                      <div *ngIf=\"taskGroupType.type === 'STORE'\">\n\t                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Store'\" ></tasks-panel>\n\t                      </div>\n\t                \n\t                    </div>\n\t                  </div>\n                  </span>\n                </div>\n            </div>\n\n            <pagination-controls id=\"tasks-pg-ctrl\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n\n      </div>\n    </div>\n    <div class=\"col-sm-1\"></div>\n\n  </div>\n\n\n</div>\n\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { MetadataModalComponent } from './modal/metadata-modal.component';\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\nimport { LeafModalComponent } from './modal/leaf-modal.component';\nimport { PageResult } from '@shared/model/page';\n\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { Message, Task, TaskGroup } from '../model/management';\nimport { ManagementService } from '../service/management.service';\n\ndeclare var acp: any;\n\n\n@Component({\n  selector: 'tasks',\n  templateUrl: './tasks.component.html',\n  styleUrls: ['./tasks.css']\n})\nexport class TasksComponent implements OnInit {\n\n  userName: string = \"\";\n  totalTaskCount: number = 0;\n  activeTab: string = \"all\";\n  showSite: boolean = false;\n  initData: any;\n  showUploads: boolean = false;\n  showProcess: boolean = false;\n  showStore: boolean = false;\n  tasks: any;\n  taskPage: PageResult<TaskGroup> = { count: 0, pageSize: 10, pageNumber: 1, resultSet: [] };\n  errorStatuses = [\"Failed\", \"Processing\"];\n  completeStatuses = [\"Complete\"];\n  visible: {};\n\n  statuses = [];\n\n    /*\n     * Token used to determine if a change has occured in the page before loading the polling values\n     */\n  token: number = 0;\n\n    /*\n     * Reference to the modal current showing\n     */\n  bsModalRef: BsModalRef;\n\n    /*\n     * List of messages\n     */\n  messages: PageResult<Message> = { count: 0, pageSize: 5, pageNumber: 1, resultSet: [] };\n\n    /*\n     * List of tasks\n     */\n  // tasks: PageResult<Task>;\n\n  notifier: WebSocketSubject<{ type: string, content: any }>;\n\n  constructor(private managementService: ManagementService, private modalService: BsModalService) { }\n\n  ngOnInit(): void {\n    this.userName = this.managementService.getCurrentUser();\n    this.managementService.tasks([], this.taskPage.pageSize, this.taskPage.pageNumber, this.token).then(data => {\n      this.setTaskData(data);\n    });\n\n    this.getMissingMetadata();\n\n    let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + acp;\n\n    this.notifier = webSocket(baseUrl + '/websocket/notify');\n    this.notifier.subscribe(message => {\n      if (message.type === 'JOB_CHANGE') {\n        this.managementService.tasks(this.statuses, this.taskPage.pageSize, this.taskPage.pageNumber, this.token).then(data => {\n          if (data['token'] === this.token) {\n            this.updateTaskData(data);\n          }\n        });\n      }\n    });\n\n  }\n\n  ngOnDestroy(): void {\n\n    this.notifier.complete();\n  }\n\n  onPageChange(pageNumber: number): void {\n    this.token++;\n\n    this.managementService.tasks(this.statuses, this.taskPage.pageSize, pageNumber, this.token).then(tasks => {\n\n      this.setTaskData(tasks);\n    });\n  }\n\n  onTabClick(event: any, tab: string): void {\n    this.activeTab = tab;\n    this.taskPage = { count: 0, pageSize: 20, pageNumber: 1, resultSet: [] };\n    this.token++;\n\n    if (tab === \"success\") {\n      this.statuses = this.completeStatuses;\n    }\n    else if (tab === \"action-required\") {\n      this.statuses = this.errorStatuses;\n    }\n    else if (tab === \"all\") {\n      this.statuses = [];\n    }\n\n    this.managementService.tasks(this.statuses, this.taskPage.pageSize, this.taskPage.pageNumber, this.token).then(tasks => {\n\n      this.setTaskData(tasks);\n    });\n\n\n    if (!event.target.parentNode.classList.contains(\"active\")) {\n\n      let lis = event.target.parentNode.parentNode.getElementsByTagName(\"li\");\n      for (let i = 0; i < lis.length; i++) {\n        let li = lis[i];\n\n        li.classList.forEach(cls => {\n          if (cls === 'active') {\n            li.classList.remove('active');\n          }\n        })\n      }\n\n      event.target.parentNode.classList.add('active');\n    }\n  }\n\n  setTaskData(tasks: PageResult<TaskGroup>): void {\n    this.taskPage = tasks;\n    this.visible = {};\n\n    this.taskPage.resultSet.forEach(task => {\n      this.visible[task.collectionId] = false;\n    });\n  }\n\n  setGroupTasks(collection: TaskGroup, tasks: Task[]): void {\n    collection.groups = [];\n    collection.groups.push({ tasks: [], status: null, type: 'UPLOAD' });\n    collection.groups.push({ tasks: [], status: null, type: 'PROCESS' });\n    collection.groups.push({ tasks: [], status: null, type: 'STORE' });\n\n\n    for (let i = 0; i < tasks.length; i++) {\n      let task = tasks[i];\n\n\n      if (task.type === 'gov.geoplatform.uasdm.bus.WorkflowTask') {\n\n        let taskGroupTypeIndex = collection.groups.findIndex(value => { return value.type === 'UPLOAD' });\n\n        if (taskGroupTypeIndex === -1) {\n          collection.groups.push({ tasks: [task], status: task.status, type: 'UPLOAD' })\n        }\n        else {\n          collection.groups[taskGroupTypeIndex].tasks.push(task);\n        }\n      }\n      else if (task.type === 'gov.geoplatform.uasdm.odm.ODMProcessingTask') {\n\n        let taskGroupTypeIndex = collection.groups.findIndex(value => { return value.type === 'PROCESS' });\n\n        if (taskGroupTypeIndex === -1) {\n          collection.groups.push({ tasks: [task], status: task.status, type: 'PROCESS' })\n        }\n        else {\n          collection.groups[taskGroupTypeIndex].tasks.push(task);\n        }\n      }\n      else if (task.type === 'gov.geoplatform.uasdm.odm.ODMUploadTask') {\n\n        let taskGroupTypeIndex = collection.groups.findIndex(value => { return value.type === 'STORE' });\n\n        if (taskGroupTypeIndex === -1) {\n          collection.groups.push({ tasks: [task], status: task.status, type: 'STORE' })\n        }\n        else {\n          collection.groups[taskGroupTypeIndex].tasks.push(task);\n        }\n      }\n    }\n\n    this.setTaskGroupStatuses(collection);\n  }\n\n\n  setTaskGroupStatuses(collection: TaskGroup): void {\n\n    let latestDate: Date = null;\n\n    collection.groups.forEach(group => {\n\n      let isLatestTask: boolean = false;\n\n      if (group.tasks.length > 0) {\n        const sortedTasks = group.tasks.sort((a: any, b: any) =>\n          new Date(b.lastUpdateDate).getTime() - new Date(a.lastUpdateDate).getTime()\n        );\n\n        group.status = sortedTasks[0].status;\n\n        const firstDate: Date = new Date(sortedTasks[0].lastUpdateDate);\n\n        isLatestTask = (latestDate == null || latestDate.getTime() - firstDate.getTime() <= 0);\n\n        if (isLatestTask) {\n          latestDate = firstDate;\n        }\n\n        if (group.status === 'Complete' && sortedTasks[0].actions.length > 0) {\n          group.status = 'Warning';\n        }\n      }\n    });\n  }\n\n\n  updateTaskData(page: PageResult<TaskGroup>): void {\n    this.taskPage = page;\n\n    this.taskPage.resultSet.forEach(task => {\n      if (this.visible[task.collectionId]) {\n        this.managementService.getTasks(task.collectionId).then(tasks => {\n          this.setGroupTasks(task, tasks);\n        });\n      }\n    });\n  }\n\n  setVisibility(taskGroup: TaskGroup): void {\n    if (!this.visible[taskGroup.collectionId]) {\n      this.visible[taskGroup.collectionId] = true;\n\n      if (taskGroup.groups == null && !taskGroup.loading)\n      {\n        taskGroup.loading = true;\n        this.managementService.getTasks(taskGroup.collectionId).then(tasks => {\n          this.setGroupTasks(taskGroup, tasks);\n          \n          taskGroup.loading = false;\n        });\n      }\n    }\n    else {\n      this.visible[taskGroup.collectionId] = false;\n    }\n  }\n\n\n  handleMessage(message: Message): void {\n    this.bsModalRef = this.modalService.show(MetadataModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n      'class': 'upload-modal'\n    });\n    this.bsModalRef.content.init(message.collectionId);\n\n    this.bsModalRef.content.onMetadataChange.subscribe((collectionId: string) => {\n\n      let index = -1;\n      for (let i = 0; i < this.messages.resultSet.length; i++) {\n        let msg = this.messages.resultSet[i];\n        if (msg.collectionId === collectionId) {\n          index = i;\n        }\n      }\n\n      if (index >= 0) {\n        this.messages.resultSet.splice(index, 1);\n      }\n\n    });\n\n  }\n\n  handleGoto(collectionId: string): void {\n    // let breadcrumbs = []\n\n    this.managementService.view(collectionId).then(response => {\n      const entity = response.item;\n      const breadcrumbs = response.breadcrumbs;\n\n      this.managementService.getItems(collectionId, null).then(nodes => {\n        this.bsModalRef = this.modalService.show(LeafModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: 'leaf-modal'\n        });\n        this.bsModalRef.content.init(entity, nodes, breadcrumbs);\n      })\n    })\n  }\n\n  removeTask(task: Task): void {\n\n    this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n    });\n    this.bsModalRef.content.message = 'Are you sure you want to delete [' + task.label + '?';\n    this.bsModalRef.content.data = task;\n    this.bsModalRef.content.type = 'DANGER';\n    this.bsModalRef.content.submitText = 'Delete';\n\n    (<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(task => {\n      this.deleteTask(task);\n    });\n\n  }\n\n  deleteTask(task: Task) {\n    this.managementService.removeTask(task.uploadId)\n      .then(() => {\n        let pos = null;\n        for (let i = 0; i < this.tasks.resultSet.length; i++) {\n          let thisTask = this.tasks[i];\n\n          if (thisTask.uploadId === task.uploadId) {\n            pos = i;\n            break;\n          }\n        }\n\n        if (pos !== null) {\n          this.tasks.resultSet.splice(pos, 1);\n        }\n\n        this.getMissingMetadata();\n\n        this.totalTaskCount = this.tasks.count;\n\n      });\n  }\n\n  getMissingMetadata(): void {\n    this.onMessagePageChange(this.messages.pageNumber);\n  }\n\n  onMessagePageChange(pageNumber: number): void {\n    this.managementService.getMissingMetadata(this.messages.pageSize, pageNumber).then(messages => {\n      this.messages = messages;\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams, HttpBackend, HttpHandler } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\nimport { HttpBackendClient } from '@shared/service/http-backend-client.service';\n\nimport { PageResult } from '@shared/model/page';\nimport { Sensor } from '../model/sensor';\nimport { GenericTableService } from '@shared/model/generic-table';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SensorService implements GenericTableService {\n\n    constructor(private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService) { }\n\n    page(criteria: Object): Promise<PageResult<Sensor>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set('criteria', JSON.stringify(criteria));\n\n        return this.http\n            .get<PageResult<Sensor>>(acp + '/sensor/page', { params: params })\n            .toPromise();\n    }\n\n    getAll(): Promise<{ oid: string, name: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        this.eventService.start();\n\n        return this.http\n            .get<{ oid: string, name: string }[]>(acp + '/sensor/get-all', { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    get(oid: string): Promise<Sensor> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<Sensor>(acp + '/sensor/get', JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    newInstance(): Promise<Sensor> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<Sensor>(acp + '/sensor/newInstance', JSON.stringify({}), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(oid: string): Promise<void> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(acp + '/sensor/remove', JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(sensor: Sensor): Promise<Sensor> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<Sensor>(acp + '/sensor/apply', JSON.stringify({ sensor: sensor }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n}","import { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\nimport { HttpBackendClient } from '@shared/service/http-backend-client.service';\n\nimport { PageResult } from '@shared/model/page';\nimport { Classification } from '@site/model/classification';\nimport { Injectable } from '@angular/core';\nimport { GenericTableService } from '@shared/model/generic-table';\n\nexport enum Endpoint {\n    SENSOR_TYPE = '/sensor-type',\n    PLATFORM_TYPE = '/platform-type',\n    PLATFORM_MANUFACTURER = '/platform-manufacturer',\n    WAVE_LENGTH = '/wave-length'\n}\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ClassificationService implements GenericTableService {\n\n    constructor(private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService) {\n    }\n\n    page(criteria: Object, baseUrl: string): Promise<PageResult<Classification>> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set('criteria', JSON.stringify(criteria));\n\n        return this.http\n            .get<PageResult<Classification>>(acp + baseUrl + '/page', { params: params })\n            .toPromise();\n    }\n\n    getAll(baseUrl: string): Promise<Classification[]> {\n        let params: HttpParams = new HttpParams();\n\n        this.eventService.start();\n\n        return this.http\n            .get<Classification[]>(acp + baseUrl + '/get-all', { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n\n    get(baseUrl: string, oid: string): Promise<Classification> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<Classification>(acp + baseUrl + '/get', JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    newInstance(baseUrl: string): Promise<Classification> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<Classification>(acp + baseUrl + '/newInstance', JSON.stringify({}), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(baseUrl: string, oid: string): Promise<void> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(acp + baseUrl + '/remove', JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(baseUrl: string, classification: Classification): Promise<Classification> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<Classification>(acp + baseUrl + '/apply', JSON.stringify({ classification: classification }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n}","<div>\n<!--     <uasdm-header></uasdm-header> -->\n\n<!--     <div id=\"app-container\" class=\"container\"> -->\n\n\t\t<h2>Sensors</h2>\n\n\t\t<generic-table *ngIf=\"config != null\" [cols]=\"cols\" [config]=\"config\" [refresh]=\"refresh\" (click)=\"onClick($event)\"></generic-table>\t\t\n<!-- \t</div> -->\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\n\nimport { Sensor } from '@site/model/sensor';\nimport { SensorService } from '@site/service/sensor.service';\nimport { Router } from '@angular/router';\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from '@shared/model/generic-table';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'sensors',\n    templateUrl: './sensors.component.html',\n    styles: ['./sensors.css']\n})\nexport class SensorsComponent implements OnInit {\n    bsModalRef: BsModalRef;\n    message: string = null;\n\n    config: GenericTableConfig;\n    cols: GenericTableColumn[] = [\n        { header: 'Name', field: 'name', type: 'TEXT', sortable: true },\n        { header: 'Model', field: 'model', type: 'TEXT', sortable: true },\n        { header: 'Description', field: 'description', type: 'TEXT', sortable: true },\n        { header: 'Type', field: 'sensorType', type: 'TEXT', sortable: true },\n        { header: '', type: 'ACTIONS', sortable: false },\n    ];\n    refresh: Subject<void>;\n\n\n    constructor(private service: SensorService, private modalService: BsModalService, private router: Router) { }\n\n\n    ngOnInit(): void {\n\n        this.config = {\n            service: this.service,\n            remove: true,\n            view: true,\n            create: true,\n            label: 'Sensor',\n            sort: { field: 'name', order: 1 },\n        }\n\n        this.refresh = new Subject<void>();\n    }\n\n    onClick(event: TableEvent): void {\n        if (event.type === 'view') {\n            this.onView(event.row as Sensor);\n        }\n        else if (event.type === 'remove') {\n            this.onRemove(event.row as Sensor);\n        }\n        else if (event.type === 'create') {\n            this.newInstance();\n        }\n    }\n\n\n    remove(sensor: Sensor): void {\n        this.service.remove(sensor.oid).then(response => {\n            this.refresh.next();\n        });\n    }\n\n    onRemove(sensor: Sensor): void {\n        this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.message = \"Are you sure you want to remove the sensor [\" + sensor.name + \"]\";\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = \"Delete\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.remove(sensor);\n        });\n    }\n\n    onView(sensor: Sensor): void {\n        this.router.navigate(['/site/sensor', sensor.oid]);\n    }\n\n    newInstance(): void {\n        this.router.navigate(['/site/sensor', '__NEW__']);\n    }\n}\n","<div>\n  <uasdm-header></uasdm-header>\n\n  <div id=\"app-container\" class=\"container\">\n    <div *ngIf=\"message != null\" class=\"error-container\">\n      <div class=\"label-holder\">\n        <strong>Error</strong>\n      </div>\n      <div class=\"holder\">\n        <div>\n          <p class=\"error-message\">{{message}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"modal-title-container\">\n      <h3>Sensor</h3>\n    </div>\n\n    <form #ngForm=\"ngForm\">\n      <div class=\"form-group\">\n        <label>Name</label>\n        <input [(ngModel)]=\"sensor.name\" name=\"name\" type=\"input\" class=\"form-control\" placeholder=\"Name\"\n          [disabled]=\"mode === 'READ'\" required />\n      </div>\n      <div class=\"form-group\">\n        <label>Description</label>\n        <textarea [(ngModel)]=\"sensor.description\" name=\"description\" type=\"input\" class=\"form-control\"\n          [disabled]=\"mode === 'READ'\" placeholder=\"Description\">\n        </textarea>\n      </div>\n      <div class=\"form-group\">\n        <label>Model</label>\n        <input [(ngModel)]=\"sensor.model\" name=\"model\" type=\"input\" class=\"form-control\" placeholder=\"Model\"\n          [disabled]=\"mode === 'READ'\" required />\n      </div>\n      <div class=\"form-group\">\n        <label>Type</label>\n        <select [(ngModel)]=\"sensor.sensorType\" name=\"sensorType\" type=\"input\" class=\"form-control\"\n          [disabled]=\"mode === 'READ'\" required>\n          <option></option>\n          <option *ngFor=\"let type of types\" [value]=\"type.oid\">{{type.name}}</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Pixel Size Width</label>\n        <input [(ngModel)]=\"sensor.pixelSizeWidth\" name=\"pixelSizeWidth\" type=\"number\" step=\"0\" class=\"form-control\" [disabled]=\"mode === 'READ'\" required />\n      </div>\n      <div class=\"form-group\">\n        <label>Pixel Size Height</label>\n        <input [(ngModel)]=\"sensor.pixelSizeHeight\" name=\"pixelSizeHeight\" type=\"number\" step=\"0\" class=\"form-control\" [disabled]=\"mode === 'READ'\" required />\n      </div>\n      <div class=\"form-group\">\n        <label>Sensor Width</label> (millimeters)\n        <input [(ngModel)]=\"sensor.sensorWidth\" name=\"sensorWidth\" type=\"number\" step=\"0\" class=\"form-control\" [disabled]=\"mode === 'READ'\" required />\n      </div>\n      <div class=\"form-group\">\n        <label>Sensor Height</label> (millimeters)\n        <input [(ngModel)]=\"sensor.sensorHeight\" name=\"sensorHeight\" type=\"number\" step=\"0\" class=\"form-control\" [disabled]=\"mode === 'READ'\" required />\n      </div>\n      <div class=\"form-group\">\n        <label>Wave Length</label>\n        <span *ngIf=\"sensor.wavelengths.length === 0\" class=\"error-message\">\n          A sensor requires at least one Wave Length\n        </span>\n        <div *ngFor=\"let wavelength of wavelengths\">\n          <boolean-field [value]=\"sensor.wavelengths && (-1 !== sensor.wavelengths.indexOf(wavelength.oid))\"\n            [label]=\"wavelength.name\" (valueChange)=\"updateSelectedWaveLength(wavelength, $event)\"\n            [disabled]=\"mode === 'READ'\"></boolean-field>\n        </div>\n      </div>\n      <div *ngIf=\"mode === 'READ' && sensor.platforms != null && sensor.platforms.length > 0\" class=\"form-group\">\n        <label>Used on Platforms</label>\n        <ul>\n          <li *ngFor=\"let platform of sensor.platforms\">\n            <a [routerLink]=\"['/site/platform', platform.oid]\">{{platform.name}}</a>\n          </li>\n        </ul>\n      </div>\n\n      <div *ngIf=\"isAdmin && mode === 'WRITE'\" class=\"btn-holder\" style=\"text-align: right;margin-bottom: 40px;\">\n        <button *ngIf=\"!newInstance\" type=\"button\" class=\"btn btn-default\" (click)=\"handleOnCancel()\">Cancel</button>\n        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\"\n          [disabled]=\"!ngForm.valid || sensor.wavelengths.length === 0\">Apply</button>\n      </div>\n      <div *ngIf=\"isAdmin && mode === 'READ'\" class=\"btn-holder\" style=\"text-align: right;margin-bottom: 40px;\">\n        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnEdit()\">Edit</button>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { Sensor } from '@site/model/sensor';\nimport { SensorService } from '@site/service/sensor.service';\nimport { ClassificationService, Endpoint } from '@site/service/classification.service';\nimport { Classification } from '@site/model/classification';\n\nimport { AuthService } from '@shared/service/auth.service';\n\n\n@Component({\n\tselector: 'sensor',\n\ttemplateUrl: './sensor.component.html',\n\tstyleUrls: []\n})\nexport class SensorComponent implements OnInit {\n    \n    isAdmin:boolean = false;\n    \n    original: Sensor;\n\tsensor: Sensor;\n\tnewInstance: boolean = false;\n\n\tmessage: string = null;\n\n\twavelengths: Classification[] = [];\n\ttypes: Classification[] = [];\n    mode: string = 'READ';\n\n\tconstructor(private service: SensorService, private classificationService: ClassificationService, private route: ActivatedRoute, private router: Router,\n\t\tprivate authService: AuthService) { \n            this.isAdmin = this.authService.isAdmin();\n        }\n\n\tngOnInit(): void {\n        const oid = this.route.snapshot.params['oid'];\n\n        if (oid === '__NEW__') {\n            this.service.newInstance().then((sensor: Sensor) => {\n                this.sensor = sensor;\n                this.newInstance = true;\n                this.mode = 'WRITE';\n            });\n        }\n        else {\n            this.service.get(oid).then((sensor: Sensor) => {\n                this.sensor = sensor;\n                this.original = JSON.parse(JSON.stringify(this.sensor));\n            });\n        }\n\n\t\tthis.classificationService.getAll(Endpoint.WAVE_LENGTH).then(wavelengths => {\n\t\t\tthis.wavelengths = wavelengths;\n\t\t});\n\n\t\tthis.classificationService.getAll(Endpoint.SENSOR_TYPE).then(types => {\n\t\t\tthis.types = types;\n\t\t});\n\t}\n\n\thandleOnSubmit(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.apply(this.sensor).then(data => {\n            // this.sensor = data;\n            // this.mode = 'READ';\n\n            // if (this.newInstance) {\n            //     this.router.navigate(['/site/sensor', data.oid]);\n\t\t\t// \tthis.newInstance = false;\n            //     this.original = data;\n            // }\n\t\t\tthis.router.navigate(['/site/equipment']);\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n    handleOnCancel(): void {\n        this.message = null;\n\n        this.sensor = JSON.parse(JSON.stringify(this.original));    \n        this.mode = 'READ';\n    }\n\n    handleOnEdit(): void {\n        this.mode = 'WRITE';\n    }\n\n\tupdateSelectedWaveLength(wavelength: Classification, checked: boolean): void {\n\n\t\tconst indexOf = this.sensor.wavelengths.findIndex(w => wavelength.oid === w);\n\n\t\tif (checked) {\n\n\t\t\tif (indexOf < 0) {\n\t\t\t\tthis.sensor.wavelengths.push(wavelength.oid);\n\n\t\t\t}\n\t\t} else {\n\t\t\tif (indexOf > -1) {\n\t\t\t\tthis.sensor.wavelengths.splice(indexOf, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams, HttpBackend } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\nimport { HttpBackendClient } from '@shared/service/http-backend-client.service';\n\nimport { PageResult } from '@shared/model/page';\nimport { Platform } from '../model/platform';\nimport { GenericTableService } from '@shared/model/generic-table';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class PlatformService implements GenericTableService {\n\n    constructor(private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService) { }\n\n    page(criteria: Object): Promise<PageResult<Platform>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set('criteria', JSON.stringify(criteria));\n\n        return this.http\n            .get<PageResult<Platform>>(acp + '/platform/page', { params: params })\n            .toPromise();\n    }\n\n    getAll(): Promise<{ oid: string, name: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        this.eventService.start();\n\n        return this.http\n            .get<{ oid: string, name: string }[]>(acp + '/platform/get-all', { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n\n    get(oid: string): Promise<Platform> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<Platform>(acp + '/platform/get', JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    newInstance(): Promise<Platform> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<Platform>(acp + '/platform/newInstance', JSON.stringify({}), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(oid: string): Promise<void> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(acp + '/platform/remove', JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(platform: Platform): Promise<Platform> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<Platform>(acp + '/platform/apply', JSON.stringify({ platform: platform }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n}","<div>\n<!-- \t<uasdm-header></uasdm-header> -->\n\n<!-- \t<div id=\"app-container\" class=\"container\"> -->\n\n\t\t<h2>Platforms</h2>\n\n\t\t<generic-table *ngIf=\"config != null\" [cols]=\"cols\" [config]=\"config\" [refresh]=\"refresh\" (click)=\"onClick($event)\"></generic-table>\t\t\n<!-- \t</div> -->\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\n\nimport { Platform } from '@site/model/platform';\nimport { PlatformService } from '@site/service/platform.service';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from '@shared/model/generic-table';\n\n@Component({\n    selector: 'platforms',\n    templateUrl: './platforms.component.html',\n    styles: ['./platforms.css']\n})\nexport class PlatformsComponent implements OnInit {\n    bsModalRef: BsModalRef;\n    message: string = null;\n\n    config: GenericTableConfig;\n    cols: GenericTableColumn[] = [\n        { header: 'Name', field: 'name', type: 'TEXT', sortable: true },\n        { header: 'Description', field: 'description', type: 'TEXT', sortable: true },\n        { header: '', type: 'ACTIONS', sortable: false },\n    ];\n    refresh: Subject<void>;\n\n    constructor(private service: PlatformService, private router: Router, private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n        this.config = {\n            service: this.service,\n            remove: true,\n            view: true,\n            create: true,\n            label: 'Platform',\n            sort: {field: 'name', order: 1}\n        }\n\n        this.refresh = new Subject<void>();\n    }\n\n    onClick(event: TableEvent): void {\n        if (event.type === 'view') {\n            this.onView(event.row as Platform);\n        }\n        else if (event.type === 'remove') {\n            this.onRemove(event.row as Platform);\n        }\n        else if (event.type === 'create') {\n            this.newInstance();\n        }\n    }\n\n    remove(platform: Platform): void {\n        this.service.remove(platform.oid).then(response => {\n            this.refresh.next();\n        });\n    }\n\n    onRemove(platform: Platform): void {\n        this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.message = \"Are you sure you want to remove the platform [\" + platform.name + \"]\";\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = \"Delete\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.remove(platform);\n        });\n    }\n\n    onView(platform: Platform): void {\n        this.router.navigate(['/site/platform', platform.oid]);\n    }\n\n    newInstance(): void {\n        this.router.navigate(['/site/platform', '__NEW__']);\n    }\n}\n","<div>\n  <uasdm-header></uasdm-header>\n\n  <div id=\"app-container\" class=\"container\">\n\n    <div *ngIf=\"platform != null\" class=\"modal-body\">\n      <div *ngIf=\"message != null\" class=\"error-container\">\n        <div class=\"label-holder\">\n          <strong>Error</strong>\n        </div>\n        <div class=\"holder\">\n          <div>\n            <p class=\"error-message\">{{message}}</p>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"modal-title-container\">\n        <h3>Platform</h3>\n      </div>\n\n      <form #ngForm=\"ngForm\">\n        <div class=\"form-group\">\n          <label>Name</label>\n          <input [(ngModel)]=\"platform.name\" name=\"name\" type=\"input\" class=\"form-control\" placeholder=\"Name\"\n            [disabled]=\"mode === 'READ'\" required />\n        </div>\n        <div class=\"form-group\">\n          <label>Description</label>\n          <textarea [(ngModel)]=\"platform.description\" [disabled]=\"mode === 'READ'\" name=\"description\" type=\"input\"\n            class=\"form-control\" placeholder=\"Description\">\n      </textarea>\n        </div>\n        <div class=\"form-group\">\n          <label>Type</label>\n          <select [(ngModel)]=\"platform.platformType\" [disabled]=\"mode === 'READ'\" name=\"platformType\" type=\"input\"\n            class=\"form-control\" placeholder=\"Type\" required>\n            <option></option>\n            <option *ngFor=\"let type of types\" [value]=\"type.oid\">{{type.name}}</option>\n          </select>\n        </div>\n        <div class=\"form-group\">\n          <label>Manufacturer</label>\n          <select [(ngModel)]=\"platform.manufacturer\" [disabled]=\"mode === 'READ'\" name=\"manufacturer\" type=\"input\"\n            class=\"form-control\" placeholder=\"Type\" required>\n            <option></option>\n            <option *ngFor=\"let manufacturer of manufacturers\" [value]=\"manufacturer.oid\">{{manufacturer.name}}\n            </option>\n          </select>\n        </div>\n        <div *ngIf=\"mode === 'WRITE'\" class=\"form-group\">\n          <label>Sensors</label>\n          <span *ngIf=\"platform.sensors.length === 0\" class=\"error-message\">\n            A platform requires at least one sensor\n          </span>\n\n          <div *ngFor=\"let sensor of sensors\">\n            <boolean-field [value]=\"platform.sensors && (-1 !== platform.sensors.indexOf(sensor.oid))\"\n              [label]=\"sensor.name\" (valueChange)=\"updateSelectedSensor(sensor, $event)\">\n            </boolean-field>\n          </div>\n        </div>\n        <div *ngIf=\"mode === 'READ'\" class=\"form-group\">\n          <label>Sensors</label>\n          <ul>\n            <li *ngFor=\"let oid of platform.sensors\">\n              <a [routerLink]=\"['/site/sensor', oid]\">{{getSensorName(oid)}}</a>\n            </li>\n          </ul>\n        </div>\n        <div *ngIf=\"isAdmin && mode === 'WRITE'\" class=\"btn-holder\" style=\"text-align: right;margin-bottom: 40px;\">\n          <button *ngIf=\"!newInstance\" type=\"button\" class=\"btn btn-default\" (click)=\"handleOnCancel()\">Cancel</button>\n          <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\"\n            [disabled]=\"!ngForm.valid || platform.sensors.length === 0\">Apply</button>\n        </div>\n        <div *ngIf=\"isAdmin && mode === 'READ'\" class=\"btn-holder\" style=\"text-align: right;margin-bottom: 40px;\">\n          <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnEdit()\">Edit</button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { Platform } from '@site/model/platform';\nimport { PlatformService } from '@site/service/platform.service';\nimport { Classification } from '@site/model/classification';\nimport { ClassificationService, Endpoint } from '@site/service/classification.service';\nimport { SensorService } from '@site/service/sensor.service';\nimport { Sensor } from '@site/model/sensor';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { AuthService } from '@shared/service/auth.service';\n\n@Component({\n    selector: 'platform',\n    templateUrl: './platform.component.html',\n    styleUrls: []\n})\nexport class PlatformComponent implements OnInit {\n    \n    isAdmin:boolean = false;\n    \n    original: Platform;\n    platform: Platform;\n    newInstance: boolean = false;\n\n    message: string = null;\n\n    manufacturers: Classification[] = [];\n    types: Classification[] = [];\n    sensors: { oid: string, name: string }[] = [];\n    mode: string = 'READ';\n\n    constructor(private service: PlatformService, private sensorService: SensorService,\n        private classificationService: ClassificationService, private authService: AuthService,\n        private route: ActivatedRoute, private router: Router) { \n            \n        this.isAdmin = this.authService.isAdmin(); \n    }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.params['oid'];\n\n        if (oid === '__NEW__') {\n            this.service.newInstance().then((platform: Platform) => {\n                this.platform = platform;\n                this.newInstance = true;\n                this.mode = 'WRITE';\n            });\n        }\n        else {\n            this.service.get(oid).then((platform: Platform) => {\n                this.platform = platform;\n                this.original = JSON.parse(JSON.stringify(this.platform));\n            });\n        }\n\n        this.classificationService.getAll(Endpoint.PLATFORM_MANUFACTURER).then(manufacturers => {\n            this.manufacturers = manufacturers;\n        });\n\n        this.classificationService.getAll(Endpoint.PLATFORM_TYPE).then(types => {\n            this.types = types;\n        });\n\n        this.sensorService.getAll().then(sensors => {\n            this.sensors = sensors;\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.service.apply(this.platform).then(data => {\n            // this.platform = data;\n            // this.mode = 'READ';\n\n            // if (this.newInstance) {\n            //     this.router.navigate(['/site/platform', data.oid]);\n            //     this.newInstance = false;\n            //     this.original = data;\n            // }\n            this.router.navigate(['/site/equipment']);\n\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleOnCancel(): void {\n        this.message = null;\n\n        this.platform = JSON.parse(JSON.stringify(this.original));\n        this.mode = 'READ';\n    }\n\n    handleOnEdit(): void {\n        this.mode = 'WRITE';\n    }\n\n    updateSelectedSensor(sensor: Classification, checked: boolean): void {\n\n        const indexOf = this.platform.sensors.findIndex(w => sensor.oid === w);\n\n        if (checked) {\n\n            if (indexOf < 0) {\n                this.platform.sensors.push(sensor.oid);\n\n            }\n        } else {\n            if (indexOf > -1) {\n                this.platform.sensors.splice(indexOf, 1);\n            }\n        }\n    }\n\n    getSensorName(oid: string): string {\n        const index = this.sensors.findIndex(s => s.oid === oid);\n\n        if (index !== -1) {\n            return this.sensors[index].name;\n        }\n\n        return '';\n    }\n\n\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div>\n<!-- \t<uasdm-header></uasdm-header> -->\n\n<!-- \t<div id=\"app-container\" class=\"container\"> -->\n\n\t\t<h4>{{_metadata.title}}</h4>\n\n\t\t<generic-table *ngIf=\"config != null\" [cols]=\"cols\" [config]=\"config\" [refresh]=\"refresh\" [baseUrl]=\"_metadata.baseUrl\" (click)=\"onClick($event)\"></generic-table>\t\t\n<!-- \t</div> -->\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\n\nimport { Classification, ClassificationComponentMetadata } from '@site/model/classification';\nimport { Router } from '@angular/router';\nimport { ClassificationService } from '@site/service/classification.service';\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from '@shared/model/generic-table';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'classifications',\n    templateUrl: './classifications.component.html',\n    styles: ['./classifications.css']\n})\nexport class ClassificationsComponent implements OnInit {\n\n    _metadata: ClassificationComponentMetadata = {label: \"\", title: \"\", baseUrl: \"\"};\n    @Input() set metadata(value: ClassificationComponentMetadata) {\n        this._metadata.title = value.title;\n        this._metadata.label = value.label;\n        this._metadata.baseUrl = value.baseUrl;\n        \n        this.config = {\n                service: this.service,\n                remove: true,\n                view: true,\n                create: true,\n                label: value.label\n            }\n    }\n\n    bsModalRef: BsModalRef;\n    message: string = null;\n\n    config: GenericTableConfig;\n    cols: GenericTableColumn[] = [\n        { header: 'Name', field: 'name', type: 'TEXT', sortable: true },\n        { header: '', type: 'ACTIONS', sortable: false },\n    ];\n    refresh: Subject<void>;\n\n    constructor(private router: Router, private service: ClassificationService, private modalService: BsModalService) {\n    }\n\n    ngOnInit(): void {\n//        this.activatedroute.data.subscribe(data => {\n//            this.metadata = data as ClassificationComponentMetadata;\n//            console.log(data)\n//\n////            if (this.metadata.columns === undefined) {\n////                this.metadata.columns = [];\n////            }\n////\n////            this.config = {\n////                service: this.service,\n////                remove: true,\n////                view: true,\n////                create: true,\n////                label: this.metadata.label\n////            }\n//\n//            this.refresh = new Subject<void>();\n//\n//            // this.service.page(this.metadata.baseUrl, 1).then(res => {\n//            //     this.res = res;\n//            // });\n//\n//        })\n    }\n\n    onClick(event: TableEvent): void {\n        if (event.type === 'view') {\n            this.onView(event.row as Classification);\n        }\n        else if (event.type === 'remove') {\n            this.onRemove(event.row as Classification);\n        }\n        else if (event.type === 'create') {\n            this.newInstance();\n        }\n    }\n\n    remove(classification: Classification): void {\n        this.service.remove(this._metadata.baseUrl, classification.oid).then(response => {\n            // this.res.resultSet = this.res.resultSet.filter(h => h.oid !== classification.oid);\n            this.refresh.next();\n        });\n    }\n\n    onRemove(classification: Classification): void {\n        this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.message = \"Are you sure you want to remove the \" + this._metadata.label + \" [\" + classification.name + \"]\";\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = \"Delete\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.remove(classification);\n        });\n    }\n\n    onView(classification: Classification): void {\n        this.router.navigate(['/site/' + this._metadata.baseUrl, classification.oid]);\n    }\n\n    newInstance(): void {\n        this.router.navigate(['/site/' + this._metadata.baseUrl, '__NEW__']);\n    }\n}\n","<div>\n  <uasdm-header></uasdm-header>\n\n  <div id=\"app-container\" class=\"container\">\n    <div *ngIf=\"message != null\" class=\"error-container\">\n      <div class=\"label-holder\">\n        <strong>Error</strong>\n      </div>\n      <div class=\"holder\">\n        <div>\n          <p class=\"error-message\">{{message}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"modal-title-container\">\n      <h3>{{metadata.title}}</h3>\n    </div>\n\n    <form #ngForm=\"ngForm\">\n      <div class=\"form-group\">\n        <label>Name</label>\n        <input [(ngModel)]=\"classification.name\" name=\"label\" type=\"input\" class=\"form-control\" placeholder=\"Name\"\n          [disabled]=\"mode === 'READ'\" required />\n      </div>\n      <div *ngFor=\"let column of metadata.columns\" class=\"form-group\">\n        <label></label>\n        <boolean-field *ngIf=\"column.type === 'boolean'\" [value]=\"classification[column.name]\" [label]=\"column.label\"\n          (valueChange)=\"classification[column.name] = $event\" [disabled]=\"mode === 'READ'\">\n        </boolean-field>\n      </div>\n      <div *ngIf=\"mode === 'WRITE'\" class=\"btn-holder\" style=\"text-align: right;\">\n        <button *ngIf=\"!newInstance\" type=\"button\" class=\"btn btn-default\" (click)=\"handleOnCancel()\">Cancel</button>\n        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\"\n          [disabled]=\"!ngForm.valid\">Apply</button>\n      </div>\n      <div *ngIf=\"mode === 'READ'\" class=\"btn-holder\" style=\"text-align: right;\">\n        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnEdit()\">Edit</button>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { Classification, ClassificationComponentMetadata } from '@site/model/classification';\nimport { ClassificationService } from '@site/service/classification.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n\tselector: 'classification',\n\ttemplateUrl: './classification.component.html',\n\tstyleUrls: []\n})\nexport class ClassificationComponent implements OnInit {\n\n\tmetadata: ClassificationComponentMetadata;\n\tclassification: Classification;\n\toriginal: Classification;\n\tnewInstance: boolean = false;\n\n\tmessage: string = null;\n\n\tmode: string = 'READ';\n\n\tconstructor(private service: ClassificationService, private route: ActivatedRoute, private router: Router) { }\n\n\tngOnInit(): void {\n        this.route.data.subscribe(data => {\n            this.metadata = data as ClassificationComponentMetadata;\n\n\t\t\tconst oid = this.route.snapshot.params['oid'];\n\n\t\t\tif (oid === '__NEW__') {\n\t\t\t\tthis.service.newInstance(this.metadata.baseUrl).then((classification: Classification) => {\n\t\t\t\t\tthis.classification = classification;\n\t\t\t\t\tthis.newInstance = true;\n\t\t\t\t\tthis.mode = 'WRITE';\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.service.get(this.metadata.baseUrl, oid).then((classification: Classification) => {\n\t\t\t\t\tthis.classification = classification;\n\t\t\t\t\tthis.original = JSON.parse(JSON.stringify(this.classification));\n\t\t\t\t});\n\t\t\t}\t\n        })\n\t}\n\n\thandleOnSubmit(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.apply(this.metadata.baseUrl, this.classification).then(data => {\n            this.classification = data;\n            this.mode = 'READ';\n\n            if (this.newInstance) {\n                this.router.navigate(['/site/' + this.metadata.baseUrl, data.oid]);\n\t\t\t\tthis.newInstance = false;\n                this.original = data;\n            }\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n    handleOnCancel(): void {\n        this.message = null;\n\n        this.classification = JSON.parse(JSON.stringify(this.original));    \n        this.mode = 'READ';\n    }\n\n    handleOnEdit(): void {\n        this.mode = 'WRITE';\n    }\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { ClassificationsComponent } from '@site/component/classification/classifications.component';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\ndeclare let acp: string;\n\n@Component({\n    selector: 'equipment',\n    templateUrl: './equipment.component.html',\n    styleUrls: ['./equipment.css']\n})\nexport class EquipmentComponent implements OnInit {\n\n    bsModalRef: BsModalRef;\n    \n    isSensorTypeCollapsed: boolean = true;\n    isSensorWavelengthCollapsed: boolean = true;\n    isPlatformTypeCollapsed: boolean = true;\n    isPlatformManufacturerCollapsed: boolean = true;\n    \n    constructor(private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n    }\n    \n\n}\n","<div>\n    <uasdm-header></uasdm-header>\n\n    <div id=\"app-container\" class=\"container\">\n    \n        <h2>Equipment Management</h2>\n        \n        <h3>Sensor Options</h3>\n        <section style=\"padding:20px;border:solid 1px lightgrey;background:#efefef;\">\n            \n            <a (click)=\"isSensorTypeCollapsed = !isSensorTypeCollapsed\">\n                <h4><i class=\"fa fa-fw collapsible-link\" [ngClass]=\"{'fa-chevron-down': !isSensorTypeCollapsed, 'fa-chevron-right': isSensorTypeCollapsed}\"></i>Sensor Types</h4>\n            </a>\n            <div id=\"sensorTypeCollabseContainer\" [collapse]=\"isSensorTypeCollapsed\">\n                <classifications [metadata]='{title: \"\", label: \"type\", baseUrl: \"/sensor-type\"}'></classifications>\n            </div>\n            \n            <a (click)=\"isSensorWavelengthCollapsed = !isSensorWavelengthCollapsed\">\n                <h4><i class=\"fa fa-fw collapsible-link\" [ngClass]=\"{'fa-chevron-down': !isSensorWavelengthCollapsed, 'fa-chevron-right': isSensorWavelengthCollapsed}\"></i>Wave Lengths</h4>\n            </a>\n            <div id=\"sensorWavelengthCollabseContainer\" [collapse]=\"isSensorWavelengthCollapsed\">\n                <classifications [metadata]='{title: \"\", label: \"wave length\", baseUrl: \"/wave-length\"}'></classifications>\n            </div>\n            \n        </section>\n\n        <sensors></sensors>\n        \n        <br><br>\n        \n        <h3>Plaform Options</h3>\n        <section style=\"padding:20px;border:solid 1px lightgrey;background:#efefef;\">\n        \n            <a (click)=\"isPlatformTypeCollapsed = !isPlatformTypeCollapsed\">\n                <h4><i class=\"fa fa-fw collapsible-link\" [ngClass]=\"{'fa-chevron-down': !isPlatformTypeCollapsed, 'fa-chevron-right': isPlatformTypeCollapsed}\"></i>Platform Types</h4>\n            </a>\n            <div id=\"platformTypeCollabseContainer\" [collapse]=\"isPlatformTypeCollapsed\">\n                <classifications [metadata]='{title: \"Platform Type\", label: \"type\", baseUrl: \"/platform-type\"}'></classifications>\n            </div>\n            \n            <a (click)=\"isPlatformManufacturerCollapsed = !isPlatformManufacturerCollapsed\">\n                 <h4><i class=\"fa fa-fw collapsible-link\" [ngClass]=\"{'fa-chevron-down': !isPlatformManufacturerCollapsed, 'fa-chevron-right': isPlatformManufacturerCollapsed}\"></i>Platform Manufacturer</h4>\n            </a>\n            <div id=\"platformManufacturerCollabseContainer\" [collapse]=\"isPlatformManufacturerCollapsed\">\n                <classifications [metadata]='{title: \"Platform Manufacturer\", label: \"manufacturer\", baseUrl: \"/platform-manufacturer\"}'></classifications>\n            </div>\n            \n        </section>\n        \n        <platforms></platforms>\n        \n        <br><br>\n        \n    </div>\n</div>","import { Directive, Input } from \"@angular/core\";\r\nimport { AbstractControl, NG_VALIDATORS, Validator, ValidatorFn } from \"@angular/forms\";\r\n\r\nexport function forbiddenNameValidator( nameRe: RegExp ): ValidatorFn {\r\n    return ( control: AbstractControl ): { [key: string]: any } | null => {\r\n        const forbidden = nameRe.test( control.value );\r\n        return forbidden ? { 'forbiddenName': { value: control.value } } : null;\r\n    };\r\n}\r\n\r\n@Directive( {\r\n    selector: '[forbiddenName]',\r\n    providers: [{ provide: NG_VALIDATORS, useExisting: ForbiddenNameDirective, multi: true }]\r\n} )\r\nexport class ForbiddenNameDirective implements Validator {\r\n    validate( control: AbstractControl ): { [key: string]: any } | null {\r\n        return forbiddenNameValidator( new RegExp( /[\\W<>\\-+=!@#$%^&*?/\\\\']/gm  ) )( control );\r\n    }\r\n  }","import { Injectable } from \"@angular/core\";\r\nimport { CanDeactivate } from \"@angular/router\";\r\n\r\nimport { UploadComponent } from \"../component/upload.component\";\r\n\r\n@Injectable()\r\nexport class CanDeactivateGuardService implements CanDeactivate<UploadComponent> {\r\n  canDeactivate(component: UploadComponent): boolean {\r\n   \r\n    if(component.canDeactivate()){\r\n        if (confirm(\"An upload is currently in progress. Are you sure you want to leave?\")) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n  }\r\n}","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\nimport { HttpBackendClient } from '@shared/service/http-backend-client.service';\n\nimport { PageResult } from '@shared/model/page';\nimport { MetadataOptions, UAV } from '../model/uav';\nimport { GenericTableService } from '@shared/model/generic-table';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class UAVService implements GenericTableService {\n\n    constructor(private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService) { }\n\n\n    page(criteria: Object): Promise<PageResult<UAV>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set('criteria', JSON.stringify(criteria));\n\n        return this.http\n            .get<PageResult<UAV>>(acp + '/uav/page', { params: params })\n            .toPromise();\n    }\n\n    get(oid: string): Promise<{ uav: UAV, bureaus: { value: string, label: string }[] }> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<{ uav: UAV, bureaus: { value: string, label: string }[] }>(acp + '/uav/get', JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    newInstance(): Promise<{ uav: UAV, bureaus: { value: string, label: string }[] }> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<{ uav: UAV, bureaus: { value: string, label: string }[] }>(acp + '/uav/newInstance', JSON.stringify({}), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(oid: string): Promise<void> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(acp + '/uav/remove', JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(uav: UAV): Promise<UAV> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<UAV>(acp + '/uav/apply', JSON.stringify({ uav: uav }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    search(text: string): Promise<{ oid: string, serialNumber: string, faaNumber: string }[]> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set('text', text);\n\n        return this.http\n            .get<{ oid: string, serialNumber: string, faaNumber: string }[]>(acp + '/uav/search', { params: params })\n            .toPromise();\n    }\n\n    getMetadataOptions(oid: string): Promise<MetadataOptions> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set('oid', oid);\n\n        return this.http\n            .get<MetadataOptions>(acp + '/uav/get-metadata-options', { params: params })\n            .toPromise();\n    }\n}","<div>\n<!-- \t<uasdm-header></uasdm-header> -->\n\n<!-- \t<div id=\"app-container\" class=\"container\"> -->\n\n\t\t<h2>UAVs</h2>\n\n\t\t<generic-table *ngIf=\"config != null\" [cols]=\"cols\" [config]=\"config\" [refresh]=\"refresh\" (click)=\"onClick($event)\"></generic-table>\t\t\n<!-- \t</div> -->\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\n\nimport { UAV } from '@site/model/uav';\nimport { UAVService } from '@site/service/uav.service';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from '@shared/model/generic-table';\n\n@Component({\n    selector: 'uavs',\n    templateUrl: './uavs.component.html',\n    styles: ['./uavs.css']\n})\nexport class UAVsComponent implements OnInit {\n    bsModalRef: BsModalRef;\n    message: string = null;\n\n    config: GenericTableConfig;\n    cols: GenericTableColumn[] = [\n        { header: 'Serial Number', field: 'serialNumber', type: 'TEXT', sortable: true },\n        { header: 'FAA Id Number', field: 'faaNumber', type: 'TEXT', sortable: true },\n        { header: 'Description', field: 'description', type: 'TEXT', sortable: true },\n        { header: 'Bureau', field: 'bureau', type: 'TEXT', sortable: true },\n        { header: 'Platform', field: 'platform', type: 'TEXT', sortable: true },\n        { header: '', type: 'ACTIONS', sortable: false },\n    ];\n    refresh: Subject<void>;\n\n    constructor(private service: UAVService, private router: Router, private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n        this.config = {\n            service: this.service,\n            remove: true,\n            view: true,\n            create: true,\n            label: 'UAV'\n        }\n\n        this.refresh = new Subject<void>();\n    }\n\n    onClick(event: TableEvent): void {\n        if (event.type === 'view') {\n            this.onView(event.row as UAV);\n        }\n        else if (event.type === 'remove') {\n            this.onRemove(event.row as UAV);\n        }\n        else if (event.type === 'create') {\n            this.newInstance();\n        }\n    }\n\n    remove(uav: UAV): void {\n        this.service.remove(uav.oid).then(response => {\n            this.refresh.next();\n        });\n    }\n\n    onRemove(uav: UAV): void {\n        this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.message = \"Are you sure you want to remove the UAV [\" + uav.serialNumber + \"]\";\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = \"Delete\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.remove(uav);\n        });\n    }\n\n    onView(uav: UAV): void {\n        this.router.navigate(['/site/uav', uav.oid]);\n    }\n\n    newInstance(): void {\n        this.router.navigate(['/site/uav', '__NEW__']);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'uavs-page',\n    templateUrl: './uavs-page.component.html'\n})\nexport class UAVsPageComponent implements OnInit {\n\n    constructor() { }\n\n    ngOnInit(): void {\n        \n    }\n\n}\n","<div>\n\t<uasdm-header></uasdm-header>\n\n\t<div id=\"app-container\" class=\"container\">\n\n\t\t<uavs></uavs>\t\t\n\t</div>\n</div>","<div>\n  <uasdm-header></uasdm-header>\n\n  <div id=\"app-container\" class=\"container\">\n\n    <div *ngIf=\"uav != null\" class=\"modal-body\">\n      <div *ngIf=\"message != null\" class=\"error-container\">\n        <div class=\"label-holder\">\n          <strong>Error</strong>\n        </div>\n        <div class=\"holder\">\n          <div>\n            <p class=\"error-message\">{{message}}</p>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"modal-title-container\">\n        <h3>UAV</h3>\n      </div>\n\n      <form #ngForm=\"ngForm\">\n        <div class=\"form-group\">\n          <label>Platform</label>\n          <select *ngIf=\"mode !== 'READ'\" [(ngModel)]=\"uav.platform\" name=\"platform\" type=\"input\"\n            class=\"form-control\" required>\n            <option></option>\n            <option *ngFor=\"let platform of platforms\" [value]=\"platform.oid\">{{platform.name}}</option>\n          </select>\n          <ng-container *ngIf=\"mode === 'READ'\">\n            <div *ngFor=\"let platform of platforms | filter:'oid':uav.platform\">\n              <a [routerLink]=\"['/site/platform', platform.oid]\">{{platform.name}}</a>\n            </div>\n          </ng-container>          \n        </div>\n        <div class=\"form-group\">\n          <label>Serial Number</label>\n          <input [(ngModel)]=\"uav.serialNumber\" name=\"serialNumber\" type=\"input\" class=\"form-control\"\n            placeholder=\"Serial Number\" [disabled]=\"mode === 'READ'\" required />\n        </div>\n        <div class=\"form-group\">\n          <label>FAA Number</label>\n          <input [(ngModel)]=\"uav.faaNumber\" name=\"faaNumber\" type=\"input\" class=\"form-control\" placeholder=\"FAA Number\"\n            [disabled]=\"mode === 'READ'\" required max=\"10\" maxlength=\"10\" />\n        </div>\n        <div class=\"form-group\">\n          <label>Description</label>\n          <textarea [(ngModel)]=\"uav.description\" [disabled]=\"mode === 'READ'\" name=\"description\" type=\"input\"\n            class=\"form-control\" placeholder=\"Description\"></textarea>\n        </div>\n        <div class=\"form-group\">\n          <label>Bureau</label>\n          <select [(ngModel)]=\"uav.bureau\" [disabled]=\"mode === 'READ'\" name=\"bureau\" type=\"input\" class=\"form-control\"\n            required>\n            <option></option>\n            <option *ngFor=\"let bureau of bureaus\" [value]=\"bureau.value\">\n              {{bureau.label}}\n            </option>\n          </select>\n        </div>\n        <div *ngIf=\"mode === 'WRITE'\" class=\"btn-holder\" style=\"text-align: right;\">\n          <button *ngIf=\"!newInstance\" type=\"button\" class=\"btn btn-default\" (click)=\"handleOnCancel()\">Cancel</button>\n          <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\"\n            [disabled]=\"!ngForm.valid\">Apply</button>\n        </div>\n        <div *ngIf=\"mode === 'READ'\" class=\"btn-holder\" style=\"text-align: right;\">\n          <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnEdit()\">Edit</button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { UAV } from '@site/model/uav';\nimport { UAVService } from '@site/service/uav.service';\nimport { PlatformService } from '@site/service/platform.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n    selector: 'uav',\n    templateUrl: './uav.component.html',\n    styleUrls: []\n})\nexport class UAVComponent implements OnInit {\n    original: UAV;\n    uav: UAV;\n    newInstance: boolean = false;\n\n    message: string = null;\n\n    bureaus: { value: string, label: string }[] = [];\n    platforms: { oid: string, name: string }[] = [];\n    mode: string = 'READ';\n\n    constructor(private service: UAVService, private platformService: PlatformService,\n        private route: ActivatedRoute, private router: Router\n    ) { }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.params['oid'];\n\n        if (oid === '__NEW__') {\n            this.service.newInstance().then((resp: { uav: UAV, bureaus: { value: string, label: string }[] }) => {\n                this.uav = resp.uav;\n                this.bureaus = resp.bureaus;\n                this.newInstance = true;\n                this.mode = 'WRITE';\n            });\n        }\n        else {\n            this.service.get(oid).then((resp: { uav: UAV, bureaus: { value: string, label: string }[] }) => {\n                this.uav = resp.uav;\n                this.bureaus = resp.bureaus;\n                this.original = JSON.parse(JSON.stringify(this.uav));\n            });\n        }\n\n        this.platformService.getAll().then(platforms => {\n            this.platforms = platforms;\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.service.apply(this.uav).then(data => {\n            this.uav = data;\n            this.mode = 'READ';\n\n            if (this.newInstance) {\n                this.router.navigate(['/site/uav', data.oid]);\n                this.newInstance = false;\n                this.original = data;\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleOnCancel(): void {\n        this.message = null;\n\n        this.uav = JSON.parse(JSON.stringify(this.original));\n        this.mode = 'READ';\n    }\n\n    handleOnEdit(): void {\n        this.mode = 'WRITE';\n    }\n\n\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\nimport { EventService } from '@shared/service/event.service';\nimport { HttpBackendClient } from '@shared/service/http-backend-client.service';\n\nimport { PageResult } from '@shared/model/page';\nimport { Report } from '@site/model/report';\nimport { GenericTableService } from '@shared/model/generic-table';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ReportService implements GenericTableService {\n\n    constructor(private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService) { }\n\n    page(criteria: Object): Promise<PageResult<Report>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set('criteria', JSON.stringify(criteria));\n\n        return this.http\n            .get<PageResult<Report>>(acp + '/collection-report/page', { params: params })\n            .toPromise();\n    }\n}","<div>\n\t<uasdm-header></uasdm-header>\n\n\t<div id=\"app-container\" class=\"container-fluid\">\n\n\t\t<h2>Report</h2>\n\n\t\t<div class=\"row\">\n            <input class=\"btn btn-primary pull-right\" type=\"submit\" value=\"Export CSV\" (click)=\"onExportCSV()\">\n        </div>\n\n        <div class=\"row\">\n\t\t\t<generic-table *ngIf=\"config != null\" [cols]=\"cols\" [config]=\"config\" (click)=\"onClick($event)\"></generic-table>\t\t\n        </div>\n\n\n\t</div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ReportService } from '@site/service/report.service';\nimport { ProductService } from '@site/service/product.service';\nimport { BsModalService } from 'ngx-bootstrap';\nimport { ProductModalComponent } from '../modal/product-modal.component';\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from '@shared/model/generic-table';\n\ndeclare var acp: any;\n\n@Component({\n    selector: 'reports',\n    templateUrl: './reports.component.html',\n    styles: ['./reports.css']\n})\nexport class ReportsComponent implements OnInit {\n    message: string = null;\n\n    config: GenericTableConfig;\n    cols: GenericTableColumn[] = [\n        {\n            header: 'Collection', field: 'collectionName', baseUrl: 'site/viewer/collection', urlField: 'collection', type: 'URL', sortable: true, columnType: (row: Object) => {\n                if (!row['exists']) {\n                    return 'TEXT';\n                }\n\n                return 'URL';\n            }\n        },\n        { header: 'Collection Owner', field: 'userName', type: 'TEXT', sortable: true },\n        { header: 'Collection Date', field: 'collectionDate', type: 'DATE', sortable: true },\n        { header: 'Mission', field: 'missionName', type: 'TEXT', sortable: true },\n        { header: 'Project', field: 'projectName', type: 'TEXT', sortable: true },\n        { header: 'Site', field: 'siteName', type: 'TEXT', sortable: true },\n        { header: 'Latitude', field: 'siteLatDecimalDegree', type: 'NUMBER', sortable: false, filter: false },\n        { header: 'Longitude', field: 'siteLongDecimalDegree', type: 'NUMBER', sortable: false, filter: false },\n        { header: 'Bureau', field: 'bureauName', type: 'TEXT', sortable: true },\n        { header: 'Platform', field: 'platformName', type: 'TEXT', sortable: true },\n        { header: 'Sensor', field: 'sensorName', type: 'TEXT', sortable: true },\n        { header: 'FAA Id Number', field: 'faaIdNumber', type: 'TEXT', sortable: true },\n        { header: 'Serial Number', field: 'serialNumber', type: 'TEXT', sortable: true },\n        { header: 'ODM Processing', field: 'odmProcessing', type: 'TEXT', sortable: false },\n        { header: 'RAW Images Count', field: 'rawImagesCount', type: 'NUMBER', sortable: false },\n        { header: 'EROS Metadata Complete', field: 'erosMetadataComplete', type: 'BOOLEAN', sortable: false },\n        { header: 'Video', field: 'video', type: 'BOOLEAN', sortable: false },\n        { header: 'Orthomosaic', field: 'orthomosaic', type: 'BOOLEAN', sortable: false },\n        { header: 'Point Cloud', field: 'pointCloud', type: 'BOOLEAN', sortable: false },\n        { header: 'Hillshade', field: 'hillshade', type: 'BOOLEAN', sortable: false },\n        { header: 'Products Shared', field: 'productsShared', type: 'BOOLEAN', sortable: false },\n        { header: 'Storage size', field: 'allStorageSize', type: 'NUMBER', sortable: true, filter: false },\n        { header: 'Number of Downloads', field: 'downloadCounts', type: 'NUMBER', sortable: true, filter: false },\n        { header: 'Date of Create', field: 'createDate', type: 'DATE', sortable: true, filter: false },\n        { header: 'Date of Delete', field: 'deleteDate', type: 'DATE', sortable: true, filter: false },\n        {\n            header: '', field: 'product', text: 'View Product', type: 'CONSTANT', sortable: false, columnType: (row: Object) => {\n                if (row['product'] == null || row['product'].length === 0) {\n                    return 'NONE';\n                }\n\n                return 'CONSTANT';\n            }\n        },\n    ];\n\n    constructor(private service: ReportService, private pService: ProductService, private modalService: BsModalService) {\n    }\n\n    ngOnInit(): void {\n        this.config = {\n            service: this.service,\n            remove: false,\n            view: false,\n            create: false,\n            label: 'row'\n        }\n    }\n\n    onExportCSV(): void {\n        window.open(acp + '/collection-report/export-csv', '_blank');\n    }\n\n    onClick(event: TableEvent): void {\n        if (event.type === 'custom') {\n            if (event.col.field === 'product') {\n\n                const oid = event.row['product'];\n\n                if (oid != null && oid.length > 0) {\n                    this.pService.getDetail(oid, 1, 20).then(detail => {\n                        const bsModalRef = this.modalService.show(ProductModalComponent, {\n                            animated: true,\n                            backdrop: true,\n                            ignoreBackdropClick: true,\n                            'class': 'product-info-modal'\n                        });\n                        bsModalRef.content.init(detail);\n                    });\n                }\n            }\n\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ProjectsComponent } from './component/projects.component';\nimport { UploadComponent } from './component/upload.component';\nimport { TasksComponent } from './component/tasks.component';\nimport { SensorsComponent } from './component/sensor/sensors.component';\nimport { PlatformsComponent } from './component/platform/platforms.component';\n\nimport { CanDeactivateGuardService } from \"./service/can.deactivate.guard.service\";\nimport { AuthGuard, AdminGuardService } from '../shared/service/guard.service';\nimport { PlatformComponent } from './component/platform/platform.component';\nimport { SensorComponent } from './component/sensor/sensor.component';\nimport { ClassificationsComponent } from './component/classification/classifications.component';\nimport { Endpoint } from './service/classification.service';\nimport { ClassificationComponent } from './component/classification/classification.component';\nimport { UAVsComponent } from './component/uav/uavs.component';\nimport { UAVsPageComponent } from './component/uav/uavs-page.component';\nimport { UAVComponent } from './component/uav/uav.component';\nimport { ReportsComponent } from './component/report/reports.component';\nimport { EquipmentComponent } from './component/equipment/equipment.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        canActivate: [AuthGuard],\n        component: ProjectsComponent\n    },\n    {\n        path: 'viewer',\n        canActivate: [AuthGuard],\n        component: ProjectsComponent\n    },\n    {\n        path: 'viewer/:action/:oid',\n        canActivate: [AuthGuard],\n        component: ProjectsComponent\n    },\n    {\n        path: 'upload',\n        component: UploadComponent,\n        canDeactivate: [CanDeactivateGuardService]\n    },\n    {\n        path: 'tasks',\n        canActivate: [AuthGuard],\n        component: TasksComponent\n    },\n    {\n        path: 'report',\n        canActivate: [AuthGuard],\n        component: ReportsComponent\n    },\n    {\n        path: 'sensor/:oid',\n        canActivate: [AuthGuard],\n        component: SensorComponent,\n    },\n    {\n        path: 'platform/:oid',\n        canActivate: [AuthGuard],\n        component: PlatformComponent,\n    },\n    {\n        path: 'platform-manufacturer/:oid',\n        canActivate: [AdminGuardService],\n        component: ClassificationComponent,\n        data: {\n            title: 'Platform Manufacturer',\n            label: 'manufacturer',\n            baseUrl: Endpoint.PLATFORM_MANUFACTURER\n        }\n    },\n    {\n        path: 'platform-type/:oid',\n        canActivate: [AdminGuardService],\n        component: ClassificationComponent,\n        data: {\n            title: 'Platform Type',\n            label: 'type',\n            baseUrl: Endpoint.PLATFORM_TYPE\n        }\n    },\n    {\n        path: 'sensor-type/:oid',\n        canActivate: [AdminGuardService],\n        component: ClassificationComponent,\n        data: {\n            title: 'Sensor Type',\n            label: 'type',\n            baseUrl: Endpoint.SENSOR_TYPE,\n            columns: [\n                {\n                    name: 'isMultispectral',\n                    label: 'Is Multispectral',\n                    type: 'boolean'\n                }\n            ]\n        }\n\n    },\n    {\n        path: 'wave-length/:oid',\n        canActivate: [AdminGuardService],\n        component: ClassificationComponent,\n        data: {\n            title: 'Wave Length',\n            label: 'wave length',\n            baseUrl: Endpoint.WAVE_LENGTH\n        }\n    },\n    {\n        path: 'uavs',\n        canActivate: [AdminGuardService],\n        component: UAVsPageComponent,\n    },\n    {\n        path: 'uav/:oid',\n        canActivate: [AdminGuardService],\n        component: UAVComponent,\n    },\n    {\n        path: 'equipment',\n        canActivate: [AdminGuardService],\n        component: EquipmentComponent,\n        data: {}\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n    providers: [{ provide: LocationStrategy, useClass: HashLocationStrategy }]\n})\nexport class SiteRoutingModule { }","<ng-container>\n    <div *ngIf=\"page.selection.pointOfContact != null\" [@fadeInOnEnter] class=\"row\" style=\"margin-top: 20px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">Point Of Contact</div>\n                <div class=\"panel-body\">\n                    <div class=\"form-group\">\n                        <label for=\"pointOfContact.name\">Name</label>\n                        <input type=\"text\" name=\"pointOfContact.name\" [(ngModel)]=\"page.selection.pointOfContact.name\"\n                            [maxlength]=\"100\" [required]=\"false\" [disabled]=\"false\"\n                            (change)=\"this.handlePageChange()\" />\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"pointOfContact.email\">Email</label>\n                        <input type=\"text\" name=\"pointOfContact.email\" [(ngModel)]=\"page.selection.pointOfContact.email\"\n                            [maxlength]=\"255\" [required]=\"false\" [disabled]=\"false\"\n                            (change)=\"this.handlePageChange()\" />\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </div>\n\n    <div class=\"row\" [@fadeInOnEnter]>\n        <div class=\"col-md-12\">\n\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">Platform</div>\n                <div class=\"panel-body\">\n                    <div class=\"form-group\">\n                        <label for=\"platform.name\">UAV</label>\n                        <input class=\"form-control search-input\" type=\"text\" placeholder=\"Search...\"\n                            [(ngModel)]=\"search\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\"\n                            (typeaheadOnSelect)=\"handleUavClick($event)\" [typeaheadOptionsLimit]=\"10\"\n                            typeaheadOptionField=\"serialNumber\" [ngModelOptions]=\"{standalone: true}\"\n                            (keydown.enter)=\"$event.preventDefault()\" required />\n                    </div>\n\n\n                    <ng-container *ngIf=\"uav != null\">\n                        <div class=\"form-group\">\n                            <label for=\"sensor.type\">Name</label>\n                            {{uav.platform}}\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.type\">Type</label>\n                            {{uav.platformType}}\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.type\">Serial Number</label>\n                            {{uav.serialNumber}}\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.type\">FAA Id Number</label>\n                            {{uav.faaNumber}}\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.type\">Bureau</label>\n                            {{uav.bureau}}\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div *ngIf=\"uav != null\" [@fadeInOnEnter] class=\"row\">\n        <div class=\"col-md-12\">\n\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">Sensor</div>\n                <div class=\"panel-body\">\n                    <div class=\"form-group\">\n                        <label for=\"sensor.name\">Name</label>\n                        <select [(ngModel)]=\"page.selection.sensor\" name=\"sensor\" class=\"form-control\"\n                            (change)=\"onSensorChange()\" required>\n                            <option></option>\n                            <option *ngFor=\"let sensor of uav.sensors\" [value]=\"sensor.oid\">{{sensor.name}}\n                            </option>\n                        </select>\n                    </div>\n                    <ng-container *ngIf=\"metaObject != null\">\n\n                        <div class=\"form-group\">\n                            <label for=\"sensor.type\">Type</label>\n                            {{metaObject.sensor.sensorType}}\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.wavelength\">Wave Length</label>\n                            <ul>\n                                <li *ngFor=\"let wavelength of metaObject.sensor.wavelengths\">\n                                    {{wavelength.name}}\n                                </li>\n                            </ul>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorWidth\">Sensor Width</label>\n                            {{metaObject.sensor.sensorWidth}}\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorWidth\">Sensor Width Units</label>\n                            Millimeters\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorHeight\">Sensor Height</label>\n                            {{metaObject.sensor.sensorHeight}}\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorWidth\">Sensor Height Units</label>\n                            Millimeters\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.pixelSizeWidth\">Pixel Size Width</label>\n                            {{metaObject.sensor.pixelSizeWidth}}\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.pixelSizeHeight\">Pixel Size Height</label>\n                            {{metaObject.sensor.pixelSizeHeight}}\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n\n        </div>\n    </div>\n\n</ng-container>","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ManagementService } from '@site/service/management.service';\nimport { Page } from '../modal/upload-modal.component';\nimport { MetadataOptions } from '@site/model/uav';\nimport { Observable, Observer } from 'rxjs';\nimport { UAVService } from '@site/service/uav.service';\n\n@Component({\n\tselector: 'metadata-page',\n\ttemplateUrl: './metadata-page.component.html',\n\tstyleUrls: []\n})\nexport class MetadataPageComponent implements OnInit {\n\t/*\n\t * page being updated\n\t */\n\t@Input() page: Page;\n\n\t@Output() pageChange = new EventEmitter<Page>();\n\n\t/* \n\t * Datasource to get search responses\n\t */\n\tdataSource: Observable<any>;\n\tsearch: string = '';\n\n\tuav: MetadataOptions = null;\n\n\tmetaObject: any = null;\n\n\tconstructor(private service: ManagementService, private uavService: UAVService) {\n\t\tthis.dataSource = new Observable((observer: Observer<object>) => {\n\t\t\tthis.uavService.search(this.search).then(results => {\n\t\t\t\tobserver.next(results);\n\t\t\t})\n\t\t});\n\t}\n\n\tngOnInit(): void {\n\n\t\tif (this.page.selection.pointOfContact == null) {\n\t\t\tthis.service.getMetadataOptions(null).then(metadataOption => {\n\t\t\t\tthis.page.selection.pointOfContact = {\n\t\t\t\t\tname: metadataOption.name,\n\t\t\t\t\temail: metadataOption.email\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\tif (this.page.selection.uav != null) {\n\t\t\tthis.getUavInformation(this.page.selection.uav, false);\n\t\t}\n\n\t\tif (this.page.selection.sensor != null) {\n\t\t\tthis.onSensorChange();\n\t\t}\n\t}\n\n\thandlePageChange(): void {\n\t\tthis.pageChange.emit(this.page);\n\t}\n\n\tonSensorChange(): void {\n\n\t\tthis.metaObject = null;\n\n\t\tthis.service.getUAVMetadata(this.page.selection.uav, this.page.selection.sensor).then((options) => {\n\n\t\t\tthis.metaObject = {\n\t\t\t\tuav: options.uav,\n\t\t\t\tsensor: options.sensor\n\t\t\t};\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t// this.error(err);\n\t\t});\n\n\t\tthis.handlePageChange();\n\t}\n\n\thandleUavClick(event: any): void {\n\t\tthis.getUavInformation(event.item.oid, true);\n\n\t\tthis.pageChange.emit(this.page);\n\t}\n\n\tgetUavInformation(oid: string, reset: boolean): void {\n\t\tthis.uav = null;\n\t\tthis.metaObject = null;\n\n\t\tif (reset) {\n\t\t\tthis.page.selection.uav = null;\n\t\t\tthis.page.selection.sensor = null;\n\t\t}\n\n\t\tif (oid != null) {\n\t\t\tthis.page.selection.uav = oid;\n\n\t\t\tthis.uavService.getMetadataOptions(oid).then(metadataOption => {\n\t\t\t\tthis.uav = metadataOption;\n\n\t\t\t\tif (!reset) {\n\t\t\t\t\tthis.search = this.uav.serialNumber;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n//import { TreeModule } from 'angular-tree-component';\n//import { ContextMenuModule } from 'ngx-contextmenu';\nimport { NgxFileDropModule } from 'ngx-file-drop';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { AccordionModule } from 'ngx-bootstrap/accordion';\nimport { TabsModule } from 'ngx-bootstrap/tabs';\nimport { AlertModule } from 'ngx-bootstrap/alert';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\nimport { MapAttributeComponent } from './component/map-attribute/map-attribute.component';\nimport { ProductPanelComponent } from './component/product-panel/product-panel.component';\nimport { EntityModalComponent } from './component/modal/entity-modal.component';\nimport { MetadataModalComponent } from './component/modal/metadata-modal.component';\nimport { ImagePreviewModalComponent } from './component/modal/image-preview-modal.component';\nimport { UploadModalComponent } from './component/modal/upload-modal.component';\nimport { LeafModalComponent } from './component/modal/leaf-modal.component';\nimport { AccessibleSupportModalComponent } from './component/modal/accessible-support-modal.component';\nimport { ProductModalComponent } from './component/modal/product-modal.component';\nimport { ProjectsComponent } from './component/projects.component';\nimport { UploadComponent } from './component/upload.component';\nimport { TasksComponent } from './component/tasks.component';\nimport { TasksPanelComponent } from './component/tasks/tasks-panel.component';\nimport { SensorsComponent } from './component/sensor/sensors.component';\nimport { SensorComponent } from './component/sensor/sensor.component';\nimport { PlatformsComponent } from './component/platform/platforms.component';\nimport { PlatformComponent } from './component/platform/platform.component';\nimport { ClassificationsComponent } from './component/classification/classifications.component';\nimport { ClassificationComponent } from './component/classification/classification.component';\nimport { EquipmentComponent } from './component/equipment/equipment.component';\n\nimport { ForbiddenNameDirective } from './directive/forbidden-name.directive';\nimport { OnlyNumber } from './directive/number-only.directive';\n\nimport { ProductService } from './service/product.service';\nimport { ManagementService } from './service/management.service';\nimport { MapService } from './service/map.service';\nimport { CanDeactivateGuardService } from './service/can.deactivate.guard.service';\nimport { SensorService } from './service/sensor.service';\nimport { PlatformService } from './service/platform.service';\nimport { MetadataService } from './service/metadata.service';\nimport { ClassificationService } from './service/classification.service';\n\nimport { SiteRoutingModule } from './site-routing.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { UAVsComponent } from './component/uav/uavs.component';\nimport { UAVsPageComponent } from './component/uav/uavs-page.component';\nimport { UAVComponent } from './component/uav/uav.component';\nimport { UAVService } from './service/uav.service';\nimport { MetadataPageComponent } from './component/metadata-page/metadata-page.component';\nimport { ReportsComponent } from './component/report/reports.component';\nimport { ReportService } from './service/report.service';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tRouterModule,\n\t\tFormsModule,\n\t\tNgxPaginationModule,\n\t\t//        TreeModule,\n\t\t//        ContextMenuModule,\n\t\t//        ModalModule.forRoot(),\n\t\tAlertModule,\n\t\tBsDropdownModule,\n\t\tTypeaheadModule,\n\t\tAccordionModule,\n\t\tTabsModule.forRoot(),\n\t\tCollapseModule.forRoot(),\n\t\tSharedModule,\n\t\tSiteRoutingModule,\n\t\tNgxFileDropModule,\n\t],\n\tdeclarations: [\n\t\tMapAttributeComponent,\n\t\tProductPanelComponent,\n\t\tEntityModalComponent,\n\t\tMetadataModalComponent,\n\t\tImagePreviewModalComponent,\n\t\tUploadModalComponent,\n\t\tLeafModalComponent,\n\t\tAccessibleSupportModalComponent,\n\t\tProductModalComponent,\n\t\tProjectsComponent,\n\t\tUploadComponent,\n\t\tTasksComponent,\n\t\tForbiddenNameDirective,\n\t\tOnlyNumber,\n\t\tSensorComponent,\n\t\tSensorsComponent,\n\t\tPlatformComponent,\n\t\tPlatformsComponent,\n\t\tTasksPanelComponent,\n\t\tClassificationsComponent,\n\t\tClassificationComponent,\n\t\tUAVsComponent,\n        UAVsPageComponent,\n\t\tUAVComponent,\n\t\tMetadataPageComponent,\n\t\tReportsComponent,\n        EquipmentComponent\n\t],\n\tproviders: [\n\t\tCanDeactivateGuardService,\n\t\tManagementService,\n\t\tProductService,\n\t\tMapService,\n\t\tSensorService,\n\t\tPlatformService,\n\t\tMetadataService,\n\t\tClassificationService,\n\t\tUAVService,\n\t\tReportService\n\t],\n\tentryComponents: [\n\t\tUploadModalComponent,\n\t\tEntityModalComponent,\n\t\tImagePreviewModalComponent,\n\t\tMetadataModalComponent,\n\t\tLeafModalComponent,\n\t\tProductModalComponent\n\t]\n})\nexport class SiteModule { }\n"],"sourceRoot":""}