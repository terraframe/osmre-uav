{"version":3,"sources":["webpack:///./src/app/site/service/map.service.ts","webpack:///./src/app/site/component/map-attribute/map-attribute.component.html","webpack:///./src/app/site/component/map-attribute/map-attribute.component.ts","webpack:///./src/app/site/service/management.service.ts","webpack:///./src/app/site/component/modal/image-preview-modal.component.html","webpack:///./src/app/site/component/modal/image-preview-modal.component.ts","webpack:///./src/app/site/model/management.ts","webpack:///./src/app/site/model/sensor.ts","webpack:///./src/app/site/directive/number-only.directive.ts","webpack:///./src/app/site/component/modal/metadata-modal.component.html","webpack:///./src/app/site/component/modal/metadata-modal.component.ts","webpack:///./src/app/site/model/metadata.ts","webpack:///./src/app/site/service/metadata.service.ts","webpack:///./src/app/site/component/modal/leaf-modal.component.html","webpack:///./src/app/site/component/modal/leaf-modal.component.ts","webpack:///./src/app/site/service/product.service.ts","webpack:///./src/app/site/component/modal/product-modal.component.html","webpack:///./src/app/site/component/modal/product-modal.component.ts","webpack:///./src/app/site/component/product-panel/product-panel.component.html","webpack:///./src/app/site/component/product-panel/product-panel.component.ts","webpack:///./src/app/site/component/modal/entity-modal.component.html","webpack:///./src/app/site/component/modal/entity-modal.component.ts","webpack:///./src/app/site/component/modal/upload-modal.component.html","webpack:///./src/app/site/component/modal/upload-modal.component.ts","webpack:///./src/app/site/component/modal/accessible-support-modal.component.html","webpack:///./src/app/site/component/modal/accessible-support-modal.component.ts","webpack:///./src/app/site/component/projects.component.html","webpack:///./src/app/site/component/projects.component.ts","webpack:///./src/app/site/component/upload.component.html","webpack:///./src/app/site/component/upload.component.ts","webpack:///./src/app/site/component/tasks/tasks-panel.component.html","webpack:///./src/app/site/component/tasks/tasks-panel.component.ts","webpack:///./src/app/site/component/tasks.component.html","webpack:///./src/app/site/component/tasks.component.ts","webpack:///./src/app/site/service/sensor.service.ts","webpack:///./src/app/site/component/sensor/sensor.component.html","webpack:///./src/app/site/component/sensor/sensor.component.ts","webpack:///./src/app/site/component/sensor/sensors.component.html","webpack:///./src/app/site/component/sensor/sensors.component.ts","webpack:///./src/app/site/service/platform.service.ts","webpack:///./src/app/site/component/platform/platform.component.html","webpack:///./src/app/site/component/platform/platform.component.ts","webpack:///./src/app/site/component/platform/platforms.component.html","webpack:///./src/app/site/component/platform/platforms.component.ts","webpack:///./src/app/site/directive/forbidden-name.directive.ts","webpack:///./src/app/site/service/can.deactivate.guard.service.ts","webpack:///./src/app/site/site-routing.module.ts","webpack:///./src/app/site/site.module.ts"],"names":["mapboxKey","http","params","this","get","acp","toPromise","searchText","url","mapService","baseLayers","label","id","selected","center","zoom","coordinate","longitude","latitude","search","dataSource","Observable","create","observer","mbForwardGeocode","then","response","match","features","results","forEach","obj","newObj","hierarchy","place_name","source","push","next","refreshCoordinateFromMap","config","container","style","site","geometry","coordinates","map","on","initMap","remove","modes","static","draw","displayControlsDefault","controls","addControl","$event","onDrawUpdate","onDrawCreate","addLayers","feature","type","properties","oid","name","add","changeMode","featureIds","addSource","data","event","action","length","updateGeometry","console","log","ids","set","layer","baseLayer","setStyle","result","item","flyTo","handleClick","preventDefault","refreshCoordinateFromInput","noErrorHttpClient","eventService","authService","key","pageNumber","pageSize","toString","bounds","JSON","stringify","headers","start","post","pipe","finalize","complete","excludes","entity","parentId","getUserName","componentId","uploadId","folder","file","formData","FormData","append","statuses","useSpinner","responseType","terms","debounceTime","distinctUntilChanged","switchMap","term","searchEntries","metaObj","json","condition","value","isAdmin","ImagePreviewModalComponent","service","bsModalRef","message","open","loading","component","getImage","image","reader","FileReader","addEventListener","imageToShow","readAsDataURL","download","subscribe","blob","createImageFromBlob","error","err","localizedMessage","SiteObjectsResultSet","WAVELENGTHS","OnlyNumber","el","e","indexOf","keyCode","ctrlKey","shiftKey","disabled","metaObject","collectionId","pointOfContact","email","platform","otherName","class","serialNumber","faaIdNumber","sensor","model","wavelength","sensorWidth","sensorHeight","pixelSizeWidth","pixelSizeHeight","upload","dataType","sensors","platforms","wavelengths","otherSensorId","otherPlatformId","onMetadataChange","Subject","getMetadataOptions","options","handleSensorSelect","handlePlatformSelect","catch","getSelectedSensor","sensorType","waveLength","getSelectedPlatform","platformType","findIndex","i","checked","splice","submitCollectionMetadata","hide","handleSubmit","Metadata","root","leaf","drillable","expandable","uploadable","processable","childLabel","cache","fieldName","metadataService","modalService","previous","folders","thumbnails","processRunning","enableSelectableImages","constPageSize","page","video","src","context","ins","init","onNodeChange","count","onSelect","isProcessable","imageData","rootPath","substr","lastIndexOf","fileName","exec","lastPeriod","thumbKey","getData","pn","ps","getObjects","resultSet","isImage","getThumbnail","excludeFromProcess","toLowerCase","position","stopPropagation","confirmModalRef","show","animated","backdrop","ignoreBackdropClick","content","submitText","onConfirm","runOrtho","statusMessage","window","location","href","modalRef","metadataUploaded","setTimeout","pService","items","showSite","product","imageKey","pDocument","entities","getDetail","detail","target","breadcrumbs","getItems","nodes","initData","rawImagePreviewModal","mService","toggleMapImage","products","changes","refreshProducts","currentValue","getProducts","emit","filter","n","togglePublish","p","mapIt","orthoMapped","workspace","mapKey","published","userName","admin","newInstance","attributes","applyWithParent","update","node","attribute","readonly","evaluate","differs","objectKeys","Object","keys","importedValues","values","uploader","taskStatusMessages","currentTask","existingTask","pollingIsSet","uploadVisible","selectedContinue","uploadCounter","showFileSelectPanel","taskFinishedNotifications","selections","labels","pages","index","selection","hierarchyChange","modalStepConfig","differ","find","elem","that","uiOptions","debug","autoUpload","multiple","element","nativeElement","template","request","endpoint","forceMultipart","resume","enabled","recordsExpireIn","chunking","retry","enableAuto","text","defaultResponseError","failedUploadTextDisplay","mode","validation","allowedExtensions","showMessage","callbacks","onUpload","countUpload","onProgress","uploadedBytes","totalBytes","onUploadChunk","chunkData","onUploadChunkSuccess","responseJSON","xhr","taskPolling","interval","task","onComplete","xhrOrXdr","isNew","unsubscribe","clearStoredFiles","clearInterval","uplodeCounterInterfal","success","notificationMsg","onUploadComplete","onCancel","removeTask","onError","errorReason","diff","setExistingTask","onHierarchyChange","getHierarchy","getChildren","children","child","getResumableFilesData","hasField","uploads","getUploads","nextPage","updateCurrentPageLabel","prevPage","steps","step","uploadStoredFiles","uploadTarget","getUploadTarget","setParams","hasExtraField","uuid","localStorage","clear","thisRef","ct","setInterval","hours","Math","floor","minutes","seconds","hoursStr","minutesStr","secondsStr","returnValue","close","files","droppedFile","fileEntry","isFile","refresh","relativePath","removeObject","supportingData","worker","active","layers","baselayerIconHover","subject","handleExtentChange","searchEntites","isWorker","getCurrentUser","attributionControl","compact","coord","lngLat","wrap","lat","lng","document","getElementById","textContent","queryRenderedFeatures","point","current","focusFeatureId","setFilter","highlightListItem","clearHighlightListItem","addLayer","addImageLayer","getBounds","isValidBounds","roots","ne","getNorthEast","sw","getSouthWest","abs","getSource","setData","bbox","fitBounds","padding","setNodes","parent","newChild","getCenter","getZoom","edit","refreshEntity","getMetadata","numberOfChildren","highlightMapFeature","clearHighlightMapFeature","hoverFeatureId","view","select","getLayer","removeLayer","removeSource","boundingBox","wkspace","encodeURI","layerName","getTypeContainsFolders","showLeafModal","addBreadcrumb","expand","staticTabs","tabs","collection","sites","projects","missions","collections","hideUploadPanel","siteId","project","mission","projectId","missionId","uasComponentOid","trim","showUploadPanel","managementService","showUploads","showProcess","showStore","showODMOutput","showError","taskGroups","deleteTask","pos","taskGroupType","tasks","totalTaskCount","activeTab","taskPage","errorStatuses","completeStatuses","messages","collectionGroups","from","updateTaskData","setTaskData","getMissingMetadata","updatePage","tab","parentNode","classList","contains","lis","getElementsByTagName","li","cls","addOnly","collectPosition","collectionLabel","taskGroupTypeIndex","groups","status","lastUpdatedDate","sort","a","b","Date","getTime","setTaskGroupStatuses","collectionGroup","isError","isWorking","group","sortedTasks","noMatch","newTask","matchFound","existingTaskGrp","existingGroup","lastUpdateDate","odmOutput","onMessagePageChange","onTabClick","waveLengths","onSensorChange","apply","unlock","router","localizeService","res","h","showModal","onPageChange","onPlatformChange","ForbiddenNameDirective","control","nameRe","RegExp","test","provide","useExisting","multi","CanDeactivateGuardService","canDeactivate","confirm","routes","path","canActivate","SiteRoutingModule","useClass","forChild","SiteModule","forRoot"],"mappings":"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","file":"2.chunk.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { map } from 'rxjs/operators';\r\n// import 'rxjs/add/operator/toPromise';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { GeoJSONSource } from 'mapbox-gl';\r\n\r\nimport * as mapboxgl from 'mapbox-gl';\r\n\r\n\r\nconst mapboxKey = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNTFnaTYyZ2RuNDlxcmNnejNtNjN6In0.-kmlS8Tgb2fNc1NPb5rJEQ';\r\n\r\n\r\ndeclare var acp: any;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n    constructor( private http: HttpClient ) {\r\n        ( mapboxgl as any ).accessToken = mapboxKey;\r\n    }\r\n\r\n    features(): Promise<{ features: GeoJSONSource, bbox: number[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ features: GeoJSONSource, bbox: number[] }>( acp + '/project/features', { params: params } )\r\n            .toPromise()\r\n    }\r\n\r\n    mbForwardGeocode(searchText: string): Promise<any> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        let url = \"https://api.mapbox.com/geocoding/v5/mapbox.places/\"+ searchText +\".json?proximity=-74.70850,40.78375&access_token=\"+ mapboxKey;\r\n\r\n        return this.http\r\n            .get( url, { params: params } )\r\n            .toPromise()\r\n    }\r\n\r\n}","<div class=\"row-holder\">\n    <div class=\"label-holder\"></div>\n    <div class=\"holder\">\n    <div class=\"modal-body\">\n      <div id=\"search-container\" style=\"position: absolute;z-index: 999;padding: 15px;width: 35%;\">\n        <input class=\"form-control search-input\" type=\"text\" placeholder=\"Search...\" [(ngModel)]=\"search\"\n                          [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"handleClick($event)\"\n                          [typeaheadOptionsLimit]=\"10\" [typeaheadItemTemplate]=\"bsItemTemplate\" typeaheadOptionField=\"label\"\n                          [ngModelOptions]=\"{standalone: true}\" (keydown.enter)=\"$event.preventDefault()\" />\n      </div>\n\t\t  <div id=\"map-attribute-div\" class=\"map-view-port\" style=\"height:300px;\"></div>\n    </div>\n  </div>\n</div>\n<div class=\"row-holder\">\n    <div class=\"label-holder\"><label>Longitude</label></div>\n    <div class=\"holder\">\n    <div class=\"modal-body text-left\">\n      <input name=\"longitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"coordinate.longitude\" (change)=\"refreshCoordinateFromInput()\" required />\n    </div>\n  </div>\n</div>\n<div class=\"row-holder\">\n    <div class=\"label-holder\"><label>Latitude</label></div>\n    <div class=\"holder\">\n    <div class=\"modal-body text-left\">\n      <input name=\"latitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"coordinate.latitude\" (change)=\"refreshCoordinateFromInput()\" required />\n    </div>\n  </div>\n</div>\n\n<ng-template #bsItemTemplate let-match=\"match\" let-query=\"query\">\n  <span *ngIf=\"match.item.filename == null\">\n    <i class=\"fa fa-folder-open\"></i>\n  </span>\n  <span *ngIf=\"match.item.filename != null\">\n    <i class=\"fa fa-file\"></i>\n  </span>\n  <span>\n    <span *ngFor=\"let site of match.item.hierarchy; index as i\">\n        {{site.label}} /\n        <!-- <span *ngIf=\"i < (match.item.hierarchy.length -1)\">/</span> -->\n    </span>\n  </span>\n  <b>{{ match.item.label}}</b>\n</ng-template>","import { Component, OnInit, OnDestroy, AfterViewInit, Input } from '@angular/core';\nimport { Map, LngLat, NavigationControl, ImageSource, MapboxOptions } from 'mapbox-gl';\nimport * as MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport * as StaticMode from '@mapbox/mapbox-gl-draw-static-mode';\nimport { Observable } from 'rxjs';\n\n\nimport { SiteEntity } from '../../model/management';\nimport { MapService } from '../../service/map.service';\n\n\n@Component( {\n    selector: 'map-attribute',\n    templateUrl: './map-attribute.component.html',\n    styles: [],\n} )\nexport class MapAttributeComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    /* \n     * mapbox-gl map\n     */\n    map: Map;\n\n    /* \n     * Draw control\n     */\n    draw: MapboxDraw;\n\n    /* \n     * List of base layers\n     */\n    baseLayers: any[] = [{\n        label: 'Outdoors',\n        id: 'outdoors-v11',\n        selected: true\n    }, {\n        label: 'Satellite',\n        id: 'satellite-v9'\n    }, {\n        label: 'Streets',\n        id: 'streets-v11'\n    }];\n\n    @Input() site: SiteEntity;\n\n    @Input() center: LngLat = new LngLat( -78.880453, 42.897852 );\n    @Input() zoom: number = 2;\n\n    coordinate: {\n        longitude: number,\n        latitude: number\n    } = { longitude: null, latitude: null };\n\n    /* \n     * Datasource to get search responses\n     */\n    dataSource: Observable<any>;\n\n    /* \n     * Model for text being searched\n     */\n    search: string = \"\";\n\n    constructor( private mapService: MapService ) { \n        this.dataSource = Observable.create(( observer: any ) => {\n\n            this.mapService.mbForwardGeocode( this.search ).then( response => {\n                const match = response.features;\n                let results = [];\n\n                // Add Mapbox results to any local results\n                match.forEach( obj => {\n                    let newObj = {\n                        id: obj.id,\n                        hierarchy: [],\n                        label: obj.place_name,\n                        center: obj.center,\n                        source: \"MAPBOX\"\n                    }\n\n                    results.push( newObj );\n                } );\n\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.refreshCoordinateFromMap();\n    }\n\n    ngAfterViewInit() {\n\n        // setTimeout(() => {\n        //     if ( this.tree ) {\n        //         this.tree.treeModel.expandAll();\n        //     }\n        // }, 1000 );\n\n        let config: MapboxOptions = {\n            container: 'map-attribute-div',\n            style: 'mapbox://styles/mapbox/outdoors-v11',\n            zoom: this.zoom,\n            center: this.center\n        };\n\n        if ( this.site.geometry != null ) {\n            //                    config.zoom = 10;\n            config.center = this.site.geometry.coordinates;\n        }\n\n\n        this.map = new Map( config );\n\n        this.map.on( 'load', () => {\n            this.initMap();\n        } );\n    }\n\n    ngOnDestroy(): void {\n        this.map.remove();\n    }\n\n    initMap(): void {\n\n        let modes = MapboxDraw.modes;\n        modes.static = StaticMode;\n\n        this.draw = new MapboxDraw( {\n            modes: modes,\n            displayControlsDefault: false,\n            controls: {\n                static: true\n            }\n        } );\n\n        this.map.addControl( this.draw );\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl( new NavigationControl() );\n\n        this.map.on( \"draw.update\", ( $event ) => { this.onDrawUpdate( $event ) } );\n        this.map.on( \"draw.create\", ( $event ) => { this.onDrawCreate( $event ) } );\n        this.map.on( \"draw.modechange\", ( $event ) => { this.onDrawUpdate( $event ) } );\n\n        this.map.on( 'style.load', () => {\n            this.addLayers();\n            //            this.refresh( false );\n        } );\n\n        this.addLayers();\n    }\n\n\n    addLayers(): void {\n\n        if ( this.site.geometry != null ) {\n            let feature = {\n                id: this.site.id,\n                type: 'Feature',\n                properties: {\n                    oid: this.site.id,\n                    name: this.site.name\n                },\n                geometry: this.site.geometry\n            };\n\n            this.draw.add( feature );\n            this.draw.changeMode( 'simple_select', { featureIds: [feature.id] } );\n        }\n        else {\n            this.draw.changeMode( 'draw_point', {} );\n        }\n\n        this.map.addSource( 'sites', {\n            type: 'geojson',\n            data: {\n                \"type\": \"FeatureCollection\",\n                \"features\": []\n            }\n        } );\n    }\n\n    onDrawUpdate( event: any ): void {\n        if ( event.action === 'move' && event.features != null && event.features.length > 0 ) {\n            this.updateGeometry( event.features[0] )\n        }\n    }\n\n    onDrawCreate( event: any ): void {\n        if ( event.features != null && event.features.length > 0 ) {\n\n            let feature = event.features[0];\n            feature.id = this.site.id;\n\n            this.updateGeometry( feature )\n        }\n    }\n\n    updateGeometry( feature: any ): void {\n        this.site.geometry = feature.geometry;\n\n        this.refreshCoordinateFromMap();\n    }\n\n    refreshCoordinateFromMap(): void {\n        if ( this.site != null && this.site.geometry != null ) {\n            this.coordinate.longitude = this.site.geometry.coordinates[0];\n            this.coordinate.latitude = this.site.geometry.coordinates[1];\n        }\n    }\n\n    refreshCoordinateFromInput(): void {\n        if ( this.coordinate.longitude != null && this.coordinate.latitude != null ) {\n            console.log( this.site.geometry );\n\n            if ( this.site.geometry == null ) {\n                this.site.geometry = { type: 'Point' };\n            }\n\n            this.site.geometry.coordinates = [this.coordinate.longitude, this.coordinate.latitude];\n\n            var ids = this.draw.set( {\n                type: 'FeatureCollection',\n                features: [{\n                    id: this.site.id,\n                    type: 'Feature',\n                    properties: {\n                        oid: this.site.id,\n                        name: this.site.name\n                    },\n                    geometry: this.site.geometry\n                }]\n            } );\n\n            this.draw.changeMode( 'simple_select', { featureIds: ids } );\n        }\n    }\n\n    //    zoomToFeature( node: TreeNode ): void {\n    //        if ( node.data.geometry != null ) {\n    //            this.map.flyTo( {\n    //                center: node.data.geometry.coordinates\n    //            } );\n    //        }\n    //    }\n\n    handleStyle( layer: any ): void {\n\n        this.baseLayers.forEach( baseLayer => {\n            baseLayer.selected = false;\n        } );\n\n        layer.selected = true;\n\n        this.map.setStyle( 'mapbox://styles/mapbox/' + layer.id );\n    }\n\n    handleClick( $event: any ): void {\n        let result = $event.item;\n\n        if ( result.center ) {\n            this.map.flyTo( {\n                center: result.center,\n                zoom: 9\n            } )\n        }\n    }\n    \n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\nimport { LngLatBounds } from 'mapbox-gl';\nimport { Observable } from 'rxjs';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize, debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';\n\nimport { AuthService } from '../../shared/service/auth.service';\nimport { EventService } from '../../shared/service/event.service';\nimport { HttpBackendClient } from '../../shared/service/http-backend-client.service';\n\nimport { SiteEntity, Message, Task, AttributeType, Condition, SiteObjectsResultSet } from '../model/management';\nimport { Sensor } from '../model/sensor';\nimport { Platform } from '../model/platform';\nimport { PageResult } from '../../shared/model/page';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ManagementService {\n\n    constructor(private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService, private authService: AuthService) { }\n\n    getChildren(id: string): Promise<SiteEntity[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set('id', id);\n\n\n        return this.http\n            .get<SiteEntity[]>(acp + '/project/get-children', { params: params })\n            .toPromise()\n    }\n\n    getObjects(id: string, key: string, pageNumber: number, pageSize: number): Promise<SiteObjectsResultSet> {\n        let params: HttpParams = new HttpParams();\n        params = params.set('id', id);\n\n        if (key != null) {\n            params = params.set('key', key);\n        }\n\n        if (pageNumber != null) {\n            params = params.set('pageNumber', pageNumber.toString());\n        }\n        if (pageSize != null) {\n            params = params.set('pageSize', pageSize.toString());\n        }\n\n        return this.http\n            .get<SiteObjectsResultSet>(acp + '/project/objects', { params: params })\n            .toPromise()\n    }\n\n    view(id: string): Promise<{ breadcrumbs: SiteEntity[], item: SiteEntity }> {\n        let params: HttpParams = new HttpParams();\n        params = params.set('id', id);\n\n        return this.http\n            .get<{ breadcrumbs: SiteEntity[], item: SiteEntity }>(acp + '/project/view', { params: params })\n            .toPromise()\n    }\n\n    getItems(id: string, key: string): Promise<SiteEntity[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set('id', id);\n\n        if (key != null) {\n            params = params.set('key', key);\n        }\n\n        return this.http\n            .get<SiteEntity[]>(acp + '/project/items', { params: params })\n            .toPromise()\n    }\n\n    roots(id: string, bounds: LngLatBounds): Promise<SiteEntity[]> {\n        let params: HttpParams = new HttpParams();\n\n        if (id != null) {\n            params = params.set('id', id);\n        }\n\n        if (bounds != null) {\n            params = params.set('bounds', JSON.stringify(bounds));\n        }\n\n        return this.http\n            .get<SiteEntity[]>(acp + '/project/roots', { params: params })\n            .toPromise()\n    }\n\n    edit(id: string): Promise<{ item: SiteEntity, attributes: AttributeType[] }> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<{ item: SiteEntity, attributes: AttributeType[] }>(acp + '/project/edit', JSON.stringify({ id: id }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise()\n    }\n\n    runOrtho(id: string, excludes: string[]): Promise<{ item: SiteEntity, attributes: AttributeType[] }> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        //   this.eventService.start();\n\n        return this.http\n            .post<{ item: SiteEntity, attributes: AttributeType[] }>(acp + '/project/run-ortho', JSON.stringify({ id: id, excludes: excludes }), { headers: headers })\n            .pipe(finalize(() => {\n                //\t\t\t\tthis.eventService.complete();\n            }))\n            .toPromise()\n    }\n\n    update(entity: SiteEntity): Promise<SiteEntity> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<SiteEntity>(acp + '/project/update', JSON.stringify({ entity: entity }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise()\n    }\n\n    newChild(parentId: string, type: string): Promise<{ item: SiteEntity, attributes: AttributeType[] }> {\n\n        let url = '/project/new-default-child';\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        let params = {} as any;\n\n        if (parentId != null) {\n            params.parentId = parentId;\n        }\n\n        if (type) {\n            params.type = type;\n\n            url = '/project/new-child';\n        }\n\n\n        this.eventService.start();\n\n\n        return this.http\n            .post<{ item: SiteEntity, attributes: AttributeType[] }>(acp + url, JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise()\n    }\n\n\n\n    applyWithParent(entity: SiteEntity, parentId: string): Promise<SiteEntity> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n\n        let params = { entity: entity } as any;\n\n        if (parentId != null) {\n            params.parentId = parentId;\n        }\n\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<SiteEntity>(acp + '/project/apply-with-parent', JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise()\n    }\n\n    getCurrentUser(): string {\n        //        let userName: string = \"admin\";\n        //\n        //        if ( this.cookieService.check( \"user\" ) ) {\n        //            let cookieData: string = this.cookieService.get( \"user\" )\n        //            let cookieDataJSON: any = JSON.parse( JSON.parse( cookieData ) );\n        //            userName = cookieDataJSON.userName;\n        //        }\n        //        else {\n        //            console.log( 'Check fails for the existence of the cookie' )\n        //\n        //            let cookieData: string = this.cookieService.get( \"user\" )\n        //\n        //            if ( cookieData != null ) {\n        //                let cookieDataJSON: any = JSON.parse( JSON.parse( cookieData ) );\n        //                userName = cookieDataJSON.userName;\n        //            }\n        //            else {\n        //                console.log( 'Unable to get cookie' );\n        //            }\n        //        }\n\n        return this.authService.getUserName();\n    }\n\n    remove(id: string): Promise<void> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(acp + '/project/remove', JSON.stringify({ id: id }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise()\n    }\n\n    removeObject(componentId: string, key: string): Promise<void> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(acp + '/project/removeObject', JSON.stringify({ id: componentId, key: key }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise()\n    }\n\n    removeTask(uploadId: string): Promise<void> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(acp + '/project/remove-task', JSON.stringify({ uploadId: uploadId }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise()\n    }\n\n    upload(id: string, folder: string, file: File): Promise<Document> {\n\n        this.eventService.start();\n\n        const formData = new FormData()\n        formData.append('file', file);\n        formData.append('id', id);\n        formData.append('folder', folder);\n\n        return this.http.post<Document>(acp + '/project/upload', formData)\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    tasks(statuses: string[], pageSize: number, pageNumber: number): Promise<PageResult<Task>> {\n\n        // status options: PROCESSING, COMPLETE, ERROR, QUEUED\n        let params: HttpParams = new HttpParams();\n        params = params.set('statuses', JSON.stringify(statuses));\n        params = params.set('pageSize', pageSize.toString());\n        params = params.set('pageNumber', pageNumber.toString());\n\n        return this.http\n            .get<PageResult<Task>>(acp + '/project/tasks', { params: params })\n            .toPromise()\n    }\n\n    task(id: string): Promise<{ messages: Message[], task: Task }> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set('id', id);\n\n        return this.http\n            .get<{ messages: Message[], task: Task }>(acp + '/project/task', { params: params })\n            .toPromise();\n    }\n\n    getMissingMetadata(pageSize: number, pageNumber: number): Promise<PageResult<Message>> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set('pageSize', pageSize.toString());\n        params = params.set('pageNumber', pageNumber.toString());\n\n        return this.http.get<PageResult<Message>>(acp + '/project/missing-metadata', { params: params })\n            .toPromise();\n    }\n\n    download(id: string, key: string, useSpinner: boolean): Observable<Blob> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set('id', id);\n        params = params.set('key', key);\n\n        if (useSpinner) {\n            this.eventService.start();\n        }\n\n        return this.noErrorHttpClient.get<Blob>(acp + '/project/download', { params: params, responseType: 'blob' as 'json' })\n            .pipe(finalize(() => {\n                if (useSpinner) {\n                    this.eventService.complete();\n                }\n            }))\n    }\n\n    downloadAll(id: string, key: string, useSpinner: boolean): Observable<Blob> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set('id', id);\n        params = params.set('key', key);\n\n        if (useSpinner) {\n            this.eventService.start();\n        }\n\n        return this.noErrorHttpClient.get<Blob>(acp + '/project/download-all', { params: params, responseType: 'blob' as 'json' })\n            .pipe(finalize(() => {\n                if (useSpinner) {\n                    this.eventService.complete();\n                }\n            }))\n    }\n\n    search(terms: Observable<string>) {\n        return terms\n            .pipe(debounceTime(400))\n            .pipe(distinctUntilChanged())\n            .pipe(switchMap(term => this.searchEntries(term)));\n    }\n\n    searchEntries(term: string): Observable<string> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set('term', term);\n\n        return this.http\n            .get<string>(acp + '/project/search', { params: params })\n    }\n\n    searchEntites(term: string): Promise<any> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set('term', term);\n\n        return this.http\n            .get(acp + '/project/search', { params: params })\n            .toPromise()\n    }\n\n    submitCollectionMetadata(metaObj: string): Promise<void> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<void>(acp + '/project/submit-metadata', JSON.stringify({ json: metaObj }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise()\n    }\n\n    getMetadataOptions(id: string): Promise<{ sensors: Sensor[], platforms: Platform[], name: string, email: string, platform: string, sensor: string }> {\n\n        let params: HttpParams = new HttpParams();\n\n        if (id != null) {\n            params = params.set('id', id);\n        }\n\n        return this.noErrorHttpClient\n            .get<{ sensors: Sensor[], platforms: Platform[], name: string, email: string, platform: string, sensor: string }>(acp + '/project/metadata-options', { params: params })\n            .toPromise()\n    }\n\n    evaluate(condition: Condition, entity: SiteEntity): boolean {\n        if (condition != null && condition.type === 'eq') {\n            return (entity[condition.name] === condition.value);\n        }\n        else if (condition != null && condition.type === 'admin') {\n            return this.authService.isAdmin();\n        }\n\n        return false;\n    }\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"error-container\">\n        <div class=\"label-holder\">\n            <strong>Error</strong>\n        </div>\n        <div class=\"holder\">\n            <div>\n                <p class=\"error-message\">{{message}}</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"image-preview-container\">\n        <i class=\"fa fa-times btn btn-close\" style=\"min-width:0;\" (click)=\"bsModalRef.hide()\"></i>\n        <div class=\"image-container\">\n            <p *ngIf=\"loading\" style=\"text-align: left;\">Loading image...</p>\n            <img *ngIf=\"!loading\" class=\"image-preview img-responsive center-block\" [src]=\"imageToShow | safeHtml\" alt=\"Image\">\n        </div>\n    </div>\n\n    <!-- <form #ngForm=\"ngForm\">\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Cancel</button>\n    </div>\n  </form> -->\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef, Input } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ManagementService } from '../../service/management.service';\n\n\n@Component( {\n    selector: 'image-preview-modal',\n    templateUrl: './image-preview-modal.component.html',\n    styleUrls: []\n} )\nexport class ImagePreviewModalComponent {\n\n    message: string = null;\n    open: boolean = true;\n    loading: boolean = true;\n    imageToShow: any;\n    component: string;\n    key: string;\n\n    constructor( private service: ManagementService, public bsModalRef: BsModalRef ) { }\n\n    init( component: string, key: string ) {\n        this.component = component;\n        this.key = key;\n\n        this.getImage( this.component, this.key );\n    }\n\n    createImageFromBlob( image: Blob ) {\n        let reader = new FileReader();\n        reader.addEventListener( \"load\", () => {\n            this.imageToShow = reader.result;\n        }, false );\n\n        if ( image ) {\n            reader.readAsDataURL( image );\n        }\n    }\n\n    getImage( component: string, key: string ): void {\n\n        this.loading = true;\n\n        this.service.download( component, key, false ).subscribe( blob => {\n            this.createImageFromBlob( blob );\n            this.loading = false;\n        }, error => {\n            this.loading = false;\n\n            this.error( error );\n        } );\n    }\n\n    close(): void {\n        this.open = false;\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n\n            console.log( this.message );\n        }\n    }\n\n}\n","import { PageResult } from '../../shared/model/page';\n\nexport class Condition {\n    name: string;\n    value: string;\n    type: string;\n}\n\nexport class AttributeType {\n    name: string;\n    label: string;\n    type: string;\n    required: boolean;\n    immutable: boolean;\n    readonly: boolean;\n    condition: Condition;\n    options?: { value: string, label: string }[];\n}\n\nexport class SiteObjectsResultSet {\n    count: number;\n    pageNumber: number;\n    pageSize: number;\n    results: SiteEntity[];\n    folder: string;\n}\n\nexport class SiteEntity {\n    id: string;\n    name: string;\n    folderName: string;\n    type: string;\n    component: string;\n    key: string;\n    metadataUploaded: boolean;\n    geometry?: any;\n    numberOfChildren: number;\n    lastModified?: string;\n    ownerName?: string;\n    ownerPhone?: string;\n    ownerEmail?: string;\n    privilegeType?: string;\n    children?: SiteEntity[];\n    active?: boolean;\n    excludeFromProcess?: boolean;\n}\n\nexport class CollectionHierarchy {\n    site: string;\n    project: string;\n    mission: string;\n    collection: string;\n}\n\nexport class ImageHierarchy {\n    site: string;\n    project: string;\n    image: string;\n}\n\nexport class Selection {\n    type: string;\n    isNew: boolean;\n    value: string;\n    label: string;\n    platform?: string;\n    sensor?: string;\n};\n\n\nexport class UploadForm {\n    create: boolean;\n    name: string;\n    outFileName: string;\n    uasComponentOid: string;\n    site: string;\n    project: string;\n    mission: string;\n    collection: any;\n    imagery: any;\n    uploadTarget: string;\n    selections: string;\n}\n\nexport class Action {\n    createDate: string;\n    lastUpdatedDate: string;\n    type: string;\n    description: string;\n}\n\nexport class Task {\n    oid: string;\n    label: string;\n    createDate: string;\n    lastUpdateDate: string;\n    lastUpdatedDate: string;\n    status: string;\n    message: string;\n    actions: Action[];\n    uploadId: string;\n    odmOutput: string;\n    collection: string;\n    collectionLabel: string;\n    type: string;\n    visible?: boolean;\n    showError?:boolean;\n}\n\nexport class TaskGroup {\n    label: string;\n    collectionId: string;\n    visible?: boolean;\n    groups: TaskGroupType[];\n    status: string;\n    lastUpdatedDate: string;\n}\n\nexport class TaskGroupType {\n    tasks: Task[];\n    status: string;\n    type: string;\n}\n\nexport class Message {\n    collectionId: string;\n    collectionName: string;\n    ancestors: string[];\n    message: string;\n    imageWidth: string;\n    imageHeight: string;\n}\n\nexport class ProductDocument {\n    id: string;\n    name: string;\n    key: string;\n}\n\nexport class Product {\n    id: string;\n    name: string;\n    entities: SiteEntity[];\n    published: boolean;\n    imageKey?: string;\n    mapKey?: string;\n    workspace?: string;\n    boundingBox?: number[];\n    orthoMapped?: boolean;\n}\n\nexport class ProductDetail extends Product {\n    pilotName: string;\n    dateTime: string;\n    sensor: string;\n    page?: PageResult<ProductDocument>;\n}\n","export class Sensor {\n    newInstance: boolean;\n    oid: string;\n    name: string;\n    displayLabel: string;\n    sensorType: string;\n    model: string;\n    waveLength: string[];\n}\n\nexport const WAVELENGTHS: string[] = [\"Natural Color RGB\", \"Thermal\", \"Red Edge\", \"Near Infra Red\", \"LiDAR\", \"Other\"];\n","\nimport { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[OnlyNumber]' \n})\nexport class OnlyNumber {\n\n  constructor(private el: ElementRef) { }\n\n  @Input() OnlyNumber: boolean;\n \n  @HostListener('keydown', ['$event']) onKeyDown(event:any) {\n    let e = <KeyboardEvent> event;\n    if (this.OnlyNumber) {\n      if ([46, 8, 9, 27, 13, 110, 190].indexOf(e.keyCode) !== -1 ||\n        // Allow: Ctrl+A\n        (e.keyCode == 65 && e.ctrlKey === true) ||\n        // Allow: Ctrl+C\n        (e.keyCode == 67 && e.ctrlKey === true) ||\n        // Allow: Ctrl+X\n        (e.keyCode == 88 && e.ctrlKey === true) ||\n        // Allow: home, end, left, right\n        (e.keyCode >= 35 && e.keyCode <= 39)) {\n          // let it happen, don't do anything\n          return;\n        }\n        // Ensure that it is a number and stop the keypress\n        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n            e.preventDefault();\n        }\n      }\n  }\n}\n\n\n","<div class=\"modal-header text-center\">\n    <h2>Collection Metadata</h2>\n</div>\n\n<div class=\"row\">\n    <div class=\"col-md-12\">\n        <form #ngForm=\"ngForm\" class=\"modal-form\">\n            <div class=\"modal-body\">\n\n                <div *ngIf=\"message != null\" class=\"error-container\">\n                    <div class=\"label-holder\">\n                        <strong>Error</strong>\n                    </div>\n                    <div class=\"holder\">\n                        <div>\n                            <p class=\"error-message\">{{message}}</p>\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class=\"panel panel-default\">\n                    <div class=\"panel-heading\">Point Of Contact</div>\n                    <div class=\"panel-body\">\n                        <div class=\"form-group\">\n                            <label for=\"pointOfContact.name\">Name</label>\n                            <input type=\"text\" name=\"pointOfContact.name\" [(ngModel)]=\"metaObject.pointOfContact.name\"\n                                [maxlength]=\"100\" [required]=\"false\" [disabled]=\"false\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"pointOfContact.email\">Email</label>\n                            <input type=\"text\" name=\"pointOfContact.email\" [(ngModel)]=\"metaObject.pointOfContact.email\"\n                                [maxlength]=\"255\" [required]=\"false\" [disabled]=\"false\" />\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"panel panel-default\">\n                    <div class=\"panel-heading\">Platform</div>\n                    <div class=\"panel-body\">\n                        <div class=\"form-group\">\n                            <label for=\"platform.name\">Name</label>\n                            <select [(ngModel)]=\"metaObject.platform.name\" name=\"platform.name\" type=\"input\" (change)=\"handlePlatformSelect()\" required>                               \n                                <option></option>\n                                <option *ngFor=\"let platform of platforms\" [value]=\"platform.oid\">{{platform.displayLabel}}</option>\n                            </select>\n                        </div>\n                        <div class=\"form-group\" *ngIf=\"metaObject.platform.name === otherPlatformId\">\n                            <label for=\"platform.class\">Other name</label>\n                            <input type=\"text\" name=\"platform.otherName\" [(ngModel)]=\"metaObject.platform.otherName\"\n                                maxlength=\"20\" required />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"platform.class\">Class</label>\n                            <input type=\"text\" name=\"platform.class\" [(ngModel)]=\"metaObject.platform.class\"\n                                [maxlength]=\"20\" [disabled]=\"false\" required />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"platform.type\">Type</label>\n                            <select [(ngModel)]=\"metaObject.platform.type\" name=\"platform.type\" type=\"input\" class=\"\"\n                                [disabled]=\"metaObject.platform.name !== otherPlatformId\" required>\n                                <option></option>\n                                <option>Fixed Wing</option>\n                                <option>Hybrid</option>\n                            </select>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"platform.serialNumber\">Serial Number</label>\n                            <input type=\"number\" name=\"platform.serialNumber\"\n                                [(ngModel)]=\"metaObject.platform.serialNumber\" OnlyNumber=\"true\" [maxlength]=\"50\"\n                                [required]=\"true\" [disabled]=\"false\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"platform.faaIdNumber\">FAA Id Number</label>\n                            <input type=\"number\" name=\"platform.faaIdNumber\" [(ngModel)]=\"metaObject.platform.faaIdNumber\"\n                                OnlyNumber=\"true\" [maxlength]=\"30\" [required]=\"true\" [disabled]=\"false\" />\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class=\"panel panel-default\">\n                    <div class=\"panel-heading\">Sensor</div>\n                    <div class=\"panel-body\">\n                        <div class=\"form-group\">\n                            <label for=\"sensor.name\">Name</label>\n                            <select [(ngModel)]=\"metaObject.sensor.name\" name=\"sensor.name\" type=\"input\" (change)=\"handleSensorSelect()\" required>                               \n                                <option></option>\n                                <option *ngFor=\"let sensor of sensors\" [value]=\"sensor.oid\">{{sensor.displayLabel}}</option>\n                            </select>\n                        </div>                    \n                        <div class=\"form-group\" *ngIf=\"metaObject.sensor.name === otherSensorId\">\n                            <label for=\"sensor.class\">Other name</label>\n                            <input type=\"text\" name=\"sensor.otherName\" [(ngModel)]=\"metaObject.sensor.otherName\"\n                                maxlength=\"20\" required />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.type\">Type</label>\n                            <input type=\"text\" name=\"sensor.type\" [(ngModel)]=\"metaObject.sensor.type\" [maxlength]=\"20\"\n                                [required]=\"true\" [disabled]=\"metaObject.sensor.name !== otherSensorId\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.model\">Model</label>\n                            <input type=\"text\" name=\"sensor.model\" [(ngModel)]=\"metaObject.sensor.model\"\n                                [maxlength]=\"20\" [required]=\"true\" [disabled]=\"metaObject.sensor.name !== otherSensorId\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.wavelength\">Wave Length</label>\n                            <div *ngFor=\"let wavelength of wavelengths\">\n                              <boolean-field [value]=\"metaObject.sensor.wavelength && (-1 !== metaObject.sensor.wavelength.indexOf(wavelength))\" [label]=\"wavelength\" (valueChange)=\"updateSelectedWaveLength(wavelength, $event)\" [disabled]=\"metaObject.sensor.name !== otherSensorId\"></boolean-field>                              \n                            </div>                                                        \n                        </div>\n                        <!-- <div class=\"form-group\">\n                            <label for=\"sensor.imageWidth\">Image Width</label>\n                            <input type=\"text\" name=\"sensor.imageWidth\" [(ngModel)]=\"imageWidth\"\n                                [required]=\"true\" [disabled]=\"true\" OnlyNumber=\"true\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.imageHeight\">Image Height</label>\n                            <input type=\"text\" name=\"sensor.imageHeight\" [(ngModel)]=\"imageHeight\"\n                                [required]=\"true\" [disabled]=\"true\" OnlyNumber=\"true\" />\n                        </div> -->\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorWidth\">Sensor Width</label>\n                            <input type=\"number\" name=\"sensor.sensorWidth\" [(ngModel)]=\"metaObject.sensor.sensorWidth\"\n                                [required]=\"true\" [disabled]=\"false\" OnlyNumber=\"true\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorHeight\">Sensor Height</label>\n                            <input type=\"number\" name=\"sensor.sensorHeight\" [(ngModel)]=\"metaObject.sensor.sensorHeight\"\n                                [required]=\"true\" [disabled]=\"false\" OnlyNumber=\"true\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.pixelSizeWidth\">Pixel Size Width</label>\n                            <input type=\"number\" name=\"sensor.pixelSizeWidth\"\n                                [(ngModel)]=\"metaObject.sensor.pixelSizeWidth\" [required]=\"true\" [disabled]=\"false\"\n                                OnlyNumber=\"true\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.pixelSizeHeight\">Pixel Size Height</label>\n                            <input type=\"number\" name=\"sensor.pixelSizeHeight\"\n                                [(ngModel)]=\"metaObject.sensor.pixelSizeHeight\" [required]=\"true\" [disabled]=\"false\"\n                                OnlyNumber=\"true\" />\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"button-holder\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Cancel</button>\n                    <button type=\"button\" [disabled]=\"!ngForm.valid\" class=\"btn btn-primary\"\n                        (click)=\"handleSubmit()\">\n                        <i class=\"icon-upload icon-white\"></i> Submit\n                    </button>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { ManagementService } from '../../service/management.service';\n\nimport { Sensor, WAVELENGTHS } from '../../model/sensor';\nimport { Platform } from '../../model/platform';\n\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'metadata-modal',\n\ttemplateUrl: './metadata-modal.component.html',\n\tstyleUrls: []\n})\nexport class MetadataModalComponent {\n    /*\n     * collectionId for the metadata\n     */\n\tcollectionId: string;\n\n\tmessage: string = null;\n\n\tdisabled: boolean = false;\n\n\t// imageHeight: string;\n\n\t// imageWidth: string;\n\n\tmetaObject: any = {\n\t\tcollectionId: \"\",\n\t\t// agency:{\n\t\t//     name:\"Department of Interior\",\n\t\t//     shortName: \"\",\n\t\t//     fieldCenter: \"\"\n\t\t// },\n\t\tpointOfContact: {\n\t\t\tname: \"\",\n\t\t\temail: \"\"\n\t\t},\n\t\t// project: {\n\t\t//     name:\"\",\n\t\t//     shortName:\"\",\n\t\t//     description:\"\"\n\t\t// },\n\t\t// mission: {\n\t\t//     name:\"\",\n\t\t//     description:\"\"\n\t\t// },\n\t\t// collect: {\n\t\t//     name:\"\",\n\t\t//     description:\"\"\n\t\t// },\n\t\tplatform: {\n\t\t\tname: \"\",\n\t\t\totherName: \"\",\n\t\t\tclass: \"\",\n\t\t\ttype: \"\",\n\t\t\tserialNumber: \"\",\n\t\t\tfaaIdNumber: \"\"\n\t\t},\n\t\tsensor: {\n\t\t\tname: \"\",\n\t\t\totherName: \"\",\n\t\t\ttype: \"\",\n\t\t\tmodel: \"\",\n\t\t\twavelength: [],\n\t\t\t// imageWidth:\"\",\n\t\t\t// imageHeight:\"\",\n\t\t\tsensorWidth: \"\",\n\t\t\tsensorHeight: \"\",\n\t\t\tpixelSizeWidth: \"\",\n\t\t\tpixelSizeHeight: \"\"\n\t\t},\n\t\tupload: {\n\t\t\tdataType: \"raw\"\n\t\t}\n\t};\n\n    /*\n     * Observable subject called when metadata upload is successful\n     */\n\tpublic onMetadataChange: Subject<string>;\n\n\tsensors: Sensor[] = [];\n\tplatforms: Platform[] = [];\n\twavelengths: string[] = WAVELENGTHS;\n\n\totherSensorId: string = \"\";\n\totherPlatformId: string = \"\";\n\n\tconstructor(public bsModalRef: BsModalRef, private service: ManagementService) { }\n\n\tinit(collectionId: string): void {\n\t\tthis.collectionId = collectionId;\n\n\t\tthis.onMetadataChange = new Subject();\n\n\t\tthis.service.getMetadataOptions(this.collectionId).then((options) => {\n\t\t\tthis.sensors = options.sensors;\n\t\t\tthis.platforms = options.platforms;\n\n\t\t\tthis.metaObject.pointOfContact.name = options.name;\n\t\t\tthis.metaObject.pointOfContact.email = options.email;\n\t\t\tthis.metaObject.sensor.name = options.sensor;\n\t\t\tthis.metaObject.platform.name = options.platform;\n\n\t\t\tthis.sensors.forEach(sensor => {\n\t\t\t\tif (sensor.name === 'OTHER') {\n\t\t\t\t\tthis.otherSensorId = sensor.oid;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.platforms.forEach(platform => {\n\t\t\t\tif (platform.name === 'OTHER') {\n\t\t\t\t\tthis.otherPlatformId = platform.oid;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.handleSensorSelect();\n\t\t\tthis.handlePlatformSelect();\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\thandleSensorSelect(): void {\n\t\tif (this.metaObject.sensor.name != null && this.metaObject.sensor.name !== \"\" && this.metaObject.sensor.name !== this.otherSensorId) {\n\t\t\tconst sensor = this.getSelectedSensor();\n\n\t\t\tthis.metaObject.sensor.type = sensor.sensorType;\n\t\t\tthis.metaObject.sensor.model = sensor.model;\n\t\t\tthis.metaObject.sensor.wavelength = [...sensor.waveLength];\n\n\t\t\tconsole.log(this.metaObject.sensor);\n\t\t}\n\t}\n\n\thandlePlatformSelect(): void {\n\t\tif (this.metaObject.platform.name != null && this.metaObject.platform.name !== \"\" && this.metaObject.platform.name !== this.otherPlatformId) {\n\t\t\tconst platform = this.getSelectedPlatform();\n\n\t\t\tthis.metaObject.platform.type = platform.platformType;\n\t\t}\n\t}\n\n\tgetSelectedSensor(): Sensor {\n\t\tvar indexOf = this.sensors.findIndex(i => i.oid === this.metaObject.sensor.name);\n\n\t\treturn this.sensors[indexOf];\n\t}\n\n\tgetSelectedPlatform(): Platform {\n\t\tvar indexOf = this.platforms.findIndex(i => i.oid === this.metaObject.platform.name);\n\n\t\treturn this.platforms[indexOf];\n\t}\n\n\tupdateSelectedWaveLength(wavelength: string, checked: boolean): void {\n\n\t\tconst indexOf = this.metaObject.sensor.wavelength.indexOf(wavelength)\n\n\t\tif (checked) {\n\n\t\t\tif (indexOf < 0) {\n\t\t\t\tthis.metaObject.sensor.wavelength.push(wavelength);\n\n\t\t\t}\n\t\t} else {\n\t\t\tif (indexOf > -1) {\n\t\t\t\tthis.metaObject.sensor.wavelength.splice(indexOf, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\thandleSubmit(): void {\n\n\t\tthis.metaObject.collectionId = this.collectionId;\n\t\t// this.metaObject.imageWidth = this.imageWidth;\n\t\t// this.metaObject.imageHeight = this.imageHeight;\n\n\t\tthis.service.submitCollectionMetadata(this.metaObject).then(() => {\n\t\t\tthis.bsModalRef.hide();\n\t\t\tthis.onMetadataChange.next(this.collectionId);\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n}\n","export class Metadata {\n    root: boolean;\n    leaf: boolean;\n    drillable: boolean;\n    expandable: boolean;\n    uploadable: boolean;\n    processable: boolean;\n    childLabel: string;\n\n    constructor( root: boolean, leaf: boolean, drillable: boolean, expandable: boolean, uploadable: boolean, processable: boolean, childLabel: string ) {\n        this.root = root;\n        this.leaf = leaf;\n        this.drillable = drillable;\n        this.expandable = expandable;\n        this.uploadable = uploadable;\n        this.processable = processable;\n        this.childLabel = childLabel;\n    }\n}","import { Injectable } from '@angular/core';\n\nimport { SiteEntity } from '../model/management';\nimport { Metadata } from '../model/metadata';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class MetadataService {\n\n    private cache: any = {};\n\n    constructor() {\n        // ( root, leaf, drillable, expandable, uploadable, processable )\n        this.cache['Site'] = new Metadata( true, false, true, false, false, false, 'Projects' );\n        this.cache['Project'] = new Metadata( false, false, true, false, false, false, 'Missions' );\n        this.cache['Mission'] = new Metadata( false, false, false, true, false, false, 'Collections' );\n        this.cache['Collection'] = new Metadata( false, true, false, false, false, true, 'Images' );\n        this.cache['folder'] = new Metadata( false, true, false, false, true, false, '' );\n\n        // Metadata for specific folder types\n        this.cache['raw'] = new Metadata( false, false, false, false, true, false, '' );\n        this.cache['accessible'] = new Metadata( false, false, false, false, true, false, '' );\n    }\n\n    getMetadata( entity: SiteEntity ): Metadata {\n        return this.cache[entity.type];\n    }\n\n    getTypeContainsFolders( entity: SiteEntity ): boolean {\n        return ( entity.type === 'Collection' );\n    }\n\n    isUploadable( type: string ): boolean {\n        if ( this.cache[type] != null ) {\n            return this.cache[type].uploadable;\n        }\n\n        return false;\n    }\n\n    hasExtraField( type: string, fieldName: string ): boolean {\n        if ( type === 'Collection' ) {\n            return ( fieldName === 'platform' || fieldName === 'sensor' );\n        }\n\n        return false;\n    }\n\n    isProcessable( type: string ): boolean {\n        if ( this.cache[type] != null ) {\n            return this.cache[type].processable;\n        }\n\n        return false;\n    }\n\n    getUploadTarget( type: string ): string {\n        if ( type === 'Imagery' ) {\n            return 'imagery';\n        }\n\n        return 'raw';\n    }\n\n    getHierarchy(): string[] {\n\n        return ['Site', 'Project', 'Mission', 'Collection'];\n    }\n}","<div class=\"modal-body\" [@fadeInOnEnter]>\n  <div>\n    <div *ngIf=\"message != null\" class=\"error-container\">\n      <div class=\"label-holder\">\n        <strong>Error</strong>\n      </div>\n      <div class=\"holder\">\n        <div>\n          <p class=\"error-message\">{{message}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"entity != null\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2>{{entity.name}} <span *ngIf=\"!entity.metadataUploaded\" class=\"dot pending\" style=\"margin-left: 0;margin-bottom: 5px;\"></span></h2>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <ul class=\"breadcrumb\" style=\"margin-bottom: 10px;\">\n            <li *ngFor=\"let prev of previous\">\n              <span> {{prev.name}}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-sm-12\" style=\"padding: 0;\">\n          <tabset class=\"nav-full-width\">\n            <tab *ngFor=\"let folder of folders\" [heading]=\"folder.name\" (selectTab)=\"onSelect(folder)\">\n\n              <div [ngSwitch]=\"folder.name\">\n                <div class=\"image-list-container\" *ngSwitchDefault>\n                  <ul class=\"list-group row\">\n                    <li *ngFor=\"let item of page.results\" class=\"list-group-item col-xs-3\">\n                      <a class=\"thumbnail non-clickable\">\n                        <img [src]=\"context + '/net/geoprism/images/thumbnail-default.png'\" alt=\"Image\">\n                        <div class=\"caption\">\n                          <h4 class=\"media-heading\">{{item.name}}</h4>\n                        </div>\n                      </a>\n                    </li>\n                  </ul>\n                </div>\n\n                <div class=\"image-list-container\" *ngSwitchCase=\"'raw'\">\n                  <ul class=\"list-group row\">\n                    <li\n                      *ngFor=\"let item of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\"\n                      class=\"list-group-item col-xs-3\">\n                      <a class=\"thumbnail\"\n                        [ngClass]=\"{'card-disabled' : item.excludeFromProcess, 'non-clickable' : !enableSelectableImages}\">\n                        <input type=\"checkbox\" class=\"x-box\" *ngIf=\"enableSelectableImages\"\n                          [checked]=\"item.excludeFromProcess\" (change)=\"toggleExcludeImage($event, item)\" />\n                        <img (click)=\"enableSelectableImages ? toggleExcludeImage($event, item) : false\"\n                          [ngClass]=\"{'img-disabled' : item.excludeFromProcess}\"\n                          [src]=\"thumbnails[item.key] != null ? (thumbnails[item.key] | safeHtml) : (context + '/net/geoprism/images/thumbnail-default.png')\"\n                          alt=\"Image\">\n                        <div class=\"caption\">\n                          <h4 class=\"media-heading\">\n                            {{item.name}}\n                          </h4>\n                        </div>\n                      </a>\n                    </li>\n                  </ul>\n                </div>\n\n                <div *ngSwitchCase=\"'video'\">\n                  <div *ngIf=\"video.src !== null\">\n                    <div class=\"row\">\n                      <div class=\"col-md-1\"></div>\n                      <div class=\"col-md-10\">\n                        <h3>\n                          {{video.name}}\n                          <a (click)=\"handleDownloadVideo(video.src)\"><i class=\"fas fa-download\"></i></a>\n                          <a class=\"pull-right\" (click)=\"closeVideo()\"><i class=\"fa fa-times\"\n                              aria-hidden=\"true\"></i></a>\n                        </h3>\n                      </div>\n                      <div class=\"col-md-1\"></div>\n                    </div>\n                    <div class=\"row\">\n                      <div class=\"col-md-1\"></div>\n                      <div class=\"col-md-10\">\n                        <video style=\"width:100%\" controls>\n                          <source [src]=\"video.src\" type=\"video/mp4\" />\n                          Browser not supported\n                        </video>\n                      </div>\n                      <div class=\"col-md-1\"></div>\n                    </div>\n                  </div>\n\n                  <div class=\"image-list-container\">\n                    <ul class=\"list-group row\">\n                      <li *ngFor=\"let item of page.results\" class=\"list-group-item col-xs-3\">\n                        <a class=\"thumbnail\" (click)=\"showVideo(item)\">\n                          <img [src]=\"context + '/net/geoprism/images/thumbnail-video.png'\" alt=\"Video\">\n                          <div class=\"caption\">\n                            <h4 class=\"media-heading\">{{item.name}}</h4>\n                          </div>\n                        </a>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n\n              </div>\n            </tab>\n          </tabset>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-sm-12\">\n          <pagination-controls *ngIf=\"folder.name === 'raw'\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n          <div *ngIf=\"processRunning\" style=\"text-align:right;padding-right:20px;\">\n            <p>{{statusMessage}}</p>\n            <p>See this process on\n              <a routerlink=\"/site/tasks\" routerlinkactive=\"active\" href=\"#/site/tasks\">your tasks page</a>\n            </p>\n          </div>\n\n          <div class=\"btn-holder\" style=\"margin: 20px 20px 10px 20px;\">\n            <div class=\"row\">\n              <div class=\"col-sm-2\">\n                <button *ngIf=\"!entity.metadataUploaded\" type=\"button\" class=\"btn btn-warning\"\n                  [disabled]=\"processRunning\" (click)=\"handleSetMetadata()\">\n                  <i class=\"fa fa-plus\" style=\"color:white\"></i>\n                  Add metadata\n                </button>\n              </div>\n              <div class=\"col-md-10\" style=\"text-align: right;\">\n                <button type=\"button\" class=\"btn btn-default\" [disabled]=\"processRunning\"\n                  (click)=\"bsModalRef.hide()\">Close</button>\n                <button *ngIf=\"processable\" type=\"button\" class=\"btn btn-secondary\" [disabled]=\"processRunning\"\n                  (click)=\"handleDownload()\" style=\"margin-left: 5px;\">\n                  Download all\n                </button>\n                <button *ngIf=\"processable && enableSelectableImages\" [disabled]=\"processRunning\"\n                  (click)=\"handleRunOrtho()\" class=\"btn btn-primary\" style=\"margin-left: 5px;\">\n                  Reprocess imagery\n                  <i class=\"fa fa-sync-alt\" [ngClass]=\"{'fa-spin' : processRunning}\" aria-hidden=\"true\"\n                    style=\"color:white;vertical-align: middle;margin-left: 10px;\"></i>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { BasicConfirmModalComponent } from '../../../shared/component/modal/basic-confirm-modal.component';\n\nimport { SiteEntity, SiteObjectsResultSet } from '../../model/management';\nimport { ManagementService } from '../../service/management.service';\nimport { MetadataService } from '../../service/metadata.service';\nimport { MetadataModalComponent } from './metadata-modal.component';\n\nimport {\n\tfadeInOnEnterAnimation,\n\tfadeOutOnLeaveAnimation,\n\tslideInLeftOnEnterAnimation,\n\tslideInRightOnEnterAnimation,\n} from 'angular-animations';\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'leaf-modal',\n\ttemplateUrl: './leaf-modal.component.html',\n\tstyles: [],\n\tproviders: [BasicConfirmModalComponent],\n\tanimations: [\n\t\tfadeInOnEnterAnimation(),\n\t\tfadeOutOnLeaveAnimation(),\n\t\tslideInLeftOnEnterAnimation(),\n\t\tslideInRightOnEnterAnimation(),\n\t]\n})\nexport class LeafModalComponent implements OnInit {\n\tentity: SiteEntity;\n\n\t@Input()\n\tset initData(ins: any) {\n\t\tthis.init(ins.entity, ins.folders, ins.previous)\n\t}\n\n    /* \n     * Breadcrumb of previous sites clicked on\n     */\n\tprevious = [] as SiteEntity[];\n\tfolders: SiteEntity[] = [];\n\tthumbnails: any = {};\n\tprocessRunning: boolean = false;\n\tmessage: string;\n\tstatusMessage: string;\n\tprocessable: boolean = false;\n\texcludes: string[] = [];\n\tenableSelectableImages: boolean = false;\n\tfolder: SiteEntity;\n\n\tconstPageSize: number = 50;\n\n\tpage: SiteObjectsResultSet = new SiteObjectsResultSet();\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate confirmModalRef: BsModalRef;\n\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n\tpublic onNodeChange: Subject<SiteEntity>;\n\n\tvideo: { src: string, name: string } = { src: null, name: null };\n\tcontext: string;\n\n\tconstructor(private service: ManagementService, private metadataService: MetadataService, private modalService: BsModalService, public bsModalRef: BsModalRef) {\n\t\tthis.context = acp;\n\t}\n\n\tngOnInit(): void {\n\t\tthis.onNodeChange = new Subject();\n\n\t\tthis.excludes = []; // clear excludes if toggling between tabs\n\n\t\tthis.page.count = 0;\n\t\tthis.page.pageNumber = 1;\n\t\tthis.page.pageSize = this.constPageSize;\n\t\tthis.page.results = [];\n\t}\n\n\tinit(entity: SiteEntity, folders: SiteEntity[], previous: SiteEntity[]): void {\n\t\tthis.entity = entity;\n\t\tthis.folders = folders;\n\t\tthis.previous = [...previous];\n\n\t\tif (this.previous.length > 0 && this.previous[this.previous.length - 1].id !== this.entity.id) {\n\t\t\tthis.previous.push(this.entity);\n\t\t}\n\n\t\tif (this.folders.length > 0) {\n\t\t\tthis.onSelect(this.folders[0]);\n\t\t}\n\n\t\tthis.processable = this.metadataService.isProcessable(entity.type);\n\t}\n\n\tcreateImageFromBlob(image: Blob, imageData: any) {\n\t\tlet reader = new FileReader();\n\t\treader.addEventListener(\"load\", () => {\n\t\t\t// this.imageToShow = reader.result;\n\t\t\tthis.thumbnails[imageData.key] = reader.result;\n\t\t}, false);\n\n\t\tif (image) {\n\t\t\treader.readAsDataURL(image);\n\t\t}\n\t}\n\n\tgetThumbnail(image: any): void {\n\t\tif (image != null) {\n\n\t\t\tlet rootPath: string = image.key.substr(0, image.key.lastIndexOf(\"/\"));\n\t\t\tlet fileName: string = /[^/]*$/.exec(image.key)[0];\n\t\t\tconst lastPeriod: number = fileName.lastIndexOf(\".\");\n\t\t\tconst thumbKey: string = rootPath + \"/thumbnails/\" + fileName.substr(0, lastPeriod) + \".png\";\n\n\t\t\tthis.service.download(image.component, thumbKey, false).subscribe(blob => {\n\t\t\t\tthis.createImageFromBlob(blob, image);\n\t\t\t}, error => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t\t}\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tthis.getData(this.folder.component, this.folder.name, pageNumber, this.page.pageSize);\n\t}\n\n\tonSelect(folder: SiteEntity): void {\n\t\tthis.page.results = [];\n\n\t\tif (folder.name === \"raw\") {\n\t\t\tthis.enableSelectableImages = true;\n\t\t} else {\n\t\t\tthis.enableSelectableImages = false;\n\t\t}\n\n\t\tlet pn: number = null;\n\t\tlet ps: number = null;\n\n\t\tif (folder.name === \"raw\") {\n\t\t\tif (this.page.pageNumber == null) {\n\t\t\t\tpn = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpn = this.page.pageNumber;\n\t\t\t}\n\t\t\tps = this.constPageSize;\n\t\t}\n\n\t\tthis.excludes = []; // clear excludes if toggling between tabs\n\n\t\tthis.folder = folder;\n\n\t\tthis.video.src = null;\n\t\tthis.video.name = null;\n\n\t\tthis.getData(folder.component, folder.name, pn, ps);\n\t}\n\n\tgetData(component: string, folder: string, pageNumber: number, pageSize: number) {\n\t\tthis.service.getObjects(component, folder, pageNumber, pageSize).then(resultSet => {\n\t\t\tthis.page = resultSet;\n\n\t\t\tfor (let i = 0; i < this.page.results.length; ++i) {\n\t\t\t\tlet item = this.page.results[i];\n\n\t\t\t\tif (this.isImage(item)) {\n\t\t\t\t\tthis.getThumbnail(item);\n\n\t\t\t\t\tif (this.excludes.indexOf(item.name) != -1) {\n\t\t\t\t\t\titem.excludeFromProcess = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t});\n\t}\n\n\tisImage(item: any): boolean {\n\t\tif (item.name.toLowerCase().indexOf(\".png\") !== -1 || item.name.toLowerCase().indexOf(\".jpg\") !== -1 ||\n\t\t\titem.name.toLowerCase().indexOf(\".jpeg\") !== -1 || item.name.toLowerCase().indexOf(\".tif\") !== -1 ||\n\t\t\titem.name.toLowerCase().indexOf(\".tiff\") !== -1) {\n\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpreviewImage(event: any, image: any): void {\n\t\t//        this.bsModalRef = this.modalService.show( ImagePreviewModalComponent, {\n\t\t//            animated: true,\n\t\t//            backdrop: true,\n\t\t//            ignoreBackdropClick: true,\n\t\t//            'class': 'image-preview-modal'\n\t\t//        } );\n\t\t//        this.bsModalRef.content.image = image;\n\t\t//        this.bsModalRef.content.src = event.target.src;\n\t}\n\n\ttoggleExcludeImage(event: any, image: any): void {\n\t\timage.excludeFromProcess = !image.excludeFromProcess;\n\n\t\tif (image.excludeFromProcess) {\n\t\t\tthis.excludes.push(image.name);\n\t\t}\n\t\telse {\n\t\t\tlet position = this.excludes.indexOf(image.name);\n\t\t\tif (position > -1) {\n\t\t\t\tthis.excludes.splice(position, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tisProcessable(item: any): boolean {\n\t\treturn this.metadataService.isProcessable(item.type);\n\t}\n\n\thandleRunOrtho(): void {\n\n\t\t// this.notificationModalRef = this.modalService.show( NotificationModalComponent, {\n\t\t//     animated: true,\n\t\t//     backdrop: true,\n\t\t//     ignoreBackdropClick: true,\n\t\t//     class: 'modal-dialog-centered'\n\t\t// } );\n\t\t// this.notificationModalRef.content.message = \"Your ortho task is running for [\" + this.entity.name + \"]. You can view the current process and results on your tasks page.\";\n\t\t// this.notificationModalRef.content.submitText = 'OK';\n\n\n\t\tevent.stopPropagation();\n\n\t\tthis.confirmModalRef = this.modalService.show(BasicConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'confirmation-modal'\n\t\t});\n\t\tthis.confirmModalRef.content.message = 'Running this process will replace all output products for this ' + this.entity.type + '. Are you sure you want to re-process this data?';\n\t\t// this.bsModalRef.content.data = node;\n\t\tthis.confirmModalRef.content.type = 'DANGER';\n\t\tthis.confirmModalRef.content.submitText = \"Run Process\";\n\n\t\t(<BasicConfirmModalComponent>this.confirmModalRef.content).onConfirm.subscribe(data => {\n\t\t\tthis.processRunning = true;\n\n\t\t\tthis.service.runOrtho(this.entity.id, this.excludes).then(data => {\n\t\t\t\tthis.processRunning = false;\n\t\t\t\tthis.statusMessage = \"Your process is started.\";\n\t\t\t});\n\t\t});\n\n\t}\n\n\thandleDownload(): void {\n\n\t\twindow.location.href = acp + '/project/download-all?id=' + this.folder.component + \"&key=\" + this.folder.name;\n\n\t\t//      this.service.downloadAll( data.id ).then( data => {\n\t\t//        \n\t\t//      } ).catch(( err: HttpErrorResponse ) => {\n\t\t//          this.error( err );\n\t\t//      } );\n\t}\n\n\thandleDownloadVideo(src: string): void {\n\n\t\twindow.location.href = src;\n\t}\n\n\thandleDownloadFile(item: SiteEntity): void {\n\t\twindow.location.href = acp + '/project/download?id=' + this.folder.component + \"&key=\" + item.key;\n\t}\n\n    handleSetMetadata(): void {\n        let modalRef = this.modalService.show(MetadataModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        });\n        modalRef.content.init(this.entity.id);\n\n        modalRef.content.onMetadataChange.subscribe(() => {\n          this.entity.metadataUploaded = true;\n        });\n    }\n\n\n\tshowVideo(item: SiteEntity): void {\n\t\tthis.video.name = null;\n\t\tthis.video.src = null;\n\n\t\t// We have to null out the video and then set it after angular has refereshed\n\t\t// Otherwise the video tag does not register that the src has changed.\n\t\tsetTimeout(() => {\n\t\t\tthis.video.name = item.name;\n\t\t\tthis.video.src = acp + '/project/download?id=' + this.folder.component + \"&key=\" + item.key; // + \"#\" + Math.random();\n\t\t}, 200);\n\t}\n\n\tcloseVideo(): void {\n\t\tthis.video.name = null;\n\t\tthis.video.src = null;\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '../../shared/service/event.service';\n\nimport { Product, ProductDetail } from '../model/management';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ProductService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\tgetProducts(id: string): Promise<Product[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\t\treturn this.http.get<Product[]>(acp + '/product/get-all', { params: params }).toPromise();\n\t}\n\n\tgetDetail(id: string, pageNumber: number, pageSize: number): Promise<ProductDetail> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\tparams = params.set('pageSize', pageSize.toString());\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<ProductDetail>(acp + '/product/detail', { params: params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tremove(id: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/product/remove', JSON.stringify({ id: id }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\ttogglePublish(id: string): Promise<ProductDetail> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<ProductDetail>(acp + '/product/toggle-publish', JSON.stringify({ id: id }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n}\n","<div *ngIf=\"!showSite\" class=\"modal-body\" style=\"padding-bottom: 0;\">\n  <div>\n    <div *ngIf=\"message != null\" class=\"error-container\">\n      <div class=\"label-holder\">\n        <strong>Error</strong>\n      </div>\n      <div class=\"holder\">\n        <div>\n          <p class=\"error-message\">{{message}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"product != null\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2>{{product.name}}</h2>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <ul class=\"breadcrumb\" style=\"margin-bottom: 10px;\">\n            <li *ngFor=\"let entity of product.entities\">\n              <span> {{entity.name}}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"\" *ngIf=\"thumbnails[product.id] != null\">\n            <a class=\"thumbnail non-clickable\">\n              <img class=\"\" [src]=\"thumbnails[product.id] | safeHtml\" (error)=\"getDefaultImgURL($event)\" alt=\"Image\">\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>Pilot Name: </label> &nbsp; {{product.pilotName}}\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>Date/Time: </label> &nbsp; {{product.dateTime}}\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>Sensor Information:</label> &nbsp; {{product.sensor}}\n        </div>\n      </div>\n\n      <!-- <div class=\"row\">\n      <div class=\"col-md-12\">\n        <label>Raw Images</label> \n      </div>\n    </div> -->\n      <div class=\"row\" style=\"background-color: #ececec;\">\n        <div class=\"col-md-12\">\n          <div id=\"image-list-container\">\n            <h3>Raw Images</h3>\n            <ul class=\"list-group row\">\n              <li *ngFor=\"let item of product.page.resultSet | paginate: { itemsPerPage: product.page.pageSize, currentPage: product.page.pageNumber, totalItems: product.page.count }\" class=\"list-group-item col-xs-3\" style=\"background:none;\">\n                <div class=\"\" *ngIf=\"thumbnails[item.id] != null\">\n                  <a class=\"thumbnail\" (click)=\"previewImage(item)\">\n                    <img [src]=\"thumbnails[item.id] | safeHtml\" (error)=\"getDefaultImgURL($event)\" alt=\"Image\">\n                    <div class=\"caption\">\n                      <h4 class=\"media-heading\">{{item.name}}</h4>\n                    </div>\n                  </a>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n      </div>\n\n\n      <div class=\"row\" style=\"background-color: #ececec;\">\n        <div class=\"btn-holder\" style=\"text-align: right;margin:20px 20px 20px 20px;\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Close</button>\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"handleDownload()\">Download ODM Files</button>\n          <button (click)=\"handleGoto()\" class=\"btn btn-primary\" style=\"margin-left: 5px;\">\n            Collection Details\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<leaf-modal *ngIf=\"showSite\" [initData]=\"initData\"></leaf-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { LeafModalComponent } from './leaf-modal.component'\nimport { BasicConfirmModalComponent } from '../../../shared/component/modal/basic-confirm-modal.component';\nimport { ImagePreviewModalComponent } from '../modal/image-preview-modal.component';\n\nimport { ProductDetail, SiteEntity } from '../../model/management';\nimport { ManagementService } from '../../service/management.service';\nimport { ProductService } from '../../service/product.service';\n\nimport {\n\tfadeInOnEnterAnimation,\n\tfadeOutOnLeaveAnimation,\n\tbounceInOnEnterAnimation,\n} from 'angular-animations';\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'product-modal',\n\ttemplateUrl: './product-modal.component.html',\n\tproviders: [LeafModalComponent, BasicConfirmModalComponent],\n\tstyleUrls: [],\n\tanimations: [\n\t\tfadeInOnEnterAnimation(),\n\t\tfadeOutOnLeaveAnimation(),\n\t\tbounceInOnEnterAnimation()\n\t]\n})\nexport class ProductModalComponent implements OnInit {\n\tproduct: ProductDetail;\n\n\tthumbnails: any = {};\n\titems: any[] = [];\n\tshowSite: boolean = false;\n\tmessage: string;\n\tinitData: any;\n\trawImagePreviewModal: BsModalRef;\n\n\tconstructor(private pService: ProductService, private service: ManagementService, public bsModalRef: BsModalRef, private modalService: BsModalService) { }\n\n\tngOnInit(): void {\n\t}\n\n\tinit(product: ProductDetail): void {\n\t\tthis.product = product;\n\n\t\tif (this.product.imageKey) {\n\t\t\tthis.getThumbnail(this.product.id, this.product.imageKey);\n\t\t}\n\n\t\tthis.product.page.resultSet.forEach(pDocument => {\n\t\t\tthis.getThumbnail(pDocument.id, pDocument.key);\n\t\t});\n\t}\n\n\tcreateImageFromBlob(image: Blob, id: string) {\n\t\tlet reader = new FileReader();\n\t\treader.addEventListener(\"load\", () => {\n\t\t\t// this.imageToShow = reader.result;\n\t\t\tthis.thumbnails[id] = reader.result;\n\t\t}, false);\n\n\t\tif (image) {\n\t\t\treader.readAsDataURL(image);\n\t\t}\n\t}\n\n\tgetThumbnail(id: string, key: string): void {\n\n\t\tconst component: string = this.product.entities[this.product.entities.length - 1].id;\n\t\tconst rootPath: string = key.substr(0, key.lastIndexOf(\"/\"));\n\t\tconst fileName: string = /[^/]*$/.exec(key)[0];\n\t\tconst lastPeriod: number = fileName.lastIndexOf(\".\");\n\t\tconst thumbKey: string = rootPath + \"/thumbnails/\" + fileName.substr(0, lastPeriod) + \".png\";\n\n\t\tthis.service.download(component, thumbKey, false).subscribe(blob => {\n\t\t\tthis.createImageFromBlob(blob, id);\n\t\t}, error => {\n\t\t\tconsole.log(error);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tthis.pService.getDetail(this.product.id, pageNumber, 20).then(detail => {\n\t\t\tthis.init(detail);\n\t\t});\n\t}\n\n\tgetDefaultImgURL(event: any): void {\n\t\tevent.target.src = acp + \"/net/geoprism/images/thumbnail-default.png\";\n\t}\n\n\thandleGoto(): void {\n\t\tconst entity = this.product.entities[this.product.entities.length - 1];\n\t\tconst breadcrumbs = this.product.entities;\n\n\n\t\tthis.service.getItems(entity.id, null).then(nodes => {\n\t\t\tthis.initData = { \"entity\": entity, \"folders\": nodes, \"previous\": breadcrumbs }\n\n\t\t\tthis.showSite = true;\n\t\t});\n\n\t}\n\n\tpreviewImage(image: SiteEntity): void {\n\n\t\tthis.rawImagePreviewModal = this.modalService.show(ImagePreviewModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: false,\n\t\t\t'class': 'image-preview-modal'\n\t\t});\n\t\tthis.rawImagePreviewModal.content.init(image.component, image.key);\n\t}\n\n    handleDownload(): void {\n        const entity = this.product.entities[this.product.entities.length - 1];        \n\n        window.location.href = acp + '/project/download-last?id=' + entity.id + \"&key=odm_all\";\n    }\n\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div class=\"list-group\">\n\n    <div *ngIf=\"products.length < 1\" [@fadeInOnEnter] style=\"padding: 10px;text-align: center;color: grey;\">\n        <h4>No data found</h4>\n    </div>\n\n    <div *ngFor=\"let product of products\" class=\"list-group-item\">\n        <div class=\"card card-default\" [@fadeInOnEnter] [@fadeOutOnLeave]>\n            <div class=\"card-body card-8-4\">\n                <h5 class=\"card-title\" style=\"color:#a0a0a0\">\n                    {{product.name}}\n                </h5>\n\n                <ul class=\"breadcrumb\" style=\"margin: 5px 0 5px 0;\">\n                    <li *ngFor=\"let entity of product.entities\">\n                        <span> {{entity.name}} </span>\n                    </li>\n                </ul>\n\n                <div class=\"card-left\">\n                    \n                    <!-- <img src=\"https://via.placeholder.com/150x75\" class=\"img-responsive\"> -->\n\n                    <div *ngIf=\"thumbnails[product.id] != null\">\n                        <a class=\"thumbnail\" (click)=\"previewImage(product)\">\n                            <img class=\"\" [src]=\"thumbnails[product.id] | safeHtml\" (error)=\"getDefaultImgURL($event)\" alt=\"Image\">\n                        </a>\n                    </div>\n                </div>\n                <div class=\"card-right\">   \n                    <ul style=\"list-style: none;padding: 0;\">\n                        <li style=\"padding: 3px 0 3px 0;\">\n                            <a class=\"fa fa-globe\" [ngClass]=\"{'active': product.orthoMapped}\" (click)=\"handleMapIt(product)\" title=\"Show on map\">Map It</a>\n                            <i *ngIf=\"product.orthoMapped\" [@bounceInOnEnter] [@bounceOutOnLeave] class=\"fas fa-check\" style=\"color: #007276;float: right;vertical-align: middle;line-height: 20px;\"></i>\n                        </li>\n                        <li style=\"padding: 3px 0 3px 0;\">\n                            <a class=\"fa fa-info-circle\" (click)=\"handleGetInfo(product)\" title=\"See details\">Get Info</a>\n                        </li>\n                        <li style=\"padding: 3px 0 3px 0;\">\n                            <a class=\"fa fa-trash-alt\" (click)=\"handleDelete(product, $event)\" title=\"Delete\">Delete</a>\n                        </li>\n                        <li *ngIf=\"product.published\" style=\"padding: 3px 0 3px 0;\">\n                            <a class=\"fa fa-arrow-alt-circle-down\" (click)=\"handleTogglePublish(product)\" title=\"Unpublish\">Unpublish</a>\n                        </li>\n                        <li *ngIf=\"!product.published\" style=\"padding: 3px 0 3px 0;\">\n                            <a class=\"fa fa-arrow-alt-circle-up\" (click)=\"handleTogglePublish(product)\" title=\"Publish\">Publish</a>\n                        </li>\n                    </ul>             \n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, Input, Output, EventEmitter, SimpleChanges } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '../../../shared/component/modal/basic-confirm-modal.component';\nimport { ImagePreviewModalComponent } from '../modal/image-preview-modal.component';\nimport { ProductModalComponent } from '../modal/product-modal.component';\n\nimport { Product } from '../../model/management';\nimport { ProductService } from '../../service/product.service';\nimport { ManagementService } from '../../service/management.service';\n\nimport {\n    fadeInOnEnterAnimation,\n    fadeOutOnLeaveAnimation,\n    bounceInOnEnterAnimation,\n    bounceOutOnLeaveAnimation\n} from 'angular-animations';\n\ndeclare var acp: string;\n\n@Component({\n    selector: 'product-panel',\n    templateUrl: './product-panel.component.html',\n    styles: [],\n    animations: [\n        fadeInOnEnterAnimation(),\n        fadeOutOnLeaveAnimation(),\n        bounceInOnEnterAnimation(),\n        bounceOutOnLeaveAnimation()\n    ]\n})\nexport class ProductPanelComponent {\n\n    @Input() id: string;\n\n    @Output() public toggleMapImage = new EventEmitter<Product>();\n\n    /* \n     * List of products for the current node\n     */\n    products: Product[] = [];\n\n    thumbnails: any = {};\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n\n    constructor(private pService: ProductService, private mService: ManagementService, private modalService: BsModalService) { }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        this.refreshProducts(changes['id'].currentValue);\n    }\n\n    refreshProducts(id: string): void {\n        this.products = [];\n        this.thumbnails = {};\n\n        this.pService.getProducts(id).then(products => {\n            this.products = products;\n\n            this.products.forEach(product => {\n                this.getThumbnail(product);\n            });\n        });\n    }\n\n    createImageFromBlob(image: Blob, product: Product) {\n        let reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n            // this.imageToShow = reader.result;\n            this.thumbnails[product.id] = reader.result;\n        }, false);\n\n        if (image) {\n            reader.readAsDataURL(image);\n        }\n    }\n\n    getThumbnail(product: Product): void {\n\n        // imageKey only exists if an image actually exists on s3\n        if (product.imageKey) {\n            const component: string = product.entities[product.entities.length - 1].id;\n            const rootPath: string = product.imageKey.substr(0, product.imageKey.lastIndexOf(\"/\"));\n            const fileName: string = /[^/]*$/.exec(product.imageKey)[0];\n            const lastPeriod: number = fileName.lastIndexOf(\".\");\n            const thumbKey: string = rootPath + \"/thumbnails/\" + fileName.substr(0, lastPeriod) + \".png\";\n\n            this.mService.download(component, thumbKey, false).subscribe(blob => {\n                this.createImageFromBlob(blob, product);\n            }, error => {\n                console.log(error);\n\n                this.thumbnails[product.id] = acp + \"/net/geoprism/images/thumbnail-default.png\";\n\n            });\n        }\n        else {\n            this.thumbnails[product.id] = acp + \"/net/geoprism/images/thumbnail-default.png\";\n        }\n    }\n\n    getDefaultImgURL(event: any): void {\n        event.target.src = acp + \"/net/geoprism/images/thumbnail-default.png\";\n    }\n\n    handleMapIt(product: Product): void {\n        this.toggleMapImage.emit(product);\n    }\n\n    handleDelete(product: Product, event: any): void {\n\n        event.stopPropagation();\n\n        this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.message = 'Are you sure you want to delete [' + product.name + ']?';\n        this.bsModalRef.content.data = product;\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = 'Delete';\n\n        (<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.remove(data);\n        });\n    }\n\n    remove(product: Product): void {\n        this.pService.remove(product.id).then(response => {\n            this.products = this.products.filter((n: any) => n.id !== product.id);\n        });\n    }\n\n    previewImage(product: Product): void {\n        const component: string = product.entities[product.entities.length - 1].id;\n\n        this.bsModalRef = this.modalService.show(ImagePreviewModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: false,\n            'class': 'image-preview-modal'\n        });\n        this.bsModalRef.content.init(component, product.imageKey);\n    }\n\n    handleGetInfo(product: Product): void {\n        this.pService.getDetail(product.id, 1, 20).then(detail => {\n            this.bsModalRef = this.modalService.show(ProductModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true,\n                'class': 'product-info-modal'\n            });\n            this.bsModalRef.content.init(detail);\n        });\n    }\n\n    handleTogglePublish(product: Product): void {\n        this.pService.togglePublish(product.id).then(p => {\n            const mapIt:boolean = product.orthoMapped;\n            \n            if (mapIt) {\n                this.toggleMapImage.emit(product);\n            }\n\n            product.workspace = p.workspace;\n            product.mapKey = p.mapKey;\n            product.published = p.published;\n\n            if (mapIt) {\n                this.toggleMapImage.emit(product);\n            }\n        });\n    }\n}\n","<div *ngIf=\"entity != null\" class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"error-container\">\n    <div class=\"label-holder\">\n      <strong>Error</strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"error-message\">{{message}}</p>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"newInstance\" class=\"modal-title-container\">\n      <h3 >Add new {{entity.type}}</h3>\n  </div>\n\n  <form #ngForm=\"ngForm\">\n    <div *ngFor=\"let attribute of attributes\">\n      <div *ngIf=\"evaluate(attribute)\" class=\"form-group\">\n        <div *ngIf=\"attribute.type === 'text'\">\n          <label>{{attribute.label}}</label>\n          <input [(ngModel)]=\"entity[attribute.name]\" [name]=\"attribute.name\" type=\"input\" class=\"form-control\" [disabled]=\"attribute.readonly\" [placeholder]=\"attribute.label\" [required]=\"attribute.required\" />\n        </div>\n        <div *ngIf=\"attribute.type === 'list'\">\n          <label>{{attribute.label}}</label>\n          <select [(ngModel)]=\"entity[attribute.name]\" [name]=\"attribute.name\" type=\"input\" [disabled]=\"attribute.readonly\" [required]=\"attribute.required\">\n            <option></option>\n            <option *ngFor=\"let option of attribute.options\" [value]=\"option.value\">{{option.label}}</option>\n          </select>\n        </div>\n        <div *ngIf=\"attribute.type === 'text-area'\">\n          <label>{{attribute.label}}</label>\n          <textarea [(ngModel)]=\"entity[attribute.name]\" [name]=\"attribute.name\"  [disabled]=\"attribute.readonly\" class=\"form-control\" [required]=\"attribute.required\">\n          </textarea>\n        </div>\n        <div *ngIf=\"attribute.type === 'point'\">          \n          <map-attribute [(site)]=\"entity\" [center]=\"center\" [zoom]=\"zoom\" ></map-attribute>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"form-group\" *ngIf=\"entity.type === 'Collection' && !newInstance\">\n        <label>Privilege </label>\n        \n        <select style=\"padding:6px 10px;font-size:14px;\" [(ngModel)]=\"entity.privilegeType\" name=\"collection-privilege\" type=\"input\" [required]=\"true\" \n           [disabled]=\"admin === false || entity.ownerName !== userName\">\n            <option value=\"OWNER\">Owner</option>\n            <option value=\"AGENCY\">Agency</option>\n            <option value=\"PUBLIC\">Public</option>\n        </select>\n\n    </div>\n\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Cancel</button>\n      <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\" [disabled]=\"!ngForm.valid\">Apply</button>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { LngLat } from 'mapbox-gl';\n\nimport { SiteEntity, AttributeType } from '../../model/management';\nimport { ManagementService } from '../../service/management.service';\n\n\n@Component({\n\tselector: 'entity-modal',\n\ttemplateUrl: './entity-modal.component.html',\n\tstyleUrls: []\n})\nexport class EntityModalComponent implements OnInit {\n    /*\n     * parent id of the node being created\n     */\n\tparentId: string;\n\tuserName: string = \"\";\n\n\tentity: SiteEntity;\n\n\tattributes: AttributeType[];\n\n\tadmin: boolean = false;\n\n\tnewInstance: boolean = false;\n\n\tmessage: string = null;\n\n\tcenter: LngLat = null;\n\tzoom: number = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n\tpublic onNodeChange: Subject<SiteEntity>;\n\n\tconstructor(private service: ManagementService, public bsModalRef: BsModalRef) { }\n\n\tngOnInit(): void {\n\t\tthis.onNodeChange = new Subject();\n\t}\n\n\tinit(newInstance: boolean, userName: string, admin: boolean, entity: SiteEntity, attributes: AttributeType[], center: LngLat, zoom: number) {\n\t\tthis.newInstance = newInstance;\n\t\tthis.userName = userName;\n\t\tthis.admin = admin;\n\t\tthis.entity = entity;\n\t\tthis.attributes = attributes;\n\t\tthis.center = center;\n\t\tthis.zoom = zoom;\n\t}\n\n\thandleOnSubmit(): void {\n\t\tthis.message = null;\n\n\t\tif (this.entity.type !== 'Site' || this.entity.geometry != null) {\n\t\t\tif (this.newInstance) {\n\t\t\t\tthis.service.applyWithParent(this.entity, this.parentId).then(data => {\n\t\t\t\t\tthis.onNodeChange.next(data);\n\t\t\t\t\tthis.bsModalRef.hide();\n\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\tthis.error(err);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.service.update(this.entity).then(node => {\n\t\t\t\t\tthis.onNodeChange.next(node);\n\n\t\t\t\t\tthis.bsModalRef.hide();\n\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\tconsole.log(err);\n\n\t\t\t\t\tthis.error(err);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.message = \"Sites require a location\";\n\t\t}\n\t}\n\n\tevaluate(attribute: AttributeType): boolean {\n\n\t\tif (this.newInstance && attribute.readonly) {\n\t\t\treturn false;\n\t\t}\n\t\telse if (attribute.condition != null) {\n\t\t\treturn this.service.evaluate(attribute.condition, this.entity);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div>\n<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    \n\n    <div *ngIf=\"message != null && message.length > 0\" class=\"row error-container\">\n        <div class=\"col-md-2\"></div>\n        <div class=\"col-md-8\">\n            <div class=\"label-holder\">\n                <strong style=\"color:#8c0000;\">Error</strong>\n            </div>\n            <div class=\"holder\">\n                <div>\n                    <p class=\"error-message\">{{message}}</p>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-md-2\"></div>\n    </div>\n    \n    <div class=\"row\" *ngIf=\"!existingTask\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <ol class=\"list-group list-group-horizontal\">\n<!-- \n          <li class=\"list-group-item\" [ngClass]=\"{'list-group-item-success':page.type === 'FILE'}\" >Upload</li>\n -->        \n\n          <modal-step-indicator [stepConfig]=\"modalStepConfig\"></modal-step-indicator>\n\n          <!-- <li class=\"list-group-item\" [ngClass]=\"{'list-group-item-success':page.type === 'CATEGORY'}\">Categories</li> -->\n          <!-- <li class=\"list-group-item\" [ngClass]=\"{'list-group-item-success':page.type === 'SUMMARY'}\">Finalize</li> -->\n        </ol>                    \n      </div>    \n    </div>\n    \n    <div class=\"row\" *ngIf=\"!existingTask && labels.length > 0\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <ul class=\"breadcrumb\">\n          <li [@fadeInOnEnter] *ngFor=\"let label of labels\">\n            <span> {{label}}</span>\n          </li>\n        </ul>                    \n      </div>    \n    </div>\n    \n    <!-- Section for each page -->\n    <div class=\"row\" *ngIf=\"page.type === 'CATEGORY'\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n      \n        <div class=\"form-group\">\n          <label [for]=\"page.selection.type\">{{page.selection.type}}:</label>\n          \n          <div *ngIf=\"!page.selection.isNew\" class=\"row\">\n            <div class=\"col-md-8\">\n              <select [name]=\"page.selection.type\" [(ngModel)]=\"page.selection.value\" [disabled]=\"page.selection.isNew\" required>\n                <option></option>\n                <option *ngFor=\"let option of page.options\" [value]=\"option.id\">{{option.name}}</option>\n              </select>\n            </div>\n            <div class=\"col-md-2\">\n              <button *ngIf=\"!page.selection.isNew\" type=\"button btn btn-primary\" class=\"btn btn-primary\" (click)=\"setIsNew(true)\">\n                Add\n              </button>\n            </div>\n         </div>    \n        </div>\n        <div [@fadeInOnEnter] *ngIf=\"page.selection.isNew\" class=\"form-group\">\n          <div class=\"row\">\n            <div class=\"col-md-8\">\n              <input autofocus [(ngModel)]=\"page.selection.label\" name=\"label\" type=\"input\" class=\"form-control\" [placeholder]=\"page.selection.type + ' name...'\" required />\n            </div>\n            <div class=\"col-md-2\">\n              <button type=\"button btn btn-primary\" class=\"btn btn-primary\" (click)=\"setIsNew(false)\">\n                Cancel\n              </button>\n            </div>\n         </div>    \n         <div [@fadeInOnEnter] class=\"row\" *ngIf=\"hasField('platform')\">\n           <div class=\"col-md-8\">\n             <label for=\"platform\" style=\"margin-top: 10px;\">Platform:</label>\n             <select [(ngModel)]=\"page.selection.platform\" name=\"platform\" type=\"input\" required>                               \n               <option></option>\n               <option *ngFor=\"let platform of platforms\" [value]=\"platform.oid\">{{platform.displayLabel}}</option>\n             </select>            \n           </div>\n         </div>    \n         <div [@fadeInOnEnter] class=\"row\" *ngIf=\"hasField('sensor')\">\n           <div class=\"col-md-8\">\n             <label for=\"sensor\" style=\"margin-top: 10px;\">Sensor:</label>\n             <select [(ngModel)]=\"page.selection.sensor\" name=\"sensor\" type=\"input\" required>                               \n               <option></option>\n               <option *ngFor=\"let sensor of sensors\" [value]=\"sensor.oid\">{{sensor.displayLabel}}</option>\n             </select>            \n           </div>\n         </div>    \n        </div>\n      </div>\n    </div>\n\n    <!-- Summary page -->\n    <div [@fadeInOnEnter] class=\"row\" *ngIf=\"page.type === 'SUMMARY' && !existingTask && currentTask == null\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n\n        <div *ngFor=\"let selection of selections\" class=\"form-group\">\n          <label [for]=\"selection.type\">{{selection.type}}:</label>\n          <input [(ngModel)]=\"selection.label\" [name]=\"selection.type\" type=\"input\" class=\"form-control\" disabled required />\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"outFileName\">Output Product Name Prefix</label>\n          <input [(ngModel)]=\"values.outFileName\" name=\"outFileName\" type=\"input\" class=\"form-control\" placeholder=\"Output product name prefix...\" />\n        </div>\n      </div>\n    </div>\n    \n\n    <div [@fadeInOnEnter] [hidden]=\"page.type !== 'FILE' && page.type !== 'SUMMARY'\" class=\"row\">\n        <div class=\"col-md-2\"></div>\n        <div class=\"col-md-8\">\n\n                <!-- Existing task panel -->\n                <div *ngIf=\"existingTask && !currentTask\">\n                    <div class=\"panel panel-warning\" style=\"margin: 30px 0 30px 0;\">\n                        <div class=\"panel-heading\" style=\"font-size: 20px;\">Partial Upload Detected</div>\n                        <div class=\"panel-body\">\n                            <h4>A partial upload was detected. You can either cancel that partial upload or attempt to\n                                continue.</h4>\n                            <h4>\n                                <b>To continue an upload</b>\n                                please re-upload your file and we will try our best to continue where you left off.\n                            </h4>\n\n                            <hr>\n                            <button type=\"button\" class=\"btn btn-danger\" style=\"margin-top: 20px;\"\n                                (click)=\"removeUpload($event)\">\n                                <i class=\"icon-upload icon-white\"></i>\n                                Cancel Upload\n                            </button>\n<!-- \n                            <button type=\"button\" class=\"btn btn-primary\" style=\"margin-top: 20px;\"\n                                (click)=\"showUploadPanel()\">\n                                <i class=\"icon-upload icon-white\"></i>\n                                Continue Upload\n                            </button>\n -->                            \n                        </div>\n                    </div>\n                </div> <!-- End existing task panel -->\n\n                <!-- Task finished upload notification -->\n                <div *ngFor=\"let note of taskFinishedNotifications\" class=\"panel panel-success\" style=\"margin: 30px 0 30px 0;\">\n                    <div class=\"panel-heading\" style=\"font-size: 20px;\">\n                        Upload Details\n                        <i class=\"fa fa-times btn btn-close pull-right\" style=\"min-width:20px;padding:0;line-height: 27px;\" (click)=\"closeTaskFinishedNotification(note.id)\"></i>\n                    </div>\n                    <div class=\"panel-body\">\n                        <h4>\n                            Status:\n                            <b> Upload successfully completed </b>\n                        </h4>\n                        <h4>\n                            Message:\n                            <b> {{note.message}} </b>\n                            <!-- You can view your uploads on the <a href=\"management#/site/tasks\" >Workflow Task page</a>. -->\n                        </h4>\n                    </div>\n                </div> <!-- End task finished upload notification -->\n                \n                <!-- Current upload indicator -->\n                <div class=\"\" [hidden]=\"!uploadVisible\">\n                    <div *ngIf=\"currentTask\" class=\"panel panel-warning\" style=\"margin: 30px 0 30px 0;\">\n                        <div class=\"panel-heading\" style=\"font-size: 20px;\">Upload Details</div>\n                        <div class=\"panel-body\">\n                            <h4>\n                                Status:\n                                <b> {{currentTask.status}} </b>\n                            </h4>\n                            <h4>\n                                Message:\n                                <b> {{currentTask.message}} </b>\n                            </h4>\n                            <h4>\n                                Upload Started On:\n                                <b> {{currentTask.createDate}} </b>\n                            </h4>\n                            <h4>\n                                Last Updated:\n                                <b> {{currentTask.lastUpdatedDate}} </b>\n                            </h4>\n                            <h4>\n                                Elapsed Time:\n                                <b> {{uploadCounter}} </b>\n                            </h4>\n                        </div>\n                    </div>\n\n                    <div class=\"uploader-container\" style=\"margin-top: 20px;\" #uploader></div>\n                </div> <!-- End current upload indicator -->\n        </div>\n        <div class=\"col-md-2\"></div>\n    </div>\n    </div>\n      <div class=\"modal-footer\">\n    \n    <div class=\"row\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <div class=\"btn-holder\" style=\"text-align: right;\">\n            <button type=\"button\" [disabled]=\"disabled\" (click)=\"close()\" [disabled]=\"disabled\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n              <span class=\"ui-button-text\">Close</span>\n            </button>\n\n            <button *ngIf=\"!existingTask && page.index > 0\" type=\"button btn btn-primary\" [disabled]=\"disabled\" class=\"btn btn-secondary\" (click)=\"handleBackPage()\">\n              <i class=\"icon-upload icon-white\"></i>\n              Back\n            </button>\n                            \n            <button *ngIf=\"!existingTask && page.index < (pages.length - 1)\" type=\"button btn btn-primary\" [disabled]=\"!isPageValid(page) || disabled\" class=\"btn btn-primary\" (click)=\"handleNextPage()\">\n              <i class=\"icon-upload icon-white\"></i>\n              Next\n            </button>\n                            \n            <button *ngIf=\"page.index === (pages.length - 1)\" type=\"button btn btn-primary\" [disabled]=\"!isPageValid(page) || disabled\" class=\"btn btn-primary\" (click)=\"handleUpload()\">\n              <i class=\"icon-upload icon-white\"></i>\n              Upload\n            </button>\n        </div>\n      </div>                    \n    </div>                    \n    </div>                    \n    \n</div>","import { Component, OnInit, ViewChild, ElementRef, KeyValueDiffers, HostListener } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\n\nimport { interval, Subject } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\n//use Fine Uploader UI for traditional endpoints\nimport { FineUploader, UIOptions } from 'fine-uploader';\n\nimport { BasicConfirmModalComponent } from '../../../shared/component/modal/basic-confirm-modal.component';\n\nimport { Sensor } from '../../model/sensor';\nimport { Platform } from '../../model/platform';\nimport { SiteEntity, UploadForm, Task, Selection } from '../../model/management';\nimport { ManagementService } from '../../service/management.service';\nimport { MetadataService } from '../../service/metadata.service';\n\nimport {StepConfig} from '../../../shared/modal/step-indicator/modal-step-indicator'\n\nimport { \n    fadeInOnEnterAnimation,\n    fadeOutOnLeaveAnimation\n } from 'angular-animations';\n\ndeclare var acp: string;\n\nclass Page {\n    index: number;\n    selection: Selection;\n    options: SiteEntity[];\n    type: string\n};\n\n@Component( {\n    selector: 'upload-modal',\n    templateUrl: './upload-modal.component.html',\n    styleUrls: ['./upload-modal.component.css'],\n    animations: [\n        fadeInOnEnterAnimation(),\n        fadeOutOnLeaveAnimation() \n    ]\n} )\nexport class UploadModalComponent implements OnInit {\n    objectKeys = Object.keys;\n\n    importedValues: boolean = false;\n\n    message: string = \"\";\n\n    /* \n     * Form values\n     */\n    values = { create: false } as UploadForm;\n\n    /*\n     * FineUploader for uploading large files\n     */\n    uploader = null as FineUploader;\n\n    disabled: boolean = false;\n    taskStatusMessages: string[] = [];\n    currentTask: Task = null;\n    existingTask: boolean = false;\n    taskPolling: any;\n    pollingIsSet: boolean = false;\n    uploadVisible: boolean = true;\n    selectedContinue: boolean = false;\n    uploadCounter: string = \"00:00:00\";\n    uplodeCounterInterfal: any;\n    differ: any;\n    showFileSelectPanel: boolean = false;\n    taskFinishedNotifications: any[] = [];\n\n    /*\n     * List of hierarchies\n     */\n    hierarchy: string[] = [];\n\n    /*\n     * List of selections: One per hierarchy type\n     */\n    selections: Selection[] = [];\n\n    /*\n     * List of previous selection labels\n     */\n    labels: string[] = [];\n\n    /*\n     * List of pages\n     */\n    pages: Page[] = [{\n        index: 0,\n        selection: null,\n        options: [],\n        type: 'FILE',\n    }];\n\n    /*\n     * Current page  \n     */\n    hierarchyChange: boolean = false;\n\n    /*\n     * Current page  \n     */\n    page: Page = this.pages[0];\n\n    sensors: Sensor[] = [];\n    platforms: Platform[] = [];\n\n    public onUploadComplete: Subject<any>;\n\n    public onHierarchyChange: Subject<boolean>;\n\n    // modalState: any = {\"state\":'category', \"attribute\":\"\", \"termOption\":\"\"}\n\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":\"Category\", \"active\":true, \"enabled\":true},\n        {\"label\":\"Final\", \"active\":true, \"enabled\":false}\n    ]};\n\n    constructor( private service: ManagementService, private metadataService: MetadataService, private modalService: BsModalService, public bsModalRef: BsModalRef, differs: KeyValueDiffers ) {\n        this.differ = differs.find( [] ).create();\n    }\n\n    @ViewChild( 'uploader' ) set content( elem: ElementRef ) {\n\n        const that = this;\n\n        if ( elem != null && this.uploader == null ) {\n\n            let uiOptions: UIOptions = {\n                debug: false,\n                autoUpload: false,\n                multiple: false,\n                element: elem.nativeElement,\n                template: 'qq-template',\n                request: {\n                    endpoint: acp + \"/file/upload\",\n                    forceMultipart: true\n                },\n                resume: {\n                    enabled: true,\n                    recordsExpireIn: 1\n                },\n                chunking: {\n                    enabled: true\n                },\n                retry: {\n                    enableAuto: true\n                },\n                text: {\n                    defaultResponseError: \"Upload failed\"\n                },\n                failedUploadTextDisplay: {\n                    mode: 'none'\n                    //responseProperty: 'error'\n                },\n                validation: {\n                    allowedExtensions: ['zip', 'tar.gz']\n                },\n                showMessage: function( message: string ) {\n                    // \n                },\n                callbacks: {\n                    onUpload: function( id: any, name: any ): void {\n                        that.disabled = true;\n\n                        that.countUpload( that );\n\n                        if ( that.message && that.message.length > 0 ) {\n                            that.message = \"\";\n                        }\n                    },\n                    onProgress: function( id: any, name: any, uploadedBytes: any, totalBytes: any ): void {\n                    },\n                    onUploadChunk: function( id: any, name: any, chunkData: any ): void {\n                    },\n                    onUploadChunkSuccess: function( id: any, chunkData: any, responseJSON: any, xhr: any ): void {\n\n                        if ( responseJSON.message && responseJSON.message.currentTask && !that.currentTask ) {\n                            that.currentTask = responseJSON.message.currentTask;\n                        }\n\n                        if ( that.currentTask && !that.pollingIsSet ) {\n                            that.pollingIsSet = true;\n\n                            that.taskPolling = interval( 2000 ).pipe(switchMap(() => {\n                                    if ( that.currentTask ) {\n                                        return that.service.task( that.currentTask.oid );\n                                    }\n                                } ))\n                                .pipe(map(( data ) => data ))\n                                .subscribe(( data ) => {\n                                    that.currentTask = data.task\n                                } );\n                        }\n                    },\n                    onComplete: function( id: any, name: any, responseJSON: any, xhrOrXdr: any ): void {\n                        that.disabled = false;\n                        that.currentTask = null;\n                        that.existingTask = false;\n\n                        if ( !that.hierarchyChange ) {\n                            for ( let i = 0; i < that.selections.length; i++ ) {\n                                if ( that.selections[i].isNew ) {\n                                    that.hierarchyChange = true;\n                                }\n                            }\n                        }\n\n                        if ( that.taskPolling ) {\n                            that.taskPolling.unsubscribe();\n                            that.pollingIsSet = false;\n                        }\n\n                        this.clearStoredFiles();\n\n                        clearInterval( that.uplodeCounterInterfal );\n\n                        if ( responseJSON.success ) {\n                            let notificationMsg = \"\";\n                            //                            if ( that.clickedItem.data.name === \"ortho\" || that.clickedItem.data.name === \"georef\" ) {\n                            //                                notificationMsg = \"Your upload has finished and can be viewed in the Site Navigator.\";\n                            //                            }\n                            //                            else {\n                            notificationMsg = \"Your uploaded data is being processed into final image products. You can view the progress at the Workflow Tasks page.\";\n                            //                            }\n\n                            that.taskFinishedNotifications.push( {\n                                'id': id,\n                                \"message\": notificationMsg\n                            } )\n                        }\n\n                        that.onUploadComplete.next();\n                    },\n                    onCancel: function( id: number, name: string ) {\n                        //that.currentTask = null;\n\n                        if ( that.currentTask && that.currentTask.uploadId ) {\n                            that.service.removeTask( that.currentTask.uploadId )\n                                .then(() => {\n                                    this.clearStoredFiles();\n                                } )\n                                .catch(( err: HttpErrorResponse ) => {\n                                    this.error( err );\n                                } );\n                        }\n\n                        if ( that.existingTask ) {\n                            that.page = that.pages[0];\n                        }\n\n                        that.disabled = false;\n                        that.currentTask = null;\n                        that.existingTask = false;\n\n                        if ( that.taskPolling ) {\n                            that.taskPolling.unsubscribe();\n                            that.pollingIsSet = false;\n                        }\n\n                        clearInterval( that.uplodeCounterInterfal );\n                    },\n                    onError: function( id: number, errorReason: string, xhrOrXdr: string ) {\n                        that.error( { error: { message: xhrOrXdr } } );\n                    }\n\n                }\n            };\n\n            this.uploader = new FineUploader( uiOptions );\n\n        }\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngDoCheck() {\n\n        if ( this.uploader ) {\n            const change = this.differ.diff( this.uploader );\n            if ( change ) {\n                this.setExistingTask();\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.onUploadComplete = new Subject();\n        this.onHierarchyChange = new Subject();\n\n        this.service.getMetadataOptions( null ).then(( options ) => {\n            this.sensors = options.sensors;\n            this.platforms = options.platforms;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    init( entities: SiteEntity[] ): void {\n        this.hierarchy = this.metadataService.getHierarchy();\n        this.selections = [];\n        this.pages = [];\n\n        for ( let i = 0; i < this.hierarchy.length; i++ ) {\n            const type = this.hierarchy[i];\n\n            const index = entities.findIndex( entity => { return entity.type === type } );\n\n            if ( index !== -1 ) {\n                const entity = entities[index];\n\n                this.selections.push( { type: type, isNew: false, value: entity.id, label: entity.name } );\n            }\n            else {\n                this.selections.push( { type: type, isNew: false, value: null, label: '' } );\n            }\n\n            if ( i > 0 ) {\n                this.pages.push( {\n                    index: ( this.pages.length ),\n                    selection: this.selections[i],\n                    options: [],\n                    type: 'CATEGORY'\n                } );\n            }\n        }\n\n        this.labels.push( this.selections[0].label );\n\n        this.pages.push( {\n            index: ( this.pages.length ),\n            selection: null,\n            options: [],\n            type: 'SUMMARY'\n        } );\n\n        this.page = this.pages[0];\n\n        this.service.getChildren( this.selections[0].value ).then( children => {\n            this.pages[0].options = children.filter( child => {\n                return child.type === this.pages[0].selection.type;\n            } );\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n        // Handle the case where there is an existing file upload\n        if ( this.existingTask ) {\n            this.page = this.pages[this.pages.length - 1];\n        }\n    }\n\n    close(): void {\n        if ( this.hierarchyChange ) {\n            this.onHierarchyChange.next( true );\n        }\n\n        this.bsModalRef.hide();\n    }\n\n    closeTaskFinishedNotification( id: string ): void {\n        // iterate in reverse to allow splice while avoiding the reindex\n        // from affecting any of the next items in the array.\n        let i = this.taskFinishedNotifications.length;\n        while ( i-- ) {\n            let note = this.taskFinishedNotifications[i];\n            if ( id === note.id ) {\n                this.taskFinishedNotifications.splice( i, 1 );\n            }\n        }\n    }\n\n\n    setExistingTask(): void {\n        let resumable = this.uploader.getResumableFilesData() as any[];\n        if ( resumable.length > 0 ) {\n            this.existingTask = true;\n            //            if ( !this.selectedContinue ) {\n            //                this.hideUploadPanel();\n            //            }\n        }\n    }\n\n    isPageValid( page: Page ): boolean {\n        if ( page.type === 'CATEGORY' ) {\n            if ( page.selection != null ) {\n                if ( page.selection.value != null && page.selection.value.length > 0 ) {\n                    return true;\n                }\n                else if ( page.selection.label != null && page.selection.label.length > 0 ) {\n                    if(this.hasField('platform') && (page.selection.platform == null || page.selection.platform.length === 0)) {\n                        return false;\n                    }\n                    \n                    if(this.hasField('sensor') && (page.selection.sensor == null || page.selection.sensor.length === 0)) {\n                        return false;\n                    }\n                    \n                    return true;\n                }\n\n                return false;\n            }\n        }\n        else if ( page.type === 'FILE' ) {\n            if ( this.uploader != null ) {\n                const uploads: any = this.uploader.getUploads();\n\n                return ( uploads != null && uploads.length > 0 );\n            };\n        }\n        else if ( page.type === 'SUMMARY' ) {\n            return ( this.currentTask == null );\n        }\n\n        return true;\n    }\n\n    updateCurrentPageLabel(): void {\n        this.page.options.forEach( entity => {\n            if ( entity.id === this.page.selection.value ) {\n                this.page.selection.label = entity.name;\n            }\n        } )\n    }\n\n    setIsNew( isNew: boolean ): void {\n        this.page.selection.isNew = isNew;\n\n        if ( isNew ) {\n            this.page.selection.value = null;\n        }\n        else {\n            this.page.selection.label = null;\n        }\n    }\n\n    handleNextPage(): void {\n\n        if ( ( this.page.index + 1 ) < this.pages.length ) {\n\n            const nextPage = this.pages[this.page.index + 1];\n\n            if ( this.page.type === 'CATEGORY' ) {\n                this.updateCurrentPageLabel();\n                this.labels.push( this.page.selection.label );\n            }\n\n            if ( nextPage.type === 'CATEGORY' ) {\n\n                if ( this.page.type === 'FILE' ) {\n                    this.page = nextPage;\n                }\n                else {\n                    if ( !this.page.selection.isNew && this.page.selection.value != null && this.page.selection.value.length > 0 ) {\n\n                        this.service.getChildren( this.page.selection.value ).then( children => {\n                            nextPage.options = children.filter( child => {\n                                return child.type === nextPage.selection.type;\n                            } );\n\n                            this.page = nextPage;\n                        } ).catch(( err: HttpErrorResponse ) => {\n                            this.error( err );\n                        } );\n                    }\n                    else {\n                        this.page = nextPage;\n                    }\n                }\n            }\n            else {\n                this.page = nextPage;\n\n                this.modalStepConfig = {\"steps\": [\n                    {\"label\":\"Category\", \"active\":true, \"enabled\":false},\n                    {\"label\":\"Final\", \"active\":true, \"enabled\":true}\n                ]};\n            }\n        }\n    }\n\n    handleBackPage(): void {\n\n        if ( this.page.index > 0 ) {\n\n            const prevPage = this.pages[this.page.index - 1];\n\n            if ( prevPage.type === 'CATEGORY' ) {\n                this.labels.splice( this.labels.length - 1, 1 );\n\n                this.modalStepConfig.steps.forEach(step => {\n                    if(step.label.toLowerCase() === \"category\" && step.enabled === false){\n                        this.modalStepConfig = {\"steps\": [\n                            {\"label\":\"Category\", \"active\":true, \"enabled\":true},\n                            {\"label\":\"Final\", \"active\":true, \"enabled\":false}\n                        ]};\n                    }\n                })\n            }\n\n            this.page = prevPage;\n        }\n    }\n\n    handleUpload(): void {\n\n\n        if ( !this.existingTask ) {\n            /*\n             * Validate form values before uploading\n             */\n            const selection = this.selections[this.selections.length - 1];\n\n            //            if ( selection.value == null  ) {\n            //                this.message = \"A [\" + selection.type + \"] must first be selected before the file can be uploaded\";\n            //            }\n            //            else {\n            //                this.values.uasComponentOid = selection.value;\n            this.values.selections = JSON.stringify( this.selections );\n            this.values.uploadTarget = this.metadataService.getUploadTarget( selection.type );\n\n            this.uploader.setParams( this.values );\n            this.uploader.uploadStoredFiles();\n            //            }\n        }\n        else {\n            this.uploader.uploadStoredFiles();\n        }\n    }\n\n    hasField( fieldName: string ): boolean {\n        return this.metadataService.hasExtraField( this.page.selection.type, fieldName );\n    }\n\n    removeUpload( event: any ): void {\n        let that = this;\n\n        this.bsModalRef = this.modalService.show( BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = 'Are you sure you want to cancel the upload of [' + this.uploader.getResumableFilesData()[0].name + ']';\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = 'Cancel Upload';\n\n        this.bsModalRef.content.onConfirm.subscribe( data => {\n            this.service.removeTask( this.uploader.getResumableFilesData()[0].uuid )\n                .then(() => {\n                    //that.uploader.clearStoredFiles();\n                    //that.uploader.cancelAll()\n\n                    // The above clearStoredFiles() and cancelAll() methods don't appear to work so \n                    // we are clearing localStorage manually.\n                    localStorage.clear();\n                    that.existingTask = false;\n                    this.page = this.pages[0];\n                    //                    that.showUploadPanel();\n                } ).catch(( err: HttpErrorResponse ) => {\n                    this.error( err );\n                } );\n        } );\n    }\n\n    //    hideUploadPanel(): void {\n    //        this.uploadVisible = false;\n    //    }\n    //\n    //    showUploadPanel(): void {\n    //        this.uploadVisible = true;\n    //        this.selectedContinue = true;\n    //    }\n\n    countUpload( thisRef: any ): void {\n        let ct = 0;\n\n        function incrementSeconds() {\n            ct += 1;\n\n            let hours = Math.floor( ct / 3600 )\n            let minutes = Math.floor(( ct % 3600 ) / 60 );\n            let seconds = Math.floor( ct % 60 );\n\n            let hoursStr = minutes < 10 ? \"0\" + hours : hours;\n            let minutesStr = minutes < 10 ? \"0\" + minutes : minutes;\n            let secondsStr = seconds < 10 ? \"0\" + seconds : seconds;\n\n            thisRef.uploadCounter = hoursStr + \":\" + minutesStr + \":\" + secondsStr;\n        }\n\n        thisRef.uplodeCounterInterfal = setInterval( incrementSeconds, 1000 );\n    }\n\n    error( err: any ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n    public canDeactivate(): boolean {\n        return this.disabled;\n    }\n\n    @HostListener( 'window:beforeunload', ['$event'] )\n    unloadNotification( $event: any ) {\n        if ( this.disabled ) {\n            $event.returnValue = 'An upload is currently in progress. Are you sure you want to leave?';\n        }\n    }\n}\n","<div class=\"modal-body\">\n  <div>\n    <div *ngIf=\"message != null\" class=\"error-container\">\n      <div class=\"label-holder\">\n        <strong>Error</strong>\n      </div>\n      <div class=\"holder\">\n        <div>\n          <p class=\"error-message\">{{message}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"entity != null\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2>{{entity.name}}</h2>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <ul class=\"breadcrumb\" style=\"margin-bottom: 10px;\">\n            <li *ngFor=\"let prev of previous\">\n              <span> {{prev.name}}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <tabset class=\"nav-full-width\">\n          <tab *ngFor=\"let folder of folders\" [heading]=\"folder.name\" (selectTab)=\"onSelect(folder)\">\n            <div class=\"row image-list-container\">              \n              <div class=\"col-sm-8\">\n                <table class=\"table table-striped\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\"></th>\n                      <th scope=\"col\">Name</th>\n                      <th scope=\"col\">Date uploaded</th>\n                    </tr>\n                  </thead>\n                  <tbody class=\"upload-name-style\">\n                    <tr *ngFor=\"let item of page.results  | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                      <td class=\"button-column\">\n                        <a class=\"fa fa-download\" (click)=\"handleDownloadFile(item)\" title=\"Download\"></a>\n                        <a class=\"fa fa-trash-alt ico-remove\" (click)=\"handleDelete(item)\" title=\"Remove\"></a>\n                      </td>\n                      <td>{{ item.name }}</td>\n                      <td>{{ item.lastModified }}</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n              <div class=\"col-sm-4\">\n                <ngx-file-drop dropZoneLabel=\"Drop files here\" (onFileDrop)=\"dropped($event)\">\n                  <ng-template ngx-file-drop-content-tmp let-openFileSelector=\"openFileSelector\">\n                    Drag & Drop File\n                    <button type=\"button\" (click)=\"openFileSelector()\">Browse Files</button>\n                  </ng-template>\n                </ngx-file-drop>\n              </div>                        \n            </div>\n          </tab>\n        </tabset>\n      </div>\n      \n      <div class=\"row\">      \n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n      </div>\n\n      <div class=\"row\">      \n        <div class=\"btn-holder\" style=\"text-align: right;margin: 20px 20px 10px 20px;\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Close</button>\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"handleDownload()\" style=\"margin-left: 5px;\">Download all</button>\n        </div>\n      </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { NgxFileDropEntry, FileSystemFileEntry, FileSystemDirectoryEntry } from 'ngx-file-drop';\n\nimport { BasicConfirmModalComponent } from '../../../shared/component/modal/basic-confirm-modal.component';\nimport { SiteEntity, SiteObjectsResultSet } from '../../model/management';\nimport { ManagementService } from '../../service/management.service';\n\ndeclare var acp: string;\n\n@Component({\n    selector: 'accessible-support-modal',\n    templateUrl: './accessible-support-modal.component.html',\n    styles: [],\n})\nexport class AccessibleSupportModalComponent implements OnInit {\n\n    /* \n     * Breadcrumb of previous sites clicked on\n     */\n    previous = [] as SiteEntity[];\n    folders: SiteEntity[] = [];\n    message: string;\n\n    entity: SiteEntity;\n    folder: SiteEntity;\n\n    page: SiteObjectsResultSet = new SiteObjectsResultSet();\n\n    constructor(private service: ManagementService, private modalService: BsModalService, public bsModalRef: BsModalRef) {\n    }\n\n    ngOnInit(): void {\n        this.page.count = 0;\n        this.page.pageNumber = 1;\n        this.page.pageSize = 10;\n        this.page.results = [];\n    }\n\n    init(entity: SiteEntity, folders: SiteEntity[], previous: SiteEntity[]): void {\n\n        this.entity = entity;\n        this.folders = folders;\n        this.previous = [...previous];\n\n        if (this.previous.length > 0 && this.previous[this.previous.length - 1].id !== this.entity.id) {\n            this.previous.push(this.entity);\n        }\n\n        if (this.folders.length > 0) {\n            this.onSelect(this.folders[0]);\n        }\n    }\n\n    onPageChange(pageNumber: number): void {\n        this.getData(this.folder.component, this.folder.name, pageNumber, this.page.pageSize);\n    }\n\n    onSelect(folder: SiteEntity): void {\n\n        this.page.results = [];\n\n        this.folder = folder;\n\n        this.getData(folder.component, folder.name, 1, this.page.pageSize);\n    }\n\n    refresh(): void {\n\n        this.page.results = [];\n\n        this.getData(this.folder.component, this.folder.name, this.page.pageNumber, this.page.pageSize);\n    }\n\n    getData(component: string, folder: string, pageNumber: number, pageSize: number) {\n        this.service.getObjects(component, folder, pageNumber, pageSize).then(page => {\n            this.page = page;\n        });\n    }\n\n    handleDownload(): void {\n        window.location.href = acp + '/project/download-all?id=' + this.folder.component + \"&key=\" + this.folder.name;\n    }\n\n    handleDownloadFile(item: SiteEntity): void {\n        window.location.href = acp + '/project/download?id=' + this.folder.component + \"&key=\" + item.key;\n    }\n\n    dropped(files: NgxFileDropEntry[]): void {\n\n        for (const droppedFile of files) {\n\n            // Is it a file?\n            if (droppedFile.fileEntry.isFile) {\n                const fileEntry: FileSystemFileEntry = droppedFile.fileEntry as FileSystemFileEntry;\n\n                fileEntry.file((file: File) => {\n\n                    this.service.upload(this.folder.component, this.folder.name, file).then(() => {\n                        // Refresh the table\n                        this.refresh();\n                    });\n\n                });\n            } else {\n                // It was a directory (empty directories are added, otherwise only files)\n                const fileEntry: FileSystemDirectoryEntry = droppedFile.fileEntry as FileSystemDirectoryEntry;\n                console.log(droppedFile.relativePath, fileEntry);\n            }\n        }\n    }\n\n    handleDelete(item: SiteEntity): void {\n        let modalRef: BsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        modalRef.content.message = 'Are you sure you want to delete the file [' + item.name + ']?';\n        modalRef.content.type = 'DANGER';\n        modalRef.content.submitText = 'Delete';\n\n        modalRef.content.onConfirm.subscribe(() => {\n            this.remove(item);\n        });\n    }\n\n    remove(item: SiteEntity): void {\n        this.service.removeObject(item.component, item.key).then(() => {\n            // Refresh the table\n            this.refresh();\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        // Handle error\n        if (err !== null) {\n            this.message = (err.error.localizedMessage || err.error.message || err.message);\n        }\n    }\n}\n","<div id=\"navigator-header-container\">\n    <uasdm-header [title]=\"'Site Viewer'\"></uasdm-header>\n</div>\n\n<div id=\"app-container\" class=\"container-fluid\" style=\"background: #f7f7f7;\">\n\n    <div class=\"row\">\n        <div id=\"navigator-left-sidebar\" class=\"col-md-3 lw-inner-col\">\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n            \n                  <!-- IF at Site level -->\n                  <div class=\"row\" *ngIf=\"!current\">\n                    <div class=\"col-md-6\" style=\"height: 56px;\">\n                      <h3>IDM Sites</h3>\n                    </div>\n                  </div>\n            \n                  <!-- IF lower than Site -->\n                  <div class=\"row\" *ngIf=\"current\">\n                    <div class=\"col-md-12\" style=\"height: 56px; overflow: scroll;\">\n                      <ul class=\"breadcrumb\" style=\"background-color: white;\">\n                        <li>\n                          <i class=\"fa fa-angle-left breadcrumb-back-ico\" aria-hidden=\"true\"></i>\n                          <a (click)=\"back(null)\" style=\"color: #007276;\">IDM Sites</a>\n                        </li>\n                        <li *ngFor=\"let entity of breadcrumbs; last as isLast\" [ngClass]=\"{'active':isLast}\">\n                          <a *ngIf=\"!isLast\" (click)=\"back(entity)\" style=\"color: #007276;\"> {{entity.name}}</a>\n                          <span *ngIf=\"isLast\"> <b>{{entity.name}}</b> </span>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n            \n                  <!-- Search bar -->\n                  <div class=\"row\">\n                    <div class=\"col-md-12\">\n                      <div class=\"location-management-widget-section\">\n                        <input class=\"form-control search-input\" type=\"text\" placeholder=\"Search...\" [(ngModel)]=\"search\"\n                          [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"handleClick($event)\"\n                          [typeaheadOptionsLimit]=\"10\" [typeaheadItemTemplate]=\"bsItemTemplate\" typeaheadOptionField=\"label\"\n                          [ngModelOptions]=\"{standalone: true}\" (keydown.enter)=\"$event.preventDefault()\" />\n                      </div>\n                    </div>\n                  </div>\n              </div>\n            </div>\n\n            <!-- <hr> -->\n\n            <div class=\"row\">\n                <div class=\"col-md-12\" style=\"background:#f7f7f7; padding:0; height:100%;\">\n                  \n                  <tabset #staticTabs class=\"nav-full-width\">\n                    <tab heading=\"Data\">                \n                      <div id=\"hierarchy-tree-container\" class=\"location-management-widget-section location-management-list-container\"\n                      style=\"height: calc(100vh - 290px);overflow-y: auto;\">\n                        <div class=\"list-group\">\n\n                          <!-- If -->\n                          <div *ngIf=\"nodes.length < 1 && breadcrumbs.length === 0\" [@fadeInOnEnter] style=\"padding: 20px;text-align: center;color: grey;\">\n                            <h4>No Sites in this area.</h4>\n                            <p>\n                              Zoom out to find sites in other areas of the map.\n                            </p>\n                          </div>\n\n                          <!-- Else -->\n                          <div *ngIf=\"nodes.length < 1 && breadcrumbs.length > 0\" [@fadeInOnEnter] style=\"padding: 20px;text-align: center;color: grey;\">\n                            <h4>No data at this level.</h4>\n                            <p>\n                              Create data containers as part of the upload process.\n                            </p>\n                          </div>\n\n                          <div *ngFor=\"let node of nodes; let i = index\" [@fadeInOnEnter] class=\"list-group-item\">\n\n                            <!-- Two column layout -->\n                            <div [@fadeInOnEnter] style=\"border-left: solid 15px;\" class=\"card card-default clickable\" *ngIf=\"getMetadata(node).root\" [ngClass]=\"{'active': hoverFeatureId === node.id}\"\n                                (click)=\"select(node, null, $event)\" (mouseenter)=\"onListEntityHover($event, node)\" (mouseleave)=\"onListEntityHoverOff()\">\n                              \n                                <!-- <div class=\"card-header\">Header</div> -->\n                              <div class=\"card-body card-5-7\" >\n                                <div class=\"card-left\">\n                                  <!-- <img src=\"https://via.placeholder.com/75x75\" class=\"img-responsive\"> -->\n                                   <i class=\"fas fa-map-marker-alt\" style=\"font-size: 50px;\"></i>\n                                </div>\n                                <div class=\"card-right\">\n                                  <h4 style=\"word-break: break-all;\">\n                                    <!-- <a (click)=\"select(node, $event)\"> -->\n                                      {{node.name}}\n                                    <!-- </a> -->\n                                  </h4>\n                                  <span *ngIf=\"node.type !== 'folder'\" class=\"pull-right button-column floating\" style=\"top: 0;position: absolute;right: 0;\">\n                                    <a class=\"fa fa-pencil-alt ico-edit\" (click)=\"handleEdit(node, $event)\" title=\"Edit\"></a>\n                                    <a class=\"fa fa-trash-alt ico-remove\" (click)=\"handleDelete(node, $event)\" title=\"Delete\"></a>                                   \n                                  </span>  \n                                  <p><b>{{node.numberOfChildren}}</b> {{getMetadata(node).childLabel}}</p>\n                                </div>\n                              </div>\n                              <!-- <div class=\"card-footer\">Footer</div> -->\n                            </div>\n\n\n                            <!-- Single column card -->\n                            <div [@fadeInOnEnter] class=\"card card-default clickable\" *ngIf=\"!getMetadata(node).root\" (click)=\"select(node, null, $event)\">\n                              <div class=\"card-body\">\n                                  <i (click)=\"handleExpand(node, $event)\" class=\"fa fa-caret-left expand-arrow-ico pull-right\" [ngClass]=\"{'fa-rotate-270':node.active}\" style=\"font-size: 25px; padding: 0 5px\" aria-hidden=\"true\"></i>\n\n                                  <h4 style=\"word-break: break-all;\">{{node.name}}</h4>\n                                  <p><b>{{node.numberOfChildren}}</b> {{getMetadata(node).childLabel}}</p>\n                                  \n                                  <div [collapse]=\"!node.active\" class=\"list-group\" style=\"margin-bottom: 0;\">\n                                    <div *ngFor=\"let child of node.children\" (click)=\"select(child, node, $event)\" class=\"list-group-item\" style=\"background-color: #ececec;border: solid 1px lightgrey;border-radius: 0;\">\n                                      <!-- <a (click)=\"select(child, $event)\"> -->\n                                        {{child.name}}\n                                      <!-- </a> -->\n                                      <span *ngIf=\"child.type !== 'folder'\" class=\"pull-right button-column\">\n                                        <a class=\"fa fa-pencil-alt ico-edit\" (click)=\"handleEdit(child, $event)\" title=\"Edit\"></a>\n                                        <a class=\"fa fa-trash-alt ico-remove\" (click)=\"handleDelete(child, $event)\" title=\"Delete\"></a>                                   \n                                      </span>                                 \n                                    </div>\n                                  </div>\n                              </div>\n                            </div>\n\n                          </div> \n\n                          <div *ngFor=\"let node of supportingData\" class=\"list-group-item\">\n                            <div [@fadeInOnEnter] class=\"card card-default\">\n                              <div class=\"card-body\">\n                                <h4 style=\"word-break: break-all;\">Supporting Data</h4>\n                                <div class=\"list-group\">\n                                  <div class=\"list-group-item\" style=\"background-color: #ececec;border: solid 1px lightgrey;border-radius: 0;\">\n                                    <a (click)=\"select(node, null, $event)\">\n                                      {{node.name}}\n                                    </a>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                        </div>\n                      </div>\n                      <!-- <div *ngIf=\"supportingData.length > 0\" class=\"location-management-widget-section location-management-list-container\">\n                        \n                            <div class=\"card card-default\">\n                              <div class=\"card-body\">\n                                <h4>Supporting Data</h4>\n                                <div class=\"list-group\">\n                                  <div *ngFor=\"let node of supportingData\" class=\"list-group-item\" style=\"background-color: #ececec;border: solid 1px lightgrey;border-radius: 0;\">\n                                    <a (click)=\"select(node, $event)\">\n                                      {{node.name}}\n                                    </a>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                      </div> -->\n\n                    </tab>\n                    <tab *ngIf=\"current != null\" heading=\"Products\">\n                      <div id=\"hierarchy-tree-container\" class=\"location-management-widget-section location-management-list-container\"\n                      style=\"height: calc(100vh - 290px);overflow-y: auto;\">\n                        <product-panel [id]=\"current.id\" (toggleMapImage)=\"handleMapImage($event)\"></product-panel>           \n                      </div>\n                    </tab>\n                  </tabset>\n\n                </div>\n            </div>\n            \n\n            <footer class=\"sidebar-footer\">\n              <div class=\"row\" *ngIf=\"current != null\" style=\"background:white;\">\n                <div class=\"col-md-12\" style=\"text-align: center;padding: 10px;border-top: 1px solid lightgrey;\">\n                  <button (click)=\"handleUploadFile()\" class=\"btn btn-primary\">Upload</button>              \n                </div>\n              </div>\n              <div class=\"row\" *ngIf=\"current == null\" style=\"background:white;\">\n                <div class=\"col-md-12\" style=\"text-align: center;padding: 10px;border-top: 1px solid lightgrey;\">\n                  <button (click)=\"handleCreate(null,null)\" class=\"btn btn-primary\">Add new site</button>\n                </div>\n              </div>\n            </footer>\n            \n        </div>\n        <div class=\"col-md-9\" id=\"site-explorer-map\">\n            <div class=\"row\">\n\n                <article class=\"base-layer-panel\">\n\n                  <div class=\"layer-toggle\" style=\"cursor: pointer;background:#fff;padding:8px;border-radius:4px;\" (mouseenter)=\"baselayerIconHover = true\"  (mouseleave)=\"baselayerIconHover = false\">\n                    <i class=\"fas fa-layer-group\" *ngIf=\"!baselayerIconHover\" style=\"vertical-align:middle; font-size: 18px;\"></i>\n                    <div *ngIf=\"baselayerIconHover\">\n                      <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n                          <input class=\"layer-toggle-input\" type='radio' name='rtoggle' [value]='baseLayer.id' [checked]=\"baseLayer.selected\" (change)=\"handleStyle(baseLayer)\">\n                          <label class=\"layer-toggle-label\">{{baseLayer.label}}</label>\n                        </div>\n                    </div>\n                  </div>\n                    <!-- <accordion> \n                      <accordion-group heading=\"Base Maps\" style=\"border:none;\">\n                        <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n                          <input class=\"layer-toggle-input\" type='radio' name='rtoggle' [value]='baseLayer.id' [checked]=\"baseLayer.selected\" (change)=\"handleStyle(baseLayer)\">\n                          <label class=\"layer-toggle-label\">{{baseLayer.label}}</label>\n                        </div>\n                      </accordion-group>\n                    </accordion> -->\n                </article>\n\n                <div id=\"mousemove-panel\" class=\"mapboxgl-ctrl-bottom-right\" style=\"background: rgba(255, 255, 255, .5); right: 0; padding: 0 5px 0 5px;bottom: 15px;\"></div>\n\n                <div id=\"map\" class=\"map-view-port\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #bsItemTemplate let-match=\"match\" let-query=\"query\">\n  <span *ngIf=\"match.item.filename == null\">\n    <i class=\"fa fa-folder-open\"></i>\n  </span>\n  <span *ngIf=\"match.item.filename != null\">\n    <i class=\"fa fa-file\"></i>\n  </span>\n  <span>\n    <span *ngFor=\"let site of match.item.hierarchy; index as i\">\n        {{site.label}} /\n        <!-- <span *ngIf=\"i < (match.item.hierarchy.length -1)\">/</span> -->\n    </span>\n  </span>\n  <b>{{ match.item.label}}</b>\n</ng-template>\n\n","import { Component, OnInit, OnDestroy, AfterViewInit, ViewChild, TemplateRef } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { TabsetComponent } from 'ngx-bootstrap';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Map, LngLatBounds, NavigationControl, MapboxEvent, AttributionControl } from 'mapbox-gl';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from \"rxjs/operators\";\n\nimport { BasicConfirmModalComponent } from '../../shared/component/modal/basic-confirm-modal.component';\nimport { AuthService } from '../../shared/service/auth.service';\n\nimport { SiteEntity, Product } from '../model/management';\n\nimport { EntityModalComponent } from './modal/entity-modal.component';\nimport { UploadModalComponent } from './modal/upload-modal.component';\nimport { LeafModalComponent } from './modal/leaf-modal.component';\nimport { AccessibleSupportModalComponent } from './modal/accessible-support-modal.component';\n\nimport { ManagementService } from '../service/management.service';\nimport { MapService } from '../service/map.service';\nimport { MetadataService } from '../service/metadata.service';\n\nimport {\n\tfadeInOnEnterAnimation,\n\tfadeOutOnLeaveAnimation\n} from 'angular-animations';\n\n\ndeclare var acp: any;\n\n@Component({\n\tselector: 'projects',\n\ttemplateUrl: './projects.component.html',\n\tstyles: ['./projects.css'],\n\tanimations: [\n\t\tfadeInOnEnterAnimation(),\n\t\tfadeOutOnLeaveAnimation()\n\t]\n})\nexport class ProjectsComponent implements OnInit, AfterViewInit, OnDestroy {\n\n\t@ViewChild('staticTabs') staticTabs: TabsetComponent;\n\n\t// imageToShow: any;\n\tuserName: string = \"\";\n\n    /*\n     * Template for the delete confirmation\n     */\n\t@ViewChild('confirmTemplate') public confirmTemplate: TemplateRef<any>;\n\n    /* \n     * Datasource to get search responses\n     */\n\tdataSource: Observable<any>;\n\n    /* \n     * Model for text being searched\n     */\n\tsearch: string = \"\";\n\n    /* \n     * Root nodes of the tree\n     */\n\tnodes = [] as SiteEntity[];\n\n    /* \n     * Root nodes of the tree\n     */\n\tsupportingData = [] as SiteEntity[];\n\n    /* \n     * Breadcrumb of previous sites clicked on\n     */\n\tbreadcrumbs = [] as SiteEntity[];\n\n    /* \n     * Root nodes of the tree\n     */\n\tcurrent: SiteEntity;\n\n    /* \n     * mapbox-gl map\n     */\n\tmap: Map;\n\n    /* \n     * Flag denoting if the user is an admin\n     */\n\tadmin: boolean = false;\n\n    /* \n     * Flag denoting if the user is a worker\n     */\n\tworker: boolean = false;\n\n    /* \n     * Flag denoting the draw control is active\n     */\n\tactive: boolean = false;\n\n    /* \n     * List of base layers\n     */\n\tbaseLayers: any[] = [{\n\t\tlabel: 'Outdoors',\n\t\tid: 'outdoors-v11',\n\t\tselected: true\n\t}, {\n\t\tlabel: 'Satellite',\n\t\tid: 'satellite-v9'\n\t}, {\n\t\tlabel: 'Streets',\n\t\tid: 'streets-v11'\n\t}];\n\n\tlayers: {workspace:string, mapKey:string}[] = [];\n\n\tbaselayerIconHover = false;\n\n\thoverFeatureId: string;\n\n\t/* \n     * debounced subject for map extent change events\n     */\n\tsubject: Subject<MapboxEvent<MouseEvent | TouchEvent | WheelEvent>>;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n\tconstructor(private service: ManagementService, private authService: AuthService, private mapService: MapService,\n\t\tprivate modalService: BsModalService, private metadataService: MetadataService) {\n\n\t\tthis.subject = new Subject();\n\t\tthis.subject.pipe(debounceTime(300), distinctUntilChanged()).subscribe(event => this.handleExtentChange(event));\n\n\t\tthis.dataSource = Observable.create((observer: any) => {\n\n\t\t\tthis.mapService.mbForwardGeocode(this.search).then(response => {\n\t\t\t\tconst match = response.features;\n\n\t\t\t\tthis.service.searchEntites(this.search).then(results => {\n\n\t\t\t\t\t// Add Mapbox results to any local results\n\t\t\t\t\tmatch.forEach(obj => {\n\t\t\t\t\t\tlet newObj = {\n\t\t\t\t\t\t\tid: obj.id,\n\t\t\t\t\t\t\thierarchy: [],\n\t\t\t\t\t\t\tlabel: obj.place_name,\n\t\t\t\t\t\t\tcenter: obj.center,\n\t\t\t\t\t\t\tsource: \"MAPBOX\"\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresults.push(newObj);\n\t\t\t\t\t});\n\n\t\t\t\t\tobserver.next(results);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tngOnInit(): void {\n\t\tthis.admin = this.authService.isAdmin();\n\t\tthis.worker = this.authService.isWorker();\n\t\tthis.userName = this.service.getCurrentUser();\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.map.remove();\n\t}\n\n\tngAfterViewInit() {\n\n\t\tthis.map = new Map({\n\t\t\tcontainer: 'map',\n\t\t\tstyle: 'mapbox://styles/mapbox/outdoors-v11',\n\t\t\tzoom: 2,\n\t\t\tattributionControl: false,\n\t\t\tcenter: [-78.880453, 42.897852]\n\t\t});\n\n\t\tthis.map.on('load', () => {\n\t\t\tthis.initMap();\n\t\t});\n\n\t}\n\n\tinitMap(): void {\n\n\t\tthis.map.on('style.load', () => {\n\t\t\tthis.addLayers();\n\t\t\tthis.refresh(false);\n\t\t});\n\n\t\tthis.addLayers();\n\n\n\t\tthis.refresh(true);\n\n\t\t// Add zoom and rotation controls to the map.\n\t\tthis.map.addControl(new NavigationControl());\n\t\tthis.map.addControl(new AttributionControl({ compact: true }), 'bottom-left');\n\n\t\tthis.map.on('mousemove', e => {\n\t\t\t// e.point is the x, y coordinates of the mousemove event relative\n\t\t\t// to the top-left corner of the map.\n\t\t\t// e.lngLat is the longitude, latitude geographical position of the event\n\t\t\tlet coord = e.lngLat.wrap();\n\n\t\t\t// EPSG:3857 = WGS 84 / Pseudo-Mercator\n\t\t\t// EPSG:4326 = WGS 84 \n\t\t\t// let coord4326 = window.proj4(window.proj4.defs('EPSG:3857'), window.proj4.defs('EPSG:4326'), [coord.lng, coord.lat]);\n\t\t\t// let text = \"Long: \" + coord4326[0] + \" Lat: \" + coord4326[1];\n\n\t\t\tlet text = \"Lat: \" + coord.lat + \" Long: \" + coord.lng;\n\t\t\tlet mousemovePanel = document.getElementById(\"mousemove-panel\");\n\t\t\tmousemovePanel.textContent = text;\n\n\n\t\t\tlet features = this.map.queryRenderedFeatures(e.point, { layers: ['points'] });\n\n\t\t\tif (this.current == null) {\n\t\t\t\tif (features.length > 0) {\n\t\t\t\t\tlet focusFeatureId = features[0].properties.oid; // just the first\n\t\t\t\t\tthis.map.setFilter('hover-points', ['all',\n\t\t\t\t\t\t['==', 'oid', focusFeatureId]\n\t\t\t\t\t])\n\n\t\t\t\t\tthis.highlightListItem(focusFeatureId)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.map.setFilter('hover-points', ['all',\n\t\t\t\t\t\t['==', 'oid', \"NONE\"]\n\t\t\t\t\t])\n\n\t\t\t\t\tthis.clearHighlightListItem();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.map.on('zoomend', (e) => {\n\t\t\tthis.subject.next(e);\n\t\t});\n\n\t\tthis.map.on('moveend', (e) => {\n\t\t\tthis.subject.next(e);\n\t\t});\n\n\t\t// MapboxGL doesn't have a good way to detect when moving off the map\n\t\tlet sidebar = document.getElementById(\"navigator-left-sidebar\");\n\t\tsidebar.addEventListener(\"mouseenter\", function() {\n\t\t\tlet mousemovePanel = document.getElementById(\"mousemove-panel\");\n\t\t\tmousemovePanel.textContent = \"\";\n\t\t});\n\t}\n\n\taddLayers(): void {\n\n\t\tthis.map.addSource('sites', {\n\t\t\ttype: 'geojson',\n\t\t\tdata: {\n\t\t\t\t\"type\": \"FeatureCollection\",\n\t\t\t\t\"features\": []\n\t\t\t}\n\t\t});\n\n\n\t\t// Point layer\n\t\tthis.map.addLayer({\n\t\t\t\"id\": \"points\",\n\t\t\t\"type\": \"circle\",\n\t\t\t\"source\": 'sites',\n\t\t\t\"paint\": {\n\t\t\t\t\"circle-radius\": 10,\n\t\t\t\t\"circle-color\": '#800000',\n\t\t\t\t\"circle-stroke-width\": 2,\n\t\t\t\t\"circle-stroke-color\": '#FFFFFF'\n\t\t\t}\n\t\t});\n\n\t\t// Hover style\n\t\tthis.map.addLayer({\n\t\t\t\"id\": \"hover-points\",\n\t\t\t\"type\": \"circle\",\n\t\t\t\"source\": 'sites',\n\t\t\t\"paint\": {\n\t\t\t\t\"circle-radius\": 13,\n\t\t\t\t\"circle-color\": '#cf0000',\n\t\t\t\t\"circle-stroke-width\": 2,\n\t\t\t\t\"circle-stroke-color\": '#FFFFFF'\n\t\t\t},\n\t\t\tfilter: ['all',\n\t\t\t\t['==', 'id', 'NONE'] // start with a filter that doesn't select anything\n\t\t\t]\n\t\t});\n\n\n\t\t// Label layer\n\t\tthis.map.addLayer({\n\t\t\t\"id\": \"points-label\",\n\t\t\t\"source\": 'sites',\n\t\t\t\"type\": \"symbol\",\n\t\t\t\"paint\": {\n\t\t\t\t\"text-color\": \"black\",\n\t\t\t\t\"text-halo-color\": \"#fff\",\n\t\t\t\t\"text-halo-width\": 2\n\t\t\t},\n\t\t\t\"layout\": {\n\t\t\t\t\"text-field\": \"{name}\",\n\t\t\t\t\"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\n\t\t\t\t\"text-offset\": [0, 0.6],\n\t\t\t\t\"text-anchor\": \"top\",\n\t\t\t\t\"text-size\": 12,\n\t\t\t}\n\t\t});\n        \n\t\tthis.layers.forEach(layer => {\n\t\t\tthis.addImageLayer(layer.workspace, layer.mapKey);\n\t\t});\n\t}\n\n\thandleExtentChange(e: MapboxEvent<MouseEvent | TouchEvent | WheelEvent>): void {\n\t\tif (this.current == null) {\n\t\t\tconst bounds = this.map.getBounds();\n\n\t\t\t// Sometimes bounds aren't valid for 4326, so validate it before sending to server\n\t\t\tif (this.isValidBounds(bounds)) {\n\t\t\t\tthis.service.roots(null, bounds).then(nodes => {\n\t\t\t\t\tthis.nodes = nodes;\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// console.log(\"Invalid bounds\", bounds);\n\t\t\t}\n\t\t}\n\t}\n\n\tisValidBounds(bounds: LngLatBounds): boolean {\n\n\t\tconst ne = bounds.getNorthEast();\n\t\tconst sw = bounds.getSouthWest();\n\n\t\tif (Math.abs(ne.lng) > 180 || Math.abs(sw.lng) > 180) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (Math.abs(ne.lat) > 90 || Math.abs(sw.lat) > 90) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\trefresh(zoom: boolean): void {\n\t\tthis.mapService.features().then(data => {\n\t\t\t(<any>this.map.getSource('sites')).setData(data.features);\n\n\t\t\tif (zoom) {\n\t\t\t\tlet bounds = new LngLatBounds([data.bbox[0], data.bbox[1]], [data.bbox[2], data.bbox[3]]);\n\n\t\t\t\tthis.map.fitBounds(bounds, { padding: 50 });\n\t\t\t}\n\t\t});\n\t}\n\n\tisData(node: any): boolean {\n\n\t\tif (node.data.type === \"Site\") {\n\t\t\treturn false;\n\t\t}\n\t\telse if (node.data.type === \"Project\") {\n\t\t\treturn false;\n\t\t}\n\t\telse if (node.data.type === \"Mission\") {\n\t\t\treturn false;\n\t\t}\n\t\telse if (node.data.type === \"Collection\") {\n\t\t\treturn false;\n\t\t}\n\t\telse if (node.data.type === \"Imagery\") {\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\thandleOnUpdateData(): void {\n\t\t//        this.tree.treeModel.expandAll();\n\t}\n\n\n\thandleUploadFile(): void {\n\n\t\tthis.bsModalRef = this.modalService.show(UploadModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\t\tthis.bsModalRef.content.init(this.breadcrumbs);\n\n\t\tthis.bsModalRef.content.onUploadComplete.subscribe(node => {\n\t\t\tthis.service.getItems(this.current.id, null).then(nodes => {\n\t\t\t\tthis.setNodes(nodes);\n\t\t\t});\n\t\t});\n\n\t\t//        this.bsModalRef.content.onHierarchyChange.subscribe( () => {\n\t\t//            const metadata = this.metadataService.getMetadata( item );\n\t\t//\n\t\t//            if ( metadata.expandable ) {\n\t\t////                if ( node.children == null || node.children.length == 0 ) {\n\t\t////                    this.service.getItems( node.id, null ).then( nodes => {\n\t\t////                        node.children = nodes;\n\t\t////\n\t\t////                        this.expand( node );\n\t\t////                    } );\n\t\t////                }\n\t\t////                else {\n\t\t////                    this.expand( node );\n\t\t////                }\n\t\t//            }\n\t\t//            else {\n\t\t//                this.service.getItems( item.id, null ).then( nodes => {\n\t\t//                    this.setNodes( nodes );\n\t\t//                } );\n\t\t//            }\n\t\t//\n\t\t//        } );\n\t}\n\n\n\thandleCreate(parent: SiteEntity, type: string): void {\n\t\tlet parentId = parent != null ? parent.id : null;\n\n\t\tthis.service.newChild(parentId, type).then(data => {\n\t\t\tthis.bsModalRef = this.modalService.show(EntityModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t\t'class': 'upload-modal'\n\t\t\t});\n\t\t\tthis.bsModalRef.content.init(true, this.userName, this.admin, data.item, data.attributes, this.map.getCenter(), this.map.getZoom());\n\n\n\t\t\tif (parent != null) {\n\t\t\t\tthis.bsModalRef.content.parentId = parent.id;\n\t\t\t}\n\n\t\t\tthis.bsModalRef.content.onNodeChange.subscribe(entity => {\n\n\t\t\t\tif (parent != null) {\n\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (this.breadcrumbs.length == 0) {\n\t\t\t\t\t\tthis.nodes.push(entity);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.refresh(false);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tzoomToFeature(node: SiteEntity): void {\n\t\tif (node.geometry != null) {\n\t\t\tthis.map.flyTo({\n\t\t\t\tcenter: node.geometry.coordinates\n\t\t\t});\n\t\t}\n\t}\n\n\thandleEdit(node: SiteEntity, event: any): void {\n\n\t\tevent.stopPropagation();\n\n\t\tthis.service.edit(node.id).then(data => {\n\t\t\tthis.bsModalRef = this.modalService.show(EntityModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t\t'class': 'edit-modal'\n\t\t\t});\n\t\t\tthis.bsModalRef.content.init(false, this.userName, this.admin, data.item, data.attributes, this.map.getCenter(), this.map.getZoom());\n\n\t\t\tthis.bsModalRef.content.onNodeChange.subscribe(entity => {\n\t\t\t\t// Update the node\n\t\t\t\tentity.children = node.children;\n\t\t\t\tentity.active = node.active;\n\n\t\t\t\tthis.refreshEntity(entity, this.nodes);\n\t\t\t\tthis.refreshEntity(entity, this.breadcrumbs);\n\n\t\t\t\tthis.nodes.forEach(node => {\n\t\t\t\t\tthis.refreshEntity(entity, node.children);\n\t\t\t\t});\n\n\t\t\t\tif (this.metadataService.getMetadata(entity).root) {\n\t\t\t\t\tthis.refresh(false);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\trefreshEntity(node: SiteEntity, nodes: SiteEntity[]): void {\n\n\t\tif (nodes != null) {\n\t\t\tlet indexOf = nodes.findIndex(i => i.id === node.id);\n\n\t\t\tif (indexOf !== -1) {\n\t\t\t\tnodes[indexOf] = node;\n\t\t\t}\n\t\t}\n\t}\n\n\thandleDownloadAll(node: SiteEntity): void {\n\n\t\twindow.location.href = acp + '/project/download-all?id=' + node.component + \"&key=\" + node.name;\n\n\t\t//      this.service.downloadAll( data.id ).then( data => {\n\t\t//        \n\t\t//      } ).catch(( err: HttpErrorResponse ) => {\n\t\t//          this.error( err );\n\t\t//      } );\n\t}\n\n\thandleDelete(node: SiteEntity, event: any): void {\n\n\t\tevent.stopPropagation();\n\n\t\tthis.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = 'Are you sure you want to delete [' + node.name + ']?';\n\t\tthis.bsModalRef.content.data = node;\n\t\tthis.bsModalRef.content.type = 'DANGER';\n\t\tthis.bsModalRef.content.submitText = 'Delete';\n\n\t\t(<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n\t\t\tthis.remove(data);\n\t\t});\n\t}\n\n\tremove(node: SiteEntity): void {\n\t\tthis.service.remove(node.id).then(() => {\n\t\t\tthis.nodes = this.nodes.filter((n: any) => n.id !== node.id);\n\n\t\t\tthis.nodes.forEach(n => {\n\t\t\t\tif (n.children != null) {\n\t\t\t\t\tn.children = n.children.filter((child: any) => child.id !== node.id);\n\n\t\t\t\t\tn.numberOfChildren = n.children.length;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (node.type === 'Site') {\n\t\t\t\tthis.refresh(false);\n\t\t\t}\n\t\t});\n\t}\n\n\n\thandleDownload(node: SiteEntity): void {\n\t\twindow.location.href = acp + '/project/download?id=' + node.component + \"&key=\" + node.key;\n\n\t\t//this.service.download( node.data.component, node.data.key, true ).subscribe( blob => {\n\t\t//    importedSaveAs( blob, node.data.name );\n\t\t//} );\n\t}\n\n\thandleImageDownload(image: any): void {\n\t\twindow.location.href = acp + '/project/download?id=' + image.component + \"&key=\" + image.key;\n\n\t\t//this.service.download( node.data.component, node.data.key, true ).subscribe( blob => {\n\t\t//    importedSaveAs( blob, node.data.name );\n\t\t//} );\n\t}\n\n\thandleStyle(layer: any): void {\n\n\t\tthis.baseLayers.forEach(baseLayer => {\n\t\t\tbaseLayer.selected = false;\n\t\t});\n\n\t\tlayer.selected = true;\n\n\t\tthis.map.setStyle('mapbox://styles/mapbox/' + layer.id);\n\t}\n\n\thighlightMapFeature(id: string): void {\n\n\t\tthis.map.setFilter('hover-points', ['all',\n\t\t\t['==', 'oid', id]\n\t\t])\n\n\t}\n\n\tclearHighlightMapFeature(): void {\n\n\t\tthis.map.setFilter('hover-points', ['all',\n\t\t\t['==', 'oid', \"NONE\"]\n\t\t])\n\n\t}\n\n\tonListEntityHover(event: any, site: SiteEntity): void {\n\t\tif (this.current == null) {\n\t\t\tthis.highlightMapFeature(site.id);\n\t\t}\n\t}\n\n\tonListEntityHoverOff(): void {\n\t\tthis.clearHighlightMapFeature();\n\t}\n\n\thighlightListItem(id: string): void {\n\t\tthis.nodes.forEach(node => {\n\t\t\tif (node.id === id) {\n\t\t\t\tthis.hoverFeatureId = id;\n\t\t\t}\n\t\t})\n\t}\n\n\tclearHighlightListItem(): void {\n\t\tif (this.hoverFeatureId) {\n\t\t\tthis.nodes.forEach(node => {\n\t\t\t\tif (node.id === this.hoverFeatureId) {\n\t\t\t\t\tthis.hoverFeatureId = null;\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\n\thandleClick($event: any): void {\n\t\tlet result = $event.item;\n\n\t\tif (result.center) {\n\t\t\tthis.map.flyTo({\n\t\t\t\tcenter: result.center,\n\t\t\t\tzoom: 18\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tconst index = result.hierarchy.length - 1;\n\n\t\t\tconst selected = result.hierarchy[index];\n\n\t\t\tthis.service.view(selected.id).then(response => {\n\t\t\t\tconst node = response.item;\n\t\t\t\tconst breadcrumbs = response.breadcrumbs;\n\n\t\t\t\tif (this.getMetadata(node).leaf) {\n\t\t\t\t\tthis.breadcrumbs = breadcrumbs;\n\t\t\t\t\tthis.current = breadcrumbs[breadcrumbs.length - 1];\n\t\t\t\t\tthis.nodes = this.current.children;\n\n\t\t\t\t\tthis.select(node, null, null);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst parent = breadcrumbs.length > 0 ? breadcrumbs[breadcrumbs.length - 1] : null;\n\t\t\t\t\tthis.breadcrumbs = breadcrumbs;\n\n\t\t\t\t\tthis.select(node, parent, null);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\thandleMapImage(product: Product): void {\n\n\t\tconst mapKey = product.mapKey;\n\n\t\tif (mapKey != null) {\n\t\t\tif (this.map.getLayer(mapKey) != null) {\n\t\t\t\tthis.map.removeLayer(mapKey);\n\t\t\t\tthis.map.removeSource(mapKey);\n\n\t\t\t\tvar index = this.layers.findIndex(layer => layer.mapKey === mapKey);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tthis.layers.splice(index, 1);\n\t\t\t\t}\n\n\t\t\t\tproduct.orthoMapped = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.addImageLayer(product.workspace, mapKey);\n\n\t\t\t\tthis.layers.push({workspace: product.workspace, mapKey: mapKey});\n\n\t\t\t\tproduct.orthoMapped = true;\n\n\t\t\t\tif (product.boundingBox != null) {\n\t\t\t\t\tlet bbox = product.boundingBox;\n\n\t\t\t\t\tlet bounds = new LngLatBounds([bbox[0], bbox[2]], [bbox[1], bbox[3]]);\n\n\t\t\t\t\tthis.map.fitBounds(bounds, { padding: 50 });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\taddImageLayer(wkspace:string, imageKey: string) {\n\t\tconst workspace = encodeURI(wkspace);\n\t\tconst layerName = encodeURI(workspace + ':' + imageKey);\n\n\t\tthis.map.addLayer({\n\t\t\t'id': imageKey,\n\t\t\t'type': 'raster',\n\t\t\t'source': {\n\t\t\t\t'type': 'raster',\n\t\t\t\t'tiles': [\n\t\t\t\t\t'/geoserver/' + workspace + '/wms?layers=' + layerName + '&bbox={bbox-epsg-3857}&format=image/png&service=WMS&version=1.1.1&request=GetMap&srs=EPSG:3857&transparent=true&width=256&height=256'\n\t\t\t\t],\n\t\t\t\t'tileSize': 256\n\t\t\t},\n\t\t\t'paint': {}\n\t\t}, \"points\");\n\t}\n\n\thandleGoto(): void {\n\n\t\t//    -111.12439336274211\n\t\t//    39.32066259372583\n\t\t//    -111.12342302258116\n\t\t// 39.32107716199166\n\n\t\tvar bounds = new LngLatBounds([-111.12439336274211, 39.32066259372583, -111.12342302258116, 39.32107716199166]);\n\n\t\tthis.map.fitBounds(bounds);\n\t}\n\n\n\tgetMetadata(node: SiteEntity): any {\n\t\tconst metadata = this.metadataService.getMetadata(node);\n\n\t\treturn metadata;\n\t}\n\n\n\tselect(node: SiteEntity, parent: SiteEntity, event: any): void {\n\n\t\tif (event != null) {\n\t\t\tevent.stopPropagation();\n\t\t}\n\n\t\tconst metadata = this.metadataService.getMetadata(node);\n\n\t\tif (metadata.leaf) {\n\t\t\tconst breadcrumbs = [...this.breadcrumbs];\n\n\t\t\tif (parent != null) {\n\t\t\t\tbreadcrumbs.push(parent);\n\t\t\t}\n\n\t\t\tif (this.metadataService.getTypeContainsFolders(node)) {\n\t\t\t\tthis.service.getItems(node.id, null).then(nodes => {\n\t\t\t\t\tthis.showLeafModal(node, nodes, breadcrumbs);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.showLeafModal(this.current, [node], breadcrumbs);\n\t\t\t}\n\t\t}\n\t\telse if (node.type === \"object\") {\n\t\t\t// Do nothing there are no children\n\t\t\t//                return this.service.getItems( node.data.id, node.data.name );\n\t\t}\n\t\telse {\n\t\t\tthis.service.getItems(node.id, null).then(nodes => {\n\t\t\t\tthis.current = node;\n\n\t\t\t\tif (parent != null) {\n\t\t\t\t\tthis.addBreadcrumb(parent);\n\t\t\t\t}\n\n\t\t\t\tthis.addBreadcrumb(node);\n\t\t\t\tthis.setNodes(nodes);\n\t\t\t});\n\t\t}\n\t}\n\n\taddBreadcrumb(node: SiteEntity): void {\n\n\t\tif (this.breadcrumbs.length == 0 || this.breadcrumbs[this.breadcrumbs.length - 1].id !== node.id) {\n\t\t\tthis.breadcrumbs.push(node);\n\t\t}\n\t}\n\n\thandleExpand(node: SiteEntity, event: any): void {\n\n\t\tif (event != null) {\n\t\t\tevent.stopPropagation();\n\t\t}\n\n\t\tif (node.children == null || node.children.length == 0) {\n\t\t\tthis.service.getItems(node.id, null).then(nodes => {\n\t\t\t\tnode.children = nodes;\n\n\t\t\t\tthis.expand(node);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\t// this.expand( node );\n\t\t\tnode.children = [];\n\t\t\tnode.active = false;\n\t\t}\n\t}\n\n\thandleGotoSite(product: Product): void {\n\t\tconst entity = product.entities[product.entities.length - 1];\n\n\t\tconst breadcrumbs = product.entities;\n\n\t\tthis.service.getItems(entity.id, null).then(nodes => {\n\t\t\tthis.showLeafModal(entity, nodes, breadcrumbs);\n\t\t});\n\t}\n\n\n\tback(node: SiteEntity): void {\n\n\t\tif (node != null) {\n\t\t\tthis.service.getItems(node.id, null).then(nodes => {\n\t\t\t\tvar indexOf = this.breadcrumbs.findIndex(i => i.id === node.id);\n\n\t\t\t\tthis.current = node;\n\t\t\t\tthis.breadcrumbs.splice(indexOf + 1);\n\t\t\t\tthis.setNodes(nodes);\n\t\t\t});\n\t\t}\n\t\telse if (this.breadcrumbs.length > 0) {\n\t\t\tthis.service.roots(null, this.map.getBounds()).then(nodes => {\n\t\t\t\tthis.current = null;\n\t\t\t\tthis.breadcrumbs = [];\n\t\t\t\tthis.setNodes(nodes);\n\t\t\t\tthis.staticTabs.tabs[0].active = true;\n\t\t\t});\n\t\t}\n\t}\n\n\texpand(node: SiteEntity) {\n\t\tnode.active = true;\n\t\tthis.current = node;\n\t}\n\n\tsetNodes(nodes: SiteEntity[]): void {\n\t\tthis.nodes = [];\n\t\tthis.supportingData = [];\n\n\t\tnodes.forEach(node => {\n\t\t\tif (node.type === 'folder') {\n\t\t\t\tthis.supportingData.push(node);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.nodes.push(node);\n\t\t\t}\n\t\t})\n\t}\n\n\tshowLeafModal(collection: SiteEntity, folders: SiteEntity[], breadcrumbs: SiteEntity[]): void {\n\n\t\tif (collection.type === 'Mission') {\n\t\t\tthis.bsModalRef = this.modalService.show(AccessibleSupportModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t\tclass: 'leaf-modal'\n\t\t\t});\n\t\t\tthis.bsModalRef.content.init(collection, folders, breadcrumbs);\n\t\t}\n\t\telse {\n\t\t\tthis.bsModalRef = this.modalService.show(LeafModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t\tclass: 'leaf-modal'\n\t\t\t});\n\t\t\tthis.bsModalRef.content.init(collection, folders, breadcrumbs);\n\t\t}\n\t}\n\n\n\n\t//    /*\n\t//     *  Context menu visibility functions\n\t//     */\n\t//    public canEdit = ( item: any ): boolean => {\n\t//        if ( this.admin ) {\n\t//            return true;\n\t//        }\n\t//        else if ( this.worker ) {\n\t//            return ( item.data.type === \"Mission\" || item.data.type === \"Collection\" );\n\t//        }\n\t//\n\t//        return false;\n\t//    }\n\t//\n\t//    public canRunOrtho = ( item: any ): boolean => {\n\t//        if ( item.data == null || item.data.type !== \"Collection\" ) {\n\t//            return false;\n\t//        }\n\t//\n\t//        return true;\n\t//\n\t//        // TODO : If we don't have raw images uploaded then they can't run ortho\n\t//\n\t//        // TODO : Different roles?\n\t//        //      if ( this.admin ) {\n\t//        //        return true;\n\t//        //      }\n\t//        //\n\t//        //      return false;\n\t//    }\n\t//\n\t//    public canDelete = ( item: any ): boolean => {\n\t//        if ( this.admin ) {\n\t//            return true;\n\t//        }\n\t//\n\t//        return false;\n\t//    }\n\t//\n\t//    public canAddChild = ( item: any ): boolean => {\n\t//        if ( this.admin && item.data.type !== \"Collection\" && item.data.type !== \"Imagery\" ) {\n\t//            return true;\n\t//        }\n\t//        else if ( this.worker && ( item.data.type === \"Project\" || item.data.type === \"Mission\" ) ) {\n\t//            return true;\n\t//        }\n\t//\n\t//        return false;\n\t//    }\n\t//\n\t//    public canCreateImageDir( item: any ): boolean {\n\t//        if ( gpAppType && gpAppType.toLowerCase() === 'nps' && item.data.type === 'Project' ) {\n\t//            return true;\n\t//        }\n\t//    }\n\t//\n\t//    public canEditSite = ( item: any ): boolean => {\n\t//        return item.data.type === \"Site\" && this.canEdit( item );\n\t//    }\n\t//\n\t//    public hasMapImage = ( item: any ): boolean => {\n\t//        return ( item.data.imageKey != null );\n\t//    }\n\t//\n\t//    public isSite = ( item: any ): boolean => {\n\t//        return item.data.type === \"Site\";\n\t//    }\n\t//\n\t//    public isImageDir = ( item: any ): boolean => {\n\t//        return item.data.type === \"Imagery\";\n\t//    }\n\t//\n\t//    public isCollection = ( item: any ): boolean => {\n\t//        return item.data.type === \"Collection\";\n\t//    }\n\t//\n\t//    public canUpload = ( item: any ): boolean => {\n\t//        // Only allow direct uploads on Imagery child nodes\n\t//        if ( gpAppType && gpAppType.toLowerCase() === 'nps' && item.parent.data.type !== \"Collection\" ) {\n\t//            if ( item.data.name === \"raw\" ) {\n\t//                return true;\n\t//            }\n\t//            else if ( item.data.name === \"georef\" ) {\n\t//                return true;\n\t//            }\n\t//            else if ( item.data.name === \"ortho\" ) {\n\t//                return true;\n\t//            }\n\t//            // else if(item.data.type === \"Collection\"){\n\t//            //     return true;\n\t//            // }\n\t//            // else if(item.data.type === \"Imagery\"){\n\t//            //     return true;\n\t//            // }\n\t//        }\n\t//\n\t//        return false;\n\t//    }\n}\n","<uasdm-header [title]=\"'Data Upload'\"></uasdm-header>\n\n<div id=\"app-container\" class=\"container\">\n    <div *ngIf=\"sites.length === 0\" class=\"row\">\n        <div class=\"col-md-2\"></div>\n        <div class=\"col-md-8\">\n            <h4 style=\"margin-top: 50px;\">\n                There are no Sites added to the system. Add a Site, Project, Mission, and Collection using the \n                <a routerlink=\"/viewer\" routerlinkactive=\"active\" href=\"#/viewer\">Site Viewer</a> \n                before uploading data to.\n            </h4>\n        </div>\n        <div class=\"col-md-2\"></div>\n    </div>\n    <div *ngIf=\"sites.length > 0\" class=\"row\">\n        <div class=\"col-md-2\"></div>\n        <div class=\"col-md-8\">\n            <form #ngForm=\"ngForm\">\n\n                <!-- Existing task panel -->\n                <div class=\"\" *ngIf=\"existingTask && !currentTask\">\n                    <div class=\"panel panel-warning\" style=\"margin: 30px 0 30px 0;\">\n                        <div class=\"panel-heading\" style=\"font-size: 20px;\">Partial Upload Detected</div>\n                        <div class=\"panel-body\">\n                            <h4>A partial upload was detected. You can either cancel that partial upload or attempt to\n                                continue.</h4>\n                            <h4>\n                                <b>To continue an upload</b>\n                                please click the Continue Upload button and re-upload your file and we will try our best\n                                to continue where you left off.\n                            </h4>\n\n                            <hr>\n                            <button type=\"button\" class=\"btn btn-danger\" style=\"margin-top: 20px;\"\n                                (click)=\"removeUpload($event)\">\n                                <i class=\"icon-upload icon-white\"></i>\n                                Cancel Upload\n                            </button>\n                            <button type=\"button\" class=\"btn btn-primary\" style=\"margin-top: 20px;\"\n                                (click)=\"showUploadPanel()\">\n                                <i class=\"icon-upload icon-white\"></i>\n                                Continue Upload\n                            </button>\n                        </div>\n                    </div>\n                </div> <!-- End existing task panel -->\n\n                <!-- Task finished upload notification -->\n                <div *ngFor=\"let note of taskFinishedNotifications\" class=\"panel panel-success\" style=\"margin: 30px 0 30px 0;\">\n                    <div class=\"panel-heading\" style=\"font-size: 20px;\">\n                        Upload Details\n                        <i class=\"fa fa-times btn btn-close pull-right\" style=\"min-width:20px;padding:0;line-height: 27px;\" (click)=\"closeTaskFinishedNotification(note.id)\"></i>\n                    </div>\n                    <div class=\"panel-body\">\n                        <h4>\n                            Status:\n                            <b> Upload successfully completed </b>\n                        </h4>\n                        <h4>\n                            Message:\n                            <b> Your uploaded data is being processed into final image products. </b>\n                        </h4>\n                    </div>\n                </div> <!-- End task finished upload notification -->\n\n                <div style=\"margin-top: 30px;\" class=\"\" *ngIf=\"!disabled && !existingTask\">\n                    <div class=\"form-group\">\n                        <label for=\"site\">Site:</label>\n                        <select name=\"site\" (change)=\"onSiteSelect($event.target.value)\" [(ngModel)]=\"values.site\"\n                            required>\n                            <option></option>\n                            <option *ngFor=\"let site of sites\" [value]=\"site.id\">{{site.name}}</option>\n                        </select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"project\">Project:</label>\n                        <select name=\"project\" [attr.disabled]=\"values.site == null ? '' : null\"\n                            (change)=\"onProjectSelect($event.target.value)\" [(ngModel)]=\"values.project\" required>\n                            <option></option>\n                            <option *ngFor=\"let project of projects\" [value]=\"project.id\">{{project.name}}</option>\n                        </select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"mission\">Mission:</label>\n                        <select name=\"mission\" [attr.disabled]=\"values.project == null ? '' : null\"\n                            (change)=\"onMissionSelect($event.target.value)\" [(ngModel)]=\"values.mission\" required>\n                            <option></option>\n                            <option *ngFor=\"let mission of missions\" [value]=\"mission.id\">{{mission.name}}</option>\n                        </select>\n                    </div>\n                    <!-- \n                            <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input type=\"radio\" class=\"form-check-input\" name=\"radioopt\" [(ngModel)]=\"values.create\" [value]=\"true\" (change)=\"handleChange()\" [checked]=\"values.create==true\" />\n                                Create new collection\n                            </label>\n                            </div>\n                            <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input type=\"radio\" class=\"form-check-input\" name=\"radioopt\" value=\"false\" [(ngModel)]=\"values.create\" (change)=\"handleChange()\" [value]=\"false\" [checked]=\"values.create==false\" />\n                                Add to existing collection\n                            </label>\n                            </div>\n                            <div class=\"form-group\" *ngIf=\"values.create === true\">\n                            <label for=\"nameInput\">Name</label>\n                            <input [(ngModel)]=\"values.name\" name=\"name\" type=\"input\" class=\"form-control\" id=\"nameInput\" placeholder=\"Name\" #nameField=\"ngModel\" required forbiddenName>\n                            <div class=\"error-container\" *ngIf=\"nameField.errors && nameField.errors.forbiddenName\">\n                                Invalid name. No spaces or special characters such as <, >, -, +, =, !, @, #, $, %, ^, &, *, ?,/, \\ or apostrophes are allowed.        \n                            </div>\n                            </div>\n                    -->\n                    <div class=\"form-group\">\n                        <label for=\"collection\">Collection:</label>\n                        <select name=\"collection\" [attr.disabled]=\"values.mission == null ? '' : null\"\n                            (change)=\"onCollectionSelect($event.target.value)\" [(ngModel)]=\"values.collection\" required>\n                            <option></option>\n                            <option *ngFor=\"let collection of collections\" [value]=\"collection.id\">{{collection.name}}\n                            </option>\n                        </select>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"outFileName\">Output Product Name Prefix</label>\n                        <input [(ngModel)]=\"values.outFileName\" name=\"outFileName\" type=\"input\" class=\"form-control\" placeholder=\"Output product name prefix...\" />\n                    </div>\n                </div>\n\n                <!-- Current upload indicator -->\n                <div class=\"\" [hidden]=\"!uploadVisible\">\n                    <div *ngIf=\"currentTask\" class=\"panel panel-warning\" style=\"margin: 30px 0 30px 0;\">\n                        <div class=\"panel-heading\" style=\"font-size: 20px;\">Upload Details</div>\n                        <div class=\"panel-body\">\n                            <h4>\n                                Status:\n                                <b> {{currentTask.status}} </b>\n                            </h4>\n                            <h4>\n                                Message:\n                                <b> {{currentTask.message}} </b>\n                            </h4>\n                            <h4>\n                                Upload Started On:\n                                <b> {{currentTask.createDate}} </b>\n                            </h4>\n                            <h4>\n                                Last Updated:\n                                <b> {{currentTask.lastUpdatedDate}} </b>\n                            </h4>\n                            <h4>\n                                Elapsed Time:\n                                <b> {{uploadCounter}} </b>\n                            </h4>\n                        </div>\n                    </div>\n\n                    <div *ngIf=\"showFileSelectPanel\" class=\"uploader-container\" style=\"margin-top: 20px;\" #uploader></div>\n\n                    <button type=\"button btn btn-primary\" [disabled]=\"!ngForm.valid || disabled\" class=\"btn btn-primary\"\n                        style=\"margin-top: 20px;\" (click)=\"handleUpload()\">\n                        <i class=\"icon-upload icon-white\"></i>\n                        Upload\n                    </button>\n                </div> <!-- End current upload indicator -->\n            </form>\n\n        </div>\n        <div class=\"col-md-2\"></div>\n    </div>\n</div>","import { Component, OnInit, AfterViewInit, Inject, ViewChild, ElementRef, KeyValueDiffers, DoCheck, HostListener } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { interval } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\n//use Fine Uploader UI for traditional endpoints\nimport { FineUploader, UIOptions } from 'fine-uploader';\n\nimport { ErrorModalComponent } from '../../shared/component/modal/error-modal.component';\nimport { BasicConfirmModalComponent } from '../../shared/component/modal/basic-confirm-modal.component';\nimport { SiteEntity, UploadForm, Task } from '../model/management';\nimport { ManagementService } from '../service/management.service';\n\n\ndeclare var acp: string;\n\n@Component( {\n    selector: 'upload',\n    templateUrl: './upload.component.html',\n    styleUrls: []\n} )\nexport class UploadComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n    private bsModalRef: BsModalRef;\n\n    /* \n     * List of sites\n     */\n    sites = [] as SiteEntity[];\n\n    /* \n     * List of projects\n     */\n    projects = [] as SiteEntity[];\n\n    /* \n     * List of missions\n     */\n    missions = [] as SiteEntity[];\n\n    /* \n     * List of collections\n     */\n    collections = [] as SiteEntity[];\n\n    /* \n     * Form values\n     */\n    values = { create: false } as UploadForm;\n\n    /*\n     * FineUploader for uploading large files\n     */\n    uploader = null as FineUploader;\n\n    disabled: boolean = false;\n    taskStatusMessages: string[] = [];\n    currentTask: Task = null;\n    existingTask: boolean = false;\n    taskPolling: any;\n    pollingIsSet: boolean = false;\n    uploadVisible: boolean = true;\n    selectedContinue: boolean = false;\n    uploadCounter: string = \"00:00:00\";\n    uplodeCounterInterfal: any;\n    differ: any;\n    showFileSelectPanel: boolean = false;\n    taskFinishedNotifications: any[] = [];\n\n    constructor( private service: ManagementService, private modalService: BsModalService, differs: KeyValueDiffers ) {\n        this.differ = differs.find( [] ).create();\n    }\n\n    ngDoCheck() {\n\n        if ( this.uploader ) {\n            const change = this.differ.diff( this.uploader );\n            if ( change ) {\n                this.setExistingTask();\n            }\n        }\n    }\n\n    @ViewChild( 'uploader' ) set content( elem: ElementRef ) {\n\n        const that = this;\n\n        if ( elem != null && this.uploader == null ) {\n\n            let uiOptions: UIOptions = {\n                debug: false,\n                autoUpload: false,\n                multiple: false,\n                element: elem.nativeElement,\n                template: 'qq-template',\n                request: {\n                    endpoint: acp + \"/file/upload\",\n                    forceMultipart: true\n                },\n                resume: {\n                    enabled: true,\n                    recordsExpireIn: 1\n                },\n                chunking: {\n                    enabled: true\n                },\n                retry: {\n                    enableAuto: true\n                },\n                text: {\n                    defaultResponseError: \"Upload failed\"\n                },\n                failedUploadTextDisplay: {\n                    mode: 'none'\n                    //responseProperty: 'error'\n                },\n                validation: {\n                    allowedExtensions: ['zip', 'tar.gz']\n                },\n                showMessage: function( message: string ) {\n                    // \n                },\n                callbacks: {\n                    onUpload: function( id: any, name: any ): void {\n                        that.disabled = true;\n\n                        // document.getElementById(\"select-file-button\").className = document.getElementById(\"select-file-button\").className + \" hidden\";\n\n                        that.countUpload( that );\n                    },\n                    onProgress: function( id: any, name: any, uploadedBytes: any, totalBytes: any ): void {\n                    },\n                    onUploadChunk: function( id: any, name: any, chunkData: any ): void {\n                    },\n                    onUploadChunkSuccess: function( id: any, chunkData: any, responseJSON: any, xhr: any ): void {\n\n                        if ( responseJSON.message && responseJSON.message.currentTask && !that.currentTask ) {\n                            that.currentTask = responseJSON.message.currentTask;\n                        }\n\n                        if ( that.currentTask && !that.pollingIsSet ) {\n                            that.pollingIsSet = true;\n\n                            that.taskPolling = interval( 2000 )\n                                .pipe(switchMap(() => {\n                                    if ( that.currentTask ) {\n                                        return that.service.task( that.currentTask.oid );\n                                    }\n                                } ))\n                                .pipe(map(( data ) => data ))\n                                .subscribe(( data ) => {\n                                    that.currentTask = data.task\n                                } );\n                        }\n                    },\n                    onComplete: function( id: any, name: any, responseJSON: any, xhrOrXdr: any ): void {\n                        that.disabled = false;\n                        that.currentTask = null;\n                        that.existingTask = false;\n\n                        if ( that.taskPolling ) {\n                            that.taskPolling.unsubscribe();\n                            that.pollingIsSet = false;\n                        }\n\n                        this.clearStoredFiles();\n\n                        // document.getElementById(\"select-file-button\").classList.remove(\"hidden\");\n\n                        clearInterval( that.uplodeCounterInterfal );\n\n                        that.taskFinishedNotifications.push(\n                            {\n                                'id': id\n                            }\n                        )\n                    },\n                    onCancel: function( id: number, name: string ) {\n                        //that.currentTask = null;\n\n                        if ( that.currentTask && that.currentTask.uploadId ) {\n                            that.service.removeTask( that.currentTask.uploadId )\n                                .then(() => {\n                                    this.clearStoredFiles();\n                                } )\n                                .catch(( err: HttpErrorResponse ) => {\n                                    this.error( err );\n                                } );\n                        }\n\n                        that.disabled = false;\n                        that.currentTask = null;\n                        that.existingTask = false;\n\n                        if ( that.taskPolling ) {\n                            that.taskPolling.unsubscribe();\n                            that.pollingIsSet = false;\n                        }\n\n                        // document.getElementById(\"select-file-button\").classList.remove(\"hidden\");\n\n                        clearInterval( that.uplodeCounterInterfal );\n                    },\n                    onError: function( id: number, errorReason: string, xhrOrXdr: string ) {\n                        that.error( xhrOrXdr );\n                    }\n                }\n            };\n\n            this.uploader = new FineUploader( uiOptions );\n\n        }\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnInit(): void {\n        this.service.roots( null, null ).then( sites => {\n            this.sites = sites;\n        } );\n    }\n\n    closeTaskFinishedNotification( id: string ): void {\n        // iterate in reverse to allow splice while avoiding the reindex\n        // from affecting any of the next items in the array.\n        let i = this.taskFinishedNotifications.length;\n        while ( i-- ) {\n            let note = this.taskFinishedNotifications[i];\n            if ( id === note.id ) {\n                this.taskFinishedNotifications.splice( i, 1 );\n            }\n        }\n    }\n\n\n    setExistingTask(): void {\n        let resumable = this.uploader.getResumableFilesData() as any[];\n        if ( resumable.length > 0 ) {\n            this.existingTask = true;\n\n            if ( !this.selectedContinue ) {\n                this.hideUploadPanel();\n            }\n        }\n    }\n\n    onSiteSelect( siteId: string ): void {\n        this.values.site = siteId;\n\n        if ( siteId != null && siteId.length > 0 ) {\n\n            // Reset select options\n            this.projects = [] as SiteEntity[];\n            this.missions = [] as SiteEntity[];\n            this.collections = [] as SiteEntity[];\n\n            // Reset form values\n            this.values.project = null;\n            this.values.mission = null;\n            this.values.collection = null;\n\n            this.service.getChildren( this.values.site ).then( projects => {\n                this.projects = projects;\n            } );\n        }\n\n        //console.log( this.values );\n    }\n\n    onProjectSelect( projectId: string ): void {\n        this.values.project = projectId;\n\n        // Reset select options\n        this.missions = [] as SiteEntity[];\n        this.collections = [] as SiteEntity[];\n\n        // Reset form values\n        this.values.mission = null;\n        this.values.collection = null;\n\n        if ( projectId != null && projectId.length > 0 ) {\n            this.service.getChildren( this.values.project ).then( missions => {\n                this.missions = missions.filter( mission => {\n                    return mission.type === 'Mission';\n                } );\n            } );\n        }\n    }\n\n    onMissionSelect( missionId: string ): void {\n        this.values.mission = missionId;\n\n        // Reset select options\n        this.collections = [] as SiteEntity[];\n\n        // Reset form values\n        this.values.collection = null;\n        this.values.name = null;\n\n        if ( missionId != null && missionId.length > 0 && !this.values.create ) {\n\n            this.service.getChildren( this.values.mission ).then( collections => {\n                this.collections = collections;\n            } );\n        }\n    }\n\n    handleChange(): void {\n\n        // Reset select options\n        this.collections = [] as SiteEntity[];\n\n        // Reset form values\n        this.values.collection = null;\n        this.values.name = null;\n\n        if ( this.values.mission != null && this.values.mission.length > 0 && !this.values.create ) {\n\n            this.service.getChildren( this.values.mission ).then( collections => {\n                this.collections = collections;\n            } );\n        }\n    }\n\n    onCollectionSelect( collectionId: string ): void {\n        this.values.collection = collectionId;\n        this.values.uasComponentOid = collectionId;\n\n        if ( collectionId && collectionId.trim().length > 0 ) {\n            this.showFileSelectPanel = true;\n        }\n        else {\n            this.showFileSelectPanel = false\n        }\n    }\n\n    handleUpload(): void {\n\n        /*\n         * Validate form values before uploading\n         */\n        if ( !this.values.create && this.values.collection == null && !this.existingTask ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = \"A collection must first be selected before the file can be uploaded\";\n        }\n        else if ( this.values.create && ( this.values.mission == null || this.values.name == null || this.values.name.length == 0 ) && !this.existingTask ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = \"Name is required\";\n        }\n        else {\n            this.uploader.setParams( this.values );\n            this.uploader.uploadStoredFiles();\n        }\n\n    }\n\n    removeUpload( event: any ): void {\n        let that = this;\n\n        this.bsModalRef = this.modalService.show( BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = 'Are you sure you want to cancel the upload of [' + this.uploader.getResumableFilesData()[0].name + ']';\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = 'Cancel Upload';\n\n        ( <BasicConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.service.removeTask( this.uploader.getResumableFilesData()[0].uuid )\n                .then(() => {\n                    //that.uploader.clearStoredFiles();\n                    //that.uploader.cancelAll()\n\n                    // The above clearStoredFiles() and cancelAll() methods don't appear to work so \n                    // we are clearing localStorage manually.\n                    localStorage.clear();\n                    that.existingTask = false;\n                    that.showUploadPanel();\n\n                } );\n        } );\n    }\n\n    hideUploadPanel(): void {\n        this.uploadVisible = false;\n    }\n\n    showUploadPanel(): void {\n        this.uploadVisible = true;\n        this.selectedContinue = true;\n    }\n\n    countUpload( thisRef: any ): void {\n        let ct = 0;\n\n\n        function incrementSeconds() {\n            ct += 1;\n\n            let hours = Math.floor( ct / 3600 )\n            let minutes = Math.floor(( ct % 3600 ) / 60 );\n            let seconds = Math.floor( ct % 60 );\n\n            let hoursStr = minutes < 10 ? \"0\" + hours : hours;\n            let minutesStr = minutes < 10 ? \"0\" + minutes : minutes;\n            let secondsStr = seconds < 10 ? \"0\" + seconds : seconds;\n\n            thisRef.uploadCounter = hoursStr + \":\" + minutesStr + \":\" + secondsStr;\n        }\n\n        thisRef.uplodeCounterInterfal = setInterval( incrementSeconds, 1000 );\n    }\n\n    public canDeactivate(): boolean {\n        return this.disabled;\n    }\n\n    @HostListener( 'window:beforeunload', ['$event'] )\n    unloadNotification( $event: any ) {\n        if ( this.disabled ) {\n            $event.returnValue = 'An upload is currently in progress. Are you sure you want to leave?';\n        }\n    }\n\n    error( message: string ): void {\n        if ( message !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = message;\n        }\n    }\n}\n","<div class=\"panel-group\">\n  <div class=\"panel panel-default\" style=\"background: none;border: none;\">\n    <div class=\"panel-heading panel-heading-light clickable\" style=\"margin-top: 20px;\">\n      <h4 class=\"panel-title\">\n        <a data-toggle=\"collapse\" (click)=\"showProcess = !showProcess\" attr.aria-controls=\"task-group-panel-{{groupTypeId}}\">\n          <h4>{{taskCategory}}</h4>\n        </a>\n      </h4>\n      <span class=\"heading-status-label pull-right\">Current status: <span\n          [ngClass]=\"{'success':taskGroupType.status === 'Complete', 'pending':taskGroupType.status === 'Queued' || taskGroupType.status === 'Running' || taskGroupType.status === 'Processing' || taskGroupType.status === 'Pending','fail':taskGroupType.status === 'Failed'}\">{{taskGroupType.status}}</span></span>\n    </div>\n    <div id=\"task-group-panel-{{groupTypeId}}\" class=\"panel-body\" [isAnimated]=\"false\" [collapse]=\"!showProcess\">\n\n      <div class=\"task-container\" *ngFor=\"let task of taskGroupType.tasks; let idx=index\">\n        <div *ngIf=\"task.status !== 'Complete' && task.status !== 'Failed'\">\n          <ul class=\"list-unstyled\" style=\"margin: 0;\">\n            <li>Status: <b\n                [ngClass]=\"{'success':task.status === 'Complete', 'pending':task.status === 'Queued' || task.status === 'Running' || task.status === 'Processing' || task.status === 'Pending','fail':task.status === 'Failed'}\">{{task.status}}</b>\n            </li>\n            <li>Created on: <b>{{task.createDate}}</b></li>\n            <li>Last update: <b>{{task.lastUpdatedDate}}</b></li>\n            <li style=\"word-break: break-all;\">Message: <b>{{task.message}}</b></li>\n          </ul>\n          <button class=\"btn btn-danger\" (click)=\"removeTask(task)\">Delete Task</button>\n        </div>\n\n        <div *ngIf=\"task.status === 'Complete' || task.status === 'Failed'\">\n          <ul class=\"list-unstyled\" style=\"margin: 0;\">\n            <li>Status: <b\n                [ngClass]=\"{'success':task.status === 'Complete','pending':task.status === 'Queued' || task.status === 'Running' || task.status === 'Processing' || task.status === 'Pending', 'fail':task.status === 'Failed'}\">{{task.status}}</b>\n            </li>\n            <li>Message: <b>{{task.message}}</b></li>\n            <li>Created on: <b>{{task.createDate}}</b></li>\n            <li>Last update: <b>{{task.lastUpdatedDate}}</b></li>\n          </ul>\n\n          <div class=\"row\">\n            <div class=\"col-sm-12\">\n              <div class=\"button-holder\" style=\"margin-top: 30px;\">\n                <button class=\"btn btn-default caution\" (click)=\"removeTask(task)\">Delete Task</button>\n                <button class=\"btn btn-default\" *ngIf=\"task.odmOutput\" (click)=\"showODMOutput = !showODMOutput\">Show Log Output</button>\n                <button class=\"btn btn-default\" (click)=\"task.showError = !task.showError\">Show Error</button>\n              </div>\n            </div>\n          </div>\n\n          <div *ngIf=\"task.odmOutput && showODMOutput\" class=\"row\">\n            <div class=\"col-sm-12\">\n              <h4>Output:</h4>\n              <textarea style=\"color:grey;width:500px;height:200px;\" [innerHTML]=\"task.odmOutput\"></textarea>\n            </div>\n          </div>\n\n          <div *ngIf=\"task.showError\" class=\"row\">\n            <div class=\"col-sm-12\">\n              <h4>Actions:</h4>\n              <h4 *ngIf=\"task.actions.length === 0\" style=\"color:grey;\">There are no actions for this task.</h4>\n              <table *ngIf=\"task.actions.length > 0\" class=\"table table-bordered\">\n                <thead>\n                  <tr>\n                    <th>#</th>\n                    <th>Type</th>\n                    <th>Description</th>\n                    <th>Creation Date</th>\n                    <th>Last Updated</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let action of task.actions; let i=index\" [ngClass]=\"{'danger':action.type === 'error'}\">\n                    <th scope=\"row\">{{i + 1}}</th>\n                    <td>{{action.type}}</td>\n                    <td>{{action.description}}</td>\n                    <td>{{action.createDate}}</td>\n                    <td>{{action.lastUpdatedDate}}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '../../../shared/component/modal/basic-confirm-modal.component';\n\nimport { Task, TaskGroup, TaskGroupType } from '../../model/management';\nimport { ManagementService } from '../../service/management.service';\n\n\n@Component({\n\tselector: 'tasks-panel',\n\ttemplateUrl: './tasks-panel.component.html',\n\tstyleUrls: ['./tasks-panel.css']\n})\nexport class TasksPanelComponent implements OnInit {\n\n\t@Input() taskGroupType: TaskGroupType;\n\t@Input() groupTypeId: string;\n\t@Input() taskCategory: string;\n    \n\tshowUploads: boolean = false;\n\tshowProcess: boolean = false;\n\tshowStore: boolean = false;\n\tshowODMOutput: boolean = false;\n\tshowError: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n     */\n\tbsModalRef: BsModalRef;\n\n\n    /*\n     * List of tasks\n     */\n\ttaskGroups: TaskGroup[] = [];\n\n\tconstructor(private managementService: ManagementService, private modalService: BsModalService) {\n\n\t}\n\n\tngOnInit(): void {\n\t}\n\n\tngOnDestroy(): void {\n\t}\n\n\n\tremoveTask(task: Task): void {\n\n\t\tthis.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = 'Are you sure you want to delete [' + task.label + '?';\n\t\tthis.bsModalRef.content.data = task;\n\t\tthis.bsModalRef.content.type = 'DANGER';\n\t\tthis.bsModalRef.content.submitText = 'Delete';\n\n\t\t(<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(task => {\n\t\t\tthis.deleteTask(task);\n\t\t});\n\n\t}\n\n\tdeleteTask(task: Task) {\n\t\tthis.managementService.removeTask(task.uploadId)\n\t\t\t.then(() => {\n\t\t\t\tlet pos = null;\n\t\t\t\tfor (let i = 0; i < this.taskGroupType.tasks.length; i++) {\n\t\t\t\t\tlet thisTask = this.taskGroupType.tasks[i];\n\n\t\t\t\t\tif (thisTask.uploadId === task.uploadId) {\n\t\t\t\t\t\tpos = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (pos !== null) {\n\t\t\t\t\tthis.taskGroupType.tasks.splice(pos, 1);\n\t\t\t\t}\n\t\t\t});\n\t}\n}\n","<uasdm-header [title]=\"'Tasks'\"></uasdm-header>\n\n<div id=\"app-container\" class=\"container-fluid\" style=\"padding-top:20px;\">\n\n  <div class=\"row\">\n    <div class=\"col-sm-1\"></div>\n    <div class=\"col-sm-10\">\n      <div id=\"tasks\">\n\n        <div *ngIf=\"messages && messages.count > 0\">\n          <h2>Tasks</h2>\n\n          <div id=\"tasks-container\">\n            <div class=\"row\">\n              <h3 class=\"col-sm-9\">Issue</h3>\n              <h3 class=\"col-sm-3\">Actions</h3>\n            </div>\n            <div class=\"panel panel-default\" *ngFor=\"let message of messages.resultSet | paginate: {id: 'message-pg-ctrl', itemsPerPage: messages.pageSize, currentPage: messages.pageNumber, totalItems: messages.count }\">\n              <!-- <div class=\"panel-heading\">Panel heading without title</div> -->\n          \n              <div class=\"panel-body\">\n                <div class=\"row\">\n                  <div class=\"col-sm-9\">\n                    <div>\n                      <span class=\"dot pending\" style=\"margin-left:0;\"></span>\n                      {{message.message}}\n                    </div>\n                    <div style=\"margin-top:10px;margin-bottom:0;color:grey;\">\n                      <ul class=\"breadcrumb\" style=\"color:grey;\">\n                        <li *ngFor=\"let ancestor of message.ancestors\">\n                          <span > <b>{{ancestor}}</b> </span>\n                        </li>\n                        <li class=\"active\">\n                          <a (click)=\"handleGoto(message.collectionId)\" style=\"color: #007276;\"> {{message.collectionName}}</a>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                  <div class=\"col-sm-3\" style=\"text-align: right;\">\n                    <div>\n                      <button style=\"width:47%\" class=\"btn btn-default\" (click)=\"handleGoto(message.collectionId)\">View Collection</button>\n                      <button style=\"width:47%;margin-left: 10px;\" class=\"btn btn-primary\" (click)=\"handleMessage(message)\">Add Metadata</button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n          \n            </div>\n            <div class=\"row\">\n              <pagination-controls id=\"message-pg-ctrl\" (pageChange)=\"onMessagePageChange($event)\"></pagination-controls>                  \n            </div>\n          </div>\n          \n        </div>\n\n      </div>\n    </div>\n    <div class=\"col-sm-1\"></div>\n  </div>\n\n\n  <div class=\"row\" style=\"margin-bottom: 40px;\">\n    <div class=\"col-sm-1\"></div>\n    <div class=\"col-sm-10\">\n      <h3>Processing Jobs</h3>\n\n      <ul class=\"nav nav-tabs\" role=\"tablist\">\n        <li class=\"active\">\n          <a role=\"tab\" data-toggle=\"tab\" (click)=\"onTabClick($event, 'all')\">All</a>\n        </li>\n        <li>\n          <a role=\"tab\" data-toggle=\"tab\" (click)=\"onTabClick($event, 'action-required')\">Action Required</a>\n        </li>\n<!-- \n        <li>\n          <a role=\"tab\" data-toggle=\"tab\" (click)=\"onTabClick($event, 'success')\">Successful</a>\n        </li>\n -->        \n      </ul>\n\n      <div class=\"tab-content\" >\n\n        <div *ngIf=\"activeTab === 'action-required'\" class=\"tab-pane active\" id=\"action-required\">\n          \n          <div class=\"panel-group\">\n            <div *ngFor=\"let taskGroup of collectionGroups | paginate: { id: 'tasks-pg-ctrl', itemsPerPage: taskPage.pageSize, currentPage: taskPage.pageNumber, totalItems: taskPage.count }; let idx=index\" class=\"panel panel-default\" style=\"background: none;border: none;\">\n            \n                <div class=\"panel-heading clickable\" style=\"margin-top: 20px;background-color: #e9e9e9\">\n                  <h4 class=\"panel-title\" style=\"display: inline-block; vertical-align: middle;\">\n                    <a data-toggle=\"collapse\" (click)=\"taskGroup.visible = !taskGroup.visible\" [attr.aria-expanded]=\"!taskGroup.visible\"\n                      [attr.aria-controls]=\"'taskGroup'+ idx\">\n                      <h4>{{taskGroup.label}}</h4>\n                    </a>\n                  </h4>\n                  \n                  <span class=\"dot\" [ngClass]=\"{'success':taskGroup.status === 'Complete', 'pending blink':taskGroup.status === 'Processing' || taskGroup.status === 'Running' || taskGroup.status === 'Pending' || taskGroup.status === 'Queued','fail':taskGroup.status === 'Failed'}\" ></span>\n\n                  <button class=\"btn btn-default pull-right\" (click)=\"handleGoto(taskGroup.collectionId)\">View Collection</button>\n\n                </div>\n            \n                <div class=\"panel-body\" [isAnimated]=\"false\" [collapse]=\"!taskGroup.visible\">\n                  <div *ngFor=\"let taskGroupType of taskGroup.groups; let grpi=index\">\n                    <div [id]=\"'task'+ grpi\">\n\n                      <!-- Upload Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'UPLOAD'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Upload'\" ></tasks-panel>\n                      </div>\n\n                      <!-- Process Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'PROCESS'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Process'\" ></tasks-panel>\n                      </div>\n\n                      <!-- Store Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'STORE'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Store'\" ></tasks-panel>\n                      </div>\n                \n                    </div>\n                  </div>\n                </div>\n            </div>\n\n             <pagination-controls id=\"tasks-pg-ctrl\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n        \n        <div *ngIf=\"activeTab === 'success'\" class=\"tab-pane active\" id=\"success\">\n          <div class=\"panel-group\">\n            <div *ngFor=\"let taskGroup of collectionGroups | paginate: {id: 'tasks-pg-ctrl', itemsPerPage: taskPage.pageSize, currentPage: taskPage.pageNumber, totalItems: taskPage.count }; let idx=index\" class=\"panel panel-default\" style=\"background: none;border: none;\">\n            \n                <div class=\"panel-heading clickable\" style=\"margin-top: 20px;background-color: #e9e9e9\">\n                  <h4 class=\"panel-title\" style=\"display: inline-block; vertical-align: middle;\">\n                    <a data-toggle=\"collapse\" (click)=\"taskGroup.visible = !taskGroup.visible\" [attr.aria-expanded]=\"!taskGroup.visible\"\n                      [attr.aria-controls]=\"'taskGroup'+ idx\">\n                      <h4>{{taskGroup.label}}</h4>\n                    </a>\n                  </h4>\n                  \n                  <span class=\"dot\" [ngClass]=\"{'success':taskGroup.status === 'Complete', 'pending blink':taskGroup.status === 'Processing' || taskGroup.status === 'Running' || taskGroup.status === 'Pending' || taskGroup.status === 'Queued', 'fail':taskGroup.status === 'Failed'}\" ></span>\n\n                  <button class=\"btn btn-default pull-right\" (click)=\"handleGoto(taskGroup.collectionId)\">View Collection</button>\n\n                </div>\n            \n                <div class=\"panel-body\" [isAnimated]=\"false\" [collapse]=\"!taskGroup.visible\">\n                  <div *ngFor=\"let taskGroupType of taskGroup.groups; let grpi=index\">\n                    <div [id]=\"'task'+ grpi\">\n\n                      <div *ngIf=\"taskGroupType.type === 'UPLOAD'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Upload'\" ></tasks-panel>\n                      </div>\n\n                      <div *ngIf=\"taskGroupType.type === 'PROCESS'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Process'\" ></tasks-panel>\n                      </div>\n\n                      <div *ngIf=\"taskGroupType.type === 'STORE'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Store'\" ></tasks-panel>\n                      </div>\n                \n                    </div>\n                  </div>\n                </div>\n            </div>\n\n             <pagination-controls id=\"tasks-pg-ctrl\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n\n        <div *ngIf=\"activeTab === 'all'\" class=\"tab-pane active\" id=\"all\">\n          <div class=\"panel-group\">\n            <div *ngFor=\"let taskGroup of collectionGroups | paginate: {id: 'tasks-pg-ctrl', itemsPerPage: taskPage.pageSize, currentPage: taskPage.pageNumber, totalItems: taskPage.count }; let idx=index\" class=\"panel panel-default\" style=\"background: none;border: none;\">\n            \n                <div class=\"panel-heading clickable\" style=\"margin-top: 20px;background-color: #e9e9e9\">\n                  <h4 class=\"panel-title\" style=\"display: inline-block; vertical-align: middle;\">\n                    <a data-toggle=\"collapse\" (click)=\"taskGroup.visible = !taskGroup.visible\" [attr.aria-expanded]=\"!taskGroup.visible\"\n                      [attr.aria-controls]=\"'taskGroup'+ idx\">\n                      <h4>{{taskGroup.label}}</h4>\n                    </a>\n                  </h4>\n                  \n                  <span class=\"dot\" [ngClass]=\"{'success':taskGroup.status === 'Complete', 'pending blink':taskGroup.status === 'Processing' || taskGroup.status === 'Running' || taskGroup.status === 'Pending' || taskGroup.status === 'Queued', 'fail':taskGroup.status === 'Failed'}\" ></span>\n\n                  <button class=\"btn btn-default pull-right\" (click)=\"handleGoto(taskGroup.collectionId)\">View Collection</button>\n\n                </div>\n            \n                <div class=\"panel-body\" [isAnimated]=\"false\" [collapse]=\"!taskGroup.visible\">\n                  <div *ngFor=\"let taskGroupType of taskGroup.groups; let grpi=index\">\n                    <div [id]=\"'task'+ grpi\">\n\n                      <!-- Upload Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'UPLOAD'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Upload'\" ></tasks-panel>\n                      </div>\n\n                      <!-- Process Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'PROCESS'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Process'\" ></tasks-panel>\n                      </div>\n\n                      <!-- Store Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'STORE'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Store'\" ></tasks-panel>\n                      </div>\n                \n                    </div>\n                  </div>\n                </div>\n            </div>\n\n            <pagination-controls id=\"tasks-pg-ctrl\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n\n      </div>\n    </div>\n    <div class=\"col-sm-1\"></div>\n\n  </div>\n\n\n</div>\n\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { MetadataModalComponent } from './modal/metadata-modal.component';\nimport { BasicConfirmModalComponent } from '../../shared/component/modal/basic-confirm-modal.component';\nimport { LeafModalComponent } from './modal/leaf-modal.component';\nimport { PageResult } from '../../shared/model/page';\n\nimport { interval, from } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { Message, Task, TaskGroup } from '../model/management';\nimport { ManagementService } from '../service/management.service';\n\n@Component({\n    selector: 'tasks',\n    templateUrl: './tasks.component.html',\n    styleUrls: ['./tasks.css']\n})\nexport class TasksComponent implements OnInit {\n\n    userName: string = \"\";\n    totalTaskCount: number = 0;\n    taskPolling: any;\n    activeTab: string = \"all\";\n    showSite: boolean = false;\n    initData: any;\n    showUploads: boolean = false;\n    showProcess: boolean = false;\n    showStore: boolean = false;\n    tasks: any;\n    taskPage: PageResult<Task> = { count: 0, pageSize: 10, pageNumber: 1, resultSet: [] };\n    errorStatuses = [\"Error\", \"Failed\", \"Queued\", \"Processing\"];\n    completeStatuses = [\"Complete\"];\n\n    statuses = [];\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    /*\n     * List of messages\n     */\n    messages: PageResult<Message> = { count: 0, pageSize: 5, pageNumber: 1, resultSet: [] };\n\n    /*\n     * List of tasks\n     */\n    // tasks: PageResult<Task>;\n\n    collectionGroups: TaskGroup[] = [];\n\n    constructor(private managementService: ManagementService, private modalService: BsModalService) {\n\n        this.taskPolling = interval(5000).pipe(\n            switchMap(() => from(this.managementService.tasks(this.statuses, this.taskPage.pageSize, this.taskPage.pageNumber))))\n            .subscribe((data) => {\n                if(data.pageNumber == this.taskPage.pageNumber) {\n                    this.updateTaskData(data);\n                }\n            });\n\n    }\n\n    ngOnInit(): void {\n        this.userName = this.managementService.getCurrentUser();\n        this.managementService.tasks([], this.taskPage.pageSize, this.taskPage.pageNumber).then(data => {\n            this.setTaskData(data, false);\n        });\n\n        this.getMissingMetadata();\n    }\n\n    ngOnDestroy(): void {\n\n        if (this.taskPolling) {\n            this.taskPolling.unsubscribe();\n        }\n    }\n\n    updatePage(data: PageResult<Task>): void {\n        this.taskPage.pageNumber = data.pageNumber;\n        this.taskPage.pageSize = data.pageSize;\n        this.taskPage.count = data.count;\n        this.taskPage.resultSet = data.resultSet;\n    }\n\n    onPageChange(pageNumber: number): void {\n        this.managementService.tasks(this.statuses, this.taskPage.pageSize, pageNumber).then(tasks => {\n\n            this.updatePage(tasks);\n\n            this.setTaskData(tasks, false);\n        });\n    }\n\n    onTabClick(event: any, tab: string): void {\n        this.activeTab = tab;\n        this.taskPage = { count: 0, pageSize: 20, pageNumber: 1, resultSet: [] };\n\n        if (tab === \"success\") {\n            this.statuses = this.completeStatuses;\n        }\n        else if (tab === \"action-required\") {\n            this.statuses = this.errorStatuses;\n        }\n        else if (tab === \"all\") {\n            this.statuses = [];\n        }\n\n        this.managementService.tasks(this.statuses, this.taskPage.pageSize, this.taskPage.pageNumber).then(tasks => {\n\n            this.updatePage(tasks);\n\n            this.setTaskData(tasks, false);\n        });\n\n\n        if (!event.target.parentNode.classList.contains(\"active\")) {\n\n            let lis = event.target.parentNode.parentNode.getElementsByTagName(\"li\");\n            for (let i = 0; i < lis.length; i++) {\n                let li = lis[i];\n\n                li.classList.forEach(cls => {\n                    if (cls === 'active') {\n                        li.classList.remove('active');\n                    }\n                })\n            }\n\n            event.target.parentNode.classList.add('active');\n        }\n    }\n\n    setTaskData(tasks: PageResult<Task>, addOnly: boolean): void {\n\n        if (!addOnly) {\n            this.updatePage(tasks);\n\n            this.collectionGroups = [];\n        }\n\n        for (let i = 0; i < tasks.resultSet.length; i++) {\n            let task = tasks.resultSet[i];\n            let collectPosition = this.collectionGroups.findIndex(value => { return task.collectionLabel === value.label });\n\n            if (collectPosition > -1) {\n\n                if (task.type === 'gov.geoplatform.uasdm.bus.WorkflowTask') {\n\n                    let taskGroupTypeIndex = this.collectionGroups[collectPosition].groups.findIndex(value => { return value.type === 'UPLOAD' });\n\n                    if (taskGroupTypeIndex === -1) {\n                        this.collectionGroups[collectPosition].groups.push({ tasks: [task], status: task.status, type: 'UPLOAD' })\n                    }\n                    else {\n                        this.collectionGroups[collectPosition].groups[taskGroupTypeIndex].tasks.push(task);\n                    }\n                }\n                else if (task.type === 'gov.geoplatform.uasdm.odm.ODMProcessingTask') {\n\n                    let taskGroupTypeIndex = this.collectionGroups[collectPosition].groups.findIndex(value => { return value.type === 'PROCESS' });\n\n                    if (taskGroupTypeIndex === -1) {\n                        this.collectionGroups[collectPosition].groups.push({ tasks: [task], status: task.status, type: 'PROCESS' })\n                    }\n                    else {\n                        this.collectionGroups[collectPosition].groups[taskGroupTypeIndex].tasks.push(task);\n                    }\n                }\n                else if (task.type === 'gov.geoplatform.uasdm.odm.ODMUploadTask') {\n\n                    let taskGroupTypeIndex = this.collectionGroups[collectPosition].groups.findIndex(value => { return value.type === 'STORE' });\n\n                    if (taskGroupTypeIndex === -1) {\n                        this.collectionGroups[collectPosition].groups.push({ tasks: [task], status: task.status, type: 'STORE' })\n                    }\n                    else {\n                        this.collectionGroups[collectPosition].groups[taskGroupTypeIndex].tasks.push(task);\n                    }\n                }\n            }\n            else {\n\n                if (task.type === 'gov.geoplatform.uasdm.bus.WorkflowTask') {\n\n                    this.collectionGroups.push({\n                        label: task.collectionLabel,\n                        collectionId: task.collection,\n                        groups: [{ tasks: [task], status: task.status, type: 'UPLOAD' }],\n                        status: task.status,\n                        lastUpdatedDate: task.lastUpdatedDate\n                    });\n                }\n                else if (task.type === 'gov.geoplatform.uasdm.odm.ODMProcessingTask'){\n\n                    this.collectionGroups.push({\n                        label: task.collectionLabel,\n                        collectionId: task.collection,\n                        groups: [{ tasks: [task], status: task.status, type: 'PROCESS' }],\n                        status: task.status,\n                        lastUpdatedDate: task.lastUpdatedDate\n                    });\n                }\n                else if (task.type === 'gov.geoplatform.uasdm.odm.ODMUploadTask') {\n\n                    this.collectionGroups.push({\n                        label: task.collectionLabel,\n                        collectionId: task.collection,\n                        groups: [{ tasks: [task], status: task.status, type: 'STORE' }],\n                        status: task.status,\n                        lastUpdatedDate: task.lastUpdatedDate\n                    });\n                }\n\n            }\n        }\n\n        this.collectionGroups = this.collectionGroups.sort((a: any, b: any) =>\n            new Date(b.lastUpdatedDate).getTime() - new Date(a.lastUpdatedDate).getTime()\n        );\n\n        this.setTaskGroupStatuses();\n    }\n\n\n    setTaskGroupStatuses(): void {\n\n        this.collectionGroups.forEach(collectionGroup => {\n\n            let isError: boolean = false;\n            let isWorking: boolean = false;\n\n            collectionGroup.groups.forEach(group => {\n\n                if (group.tasks.length > 0) {\n                    let sortedTasks = group.tasks.sort((a: any, b: any) =>\n                        new Date(b.lastUpdatedDate).getTime() - new Date(a.lastUpdatedDate).getTime()\n                    );\n\n                    group.status = sortedTasks[0].status;\n                }\n\n                if (group.status === \"Error\" || group.status === \"Failed\") {\n                    isError = true;\n                }\n                else if (group.status === \"Queued\" || group.status === \"Processing\" || group.status === \"Running\" || group.status === \"Pending\") {\n                    isWorking = true;\n                }\n            });\n\n            if (isWorking) {\n                collectionGroup.status = \"Processing\";\n            }\n            else if (isError) {\n                collectionGroup.status = \"Failed\";\n            }\n            else {\n                collectionGroup.status = \"Complete\";\n            }\n\n        })\n    }\n\n\n    updateTaskData(tasks: PageResult<Task>): void {\n        let noMatch = [];\n\n        this.totalTaskCount = tasks.count;\n\n        // Update existing tasks\n        tasks.resultSet.forEach(newTask => {\n\n            let matchFound: boolean = false;\n\n            this.collectionGroups.forEach(existingTaskGrp => {\n                existingTaskGrp.groups.forEach(existingGroup => {\n\n                    existingGroup.tasks.forEach(existingTask => {\n                        if (existingTask.oid === newTask.oid) {\n\n                            matchFound = true;\n\n                            // Update props\n                            if (existingTask.label !== newTask.label) {\n                                existingTask.label = newTask.label;\n                            }\n                            if (existingTask.lastUpdateDate !== newTask.lastUpdateDate) {\n                                existingTask.lastUpdateDate = newTask.lastUpdateDate;\n                            }\n                            if (existingTask.lastUpdatedDate !== newTask.lastUpdatedDate) {\n                                existingTask.lastUpdatedDate = newTask.lastUpdatedDate;\n                                matchFound = true;\n                            }\n                            if (existingTask.message !== newTask.message) {\n                                existingTask.message = newTask.message;\n                            }\n                            if (existingTask.status !== newTask.status) {\n                                existingTask.status = newTask.status;\n                            }\n                            if (existingTask.odmOutput !== newTask.odmOutput) {\n                                existingTask.odmOutput = newTask.odmOutput;\n                            }\n                        }\n                    })\n                });\n            });\n\n            if (!matchFound) {\n                noMatch.push(newTask);\n            }\n        })\n\n        // Add new tasks\n        // let newTasks = data.tasks.filter((o: Task) => !this.collectionGroups.resultSet.find(o2 => o.oid === o2.oid));\n        if (noMatch && noMatch.length > 0) {\n            this.setTaskData({ resultSet: noMatch, count: tasks.count, pageNumber: this.taskPage.pageNumber, pageSize: this.taskPage.pageSize }, true);\n        }\n    }\n\n\n    handleMessage(message: Message): void {\n        this.bsModalRef = this.modalService.show(MetadataModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        });\n        this.bsModalRef.content.init(message.collectionId);\n\n        this.bsModalRef.content.onMetadataChange.subscribe((collectionId: string) => {\n\n            let index = -1;\n            for (let i = 0; i < this.messages.resultSet.length; i++) {\n                let msg = this.messages.resultSet[i];\n                if (msg.collectionId === collectionId) {\n                    index = i;\n                }\n            }\n\n            if (index >= 0) {\n                this.messages.resultSet.splice(index, 1);\n            }\n\n        });\n\n    }\n\n    handleGoto(collectionId: string): void {\n        // let breadcrumbs = []\n\n        this.managementService.view(collectionId).then(response => {\n            const entity = response.item;\n            const breadcrumbs = response.breadcrumbs;\n\n            this.managementService.getItems(collectionId, null).then(nodes => {\n                this.bsModalRef = this.modalService.show(LeafModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                    class: 'leaf-modal'\n                });\n                this.bsModalRef.content.init(entity, nodes, breadcrumbs);\n            })\n        })\n    }\n\n    removeTask(task: Task): void {\n\n        this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.message = 'Are you sure you want to delete [' + task.label + '?';\n        this.bsModalRef.content.data = task;\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = 'Delete';\n\n        (<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(task => {\n            this.deleteTask(task);\n        });\n\n    }\n\n    deleteTask(task: Task) {\n        this.managementService.removeTask(task.uploadId)\n            .then(() => {\n                let pos = null;\n                for (let i = 0; i < this.tasks.resultSet.length; i++) {\n                    let thisTask = this.tasks[i];\n\n                    if (thisTask.uploadId === task.uploadId) {\n                        pos = i;\n                        break;\n                    }\n                }\n\n                if (pos !== null) {\n                    this.tasks.resultSet.splice(pos, 1);\n                }\n\n                this.getMissingMetadata();\n\n                this.totalTaskCount = this.tasks.count;\n\n            });\n    }\n\n    getMissingMetadata(): void {\n        this.onMessagePageChange(this.messages.pageNumber);\n    }\n\n    onMessagePageChange(pageNumber: number): void {\n        this.managementService.getMissingMetadata(this.messages.pageSize, pageNumber).then(messages => {\n            this.messages = messages;\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams, HttpBackend, HttpHandler } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '../../shared/service/event.service';\nimport { HttpBackendClient } from '../../shared/service/http-backend-client.service';\n\nimport { PageResult } from '../../shared/model/page';\nimport { Sensor } from '../model/sensor';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SensorService {\n\n    constructor( private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService ) { }\n\n    page( p: number ): Promise<PageResult<Sensor>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'number', p.toString() );\n\n        this.eventService.start();\n\n        return this.http\n            .get<PageResult<Sensor>>( acp + '/sensor/page', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    edit( oid: string ): Promise<Sensor> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Sensor>( acp + '/sensor/lock', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    newInstance(): Promise<Sensor> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Sensor>( acp + '/sensor/newInstance', JSON.stringify( {} ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    remove( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/sensor/remove', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    apply( sensor: Sensor ): Promise<Sensor> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<Sensor>( acp + '/sensor/apply', JSON.stringify( { sensor: sensor } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    unlock( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<void>( acp + '/sensor/unlock', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n}","<div *ngIf=\"sensor != null\" class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"error-container\">\n    <div class=\"label-holder\">\n      <strong>Error</strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"error-message\">{{message}}</p>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"modal-title-container\">\n    <h3>Sensor</h3>\n  </div>\n\n  <form #ngForm=\"ngForm\">\n    <div class=\"form-group\">\n      <label>Name</label>\n      <input [(ngModel)]=\"sensor.name\" name=\"name\" type=\"input\" class=\"form-control\" placeholder=\"Name\" [disabled]=\"!newInstance\" required />\n    </div>\n    <div class=\"form-group\">\n      <label>Label</label>\n      <input [(ngModel)]=\"sensor.displayLabel\" name=\"displayLabel\" type=\"input\" class=\"form-control\" placeholder=\"Display Label\" required />\n    </div>\n    <div class=\"form-group\">\n      <label>Type</label>\n      <input [(ngModel)]=\"sensor.sensorType\" name=\"sensorType\" type=\"input\" class=\"form-control\" placeholder=\"Type\" required />\n    </div>\n    <div class=\"form-group\">\n      <label>Model</label>\n      <input [(ngModel)]=\"sensor.model\" name=\"model\" type=\"input\" class=\"form-control\" placeholder=\"Model\" required />\n    </div>\n    <div class=\"form-group\">\n      <label>Wave Length</label>\n      <div *ngFor=\"let wavelength of waveLengths\">\n        <boolean-field [value]=\"sensor.waveLength && (-1 !== sensor.waveLength.indexOf(wavelength))\" [label]=\"wavelength\" (valueChange)=\"updateSelectedWaveLength(wavelength, $event)\"></boolean-field>\n      </div>\n    </div>\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <button type=\"button\" class=\"btn btn-default\" (click)=\"handleOnCancel()\">Cancel</button>\n      <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\" [disabled]=\"!ngForm.valid\">Apply</button>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { Sensor, WAVELENGTHS } from '../../model/sensor';\nimport { SensorService } from '../../service/sensor.service';\n\n\n@Component({\n\tselector: 'sensor',\n\ttemplateUrl: './sensor.component.html',\n\tstyleUrls: []\n})\nexport class SensorComponent implements OnInit {\n\tsensor: Sensor;\n\tnewInstance: boolean = false;\n\n\tmessage: string = null;\n\n\twaveLengths: string[] = WAVELENGTHS;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n\tpublic onSensorChange: Subject<Sensor>;\n\n\tconstructor(private service: SensorService, public bsModalRef: BsModalRef) { }\n\n\tngOnInit(): void {\n\t\tthis.onSensorChange = new Subject();\n\t}\n\n\thandleOnSubmit(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.apply(this.sensor).then(data => {\n\t\t\tthis.onSensorChange.next(data);\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\thandleOnCancel(): void {\n\t\tthis.message = null;\n\n\t\tif (this.newInstance) {\n\t\t\tthis.bsModalRef.hide();\n\t\t}\n\t\telse {\n\t\t\tthis.service.unlock(this.sensor.oid).then(data => {\n\t\t\t\tthis.bsModalRef.hide();\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t}\n\n\tupdateSelectedWaveLength(wavelength: string, checked: boolean): void {\n\n\t\tconst indexOf = this.sensor.waveLength.indexOf(wavelength)\n\n\t\tif (checked) {\n\n\t\t\tif (indexOf < 0) {\n\t\t\t\tthis.sensor.waveLength.push(wavelength);\n\n\t\t\t}\n\t\t} else {\n\t\t\tif (indexOf > -1) {\n\t\t\t\tthis.sensor.waveLength.splice(indexOf, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\n\t\t\tconsole.log(this.message);\n\t\t}\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <uasdm-header></uasdm-header>\n\n    <div id=\"app-container\" class=\"container\">\n\n\t\t<h2>Sensors</h2>\n\n\t\t<pagination-controls *ngIf=\"res.resultSet.length > res.pageSize\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\t\t\n\t\t<div class=\"list-table-wrapper\">\n\t\t\t<table id=\"manage-sensors-table\"\n\t\t\t\tclass=\"list-table table table-bordered table-striped\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t<th class=\"label-column\">Name</th>\n\t\t\t\t\t\t<th class=\"label-column\">Label</th>\n\t\t\t\t\t\t<th class=\"label-column\">Type</th>\n\t\t\t\t\t\t<th class=\"label-column\">Model</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr *ngFor=\"let sensor of res.resultSet | paginate: { itemsPerPage: res.pageSize, currentPage: res.pageNumber, totalItems: res.count }\"\n\t\t\t\t\t\tclass=\"fade-ngRepeat-item\">\n\t\t\t\t\t\t<td class=\"button-column\">\n\t\t\t\t\t\t  <a class=\"fa fa-pencil-alt ico-edit\" (click)=\"edit(sensor)\" title=\"Edit sensor\"></a>\n\t\t\t\t\t\t  <a class=\"fa fa-trash-alt ico-remove\" (click)=\"onClickRemove(sensor)\" title=\"Remove sensor\"></a>\n\t\t\t\t\t    </td>\n\t\t\t\t\t\t<td class=\"label-column\">{{ sensor.name }}</td>\n\t\t\t\t\t\t<td class=\"label-column\">{{ sensor.displayLabel }}</td>\n\t\t\t\t\t\t<td class=\"label-column\">{{ sensor.sensorType }}</td>\n\t\t\t\t\t\t<td class=\"label-column\">{{ sensor.model }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td class=\"button-column\">\n\t\t\t\t\t\t  <a class=\"fa fa-plus\" (click)=\"newInstance()\" title=\"Add new sensor\"></a>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t\t\n\t\t<pagination-controls *ngIf=\"res.resultSet.length > res.pageSize\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\t</div>\n</div>","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '../../../shared/component/modal/basic-confirm-modal.component';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { PageResult } from '../../../shared/model/page';\nimport { Sensor } from '../../model/sensor';\nimport { SensorService } from '../../service/sensor.service';\nimport { SensorComponent } from './sensor.component';\n\ndeclare let acp: string;\n\n@Component( {\n    selector: 'sensors',\n    templateUrl: './sensors.component.html',\n    styles: ['./sensors.css']\n} )\nexport class SensorsComponent implements OnInit {\n    res: PageResult<Sensor> = {\n        resultSet: [],\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10\n    };\n    bsModalRef: BsModalRef;\n    message: string = null;\n\n    constructor(\n        private router: Router,\n        private service: SensorService,\n        private modalService: BsModalService,\n        private localizeService: LocalizationService\n    ) { }\n\n    ngOnInit(): void {\n        this.service.page( 1 ).then( res => {\n            this.res = res;\n        } );\n    }\n\n    remove( sensor: Sensor ): void {\n        this.service.remove( sensor.oid ).then( response => {\n            this.res.resultSet = this.res.resultSet.filter( h => h.oid !== sensor.oid );\n        } );\n    }\n\n    onClickRemove( sensor: Sensor ): void {\n        this.bsModalRef = this.modalService.show( BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = \"Are you sure you want to remove the sensor [\" + sensor.name + \"]\";\n\t\tthis.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = \"Delete\";\n\n        this.bsModalRef.content.onConfirm.subscribe( data => {\n            this.remove( sensor );\n        } );\n    }\n\n    edit( sensor: Sensor ): void {\n        this.service.edit( sensor.oid ).then( res => {\n            this.showModal( res, false );\n        } );\n    }\n\n    newInstance(): void {\n        this.service.newInstance().then( res => {\n            this.showModal( res, true );\n        } );\n    }\n\n    showModal( sensor: Sensor, newInstance: boolean ): void {\n        this.bsModalRef = this.modalService.show( SensorComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.sensor = sensor;\n        this.bsModalRef.content.newInstance = newInstance;\n\n        let that = this;\n        this.bsModalRef.content.onSensorChange.subscribe( data => {\n            this.onPageChange( this.res.pageNumber );\n        } );\n\n    }\n\n    onPageChange( pageNumber: number ): void {\n        this.service.page( pageNumber ).then( res => {\n            this.res = res;\n        } );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams, HttpBackend } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '../../shared/service/event.service';\nimport { HttpBackendClient } from '../../shared/service/http-backend-client.service';\n\nimport { PageResult } from '../../shared/model/page';\nimport { Platform } from '../model/platform';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class PlatformService {\n\n    constructor( private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService ) { }\n\n    page( p: number ): Promise<PageResult<Platform>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'number', p.toString() );\n\n        this.eventService.start();\n\n        return this.http\n            .get<PageResult<Platform>>( acp + '/platform/page', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    edit( oid: string ): Promise<Platform> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Platform>( acp + '/platform/lock', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    newInstance(): Promise<Platform> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Platform>( acp + '/platform/newInstance', JSON.stringify( {} ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    remove( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/platform/remove', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    apply( platform: Platform ): Promise<Platform> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<Platform>( acp + '/platform/apply', JSON.stringify( { platform: platform } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    unlock( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<void>( acp + '/platform/unlock', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n}","<div *ngIf=\"platform != null\" class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"error-container\">\n    <div class=\"label-holder\">\n      <strong>Error</strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"error-message\">{{message}}</p>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"modal-title-container\">\n    <h3>Platform</h3>\n  </div>\n\n  <form #ngForm=\"ngForm\">\n    <div class=\"form-group\">\n      <label>Name</label>\n      <input [(ngModel)]=\"platform.name\" name=\"name\" type=\"input\" class=\"form-control\" placeholder=\"Name\" [disabled]=\"!newInstance\" required />\n    </div>\n    <div class=\"form-group\">\n      <label>Label</label>\n      <input [(ngModel)]=\"platform.displayLabel\" name=\"displayLabel\" type=\"input\" class=\"form-control\" placeholder=\"Display Label\" required />\n    </div>\n    <div class=\"form-group\">\n      <label>Type</label>\n      <select [(ngModel)]=\"platform.platformType\" name=\"platformType\" type=\"input\" class=\"form-control\" required>\n        <option></option> \n        <option>Fixed Wing</option>\n        <option>Hybrid</option>\n      </select>\n    </div>\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <button type=\"button\" class=\"btn btn-default\" (click)=\"handleOnCancel()\">Cancel</button>\n      <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\" [disabled]=\"!ngForm.valid\">Apply</button>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { Platform } from '../../model/platform';\nimport { PlatformService } from '../../service/platform.service';\n\n\n@Component( {\n    selector: 'platform',\n    templateUrl: './platform.component.html',\n    styleUrls: []\n} )\nexport class PlatformComponent implements OnInit {\n    platform: Platform;\n    newInstance: boolean = false;\n\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onPlatformChange: Subject<Platform>;\n\n    constructor( private service: PlatformService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onPlatformChange = new Subject();\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.service.apply( this.platform ).then( data => {\n            this.onPlatformChange.next( data );\n            this.bsModalRef.hide();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    handleOnCancel(): void {\n        this.message = null;\n\n        if ( this.newInstance ) {\n            this.bsModalRef.hide();\n        }\n        else {\n            this.service.unlock( this.platform.oid ).then( data => {\n                this.bsModalRef.hide();\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n        }\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n\n            console.log( this.message );\n        }\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n\t<uasdm-header></uasdm-header>\n\n\t<div id=\"app-container\" class=\"container\">\n\n\t\t<h2>Platforms</h2>\n\n\t\t<pagination-controls *ngIf=\"res.resultSet.length > res.pageSize\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\t\t\n\t\t<div class=\"list-table-wrapper\">\n\t\t\t<table id=\"manage-platforms-table\"\n\t\t\t\tclass=\"list-table table table-bordered table-striped\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t<th class=\"label-column\">Name</th>\n\t\t\t\t\t\t<th class=\"label-column\">Label</th>\n\t\t\t\t\t\t<th class=\"label-column\">Type</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr *ngFor=\"let platform of res.resultSet | paginate: { itemsPerPage: res.pageSize, currentPage: res.pageNumber, totalItems: res.count }\"\n\t\t\t\t\t\tclass=\"fade-ngRepeat-item\">\n\t\t\t\t\t\t<td class=\"button-column\">\n\t\t\t\t\t\t  <a class=\"fa fa-pencil-alt ico-edit\" (click)=\"edit(platform)\" title=\"Edit platform\"></a>\n\t\t\t\t\t\t  <a class=\"fa fa-trash-alt ico-remove\" (click)=\"onClickRemove(platform)\" title=\"Remove platform\"></a>\n\t\t\t\t\t    </td>\n\t\t\t\t\t\t<td class=\"label-column\">{{ platform.name }}</td>\n\t\t\t\t\t\t<td class=\"label-column\">{{ platform.displayLabel }}</td>\n\t\t\t\t\t\t<td class=\"label-column\">{{ platform.platformType }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td class=\"button-column\">\n\t\t\t\t\t\t  <a class=\"fa fa-plus\" (click)=\"newInstance()\" title=\"Add new platform\"></a>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t\t\n\t\t<pagination-controls *ngIf=\"res.resultSet.length > res.pageSize\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\t</div>\n</div>","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '../../../shared/component/modal/basic-confirm-modal.component';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { PageResult } from '../../../shared/model/page';\nimport { Platform } from '../../model/platform';\nimport { PlatformService } from '../../service/platform.service';\nimport { PlatformComponent } from './platform.component';\n\ndeclare let acp: string;\n\n@Component( {\n    selector: 'platforms',\n    templateUrl: './platforms.component.html',\n    styles: ['./platforms.css']\n} )\nexport class PlatformsComponent implements OnInit {\n    res: PageResult<Platform> = {\n        resultSet: [],\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10\n    };\n    bsModalRef: BsModalRef;\n    message: string = null;\n\n    constructor(\n        private router: Router,\n        private service: PlatformService,\n        private modalService: BsModalService,\n        private localizeService: LocalizationService\n    ) { }\n\n    ngOnInit(): void {\n        this.service.page( 1 ).then( res => {\n            this.res = res;\n        } );\n    }\n\n    remove( platform: Platform ): void {\n        this.service.remove( platform.oid ).then( response => {\n            this.res.resultSet = this.res.resultSet.filter( h => h.oid !== platform.oid );\n        } );\n    }\n\n    onClickRemove( platform: Platform ): void {\n        this.bsModalRef = this.modalService.show( BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = \"Are you sure you want to remove the platform [\" + platform.name + \"]\";\n\t\tthis.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = \"Delete\";\n\n        this.bsModalRef.content.onConfirm.subscribe( data => {\n            this.remove( platform );\n        } );\n    }\n\n    edit( platform: Platform ): void {\n        this.service.edit( platform.oid ).then( res => {\n            this.showModal( res, false );\n        } );\n    }\n\n    newInstance(): void {\n        this.service.newInstance().then( res => {\n            this.showModal( res, true );\n        } );\n    }\n\n    showModal( platform: Platform, newInstance: boolean ): void {\n        this.bsModalRef = this.modalService.show( PlatformComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.platform = platform;\n        this.bsModalRef.content.newInstance = newInstance;\n\n        let that = this;\n        this.bsModalRef.content.onPlatformChange.subscribe( data => {\n            this.onPageChange( this.res.pageNumber );\n        } );\n\n    }\n\n    onPageChange( pageNumber: number ): void {\n        this.service.page( pageNumber ).then( res => {\n            this.res = res;\n        } );\n    }\n}\n","import { Directive, Input } from \"@angular/core\";\r\nimport { AbstractControl, NG_VALIDATORS, Validator, ValidatorFn } from \"@angular/forms\";\r\n\r\nexport function forbiddenNameValidator( nameRe: RegExp ): ValidatorFn {\r\n    return ( control: AbstractControl ): { [key: string]: any } | null => {\r\n        const forbidden = nameRe.test( control.value );\r\n        return forbidden ? { 'forbiddenName': { value: control.value } } : null;\r\n    };\r\n}\r\n\r\n@Directive( {\r\n    selector: '[forbiddenName]',\r\n    providers: [{ provide: NG_VALIDATORS, useExisting: ForbiddenNameDirective, multi: true }]\r\n} )\r\nexport class ForbiddenNameDirective implements Validator {\r\n    validate( control: AbstractControl ): { [key: string]: any } | null {\r\n        return forbiddenNameValidator( new RegExp( /[\\W<>\\-+=!@#$%^&*?/\\\\']/gm  ) )( control );\r\n    }\r\n  }","import { Injectable } from \"@angular/core\";\r\nimport { CanDeactivate } from \"@angular/router\";\r\n\r\nimport { UploadComponent } from \"../component/upload.component\";\r\n\r\n@Injectable()\r\nexport class CanDeactivateGuardService implements CanDeactivate<UploadComponent> {\r\n  canDeactivate(component: UploadComponent): boolean {\r\n   \r\n    if(component.canDeactivate()){\r\n        if (confirm(\"An upload is currently in progress. Are you sure you want to leave?\")) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n  }\r\n}","import { NgModule, Injectable, Inject } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { Routes, RouterModule, Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { ProjectsComponent } from './component/projects.component';\nimport { UploadComponent } from './component/upload.component';\nimport { TasksComponent } from './component/tasks.component';\nimport { SensorsComponent } from './component/sensor/sensors.component';\nimport { PlatformsComponent } from './component/platform/platforms.component';\n\nimport { CanDeactivateGuardService } from \"./service/can.deactivate.guard.service\";\nimport { AuthGuard, AdminGuardService } from '../shared/service/guard.service';\n\nconst routes: Routes = [\n    {\n        path: '',\n        canActivate: [AuthGuard],\n        component: ProjectsComponent\n    },\n    {\n        path: 'viewer',\n        canActivate: [AuthGuard],\n        component: ProjectsComponent\n    },\n    {\n        path: 'upload',\n        component: UploadComponent,\n        canDeactivate: [CanDeactivateGuardService]\n    },\n    {\n        path: 'tasks',\n        canActivate: [AuthGuard],\n        component: TasksComponent\n    },\n    {\n        path: 'sensors',\n        canActivate: [AdminGuardService],\n        component: SensorsComponent,\n    },\n    {\n        path: 'platforms',\n        canActivate: [AdminGuardService],\n        component: PlatformsComponent,\n    }\n];\n\n@NgModule( {\n    imports: [RouterModule.forChild( routes )],\n    exports: [RouterModule],\n    providers: [{ provide: LocationStrategy, useClass: HashLocationStrategy }]\n} )\nexport class SiteRoutingModule { }","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n//import { TreeModule } from 'angular-tree-component';\n//import { ContextMenuModule } from 'ngx-contextmenu';\nimport { NgxFileDropModule } from 'ngx-file-drop';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { AccordionModule } from 'ngx-bootstrap/accordion';\nimport { TabsModule } from 'ngx-bootstrap/tabs';\nimport { AlertModule } from 'ngx-bootstrap/alert';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\nimport { MapAttributeComponent } from './component/map-attribute/map-attribute.component';\nimport { ProductPanelComponent } from './component/product-panel/product-panel.component';\nimport { EntityModalComponent } from './component/modal/entity-modal.component';\nimport { MetadataModalComponent } from './component/modal/metadata-modal.component';\nimport { ImagePreviewModalComponent } from './component/modal/image-preview-modal.component';\nimport { UploadModalComponent } from './component/modal/upload-modal.component';\nimport { LeafModalComponent } from './component/modal/leaf-modal.component';\nimport { AccessibleSupportModalComponent } from './component/modal/accessible-support-modal.component';\nimport { ProductModalComponent } from './component/modal/product-modal.component';\nimport { ProjectsComponent } from './component/projects.component';\nimport { UploadComponent } from './component/upload.component';\nimport { TasksComponent } from './component/tasks.component';\nimport { TasksPanelComponent } from './component/tasks/tasks-panel.component';\nimport { SensorsComponent } from './component/sensor/sensors.component';\nimport { SensorComponent } from './component/sensor/sensor.component';\nimport { PlatformsComponent } from './component/platform/platforms.component';\nimport { PlatformComponent } from './component/platform/platform.component';\n\n\nimport { ForbiddenNameDirective } from './directive/forbidden-name.directive';\nimport { OnlyNumber } from './directive/number-only.directive';\n\nimport { ProductService } from './service/product.service';\nimport { ManagementService } from './service/management.service';\nimport { MapService } from './service/map.service';\nimport { CanDeactivateGuardService } from './service/can.deactivate.guard.service';\nimport { SensorService } from './service/sensor.service';\nimport { PlatformService } from './service/platform.service';\nimport { MetadataService } from './service/metadata.service';\n\nimport { SiteRoutingModule } from './site-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tRouterModule,\n\t\tFormsModule,\n\t\tNgxPaginationModule,\n\t\t//        TreeModule,\n\t\t//        ContextMenuModule,\n\t\t//        ModalModule.forRoot(),\n\t\tAlertModule,\n\t\tBsDropdownModule,\n\t\tTypeaheadModule,\n\t\tAccordionModule,\n\t\tTabsModule.forRoot(),\n\t\tCollapseModule.forRoot(),\n\t\tSharedModule,\n\t\tSiteRoutingModule,\n\t\tNgxFileDropModule\n\t],\n\tdeclarations: [\n\t\tMapAttributeComponent,\n\t\tProductPanelComponent,\n\t\tEntityModalComponent,\n\t\tMetadataModalComponent,\n\t\tImagePreviewModalComponent,\n\t\tUploadModalComponent,\n\t\tLeafModalComponent,\n\t\tAccessibleSupportModalComponent,\n\t\tProductModalComponent,\n\t\tProjectsComponent,\n\t\tUploadComponent,\n\t\tTasksComponent,\n\t\tForbiddenNameDirective,\n\t\tOnlyNumber,\n\t\tSensorComponent,\n\t\tSensorsComponent,\n\t\tPlatformComponent,\n\t\tPlatformsComponent,\n\t\tTasksPanelComponent\n\t],\n\tproviders: [\n\t\tCanDeactivateGuardService,\n\t\tManagementService,\n\t\tProductService,\n\t\tMapService,\n\t\tSensorService,\n\t\tPlatformService,\n\t\tMetadataService\n\t],\n\tentryComponents: [\n\t\tUploadModalComponent,\n\t\tEntityModalComponent,\n\t\tImagePreviewModalComponent,\n\t\tMetadataModalComponent,\n\t\tSensorComponent,\n\t\tLeafModalComponent,\n\t\tProductModalComponent,\n\t\tPlatformComponent\n\t]\n})\nexport class SiteModule { }\n"],"sourceRoot":""}
