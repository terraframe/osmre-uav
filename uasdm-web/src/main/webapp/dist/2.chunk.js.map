{"version":3,"sources":["webpack:///./src/app/site/service/map.service.ts","webpack:///./src/app/site/component/map-attribute/map-attribute.component.html","webpack:///./src/app/site/component/map-attribute/map-attribute.component.ts","webpack:///./src/app/site/service/management.service.ts","webpack:///./src/app/site/component/modal/image-preview-modal.component.html","webpack:///./src/app/site/component/modal/image-preview-modal.component.ts","webpack:///./src/app/site/model/management.ts","webpack:///./src/app/site/component/modal/metadata-modal.component.html","webpack:///./src/app/site/component/modal/metadata-modal.component.ts","webpack:///./src/app/site/model/metadata.ts","webpack:///./src/app/site/service/metadata.service.ts","webpack:///./src/app/site/component/modal/upload-modal.component.html","webpack:///./src/app/site/component/modal/upload-modal.component.ts","webpack:///./src/app/site/component/modal/artifact-page.component.html","webpack:///./src/app/site/component/modal/artifact-page.component.ts","webpack:///./src/app/site/component/modal/run-ortho-modal.component.html","webpack:///./src/app/site/component/modal/run-ortho-modal.component.ts","webpack:///./src/app/site/component/modal/collection-modal.component.html","webpack:///./src/app/site/component/modal/collection-modal.component.ts","webpack:///./src/app/site/service/product.service.ts","webpack:///./src/app/site/component/modal/product-modal.component.html","webpack:///./src/app/site/component/modal/product-modal.component.ts","webpack:///./src/app/site/component/product-panel/product-panel.component.html","webpack:///./src/app/site/component/product-panel/product-panel.component.ts","webpack:///./src/app/site/component/modal/entity-modal.component.html","webpack:///./src/app/site/component/modal/entity-modal.component.ts","webpack:///./src/app/site/component/modal/accessible-support-modal.component.html","webpack:///./src/app/site/component/modal/accessible-support-modal.component.ts","webpack:///./src/app/site/service/uav.service.ts","webpack:///./src/app/site/component/metadata-page/metadata-page.component.html","webpack:///./src/app/site/component/metadata-page/metadata-page.component.ts","webpack:///./src/app/site/component/modal/create-collection-modal.component.html","webpack:///./src/app/site/component/modal/create-collection-modal.component.ts","webpack:///./src/app/site/component/layer-panel/layer-panel.component.html","webpack:///./src/app/site/component/layer-panel/layer-panel.component.ts","webpack:///./src/app/site/component/projects.component.html","webpack:///./src/app/site/component/projects.component.ts","webpack:///./src/app/site/component/upload.component.html","webpack:///./src/app/site/component/upload.component.ts","webpack:///./src/app/site/component/tasks/tasks-panel.component.html","webpack:///./src/app/site/component/tasks/tasks-panel.component.ts","webpack:///./src/app/site/component/tasks.component.html","webpack:///./src/app/site/component/tasks.component.ts","webpack:///./src/app/site/service/sensor.service.ts","webpack:///./src/app/site/service/classification.service.ts","webpack:///./src/app/site/component/sensor/sensors.component.html","webpack:///./src/app/site/component/sensor/sensors.component.ts","webpack:///./src/app/site/component/sensor/sensor.component.html","webpack:///./src/app/site/component/sensor/sensor.component.ts","webpack:///./src/app/site/service/platform.service.ts","webpack:///./src/app/site/component/platform/platforms.component.html","webpack:///./src/app/site/component/platform/platforms.component.ts","webpack:///./src/app/site/component/platform/platform.component.html","webpack:///./src/app/site/component/platform/platform.component.ts","webpack:///./src/app/site/component/classification/classifications.component.html","webpack:///./src/app/site/component/classification/classifications.component.ts","webpack:///./src/app/site/component/classification/classification.component.html","webpack:///./src/app/site/component/classification/classification.component.ts","webpack:///./src/app/site/component/equipment/equipment.component.ts","webpack:///./src/app/site/component/equipment/equipment.component.html","webpack:///./src/app/site/directive/forbidden-name.directive.ts","webpack:///./src/app/site/directive/number-only.directive.ts","webpack:///./src/app/site/service/can.deactivate.guard.service.ts","webpack:///./src/app/site/component/uav/uavs.component.html","webpack:///./src/app/site/component/uav/uavs.component.ts","webpack:///./src/app/site/component/uav/uavs-page.component.ts","webpack:///./src/app/site/component/uav/uavs-page.component.html","webpack:///./src/app/site/component/uav/uav.component.html","webpack:///./src/app/site/component/uav/uav.component.ts","webpack:///./src/app/site/service/report.service.ts","webpack:///./src/app/site/component/report/reports.component.html","webpack:///./src/app/site/component/report/reports.component.ts","webpack:///./src/app/site/site-routing.module.ts","webpack:///./src/app/site/site.module.ts"],"names":["mapboxKey","http","conditions","params","set","JSON","stringify","this","get","acp","toPromise","searchText","url","mapService","baseLayers","label","id","selected","center","zoom","coordinate","longitude","latitude","search","dataSource","Observable","create","observer","mbForwardGeocode","then","response","match","features","results","forEach","obj","newObj","hierarchy","place_name","source","push","next","refreshCoordinateFromMap","config","container","style","site","geometry","coordinates","map","on","initMap","remove","modes","static","draw","displayControlsDefault","controls","addControl","$event","onDrawUpdate","onDrawCreate","addLayers","feature","type","properties","oid","name","add","changeMode","featureIds","addSource","data","event","action","length","updateGeometry","console","log","ids","layer","baseLayer","setStyle","result","item","flyTo","handleClick","preventDefault","refreshCoordinateFromInput","noErrorHttpClient","eventService","authService","key","pageNumber","pageSize","toString","folder","headers","start","post","pipe","finalize","complete","sort","exclude","processPtcloud","processDem","processOrtho","entity","parentId","getUserName","componentId","uploadId","file","formData","FormData","append","statuses","token","collectionId","useSpinner","responseType","productId","terms","debounceTime","distinctUntilChanged","switchMap","term","searchEntries","metaObj","json","selection","selections","uavId","sensorId","condition","value","isAdmin","text","filters","criteria","service","bsModalRef","message","open","loading","getImage","image","reader","FileReader","addEventListener","imageToShow","readAsDataURL","downloadProductPreview","subscribe","blob","createImageFromBlob","error","err","getMessageFromError","SiteObjectsResultSet","disabled","isOldFormat","page","onMetadataChange","Subject","unsubscribe","collectionName","getMetadataOptions","options","uav","sensor","isNew","pointOfContact","email","catch","hide","applyMetadata","close","handleSubmit","Metadata","root","leaf","drillable","expandable","uploadable","processable","childLabel","cache","fieldName","metadataService","modalService","differs","objectKeys","Object","keys","importedValues","values","uploader","taskStatusMessages","currentTask","finishedTask","existingTask","pollingIsSet","uploadVisible","selectedContinue","uploadCounter","showFileSelectPanel","taskFinishedNotifications","processUpload","component","uploadTarget","labels","pages","index","hierarchyChange","sensors","platforms","modalStepConfig","differ","find","elem","that","extensions","uiOptions","debug","autoUpload","multiple","element","nativeElement","template","request","endpoint","forceMultipart","resume","enabled","recordsExpireIn","chunking","retry","enableAuto","defaultResponseError","failedUploadTextDisplay","mode","validation","allowedExtensions","showMessage","callbacks","onUpload","countUpload","onProgress","uploadedBytes","totalBytes","onUploadChunk","chunkData","onUploadChunkSuccess","responseJSON","xhr","taskPolling","interval","task","onComplete","xhrOrXdr","clearStoredFiles","clearInterval","uplodeCounterInterfal","success","onUploadComplete","onCancel","removeTask","onError","errorReason","onUploadCancel","diff","setExistingTask","getHierarchy","i","splice","getResumableFilesData","hasField","collectionDate","uploads","getUploads","show","animated","backdrop","ignoreBackdropClick","content","init","collection","nextPage","updateCurrentPageLabel","getChildren","children","filter","child","prevPage","steps","step","toLowerCase","uploadStoredFiles","uasComponentOid","setParams","execute","hasExtraField","modal","submitText","onConfirm","uuid","localStorage","clear","thisRef","ct","setInterval","hours","Math","floor","minutes","seconds","hoursStr","minutesStr","secondsStr","returnValue","edit","sections","thumbnails","context","baseUrl","window","location","hostname","port","notifier","webSocket","status","loadArtifacts","getArtifacts","artifacts","dem","ortho","ptcloud","imageData","rootPath","substr","lastIndexOf","fileName","exec","lastPeriod","thumbKey","download","indexOf","setExclude","href","folderName","section","removeArtifacts","str","replace","c","toUpperCase","emit","confirm","previous","folders","processRunning","enableSelectableImages","showOrthoRerunMessage","canReprocessImagery","constPageSize","video","src","ins","onNodeChange","count","tabName","onPageChange","getData","onSelect","isProcessable","pn","ps","getObjects","resultSet","isImage","getThumbnail","pushToEros","setTimeout","statusMessage","confirmModalRef","runOrtho","modalRef","metadataUploaded","sortField","sortOrder","pService","items","showSite","product","imageKey","pDocument","entities","getDetail","detail","target","breadcrumbs","getItems","nodes","initData","rawImagePreviewModal","mService","toggleMapOrtho","toggleMapDem","products","fields","requestId","orthoMapped","handleMapIt","demMapped","handleMapDem","changes","refreshProducts","currentValue","original","getProducts","len","layers","classification","hasOrthoLayer","hasDemLayer","hasPointcloud","stopPropagation","n","togglePublish","p","mapIt","published","refresh","userName","admin","newInstance","attributes","applyWithParent","update","node","attribute","readonly","evaluate","files","droppedFile","fileEntry","isFile","upload","relativePath","removeObject","field","uavService","pageChange","metaObject","metadataOption","getUavInformation","onSensorChange","getUAVMetadata","handlePageChange","reset","serialNumber","handleUavClick","onCreateComplete","onHierarchyChange","findIndex","createCollection","resp","cancel","bounds","viewMode","getFilters","getTotals","layerName","startDate","endDate","active","f","must","should","getStacItems","asset","assets","downloadFile","route","cookieService","supportingData","worker","loadingSites","baselayerIconHover","tasks","bureaus","stacLayers","stacLayer","subject","handleExtentChange","searchEntites","isWorker","getCurrentUser","snapshot","handleViewSite","resumables","resumable","getUploadTask","filename","attributionControl","refreshMapPoints","compact","e","coord","lngLat","wrap","lat","lng","document","getElementById","textContent","queryRenderedFeatures","point","current","focusFeatureId","setFilter","highlightListItem","clearHighlightListItem","Boolean","messageTitle","uasAppDisclaimer","addLayer","isMapped","addImageLayer","getBounds","isValidBounds","refreshSites","roots","setNodes","finally","ne","getNorthEast","sw","getSouthWest","abs","getSource","setData","allPointsBounds","bbox","fitBounds","padding","idx","parent","newChild","getCenter","getZoom","view","refreshEntity","getMetadata","sText","subText","numberOfChildren","highlightMapFeature","clearHighlightMapFeature","hoverFeatureId","select","getLayerByClassification","getLayer","removeLayer","removeSource","boundingBox","startsWith","l","easeTo","getTypeContainsFolders","showLeafModal","addBreadcrumb","expand","staticTabs","tabs","class","parse","hideStacLayer","handleStacZoom","showStacLayer","polygons","env","links","link","rel","encodeURIComponent","public","removeImageLayer","sites","projects","missions","collections","hideUploadPanel","siteId","project","mission","projectId","missionId","trim","showUploadPanel","managementService","showUploads","showProcess","showStore","showODMOutput","showError","taskGroups","taskGroupType","actions","deleteTask","pos","totalTaskCount","activeTab","taskPage","errorStatuses","completeStatuses","messages","setTaskData","getMessages","updateTaskData","tab","parentNode","classList","contains","lis","getElementsByTagName","li","cls","visible","groups","taskGroupTypeIndex","setTaskGroupStatuses","latestDate","group","isLatestTask","sortedTasks","a","b","Date","lastUpdateDate","getTime","firstDate","getTasks","setGroupTasks","taskGroup","onMessagePageChange","onTabClick","Endpoint","router","cols","header","sortable","order","onView","row","onRemove","navigate","classificationService","wavelengths","types","getAll","WAVE_LENGTH","SENSOR_TYPE","apply","wavelength","checked","w","platform","sensorService","manufacturers","PLATFORM_MANUFACTURER","PLATFORM_TYPE","s","_metadata","title","metadata","EquipmentComponent","isSensorTypeCollapsed","isSensorWavelengthCollapsed","isPlatformTypeCollapsed","isPlatformManufacturerCollapsed","ForbiddenNameDirective","control","nameRe","RegExp","test","provide","useExisting","multi","OnlyNumber","el","keyCode","ctrlKey","shiftKey","CanDeactivateGuardService","canDeactivate","UAVsPageComponent","platformService","urlField","columnType","col","onExportCSV","routes","path","canActivate","columns","SiteRoutingModule","useClass","forChild","SiteModule","forRoot"],"mappings":"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AW,GACX1I,KAAM,CACF6lB,MAAO,gBACPtpB,MAAO,OACPuT,QAASoU,GAASwB,gBAG1B,CACIgC,KAAM,mBACNC,YAAa,CAAC,MACdjf,UAAW,GACX1I,KAAM,CACF6lB,MAAO,cACPtpB,MAAO,OACPuT,QAASoU,GAASe,YAClB2C,QAAS,CACL,CACIjoB,KAAM,kBACNpD,MAAO,mBACPiD,KAAM,cAMtB,CACIkoB,KAAM,mBACNC,YAAa,CAAC,MACdjf,UAAW,GACX1I,KAAM,CACF6lB,MAAO,cACPtpB,MAAO,cACPuT,QAASoU,GAASc,cAG1B,CACI0C,KAAM,OACNC,YAAa,CAAC,MACdjf,UAAWye,IAEf,CACIO,KAAM,WACNC,YAAa,CAAC,MACdjf,UAAW,IAEf,CACIgf,KAAM,YACNC,YAAa,CAAC,MACdjf,UAAWqd,GACX/lB,KAAM,KASP,MAAM6nB,I,mBAAAA,K,gDAAAA,KAAiB,UAFf,CAAC,CAAEpB,QAAS,IAAkBqB,SAAU,MAAuB,SAFjE,CAAC,IAAaC,SAASN,KACtB,Q,gDAGDI,GAAiB,wBAHhB,O,2GCKP,MAAMG,I,mBAAAA,K,gDAAAA,KAAU,UAvBX,CACVf,GACA,EACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,IACA,SA9DQ,CACR,IACA,IACA,IACA,IAIA,IACA,IACA,IACA,IACA,IAAWgB,UACX,IAAeA,UACf,KACAJ,GACA,S,gDA0DWG,GAAU,eAvDrB,EACA,GACA,GACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA5B,GACAQ,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACMO,GACN,GACA,GACA,GACMpB,GACN,IAAmB,SAhDnB,IACA,IACA,IACA,IAIA,IACA,IACA,IACA,IAAe,QAGf,KACA8B,GACA,O,KAMA,EAAsB,yRAHtB,EACA,GACA,GACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACAzB,GACAQ,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACMO,GACN,GACA,GACA,GACMpB,GACN,IAAmB,wF,KAxBnB,GAAoB,yRANpB,EACA,GACA,GACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACAK,GACAQ,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACMO,GACN,GACA,GACA,GACMpB,GACN,IAAmB","file":"2.chunk.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { map } from 'rxjs/operators';\r\n// import 'rxjs/add/operator/toPromise';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { GeoJSONSource } from 'mapbox-gl';\r\n\r\nimport * as mapboxgl from 'mapbox-gl';\r\n\r\n\r\nconst mapboxKey = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNTFnaTYyZ2RuNDlxcmNnejNtNjN6In0.-kmlS8Tgb2fNc1NPb5rJEQ';\r\n\r\n\r\ndeclare var acp: any;\r\n\r\nexport interface TileJson {\r\n    bounds: [number, number, number, number],\r\n    center: [number, number],\r\n    maxzoom: number,\r\n    minzoom: number,\r\n    scheme: string,\r\n    tilejson: string,\r\n    tiles: any,\r\n    version: string\r\n}\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n    constructor(private http: HttpClient) {\r\n        (mapboxgl as any).accessToken = mapboxKey;\r\n    }\r\n\r\n    features(conditions: { field: string, value: any }[]): Promise<{ features: GeoJSONSource, bbox: number[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n        if (conditions != null) {\r\n            params = params.set('conditions', JSON.stringify(conditions));\r\n        }\r\n\r\n        return this.http\r\n            .get<{ features: GeoJSONSource, bbox: number[] }>(acp + '/project/features', { params: params })\r\n            .toPromise()\r\n    }\r\n\r\n    mbForwardGeocode(searchText: string): Promise<any> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        let url = \"https://api.mapbox.com/geocoding/v5/mapbox.places/\" + searchText + \".json?proximity=-74.70850,40.78375&access_token=\" + mapboxKey;\r\n\r\n        return this.http\r\n            .get(url, { params: params })\r\n            .toPromise()\r\n    }\r\n    \r\n    tilejson(url: string): Promise<TileJson> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<TileJson>(url)\r\n            .toPromise()\r\n    }\r\n\r\n}","<div class=\"row-holder\">\n    <div class=\"label-holder\"></div>\n    <div class=\"holder\">\n    <div class=\"modal-body\">\n      <div id=\"search-container\" style=\"position: absolute;z-index: 999;padding: 15px;width: 35%;\">\n        <input class=\"form-control search-input\" type=\"text\" placeholder=\"Search...\" [(ngModel)]=\"search\"\n                          [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"handleClick($event)\"\n                          [typeaheadOptionsLimit]=\"10\" [typeaheadItemTemplate]=\"bsItemTemplate\" typeaheadOptionField=\"label\"\n                          [ngModelOptions]=\"{standalone: true}\" (keydown.enter)=\"$event.preventDefault()\" />\n      </div>\n\t\t  <div id=\"map-attribute-div\" class=\"map-view-port\" style=\"height:300px;\"></div>\n    </div>\n  </div>\n</div>\n<div class=\"row-holder\">\n    <div class=\"label-holder\"><label>Longitude</label></div>\n    <div class=\"holder\">\n    <div class=\"modal-body text-left\">\n      <input name=\"longitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"coordinate.longitude\" (change)=\"refreshCoordinateFromInput()\" required />\n    </div>\n  </div>\n</div>\n<div class=\"row-holder\">\n    <div class=\"label-holder\"><label>Latitude</label></div>\n    <div class=\"holder\">\n    <div class=\"modal-body text-left\">\n      <input name=\"latitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"coordinate.latitude\" (change)=\"refreshCoordinateFromInput()\" required />\n    </div>\n  </div>\n</div>\n\n<ng-template #bsItemTemplate let-match=\"match\" let-query=\"query\">\n  <span *ngIf=\"match.item.filename == null\">\n    <i class=\"fa fa-folder-open\"></i>\n  </span>\n  <span *ngIf=\"match.item.filename != null\">\n    <i class=\"fa fa-file\"></i>\n  </span>\n  <span>\n    <span *ngFor=\"let site of match.item.hierarchy; index as i\">\n        {{site.label}} /\n        <!-- <span *ngIf=\"i < (match.item.hierarchy.length -1)\">/</span> -->\n    </span>\n  </span>\n  <b>{{ match.item.label}}</b>\n</ng-template>","import { Component, OnInit, OnDestroy, AfterViewInit, Input } from '@angular/core';\nimport { Map, LngLat, NavigationControl, ImageSource, MapboxOptions } from 'mapbox-gl';\nimport * as MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport * as StaticMode from '@mapbox/mapbox-gl-draw-static-mode';\nimport { Observable } from 'rxjs';\n\n\nimport { SiteEntity } from '@site/model/management';\nimport { MapService } from '@site/service/map.service';\n\n\n@Component( {\n    selector: 'map-attribute',\n    templateUrl: './map-attribute.component.html',\n    styles: [],\n} )\nexport class MapAttributeComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    /* \n     * mapbox-gl map\n     */\n    map: Map;\n\n    /* \n     * Draw control\n     */\n    draw: MapboxDraw;\n\n    /* \n     * List of base layers\n     */\n    baseLayers: any[] = [{\n        label: 'Outdoors',\n        id: 'outdoors-v11',\n        selected: true\n    }, {\n        label: 'Satellite',\n        id: 'satellite-v9'\n    }, {\n        label: 'Streets',\n        id: 'streets-v11'\n    }];\n\n    @Input() site: SiteEntity;\n\n    @Input() center: LngLat = new LngLat( -78.880453, 42.897852 );\n    @Input() zoom: number = 2;\n\n    coordinate: {\n        longitude: number,\n        latitude: number\n    } = { longitude: null, latitude: null };\n\n    /* \n     * Datasource to get search responses\n     */\n    dataSource: Observable<any>;\n\n    /* \n     * Model for text being searched\n     */\n    search: string = \"\";\n\n    constructor( private mapService: MapService ) { \n        this.dataSource = Observable.create(( observer: any ) => {\n\n            this.mapService.mbForwardGeocode( this.search ).then( response => {\n                const match = response.features;\n                let results = [];\n\n                // Add Mapbox results to any local results\n                match.forEach( obj => {\n                    let newObj = {\n                        id: obj.id,\n                        hierarchy: [],\n                        label: obj.place_name,\n                        center: obj.center,\n                        source: \"MAPBOX\"\n                    }\n\n                    results.push( newObj );\n                } );\n\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.refreshCoordinateFromMap();\n    }\n\n    ngAfterViewInit() {\n\n        // setTimeout(() => {\n        //     if ( this.tree ) {\n        //         this.tree.treeModel.expandAll();\n        //     }\n        // }, 1000 );\n\n        let config: MapboxOptions = {\n            container: 'map-attribute-div',\n            style: 'mapbox://styles/mapbox/outdoors-v11',\n            zoom: this.zoom,\n            center: this.center\n        };\n\n        if ( this.site.geometry != null ) {\n            //                    config.zoom = 10;\n            config.center = this.site.geometry.coordinates;\n        }\n\n\n        this.map = new Map( config );\n\n        this.map.on( 'load', () => {\n            this.initMap();\n        } );\n    }\n\n    ngOnDestroy(): void {\n        this.map.remove();\n    }\n\n    initMap(): void {\n\n        let modes = MapboxDraw.modes;\n        modes.static = StaticMode;\n\n        this.draw = new MapboxDraw( {\n            modes: modes,\n            displayControlsDefault: false,\n            controls: {\n                static: true\n            }\n        } );\n\n        this.map.addControl( this.draw );\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl( new NavigationControl() );\n\n        this.map.on( \"draw.update\", ( $event ) => { this.onDrawUpdate( $event ) } );\n        this.map.on( \"draw.create\", ( $event ) => { this.onDrawCreate( $event ) } );\n        this.map.on( \"draw.modechange\", ( $event ) => { this.onDrawUpdate( $event ) } );\n\n        this.map.on( 'style.load', () => {\n            this.addLayers();\n            //            this.refresh( false );\n        } );\n\n        this.addLayers();\n    }\n\n\n    addLayers(): void {\n\n        if ( this.site.geometry != null ) {\n            let feature = {\n                id: this.site.id,\n                type: 'Feature',\n                properties: {\n                    oid: this.site.id,\n                    name: this.site.name\n                },\n                geometry: this.site.geometry\n            };\n\n            this.draw.add( feature );\n            this.draw.changeMode( 'simple_select', { featureIds: [feature.id] } );\n        }\n        else {\n            this.draw.changeMode( 'draw_point', {} );\n        }\n\n        this.map.addSource( 'sites', {\n            type: 'geojson',\n            data: {\n                \"type\": \"FeatureCollection\",\n                \"features\": []\n            }\n        } );\n    }\n\n    onDrawUpdate( event: any ): void {\n        if ( event.action === 'move' && event.features != null && event.features.length > 0 ) {\n            this.updateGeometry( event.features[0] )\n        }\n    }\n\n    onDrawCreate( event: any ): void {\n        if ( event.features != null && event.features.length > 0 ) {\n\n            let feature = event.features[0];\n            feature.id = this.site.id;\n\n            this.updateGeometry( feature )\n        }\n    }\n\n    updateGeometry( feature: any ): void {\n        this.site.geometry = feature.geometry;\n\n        this.refreshCoordinateFromMap();\n    }\n\n    refreshCoordinateFromMap(): void {\n        if ( this.site != null && this.site.geometry != null ) {\n            this.coordinate.longitude = this.site.geometry.coordinates[0];\n            this.coordinate.latitude = this.site.geometry.coordinates[1];\n        }\n    }\n\n    refreshCoordinateFromInput(): void {\n        if ( this.coordinate.longitude != null && this.coordinate.latitude != null ) {\n            console.log( this.site.geometry );\n\n            if ( this.site.geometry == null ) {\n                this.site.geometry = { type: 'Point' };\n            }\n\n            this.site.geometry.coordinates = [this.coordinate.longitude, this.coordinate.latitude];\n\n            var ids = this.draw.set( {\n                type: 'FeatureCollection',\n                features: [{\n                    id: this.site.id,\n                    type: 'Feature',\n                    properties: {\n                        oid: this.site.id,\n                        name: this.site.name\n                    },\n                    geometry: this.site.geometry\n                }]\n            } );\n\n            this.draw.changeMode( 'simple_select', { featureIds: ids } );\n        }\n    }\n\n    //    zoomToFeature( node: TreeNode ): void {\n    //        if ( node.data.geometry != null ) {\n    //            this.map.flyTo( {\n    //                center: node.data.geometry.coordinates\n    //            } );\n    //        }\n    //    }\n\n    handleStyle( layer: any ): void {\n\n        this.baseLayers.forEach( baseLayer => {\n            baseLayer.selected = false;\n        } );\n\n        layer.selected = true;\n\n        this.map.setStyle( 'mapbox://styles/mapbox/' + layer.id );\n    }\n\n    handleClick( $event: any ): void {\n        let result = $event.item;\n\n        if ( result.center ) {\n            this.map.flyTo( {\n                center: result.center,\n                zoom: 9\n            } )\n        }\n    }\n    \n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\nimport { LngLatBounds } from 'mapbox-gl';\nimport { Observable } from 'rxjs';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize, debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';\n\nimport { AuthService } from '@shared/service/auth.service';\nimport { EventService } from '@shared/service/event.service';\nimport { HttpBackendClient } from '@shared/service/http-backend-client.service';\n\nimport { SiteEntity, Message, Task, AttributeType, Condition, SiteObjectsResultSet, TaskGroup, Selection, CollectionArtifacts } from '../model/management';\nimport { Sensor } from '../model/sensor';\nimport { Platform } from '../model/platform';\nimport { PageResult } from '@shared/model/page';\nimport { Criteria, StacItem } from '@site/model/layer';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ManagementService {\n\n\tconstructor(private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService, private authService: AuthService) { }\n\n\tgetChildren(id: string): Promise<SiteEntity[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\n\t\treturn this.http\n\t\t\t.get<SiteEntity[]>(acp + '/project/get-children', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tgetObjects(id: string, key: string, pageNumber: number, pageSize: number): Promise<SiteObjectsResultSet> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\t\tif (key != null) {\n\t\t\tparams = params.set('key', key);\n\t\t}\n\n\t\tif (pageNumber != null) {\n\t\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\t}\n\t\tif (pageSize != null) {\n\t\t\tparams = params.set('pageSize', pageSize.toString());\n\t\t}\n\n\t\treturn this.http\n\t\t\t.get<SiteObjectsResultSet>(acp + '/project/objects', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tview(id: string): Promise<{ breadcrumbs: SiteEntity[], item: SiteEntity }> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\t\treturn this.http\n\t\t\t.get<{ breadcrumbs: SiteEntity[], item: SiteEntity }>(acp + '/project/view', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tgetItems(id: string, key: string): Promise<SiteEntity[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\t\tif (key != null) {\n\t\t\tparams = params.set('key', key);\n\t\t}\n\n\t\treturn this.http\n\t\t\t.get<SiteEntity[]>(acp + '/project/items', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tgetArtifacts(id: string): Promise<CollectionArtifacts> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\t\treturn this.http\n\t\t\t.get<CollectionArtifacts>(acp + '/project/get-artifacts', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tremoveArtifacts(id: string, folder: string): Promise<CollectionArtifacts> {\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tconst params = {\n\t\t\tid: id,\n\t\t\tfolder: folder\n\t\t};\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<CollectionArtifacts>(acp + '/project/remove-artifacts', JSON.stringify(params), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\n\n\troots(id: string, conditions: { field: string, value: any }[], sort?: string): Promise<SiteEntity[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\n\t\tif (id != null) {\n\t\t\tparams = params.set('id', id);\n\t\t}\n\n\t\tif (conditions != null) {\n\t\t\tparams = params.set('conditions', JSON.stringify(conditions));\n\t\t}\n\n\t\tif (sort != null) {\n\t\t\tparams = params.set('sort', sort);\n\t\t}\n\n\n\t\treturn this.http\n\t\t\t.get<SiteEntity[]>(acp + '/project/roots', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tedit(id: string): Promise<{ item: SiteEntity, attributes: AttributeType[] }> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<{ item: SiteEntity, attributes: AttributeType[] }>(acp + '/project/edit', JSON.stringify({ id: id }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tsetExclude(id: string, exclude: boolean): Promise<SiteEntity> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<SiteEntity>(acp + '/project/set-exclude', JSON.stringify({ id: id, exclude: exclude }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\trunOrtho(id: string, processPtcloud: boolean, processDem: boolean, processOrtho: boolean): Promise<{ item: SiteEntity, attributes: AttributeType[] }> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\t//   this.eventService.start();\n\n\t\tconst params = {\n\t\t\tid: id,\n\t\t\tprocessPtcloud: processPtcloud,\n\t\t\tprocessDem: processDem,\n\t\t\tprocessOrtho: processOrtho\n\t\t};\n\n\t\treturn this.http\n\t\t\t.post<{ item: SiteEntity, attributes: AttributeType[] }>(acp + '/project/run-ortho', JSON.stringify(params), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\t//\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tupdate(entity: SiteEntity): Promise<SiteEntity> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.noErrorHttpClient\n\t\t\t.post<SiteEntity>(acp + '/project/update', JSON.stringify({ entity: entity }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tnewChild(parentId: string, type: string): Promise<{ item: SiteEntity, attributes: AttributeType[] }> {\n\n\t\tlet url = '/project/new-default-child';\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tlet params = {} as any;\n\n\t\tif (parentId != null) {\n\t\t\tparams.parentId = parentId;\n\t\t}\n\n\t\tif (type) {\n\t\t\tparams.type = type;\n\n\t\t\turl = '/project/new-child';\n\t\t}\n\n\n\t\tthis.eventService.start();\n\n\n\t\treturn this.http\n\t\t\t.post<{ item: SiteEntity, attributes: AttributeType[] }>(acp + url, JSON.stringify(params), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\n\n\tapplyWithParent(entity: SiteEntity, parentId: string): Promise<SiteEntity> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\n\t\tlet params = { entity: entity } as any;\n\n\t\tif (parentId != null) {\n\t\t\tparams.parentId = parentId;\n\t\t}\n\n\n\t\tthis.eventService.start();\n\n\t\treturn this.noErrorHttpClient\n\t\t\t.post<SiteEntity>(acp + '/project/apply-with-parent', JSON.stringify(params), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tgetCurrentUser(): string {\n\t\t//        let userName: string = \"admin\";\n\t\t//\n\t\t//        if ( this.cookieService.check( \"user\" ) ) {\n\t\t//            let cookieData: string = this.cookieService.get( \"user\" )\n\t\t//            let cookieDataJSON: any = JSON.parse( JSON.parse( cookieData ) );\n\t\t//            userName = cookieDataJSON.userName;\n\t\t//        }\n\t\t//        else {\n\t\t//            console.log( 'Check fails for the existence of the cookie' )\n\t\t//\n\t\t//            let cookieData: string = this.cookieService.get( \"user\" )\n\t\t//\n\t\t//            if ( cookieData != null ) {\n\t\t//                let cookieDataJSON: any = JSON.parse( JSON.parse( cookieData ) );\n\t\t//                userName = cookieDataJSON.userName;\n\t\t//            }\n\t\t//            else {\n\t\t//                console.log( 'Unable to get cookie' );\n\t\t//            }\n\t\t//        }\n\n\t\treturn this.authService.getUserName();\n\t}\n\n\tremove(id: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/project/remove', JSON.stringify({ id: id }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tremoveObject(componentId: string, key: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/project/removeObject', JSON.stringify({ id: componentId, key: key }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tremoveTask(uploadId: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/project/remove-task', JSON.stringify({ uploadId: uploadId }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tupload(id: string, folder: string, file: File): Promise<Document> {\n\n\t\tthis.eventService.start();\n\n\t\tconst formData = new FormData()\n\t\tformData.append('file', file);\n\t\tformData.append('id', id);\n\t\tformData.append('folder', folder);\n\n\t\treturn this.http.post<Document>(acp + '/project/upload', formData)\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\ttasks(statuses: string[], pageSize: number, pageNumber: number, token: number): Promise<PageResult<TaskGroup>> {\n\n\t\t// status options: PROCESSING, COMPLETE, ERROR, QUEUED\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('statuses', JSON.stringify(statuses));\n\t\tparams = params.set('pageSize', pageSize.toString());\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\tparams = params.set('token', token.toString());\n\n\t\treturn this.http\n\t\t\t.get<PageResult<TaskGroup>>(acp + '/project/tasks', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\n\tgetTasks(collectionId: string): Promise<Task[]> {\n\n\t\t// status options: PROCESSING, COMPLETE, ERROR, QUEUED\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('collectionId', collectionId);\n\n\t\treturn this.http\n\t\t\t.get<Task[]>(acp + '/project/collection-tasks', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\ttask(id: string): Promise<{ messages: Message[], task: Task }> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\t\treturn this.http\n\t\t\t.get<{ messages: Message[], task: Task }>(acp + '/project/task', { params: params })\n\t\t\t.toPromise();\n\t}\n\n\tgetUploadTask(uploadId: string): Promise<Task> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('uploadId', uploadId);\n\n\t\treturn this.http\n\t\t\t.get<Task>(acp + '/project/get-upload-task', { params: params })\n\t\t\t.toPromise();\n\t}\n\n\n\n\tgetMessages(pageSize: number, pageNumber: number): Promise<PageResult<Message>> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('pageSize', pageSize.toString());\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\n\t\treturn this.http.get<PageResult<Message>>(acp + '/project/get-messages', { params: params })\n\t\t\t.toPromise();\n\t}\n\n\tdownload(id: string, key: string, useSpinner: boolean): Observable<Blob> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\t\tparams = params.set('key', key);\n\n\t\tif (useSpinner) {\n\t\t\tthis.eventService.start();\n\t\t}\n\n\t\treturn this.noErrorHttpClient.get<Blob>(acp + '/project/download', { params: params, responseType: 'blob' as 'json' })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tif (useSpinner) {\n\t\t\t\t\tthis.eventService.complete();\n\t\t\t\t}\n\t\t\t}))\n\t}\n  \n  downloadProductPreview(productId: string, useSpinner: boolean): Observable<Blob> {\n\n    let params: HttpParams = new HttpParams();\n    params = params.set('productId', productId);\n    params = params.set('artifactName', \"ortho\");\n\n    if (useSpinner) {\n      this.eventService.start();\n    }\n\n    return this.noErrorHttpClient.get<Blob>(acp + '/project/downloadProductPreview', { params: params, responseType: 'blob' as 'json' })\n      .pipe(finalize(() => {\n        if (useSpinner) {\n          this.eventService.complete();\n        }\n      }))\n  }\n\n\tdownloadFile(url: string, useSpinner: boolean): Promise<Blob> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('url', url);\n\n\t\tif (useSpinner) {\n\t\t\tthis.eventService.start();\n\t\t}\n\n\t\treturn this.noErrorHttpClient.get<Blob>(acp + '/project/download-file', { params: params, responseType: 'blob' as 'json' })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tif (useSpinner) {\n\t\t\t\t\tthis.eventService.complete();\n\t\t\t\t}\n\t\t\t})).toPromise();\n\t}\n\n\n\tdownloadAll(id: string, key: string, useSpinner: boolean): Observable<Blob> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\t\tparams = params.set('key', key);\n\n\t\tif (useSpinner) {\n\t\t\tthis.eventService.start();\n\t\t}\n\n\t\treturn this.noErrorHttpClient.get<Blob>(acp + '/project/download-all', { params: params, responseType: 'blob' as 'json' })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tif (useSpinner) {\n\t\t\t\t\tthis.eventService.complete();\n\t\t\t\t}\n\t\t\t}))\n\t}\n\n\tsearch(terms: Observable<string>) {\n\t\treturn terms\n\t\t\t.pipe(debounceTime(400))\n\t\t\t.pipe(distinctUntilChanged())\n\t\t\t.pipe(switchMap(term => this.searchEntries(term)));\n\t}\n\n\tsearchEntries(term: string): Observable<string> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('term', term);\n\n\t\treturn this.http\n\t\t\t.get<string>(acp + '/project/search', { params: params })\n\t}\n\n\tsearchEntites(term: string): Promise<any> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('term', term);\n\n\t\treturn this.http\n\t\t\t.get(acp + '/project/search', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tsubmitCollectionMetadata(collectionId: string, metaObj: Object): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.noErrorHttpClient\n\t\t\t.post<void>(acp + '/project/submit-metadata', JSON.stringify({ collectionId: collectionId, json: metaObj }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tapplyMetadata(selection: Selection): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/project/apply-metadata', JSON.stringify({ selection: selection }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tcreateCollection(selections: Selection[]): Promise<{ oid: string }> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<{ oid: string }>(acp + '/project/create-collection', JSON.stringify({ selections: selections }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\n\tpushToEros(collectionId: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/eros/push', JSON.stringify({ collectionId: collectionId }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tgetMetadataOptions(id: string): Promise<{ name: string, email: string, uav: any, sensor: any }> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\n\t\tif (id != null) {\n\t\t\tparams = params.set('id', id);\n\t\t}\n\n\t\treturn this.noErrorHttpClient\n\t\t\t.get<{ name: string, email: string, uav: any, sensor: any }>(acp + '/project/metadata-options', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tgetUAVMetadata(uavId: string, sensorId: string): Promise<{ uav: any, sensor: any }> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('uavId', uavId);\n\t\tparams = params.set('sensorId', sensorId);\n\n\t\treturn this.noErrorHttpClient\n\t\t\t.get<{ uav: any, sensor: any }>(acp + '/project/uav-metadata', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\n\tevaluate(condition: Condition, entity: SiteEntity): boolean {\n\t\tif (condition != null && condition.type === 'eq') {\n\t\t\treturn (entity[condition.name] === condition.value);\n\t\t}\n\t\telse if (condition != null && condition.type === 'admin') {\n\t\t\treturn this.authService.isAdmin();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tbureaus(): Promise<{ value: string, label: string }[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\n\t\treturn this.http\n\t\t\t.get<{ value: string, label: string }[]>(acp + '/uav/bureaus', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tgetTotals(text: string, filters: any[]): Promise<any> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('text', text);\n\t\tparams = params.set('filters', JSON.stringify(filters));\n\n\t\treturn this.http\n\t\t\t.get(acp + '/project/get-totals', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tgetStacItems(criteria: Criteria, pageSize: number, pageNumber: number): Promise<PageResult<StacItem>> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('criteria', JSON.stringify(criteria));\n\t\tparams = params.set('pageSize', pageSize.toString());\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\n\t\treturn this.http\n\t\t\t.get<PageResult<StacItem>>(acp + '/project/get-stac-items', { params: params })\n\t\t\t.toPromise()\n\t}\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"error-container\">\n        <div class=\"label-holder\">\n            <strong>Error</strong>\n        </div>\n        <div class=\"holder\">\n            <div>\n                <p class=\"error-message\">{{message}}</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"image-preview-container\">\n        <i class=\"fa fa-times btn btn-close\" style=\"min-width:0;\" (click)=\"bsModalRef.hide()\"></i>\n        <div class=\"image-container\">\n            <p *ngIf=\"loading\" style=\"text-align: left;\">Loading image...</p>\n            <img *ngIf=\"!loading\" class=\"image-preview img-responsive center-block\" [src]=\"imageToShow | safeHtml\" alt=\"Image\">\n        </div>\n    </div>\n\n    <!-- <form #ngForm=\"ngForm\">\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Cancel</button>\n    </div>\n  </form> -->\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef, Input } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ErrorHandler } from '@shared/component';\n\nimport { ManagementService } from '@site/service/management.service';\n\n\n@Component( {\n    selector: 'image-preview-modal',\n    templateUrl: './image-preview-modal.component.html',\n    styleUrls: []\n} )\nexport class ImagePreviewModalComponent {\n\n    message: string = null;\n    open: boolean = true;\n    loading: boolean = true;\n    imageToShow: any;\n    productId: string;\n\n    constructor( private service: ManagementService, public bsModalRef: BsModalRef ) { }\n\n    init( productId: string ) {\n        this.productId = productId;\n\n        this.getImage( this.productId );\n    }\n\n    createImageFromBlob( image: Blob ) {\n        let reader = new FileReader();\n        reader.addEventListener( \"load\", () => {\n            this.imageToShow = reader.result;\n        }, false );\n\n        if ( image ) {\n            reader.readAsDataURL( image );\n        }\n    }\n\n    getImage( productId: string ): void {\n\n        this.loading = true;\n\n        // 0 here is the entire image. Larger number retrieves a smaller image from the cog.\n        let imageSize = 2;\n        \n        this.service.downloadProductPreview( productId, false ).subscribe( blob => {\n            this.createImageFromBlob( blob );\n            this.loading = false;\n        }, error => {\n            this.loading = false;\n\n            this.error( error );\n        } );\n    }\n\n    close(): void {\n        this.open = false;\n    }\n\n    error(err: HttpErrorResponse): void {\n\t  this.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","import { PageResult } from '@shared/model/page';\nimport { Sensor } from './sensor';\nimport { Platform } from './platform';\nimport { UAV } from './uav'\n\nexport class Condition {\n\tname: string;\n\tvalue: string;\n\ttype: string;\n}\n\nexport class AttributeType {\n\tname: string;\n\tlabel: string;\n\ttype: string;\n\trequired: boolean;\n\timmutable: boolean;\n\treadonly: boolean;\n\tcondition: Condition;\n\toptions?: { value: string, label: string }[];\n}\n\nexport class SiteObjectsResultSet {\n\tcount: number;\n\tpageNumber: number;\n\tpageSize: number;\n\tresults: SiteEntity[];\n\tfolder: string;\n}\n\nexport class SiteEntity {\n\tid: string;\n\tname: string;\n\tfolderName: string;\n\ttype: string;\n\tcomponent: string;\n\tkey: string;\n\tmetadataUploaded?: boolean;\n\tgeometry?: any;\n\tnumberOfChildren: number;\n\tlastModified?: string;\n\townerName?: string;\n\townerPhone?: string;\n\townerEmail?: string;\n\tprivilegeType?: string;\n\tchildren?: SiteEntity[];\n\tactive?: boolean;\n\texclude?: boolean;\n\tsensor?: Sensor;\n\tplatform?: Platform;\n\tuav?: UAV;\n\tpilotName?: string;\n\tdateTime?: string;\n\tcollectionDate?: string;\n\tdescription?: string;\n\ttool?: string;\n  hasAllZip?: boolean;\n}\n\nexport class CollectionArtifacts {\n\tdem?: SiteEntity\n\tortho?: SiteEntity\n\tptcloud?: SiteEntity\n}\n\n\nexport class CollectionHierarchy {\n\tsite: string;\n\tproject: string;\n\tmission: string;\n\tcollection: string;\n}\n\nexport class ImageHierarchy {\n\tsite: string;\n\tproject: string;\n\timage: string;\n}\n\nexport class Selection {\n\ttype: string;\n\tisNew: boolean;\n\tvalue: string;\n\tlabel: string;\n\tuav?: string;\n\tsensor?: string;\n\tcollectionDate?: string;\n\tpointOfContact?: {\n\t\tname: string,\n\t\temail: string\n\t}\n};\n\n\nexport class UploadForm {\n\tcreate: boolean;\n\tname: string;\n\toutFileName: string;\n\tuasComponentOid: string;\n\tsite: string;\n\tproject: string;\n\tmission: string;\n\tcollection: any;\n\timagery: any;\n\tuploadTarget: string;\n\tselections: string;\n\tprocessUpload: boolean;\n\tprocessOrtho: boolean;\n\tprocessDem: boolean;\n\tprocessPtcloud: boolean;\n\ttool?: string;\n\tdescription?: string;\n}\n\nexport class Action {\n\tcreateDate: string;\n\tlastUpdateDate: string;\n\ttype: string;\n\tdescription: string;\n}\n\nexport class Task {\n\toid: string;\n\tlabel: string;\n\tcreateDate: string;\n\tlastUpdateDate: string;\n\tstatus: string;\n\tmessage: string;\n\tactions: Action[];\n\tuploadId: string;\n\todmOutput: string;\n\tcollection: string;\n\tcollectionLabel: string;\n\ttype: string;\n\tuploadTarget?: string;\n\tvisible?: boolean;\n\tshowError?: boolean;\n\tancestors?: string[];\n\tsensorName?: string;\n}\n\nexport class TaskGroup {\n\tlabel: string;\n\tcollectionId: string;\n\tvisible?: boolean;\n\tloading?: boolean;\n\tgroups: TaskGroupType[];\n\tstatus: string;\n\tlastUpdatedDate: string;\n\tancestors?: string[];\n}\n\nexport class TaskGroupType {\n\ttasks: Task[];\n\tstatus: string;\n\ttype: string;\n}\n\nexport class Message {\n\toid: string;\n\tmessage: string;\n\ttype: string;\n\tdata: { [key: string]: any };\n}\n\n// export class Message {\n// \tcollectionId: string;\n// \tcollectionName: string;\n// \tancestors: string[];\n// \tmessage: string;\n// \timageWidth: string;\n// \timageHeight: string;\n// }\n\nexport class ProductDocument {\n\tid: string;\n\tname: string;\n\tkey: string;\n}\n\nexport class Product {\n\tid: string;\n\tname: string;\n\tentities: SiteEntity[];\n\tpublished: boolean;\n\timageKey?: string;\n  orthoKey?: string;\n  demKey?: string;\n\tboundingBox?: number[];\n\tlayers: MapLayer[];\n\torthoMapped?: boolean;\n\tdemMapped?: boolean;\n\thasPointcloud?: boolean;\n  hasAllZip?: boolean;\n}\n\nexport class MapLayer {\n\tworkspace?: string;\n\tclassification: string;\n\tkey: string;\n\tisMapped?: boolean;\n  public: boolean;\n  url: string;\n}\n\n//export class ProductDetail extends Product {\n//\tpilotName: string;\n//\tdateTime: string;\n//\tsensorName: string;\n//    sensorId: string;\n//    sensorType: string;\n//    sensorModel: string;\n//    sensorDescription: string;\n//\tpage?: PageResult<ProductDocument>;\n//}\n\nexport class ProductDetail extends Product {\n\tpilotName: string;\n\tdateTime: string;\n\tcollectionDate: string;\n\tsensor: Sensor;\n\tplatform: Platform;\n\tuav: UAV;\n\tpage?: PageResult<ProductDocument>;\n}\n","<div>\n\t<h3>Metadata</h3>\n    <div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n\n        <div *ngIf=\"isOldFormat\" class=\"row error-container\">\n            <div class=\"col-md-2\"></div>\n            <div class=\"col-md-8\">\n                <div class=\"label-holder\">\n                    <strong style=\"color:#c7a717;\">Information</strong>\n                </div>\n                <div class=\"holder\">\n                    <div>\n                        <p style=\"color:#c7a717;\">The metadata was originally submitted in an out of date format and needs to be re-entered</p>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-2\"></div>\n        </div>\n\n\n        <div *ngIf=\"message != null && message.length > 0\" class=\"row error-container\">\n            <div class=\"col-md-2\"></div>\n            <div class=\"col-md-8\">\n                <div class=\"label-holder\">\n                    <strong style=\"color:#8c0000;\">Error</strong>\n                </div>\n                <div class=\"holder\">\n                    <div>\n                        <p class=\"error-message\">{{message}}</p>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-2\"></div>\n        </div>\n\n        <!-- Section for each page -->\n        <div *ngIf=\"page != null\" class=\"row\">\n            <div class=\"col-md-2\"></div>\n            <div class=\"col-md-8\">\n                <div class=\"form-group\">\n                    <metadata-page [(page)]=\"page\"></metadata-page>\n                </div>\n            </div>\n        </div>\n\n\n    </div>\n    <div class=\"modal-footer\">\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div class=\"btn-holder\" style=\"text-align: right;\">\n                    <button type=\"button\" (click)=\"close()\" [disabled]=\"disabled\"\n                        class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n                        <span class=\"ui-button-text\">Close</span>\n                    </button>\n\n                    <button type=\"button btn btn-primary\"\n                        [disabled]=\"disabled\" class=\"btn btn-primary\" (click)=\"handleSubmit()\">\n                        <i class=\"icon-upload icon-white\"></i>\n                        Submit\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef, OnDestroy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { ErrorHandler } from '@shared/component';\nimport { ManagementService } from '@site/service/management.service';\n\nimport { Selection } from '@site/model/management';\nimport { Page } from './upload-modal.component';\n\n@Component({\n\tselector: 'metadata-modal',\n\ttemplateUrl: './metadata-modal.component.html',\n\tstyleUrls: []\n})\nexport class MetadataModalComponent implements OnInit, OnDestroy {\n\t/*\n\t * collectionId for the metadata\n\t */\n\tcollectionId: string;\n\n\tmessage: string = null;\n\n\tdisabled: boolean = false;\n\n\tisOldFormat: boolean = false;\n\n\tpage: Page = null;\n\n\t/*\n\t * Observable subject called when metadata upload is successful\n\t */\n\tpublic onMetadataChange: Subject<Selection>;\n\n\n\tconstructor(public bsModalRef: BsModalRef, private service: ManagementService) { }\n\n\tngOnInit(): void {\n\t\tthis.onMetadataChange = new Subject();\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.onMetadataChange.unsubscribe();\n\t}\n\n\tinit(collectionId: string, collectionName: string): void {\n\t\tthis.collectionId = collectionId;\n\n\t\tthis.service.getMetadataOptions(this.collectionId).then((options) => {\n\n\t\t\tthis.isOldFormat = (options.uav == null || options.sensor == null);\n\n\t\t\tthis.page = {\n\t\t\t\tselection: {\n\t\t\t\t\ttype: 'CATEGORY',\n\t\t\t\t\tisNew: false,\n\t\t\t\t\tvalue: this.collectionId,\n\t\t\t\t\tlabel: collectionName,\n\t\t\t\t\tuav: options.uav != null ? options.uav.oid : null,\n\t\t\t\t\tsensor: options.sensor != null ? options.sensor.oid : null,\n\t\t\t\t\tpointOfContact: {\n\t\t\t\t\t\tname: options.name,\n\t\t\t\t\t\temail: options.email\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tclose(): void {\n\t\tthis.bsModalRef.hide();\n\t}\n\n\n\thandleSubmit(): void {\n\n\t\tthis.service.applyMetadata(this.page.selection).then(() => {\n\t\t\tthis.onMetadataChange.next(this.page.selection);\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n}\n","export class Metadata {\n    root: boolean;\n    leaf: boolean;\n    drillable: boolean;\n    expandable: boolean;\n    uploadable: boolean;\n    processable: boolean;\n    childLabel: string;\n\n    constructor( root: boolean, leaf: boolean, drillable: boolean, expandable: boolean, uploadable: boolean, processable: boolean, childLabel: string ) {\n        this.root = root;\n        this.leaf = leaf;\n        this.drillable = drillable;\n        this.expandable = expandable;\n        this.uploadable = uploadable;\n        this.processable = processable;\n        this.childLabel = childLabel;\n    }\n}","import { Injectable } from '@angular/core';\n\nimport { SiteEntity } from '../model/management';\nimport { Metadata } from '../model/metadata';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class MetadataService {\n\n    private cache: any = {};\n\n    constructor() {\n        // ( root, leaf, drillable, expandable, uploadable, processable )\n        this.cache['Site'] = new Metadata( true, false, true, false, false, false, 'Projects' );\n        this.cache['Project'] = new Metadata( false, false, true, false, false, false, 'Missions' );\n        this.cache['Mission'] = new Metadata( false, false, false, true, false, false, 'Collections' );\n        this.cache['Collection'] = new Metadata( false, true, false, false, false, true, 'Images' );\n        this.cache['folder'] = new Metadata( false, true, false, false, true, false, '' );\n\n        // Metadata for specific folder types\n        this.cache['raw'] = new Metadata( false, false, false, false, true, false, '' );\n        this.cache['accessible'] = new Metadata( false, false, false, false, true, false, '' );\n    }\n\n    getMetadata( entity: SiteEntity ): Metadata {\n        return this.cache[entity.type];\n    }\n\n    getTypeContainsFolders( entity: SiteEntity ): boolean {\n        return ( entity.type === 'Collection' );\n    }\n\n    isUploadable( type: string ): boolean {\n        if ( this.cache[type] != null ) {\n            return this.cache[type].uploadable;\n        }\n\n        return false;\n    }\n\n    hasExtraField( type: string, fieldName: string ): boolean {\n        if ( type === 'Collection' ) {\n            return ( fieldName === 'collectionDate' || fieldName === 'sensor' || fieldName === 'uav' );\n        }\n\n        return false;\n    }\n\n    isProcessable( type: string ): boolean {\n        if ( this.cache[type] != null ) {\n            return this.cache[type].processable;\n        }\n\n        return false;\n    }\n\n    getHierarchy(): string[] {\n\n        return ['Site', 'Project', 'Mission', 'Collection'];\n    }\n}","<div>\n  <div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n\n\n    <div *ngIf=\"message != null && message.length > 0\" class=\"row error-container\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <div class=\"label-holder\">\n          <strong style=\"color:#8c0000;\">Error</strong>\n        </div>\n        <div class=\"holder\">\n          <div>\n            <p class=\"error-message\">{{message}}</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n\n    <div class=\"row\" *ngIf=\"!existingTask\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <ol class=\"list-group list-group-horizontal\">\n          <!-- \n          <li class=\"list-group-item\" [ngClass]=\"{'list-group-item-success':page.type === 'FILE'}\" >Upload</li>\n -->\n\n          <modal-step-indicator [stepConfig]=\"modalStepConfig\"></modal-step-indicator>\n\n          <!-- <li class=\"list-group-item\" [ngClass]=\"{'list-group-item-success':page.type === 'CATEGORY'}\">Categories</li> -->\n          <!-- <li class=\"list-group-item\" [ngClass]=\"{'list-group-item-success':page.type === 'SUMMARY'}\">Finalize</li> -->\n        </ol>\n      </div>\n    </div>\n\n    <!--\n\n      <div class=\"row\" *ngIf=\"!existingTask && labels.length > 0\">\n        <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <ul class=\"breadcrumb\">\n          <li [@fadeInOnEnter] *ngFor=\"let label of labels\">\n            <span> {{label}}</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  -->\n\n\n    <!-- Summary page -->\n    <ng-container *ngIf=\"page.type === 'SUMMARY' && !existingTask && currentTask == null\">\n\n      <div [@fadeInOnEnter] class=\"row\" *ngIf=\"uploadTarget === 'raw'\">\n        <div class=\"col-md-2\"></div>\n        <div class=\"col-md-8\">\n          <artifact-page *ngIf=\"component != null\" [edit]=\"true\" [entity]=\"component\" [config]=\"config\"\n            (onError)=\"error($event)\"></artifact-page>\n\n          <div class=\"form-group\" *ngIf=\"processUpload\">\n            <label for=\"outFileName\">Output Product Name Prefix</label>\n            <input [(ngModel)]=\"values.outFileName\" name=\"outFileName\" type=\"input\" class=\"form-control\"\n              placeholder=\"Output product name prefix...\" />\n          </div>\n        </div>\n      </div>\n      <ng-container *ngIf=\"uploadTarget !== 'raw'\">\n\n        <div [@fadeInOnEnter] *ngIf=\"uploadTarget === 'ortho'\" class=\"row\">\n          <div class=\"col-md-2\"></div>\n          <div class=\"col-md-8\">\n            <div class=\"form-group\">\n              <boolean-field [(value)]=\"config.processOrtho\" label=\"Generate png from upload\"></boolean-field>\n            </div>\n          </div>\n        </div>\n        <div [@fadeInOnEnter] *ngIf=\"uploadTarget === 'dem'\" class=\"row\">\n          <div class=\"col-md-2\"></div>\n          <div class=\"col-md-8\">\n            <div class=\"form-group\">\n              <boolean-field [(value)]=\"config.processDem\" label=\"Generate hillshade from tif\"></boolean-field>\n            </div>\n          </div>\n        </div>\n        <div [@fadeInOnEnter] class=\"row\">\n          <div class=\"col-md-2\"></div>\n          <div class=\"col-md-8\">\n            <div class=\"form-group\">\n              <label for=\"description\">Description</label>\n              <input [(ngModel)]=\"values.description\" name=\"description\" type=\"input\" class=\"form-control\"\n                placeholder=\"Description...\" />\n            </div>\n          </div>\n        </div>\n        <div [@fadeInOnEnter] class=\"row\">\n          <div class=\"col-md-2\"></div>\n          <div class=\"col-md-8\">\n            <div class=\"form-group\">\n              <label for=\"description\">Processing Software</label>\n              <input [(ngModel)]=\"values.tool\" name=\"tool\" type=\"input\" class=\"form-control\" placeholder=\"Software...\" />\n            </div>\n          </div>\n        </div>\n      </ng-container>\n\n    </ng-container>\n\n    <div [@fadeInOnEnter] [hidden]=\"page.type !== 'FILE' && page.type !== 'SUMMARY'\" class=\"row\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n\n        <!-- Existing task panel -->\n        <div *ngIf=\"existingTask && !currentTask\">\n          <div class=\"panel panel-warning\" style=\"margin: 30px 0 30px 0;\">\n            <div class=\"panel-heading\" style=\"font-size: 20px;\">Partial Upload Detected</div>\n            <div class=\"panel-body\">\n              <h4>A partial upload was detected. You can either cancel that partial upload or attempt to\n                continue.</h4>\n              <h4>\n                <b>To continue an upload</b>\n                please re-upload your file and we will try our best to continue where you left off.\n              </h4>\n\n              <!-- \n                            <button type=\"button\" class=\"btn btn-primary\" style=\"margin-top: 20px;\"\n                                (click)=\"showUploadPanel()\">\n                                <i class=\"icon-upload icon-white\"></i>\n                                Continue Upload\n                            </button>\n -->\n            </div>\n          </div>\n        </div> <!-- End existing task panel -->\n\n        <!-- Task finished upload notification -->\n        <div *ngFor=\"let note of taskFinishedNotifications\" class=\"panel panel-success\" style=\"margin: 30px 0 30px 0;\">\n          <div class=\"panel-heading\" style=\"font-size: 20px;\">\n            Upload Details\n            <i class=\"fa fa-times btn btn-close pull-right\" style=\"min-width:20px;padding:0;line-height: 27px;\"\n              (click)=\"closeTaskFinishedNotification(note.id)\"></i>\n          </div>\n          <div class=\"panel-body\">\n            <h4>\n              Status:\n              <b> Upload successfully completed </b>\n            </h4>\n            <h4>\n              Message:\n              <b> {{note.message}} </b>\n              <!-- You can view your uploads on the <a href=\"management#/site/tasks\" >Workflow Task page</a>. -->\n            </h4>\n          </div>\n        </div> <!-- End task finished upload notification -->\n\n        <!-- Current upload indicator -->\n        <div class=\"\" [hidden]=\"!uploadVisible\">\n\n          <div class=\"well\">\n            <h4>All files uploaded through the upload wizard must</h4>\n            <ul>\n              <li>be compressed into a .zip or .tar.gz format </li>\n              <li>not contain spaces or special characters such as <,>, -, +, =, !, @, #, $, %, ^, &, *, ?,/,\\ or\n                  apostrophes in any file name</li>\n            </ul>\n\n            <h4>\n              Supported File Formats\n            </h4>\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>Type</th>\n                  <th>Formats</th>\n                </tr>\n              </thead>\n              <tbody *ngIf=\"uploadTarget === 'row'\">\n                <tr>\n                  <td>RGB Image Data</td>\n                  <td>jpg, jpeg, png</td>\n                </tr>\n                <tr>\n                  <td>Multispectral Image Data</td>\n                  <td>tif</td>\n                </tr>\n                <tr>\n                  <td>Video</td>\n                  <td>mp4</td>\n                </tr>\n              </tbody>\n              <tbody *ngIf=\"uploadTarget === 'ptcloud'\">\n                <tr>\n                  <td></td>\n                  <td>laz</td>\n                </tr>\n              </tbody>\n              <tbody *ngIf=\"uploadTarget === 'dem'\">\n                <tr>\n                  <td></td>\n                  <td>tif</td>\n                </tr>\n              </tbody>\n              <tbody *ngIf=\"uploadTarget === 'ortho'\">\n                <tr>\n                  <td></td>\n                  <td>tif, png</td>\n                </tr>\n              </tbody>\n              <tbody *ngIf=\"uploadTarget === 'video'\">\n                <tr>\n                  <td></td>\n                  <td>mp4</td>\n                </tr>\n              </tbody>\n            </table>\n\n          </div>\n\n          <div *ngIf=\"currentTask\" class=\"panel panel-warning\" style=\"margin: 30px 0 30px 0;\">\n            <div class=\"panel-heading\" style=\"font-size: 20px;\">Upload Details</div>\n            <div class=\"panel-body\">\n              <h4>\n                Status:\n                <b> {{currentTask.status}} </b>\n              </h4>\n              <h4>\n                Message:\n                <b> {{currentTask.message}} </b>\n              </h4>\n              <h4>\n                Upload Started On:\n                <b> {{currentTask.createDate | idmdate}} </b>\n              </h4>\n              <h4>\n                Last Updated:\n                <b> {{currentTask.lastUpdateDate | idmdate}} </b>\n              </h4>\n              <h4>\n                Elapsed Time:\n                <b> {{uploadCounter}} </b>\n              </h4>\n            </div>\n          </div>\n\n          <div class=\"uploader-container\" style=\"margin-top: 20px;\" #uploader></div>\n        </div> <!-- End current upload indicator -->\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n\n    <!-- <div [@fadeInOnEnter] class=\"row\" *ngIf=\"currentTask != null\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <a (click)=\"handleAddMetadata(currentTask)\">Add Metadata</a>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div> -->\n\n  </div>\n  <div class=\"modal-footer\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"btn-holder\" style=\"text-align: right;\">\n          <button *ngIf=\"existingTask && !currentTask\" type=\"button\" [disabled]=\"disabled\" class=\"btn btn-danger\"\n            (click)=\"removeUpload()\">\n            <i class=\"icon-upload icon-white\"></i>\n            Cancel Upload\n          </button>\n\n          <button type=\"button\" (click)=\"close()\" [disabled]=\"disabled\" class=\"btn btn-default\"\n            role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n            <span class=\"ui-button-text\">Close</span>\n          </button>\n\n          <button *ngIf=\"page.index === (pages.length - 1)\" type=\"button btn btn-primary\"\n            [disabled]=\"!isPageValid(page) || disabled\" class=\"btn btn-primary\" (click)=\"handleUpload()\">\n            <i class=\"icon-upload icon-white\"></i>\n            Upload\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n</div>","import { Component, OnInit, ViewChild, ElementRef, KeyValueDiffers, HostListener, OnDestroy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\n\nimport { interval, Subject } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\n//use Fine Uploader UI for traditional endpoints\nimport { FineUploader, UIOptions } from 'fine-uploader';\n\nimport { ErrorHandler, BasicConfirmModalComponent } from '@shared/component';\n\nimport { Sensor } from '@site/model/sensor';\nimport { Platform } from '@site/model/platform';\nimport { SiteEntity, UploadForm, Task, Selection, CollectionArtifacts } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\nimport { MetadataService } from '@site/service/metadata.service';\nimport { MetadataModalComponent } from './metadata-modal.component';\n\nimport { StepConfig } from '@shared/modal/step-indicator/modal-step-indicator'\n\nimport {\n\tfadeInOnEnterAnimation,\n\tfadeOutOnLeaveAnimation\n} from 'angular-animations';\n\ndeclare var acp: string;\n\nexport class Page {\n\tindex?: number;\n\tselection?: Selection;\n\toptions?: SiteEntity[];\n\ttype?: string\n};\n\n@Component({\n\tselector: 'upload-modal',\n\ttemplateUrl: './upload-modal.component.html',\n\tstyleUrls: ['./upload-modal.component.css'],\n\tanimations: [\n\t\tfadeInOnEnterAnimation(),\n\t\tfadeOutOnLeaveAnimation()\n\t]\n})\nexport class UploadModalComponent implements OnInit, OnDestroy {\n\tobjectKeys = Object.keys;\n\n\timportedValues: boolean = false;\n\n\tmessage: string = \"\";\n\n\t/* \n\t * Form values\n\t */\n\tvalues = { create: false } as UploadForm;\n\n\t/*\n\t * FineUploader for uploading large files\n\t */\n\tuploader = null as FineUploader;\n\n\tdisabled: boolean = false;\n\ttaskStatusMessages: string[] = [];\n\tcurrentTask: Task = null;\n\tfinishedTask: Task = null;\n\texistingTask: boolean = false;\n\ttaskPolling: any;\n\tpollingIsSet: boolean = false;\n\tuploadVisible: boolean = true;\n\tselectedContinue: boolean = false;\n\tuploadCounter: string = \"00:00:00\";\n\tuplodeCounterInterfal: any;\n\tdiffer: any;\n\tshowFileSelectPanel: boolean = false;\n\ttaskFinishedNotifications: any[] = [];\n\n\n\t/*\n\t * Flag indicating if the upload should be processed by ODM\n\t */\n\tprocessUpload: boolean = true;\n\n\t// Upload config\n\tconfig = {\n\t\tprocessPtcloud: false,\n\t\tprocessDem: false,\n\t\tprocessOrtho: false\n\t};\n\n\t/*\n\t * List of hierarchies\n\t */\n\thierarchy: string[] = [];\n\n\tcomponent: SiteEntity = null;\n\n\tuploadTarget: string = null;\n\n\t/*\n\t * List of previous selection labels\n\t */\n\tlabels: string[] = [];\n\n\t/*\n\t * List of pages\n\t */\n\tpages: Page[] = [{\n\t\tindex: 0,\n\t\tselection: null,\n\t\toptions: [],\n\t\ttype: 'FILE',\n\t}];\n\n\t/*\n\t * Current page  \n\t */\n\thierarchyChange: boolean = false;\n\n\t/*\n\t * Current page  \n\t */\n\tpage: Page = this.pages[0];\n\n\tsensors: Sensor[] = [];\n\tplatforms: Platform[] = [];\n\n\tpublic onUploadComplete: Subject<void>;\n\tpublic onUploadCancel: Subject<void>;\n\n\t// modalState: any = {\"state\":'category', \"attribute\":\"\", \"termOption\":\"\"}\n\n\tmodalStepConfig: StepConfig = {\n\t\t\"steps\": [\n\t\t\t{ \"label\": \"Final\", \"active\": true, \"enabled\": true }\n\t\t]\n\t};\n\n\tconstructor(private service: ManagementService, private metadataService: MetadataService, private modalService: BsModalService, public bsModalRef: BsModalRef, differs: KeyValueDiffers) {\n\t\tthis.differ = differs.find([]).create();\n\t}\n\n\t@ViewChild('uploader') set content(elem: ElementRef) {\n\n\t\tconst that = this;\n\n\t\tif (elem != null && this.uploader == null && this.uploadTarget != null) {\n\n\t\t\tconst extensions = [];\n\n\t\t\tif (this.uploadTarget === 'ortho') {\n\t\t\t\textensions.push('tif')\n\t\t\t}\n\t\t\telse if (this.uploadTarget === 'dem') {\n\t\t\t\textensions.push('tif')\n\t\t\t}\n\t\t\telse if (this.uploadTarget === 'ptcloud') {\n\t\t\t\textensions.push('laz')\n\t\t\t}\n\t\t\telse {\n\t\t\t\textensions.push('zip');\n\t\t\t\textensions.push('tar.gz');\n\t\t\t}\n\n\t\t\tconst uiOptions: UIOptions = {\n\t\t\t\tdebug: false,\n\t\t\t\tautoUpload: false,\n\t\t\t\tmultiple: false,\n\t\t\t\telement: elem.nativeElement,\n\t\t\t\ttemplate: 'qq-template',\n\t\t\t\trequest: {\n\t\t\t\t\tendpoint: acp + \"/file/upload\",\n\t\t\t\t\tforceMultipart: true\n\t\t\t\t},\n\t\t\t\tresume: {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\trecordsExpireIn: 1\n\t\t\t\t},\n\t\t\t\tchunking: {\n\t\t\t\t\tenabled: true\n\t\t\t\t},\n\t\t\t\tretry: {\n\t\t\t\t\tenableAuto: true\n\t\t\t\t},\n\t\t\t\ttext: {\n\t\t\t\t\tdefaultResponseError: \"Upload failed\"\n\t\t\t\t},\n\t\t\t\tfailedUploadTextDisplay: {\n\t\t\t\t\tmode: 'none'\n\t\t\t\t\t//responseProperty: 'error'\n\t\t\t\t},\n\t\t\t\tvalidation: {\n\t\t\t\t\tallowedExtensions: extensions\n\t\t\t\t},\n\t\t\t\tshowMessage: function (message: string) {\n\t\t\t\t\t// \n\t\t\t\t},\n\t\t\t\tcallbacks: {\n\t\t\t\t\tonUpload: function (id: any, name: any): void {\n\t\t\t\t\t\tthat.disabled = true;\n\t\t\t\t\t\tthis.finishedTask = null;\n\n\t\t\t\t\t\tthat.countUpload(that);\n\n\t\t\t\t\t\tif (that.message && that.message.length > 0) {\n\t\t\t\t\t\t\tthat.message = \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonProgress: function (id: any, name: any, uploadedBytes: any, totalBytes: any): void {\n\t\t\t\t\t},\n\t\t\t\t\tonUploadChunk: function (id: any, name: any, chunkData: any): void {\n\t\t\t\t\t},\n\t\t\t\t\tonUploadChunkSuccess: function (id: any, chunkData: any, responseJSON: any, xhr: any): void {\n\n\t\t\t\t\t\tif (responseJSON.message && responseJSON.message.currentTask && !that.currentTask) {\n\t\t\t\t\t\t\tthat.currentTask = responseJSON.message.currentTask;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (that.currentTask && !that.pollingIsSet) {\n\t\t\t\t\t\t\tthat.pollingIsSet = true;\n\n\t\t\t\t\t\t\tthat.taskPolling = interval(2000).pipe(switchMap(() => {\n\t\t\t\t\t\t\t\tif (that.currentTask) {\n\t\t\t\t\t\t\t\t\treturn that.service.task(that.currentTask.oid);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t\t.pipe(map((data) => data))\n\t\t\t\t\t\t\t\t.subscribe((data) => {\n\t\t\t\t\t\t\t\t\tthat.currentTask = data.task\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonComplete: function (id: any, name: any, responseJSON: any, xhrOrXdr: any): void {\n\t\t\t\t\t\tthat.disabled = false;\n\t\t\t\t\t\tthat.finishedTask = that.currentTask;\n\t\t\t\t\t\tthat.currentTask = null;\n\t\t\t\t\t\tthat.existingTask = false;\n\n\t\t\t\t\t\t// if (!that.hierarchyChange) {\n\t\t\t\t\t\t// \tfor (let i = 0; i < that.selections.length; i++) {\n\t\t\t\t\t\t// \t\tif (that.selections[i].isNew) {\n\t\t\t\t\t\t// \t\t\tthat.hierarchyChange = true;\n\t\t\t\t\t\t// \t\t}\n\t\t\t\t\t\t// \t}\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\tif (that.taskPolling) {\n\t\t\t\t\t\t\tthat.taskPolling.unsubscribe();\n\t\t\t\t\t\t\tthat.pollingIsSet = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.clearStoredFiles();\n\n\t\t\t\t\t\tclearInterval(that.uplodeCounterInterfal);\n\n\t\t\t\t\t\tif (responseJSON.success) {\n\t\t\t\t\t\t\t// let notificationMsg = \"\";\n\t\t\t\t\t\t\t// notificationMsg = \"Your uploaded data is being processed into final image products. You can view the progress at the Workflow Tasks page.\";\n\n\t\t\t\t\t\t\t// that.taskFinishedNotifications.push({\n\t\t\t\t\t\t\t//     'id': id,\n\t\t\t\t\t\t\t//     \"message\": notificationMsg\n\t\t\t\t\t\t\t// })\n\n\t\t\t\t\t\t\tthat.bsModalRef.hide();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthat.onUploadComplete.next();\n\t\t\t\t\t},\n\t\t\t\t\tonCancel: function (id: number, name: string) {\n\t\t\t\t\t\t//that.currentTask = null;\n\n\t\t\t\t\t\tif (that.currentTask && that.currentTask.uploadId) {\n\t\t\t\t\t\t\tthat.service.removeTask(that.currentTask.uploadId)\n\t\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t\tthis.clearStoredFiles();\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch((err: HttpErrorResponse) => {\n\t\t\t\t\t\t\t\t\tthis.error(err);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (that.existingTask) {\n\t\t\t\t\t\t\tthat.page = that.pages[0];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthat.disabled = false;\n\t\t\t\t\t\tthat.currentTask = null;\n\t\t\t\t\t\tthat.existingTask = false;\n\n\t\t\t\t\t\tif (that.taskPolling) {\n\t\t\t\t\t\t\tthat.taskPolling.unsubscribe();\n\t\t\t\t\t\t\tthat.pollingIsSet = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tclearInterval(that.uplodeCounterInterfal);\n\t\t\t\t\t},\n\t\t\t\t\tonError: function (id: number, errorReason: string, xhrOrXdr: string) {\n\t\t\t\t\t\tthat.error({ error: { message: xhrOrXdr } });\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.uploader = new FineUploader(uiOptions);\n\n\t\t}\n\t}\n\n\tngOnInit(): void {\n\t\tthis.onUploadComplete = new Subject();\n\t\tthis.onUploadCancel = new Subject();\n\n\t\t// this.service.getMetadataOptions(null).then((options) => {\n\t\t// \tthis.sensors = options.sensors;\n\t\t// \tthis.platforms = options.platforms;\n\t\t// }).catch((err: HttpErrorResponse) => {\n\t\t// \tthis.error(err);\n\t\t// });\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.onUploadComplete.unsubscribe();\n\t\tthis.onUploadCancel.unsubscribe();\n\t}\n\n\tngAfterViewInit() {\n\n\t}\n\n\tngDoCheck() {\n\n\t\tif (this.uploader) {\n\t\t\tconst change = this.differ.diff(this.uploader);\n\t\t\tif (change) {\n\t\t\t\tthis.setExistingTask();\n\t\t\t}\n\t\t}\n\t}\n\n\tinit(component: SiteEntity, uploadTarget: string): void {\n\t\tthis.component = component;\n\t\tthis.uploadTarget = uploadTarget;\n\t\t// this.processUpload = this.uploadTarget === 'raw';\n\n\t\tthis.hierarchy = this.metadataService.getHierarchy();\n\t\t// this.selections = [];\n\t\tthis.pages = [];\n\n\t\tthis.pages.push({\n\t\t\tindex: (this.pages.length),\n\t\t\tselection: null,\n\t\t\toptions: [],\n\t\t\ttype: 'SUMMARY'\n\t\t});\n\n\t\tthis.page = this.pages[0];\n\n\t\t// Handle the case where there is an existing file upload\n\t\tif (this.existingTask) {\n\t\t\tthis.page = this.pages[this.pages.length - 1];\n\t\t}\n\t}\n\n\tclose(): void {\n\t\tthis.bsModalRef.hide();\n\t}\n\n\tcloseTaskFinishedNotification(id: string): void {\n\t\t// iterate in reverse to allow splice while avoiding the reindex\n\t\t// from affecting any of the next items in the array.\n\t\tlet i = this.taskFinishedNotifications.length;\n\t\twhile (i--) {\n\t\t\tlet note = this.taskFinishedNotifications[i];\n\t\t\tif (id === note.id) {\n\t\t\t\tthis.taskFinishedNotifications.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tsetExistingTask(): void {\n\t\tlet resumable = this.uploader.getResumableFilesData() as any[];\n\t\tif (resumable.length > 0) {\n\t\t\tthis.existingTask = true;\n\t\t\t//            if ( !this.selectedContinue ) {\n\t\t\t//                this.hideUploadPanel();\n\t\t\t//            }\n\t\t}\n\t}\n\n\tisPageValid(page: Page): boolean {\n\t\tif (page.type === 'CATEGORY') {\n\t\t\tif (page.selection != null) {\n\t\t\t\tif (page.selection.value != null && page.selection.value.length > 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse if (page.selection.label != null && page.selection.label.length > 0) {\n\t\t\t\t\tif (this.hasField('uav') && (page.selection.uav == null || page.selection.uav.length === 0)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.hasField('sensor') && (page.selection.sensor == null || page.selection.sensor.length === 0)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.hasField('collectionDate') && (page.selection.collectionDate == null || page.selection.collectionDate.length === 0)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (page.type === 'FILE') {\n\t\t\tif (this.uploader != null) {\n\t\t\t\tconst uploads: any = this.uploader.getUploads();\n\n\t\t\t\treturn (uploads != null && uploads.length > 0);\n\t\t\t};\n\t\t}\n\t\telse if (page.type === 'SUMMARY') {\n\t\t\treturn (this.currentTask == null);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tupdateCurrentPageLabel(): void {\n\t\tthis.page.options.forEach(entity => {\n\t\t\tif (entity.id === this.page.selection.value) {\n\t\t\t\tthis.page.selection.label = entity.name;\n\t\t\t}\n\t\t})\n\t}\n\n\tsetIsNew(isNew: boolean): void {\n\t\tthis.page.selection.isNew = isNew;\n\n\t\tif (isNew) {\n\t\t\tthis.page.selection.value = null;\n\t\t}\n\t\telse {\n\t\t\tthis.page.selection.label = null;\n\t\t}\n\t}\n\n\thandleAddMetadata(task: Task): void {\n\t\tlet modalRef = this.modalService.show(MetadataModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\t\tmodalRef.content.init(task.collection);\n\t}\n\n\thandleNextPage(): void {\n\n\t\tif ((this.page.index + 1) < this.pages.length) {\n\n\t\t\tconst nextPage = this.pages[this.page.index + 1];\n\n\t\t\tif (this.page.type === 'CATEGORY') {\n\t\t\t\tthis.updateCurrentPageLabel();\n\t\t\t\tthis.labels.push(this.page.selection.label);\n\t\t\t}\n\n\t\t\tif (nextPage.type === 'CATEGORY') {\n\n\t\t\t\tif (this.page.type === 'FILE') {\n\t\t\t\t\tthis.page = nextPage;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!this.page.selection.isNew && this.page.selection.value != null && this.page.selection.value.length > 0) {\n\n\t\t\t\t\t\tthis.service.getChildren(this.page.selection.value).then(children => {\n\t\t\t\t\t\t\tnextPage.options = children.filter(child => {\n\t\t\t\t\t\t\t\treturn child.type === nextPage.selection.type;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tthis.page = nextPage;\n\t\t\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\t\t\tthis.error(err);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.page = nextPage;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.page = nextPage;\n\n\t\t\t\tthis.modalStepConfig = {\n\t\t\t\t\t\"steps\": [\n\t\t\t\t\t\t{ \"label\": \"Category\", \"active\": true, \"enabled\": false },\n\t\t\t\t\t\t{ \"label\": \"Final\", \"active\": true, \"enabled\": false }\n\t\t\t\t\t]\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\thandleBackPage(): void {\n\n\t\tif (this.page.index > 0) {\n\n\t\t\tconst prevPage = this.pages[this.page.index - 1];\n\n\t\t\tif (prevPage.type === 'CATEGORY') {\n\t\t\t\tthis.labels.splice(this.labels.length - 1, 1);\n\n\t\t\t\tthis.modalStepConfig.steps.forEach(step => {\n\t\t\t\t\tif (step.label.toLowerCase() === \"category\" && step.enabled === false) {\n\t\t\t\t\t\tthis.modalStepConfig = {\n\t\t\t\t\t\t\t\"steps\": [\n\t\t\t\t\t\t\t\t{ \"label\": \"Category\", \"active\": true, \"enabled\": true },\n\t\t\t\t\t\t\t\t{ \"label\": \"Final\", \"active\": true, \"enabled\": false }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tthis.page = prevPage;\n\t\t}\n\t}\n\n\thandleUpload(): void {\n\n\n\t\tif (!this.existingTask) {\n\n\t\t\tconst execute = () => {\n\t\t\t\t/*\n\t\t\t\t * Validate form values before uploading\n\t\t\t\t */\n\t\t\t\t// const selection = this.selections[this.selections.length - 1];\n\n\t\t\t\t//            if ( selection.value == null  ) {\n\t\t\t\t//                this.message = \"A [\" + selection.type + \"] must first be selected before the file can be uploaded\";\n\t\t\t\t//            }\n\t\t\t\t//            else {\n\t\t\t\t//                this.values.uasComponentOid = selection.value;\n\t\t\t\t// this.values.selections = JSON.stringify(this.selections);\n\t\t\t\tthis.values.uploadTarget = this.uploadTarget;\n\t\t\t\tthis.values.uasComponentOid = this.component.id;\n\t\t\t\tthis.values.processUpload = this.processUpload;\n\t\t\t\tthis.values.processDem = this.config.processDem;\n\t\t\t\tthis.values.processOrtho = this.config.processOrtho;\n\t\t\t\tthis.values.processPtcloud = this.config.processPtcloud;\n\n\t\t\t\tthis.uploader.setParams(this.values);\n\t\t\t\tthis.uploader.uploadStoredFiles();\n\t\t\t\t//            }\n\t\t\t};\n\n\t\t\t// if (this.uploadTarget === 'raw' && this.component.hasProduct && this.processUpload) {\n\t\t\t// \tconst modal = this.modalService.show(BasicConfirmModalComponent, {\n\t\t\t// \t\tanimated: true,\n\t\t\t// \t\tbackdrop: true,\n\t\t\t// \t\tignoreBackdropClick: true,\n\t\t\t// \t});\n\t\t\t// \tmodal.content.message = 'An orthorectified image already exists in this collection. It will be deleted if you create another one. Do you still wish to proceed and create an orthorectified image?';\n\t\t\t// \tmodal.content.submitText = 'Continue';\n\t\t\t// \tmodal.content.onConfirm.subscribe(execute);\n\t\t\t// }\n\t\t\t// else {\n\t\t\texecute();\n\t\t\t// }\n\t\t}\n\t\telse {\n\t\t\tthis.uploader.uploadStoredFiles();\n\t\t}\n\t}\n\n\n\n\thasField(fieldName: string): boolean {\n\t\treturn this.metadataService.hasExtraField(this.page.selection.type, fieldName);\n\t}\n\n\tremoveUpload(): void {\n\t\tconst modal = this.modalService.show(BasicConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tmodal.content.message = 'Are you sure you want to cancel the upload of [' + this.uploader.getResumableFilesData()[0].name + ']';\n\t\tmodal.content.type = 'DANGER';\n\t\tmodal.content.submitText = 'Cancel Upload';\n\n\t\tmodal.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.removeTask(this.uploader.getResumableFilesData()[0].uuid)\n\t\t\t\t.then(() => {\n\t\t\t\t\t//that.uploader.clearStoredFiles();\n\t\t\t\t\t//that.uploader.cancelAll()\n\n\t\t\t\t\t// The above clearStoredFiles() and cancelAll() methods don't appear to work so \n\t\t\t\t\t// we are clearing localStorage manually.\n\t\t\t\t\tlocalStorage.clear();\n\n\t\t\t\t\tthis.existingTask = false;\n\t\t\t\t\tthis.page = this.pages[0];\n\n\t\t\t\t\tthis.onUploadCancel.next();\n\n\t\t\t\t\tthis.bsModalRef.hide();\n\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\tthis.error(err);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tcountUpload(thisRef: any): void {\n\t\tlet ct = 0;\n\n\t\tfunction incrementSeconds() {\n\t\t\tct += 1;\n\n\t\t\tlet hours = Math.floor(ct / 3600)\n\t\t\tlet minutes = Math.floor((ct % 3600) / 60);\n\t\t\tlet seconds = Math.floor(ct % 60);\n\n\t\t\tlet hoursStr = minutes < 10 ? \"0\" + hours : hours;\n\t\t\tlet minutesStr = minutes < 10 ? \"0\" + minutes : minutes;\n\t\t\tlet secondsStr = seconds < 10 ? \"0\" + seconds : seconds;\n\n\t\t\tthisRef.uploadCounter = hoursStr + \":\" + minutesStr + \":\" + secondsStr;\n\t\t}\n\n\t\tthisRef.uplodeCounterInterfal = setInterval(incrementSeconds, 1000);\n\t}\n\n\tpublic canDeactivate(): boolean {\n\t\treturn this.disabled;\n\t}\n\n\t@HostListener('window:beforeunload', ['$event'])\n\tunloadNotification($event: any) {\n\t\tif (this.disabled) {\n\t\t\t$event.returnValue = 'An upload is currently in progress. Are you sure you want to leave?';\n\t\t}\n\t}\n\n\terror(err: any): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n\n}\n","<div>\n\n  <i *ngIf=\"loading\" class=\"fa fa-spinner fa-spin\" style=\"margin-left:50%;\"></i>\n  \n  <table *ngIf=\"artifacts != null\" style=\"width: 100%;\">\n  \t<thead>\n        <th>Type</th>\n        <th>Name</th>\n        <th>Processing Software</th>\n        <th>Date</th>\n        <th>Description</th>\n        <th></th>\n    </thead>\n    <ng-container *ngFor=\"let section of sections; let i = index\">\n      <tr>\n      \t<td>{{section.label}}</td>\n        <td>\n          <ng-container *ngIf=\"artifacts[section.folder] != null\">\n            <table>\n\t            <tr *ngFor=\"let artifact of artifacts[section.folder]\">\n\t              {{ artifact.name }}\n\t            </tr>\n            </table>\n          </ng-container>\n        </td>\n        <td>\n          <ng-container *ngIf=\"artifacts[section.folder] != null\">\n            <table>\n              <tr *ngFor=\"let artifact of artifacts[section.folder]\">\n                {{ artifact.tool }}\n              </tr>\n            </table>\n          </ng-container>\n        </td>\n        <td>\n          <ng-container *ngIf=\"artifacts[section.folder] != null\">\n            <table>\n              <tr *ngFor=\"let artifact of artifacts[section.folder]\">\n                {{ artifact.lastModified }}\n              </tr>\n            </table>\n          </ng-container>\n        </td>\n        <td>\n          <ng-container *ngIf=\"artifacts[section.folder] != null\">\n            <table>\n              <tr *ngFor=\"let artifact of artifacts[section.folder]\">\n                {{ artifact.description }}\n              </tr>\n            </table>\n          </ng-container>\n        </td>\n        <td *ngIf=\"!edit\" style=\"text-align:right;\">\n          <button *ngIf=\"artifacts[section.folder] != null && artifacts[section.folder].length > 0\" type=\"button\" class=\"btn btn-warning\"\n            [disabled]=\"processRunning\" (click)=\"handleRemove(section)\" style=\"margin: 5px 0;\">\n            Remove\n          </button>\n          <button *ngIf=\"artifacts[section.folder] == null || artifacts[section.folder].length == 0\" type=\"button\" class=\"btn btn-primary\"\n            [disabled]=\"processRunning\" (click)=\"handleUpload(section.folder)\" style=\"margin: 5px 0;\">\n            Upload\n          </button>\n        </td>\n        <td *ngIf=\"edit\">\n          <boolean-field *ngIf=\"section.folder === 'ptcloud'\" [(value)]=\"config.processPtcloud\"\n            [label]=\"(artifacts[section.folder] != null && artifacts[section.folder].length > 0) ? 'Overwirte' : 'Generate'\">\n          </boolean-field>\n          <boolean-field *ngIf=\"section.folder === 'dem'\" [(value)]=\"config.processDem\"\n            [label]=\"(artifacts[section.folder] != null && artifacts[section.folder].length > 0) ? 'Overwirte' : 'Generate'\"></boolean-field>\n          <boolean-field *ngIf=\"section.folder === 'ortho'\" [(value)]=\"config.processOrtho\"\n            [label]=\"(artifacts[section.folder] != null && artifacts[section.folder].length > 0) ? 'Overwirte' : 'Generate'\"></boolean-field>\n        </td>\n\n      </tr>\n    </ng-container>\n\n\n  </table>\n</div>","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\n\nimport { CollectionArtifacts, SiteEntity } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\n\nimport { UploadModalComponent } from './upload-modal.component';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport { BasicConfirmModalComponent } from '@shared/component';\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'artifact-page',\n\ttemplateUrl: './artifact-page.component.html',\n\tstyles: [],\n\tproviders: []\n})\nexport class ArtifactPageComponent implements OnInit, OnDestroy {\n\n\t@Input() entity: SiteEntity;\n\t@Input() processRunning: boolean;\n\t@Input() edit: boolean = false;\n\n\t@Input() config = {\n\t\tprocessPtcloud: false,\n\t\tprocessDem: false,\n\t\tprocessOrtho: false\n\t};\n\n\t@Output() onError = new EventEmitter<HttpErrorResponse>();\n\n\tloading = false;\n\n\tartifacts: CollectionArtifacts;\n\n\tsections = [{\n\t\tlabel: 'Ptcloud',\n\t\tfolder: 'ptcloud'\n\t}, {\n\t\tlabel: 'DEM',\n\t\tfolder: 'dem'\n\t}, {\n\t\tlabel: 'Ortho',\n\t\tfolder: 'ortho'\n\t}];\n\n\tthumbnails: any = {};\n\n\tcontext: string;\n\n\tnotifier: WebSocketSubject<any>;\n\n\n\tconstructor(private service: ManagementService, private modalService: BsModalService) {\n\t\tthis.context = acp;\n\t}\n\n\tngOnInit(): void {\n\n\t\tlet baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + acp;\n\n\t\tthis.notifier = webSocket(baseUrl + '/websocket/notify');\n\t\tthis.notifier.subscribe(message => {\n\t\t\tif (message.type === 'UPLOAD_JOB_CHANGE'\n\t\t\t\t&& message.content.status === 'Complete'\n\t\t\t\t&& message.content.collection === this.entity.id) {\n\t\t\t\tthis.loadArtifacts();\n\t\t\t}\n\t\t});\n\n\t\tthis.loadArtifacts();\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.notifier.unsubscribe();\n\t}\n\n\tloadArtifacts(): void {\n\t\tthis.loading = true;\n\t\tthis.service.getArtifacts(this.entity.id).then(artifacts => {\n\n\t\t\tthis.loading = false;\n\n\t\t\tthis.artifacts = artifacts;\n\n\t\t\tthis.config.processDem = (this.artifacts.dem == null);\n\t\t\tthis.config.processOrtho = (this.artifacts.ortho == null);\n\t\t\tthis.config.processPtcloud = (this.artifacts.ptcloud == null);\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tcreateImageFromBlob(image: Blob, imageData: any) {\n\t\tlet reader = new FileReader();\n\t\treader.addEventListener(\"load\", () => {\n\t\t\t// this.imageToShow = reader.result;\n\t\t\tthis.thumbnails[imageData.key] = reader.result;\n\t\t}, false);\n\n\t\tif (image) {\n\t\t\treader.readAsDataURL(image);\n\t\t}\n\t}\n\n\tgetThumbnail(image: any): void {\n\t\tif (image != null) {\n\n\t\t\tlet rootPath: string = image.key.substr(0, image.key.lastIndexOf(\"/\"));\n\t\t\tlet fileName: string = /[^/]*$/.exec(image.key)[0];\n\t\t\tconst lastPeriod: number = fileName.lastIndexOf(\".\");\n\t\t\tconst thumbKey: string = rootPath + \"/thumbnails/\" + fileName.substr(0, lastPeriod) + \".png\";\n\n\t\t\tthis.service.download(image.component, thumbKey, false).subscribe(blob => {\n\t\t\t\tthis.createImageFromBlob(blob, image);\n\t\t\t}, error => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t\t}\n\t}\n\n\tisImage(item: any): boolean {\n\t\tif (item.name.toLowerCase().indexOf(\".png\") !== -1 || item.name.toLowerCase().indexOf(\".jpg\") !== -1 ||\n\t\t\titem.name.toLowerCase().indexOf(\".jpeg\") !== -1 || item.name.toLowerCase().indexOf(\".tif\") !== -1 ||\n\t\t\titem.name.toLowerCase().indexOf(\".tiff\") !== -1) {\n\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpreviewImage(event: any, image: any): void {\n\t\t//        this.bsModalRef = this.modalService.show( ImagePreviewModalComponent, {\n\t\t//            animated: true,\n\t\t//            backdrop: true,\n\t\t//            ignoreBackdropClick: true,\n\t\t//            'class': 'image-preview-modal'\n\t\t//        } );\n\t\t//        this.bsModalRef.content.image = image;\n\t\t//        this.bsModalRef.content.src = event.target.src;\n\t}\n\n\ttoggleExcludeImage(event: any, image: any): void {\n\t\tthis.service.setExclude(image.id, !image.exclude).then(result => {\n\t\t\timage.exclude = result.exclude;\n\t\t});\n\t\t//\n\t\t//\n\t\t//\t\tif (image.exclude) {\n\t\t//\t\t\tthis.excludes.push(image.name);\n\t\t//\t\t}\n\t\t//\t\telse {\n\t\t//\t\t\tlet position = this.excludes.indexOf(image.name);\n\t\t//\t\t\tif (position > -1) {\n\t\t//\t\t\t\tthis.excludes.splice(position, 1);\n\t\t//\t\t\t}\n\t\t//\t\t}\n\t}\n\n\n\n\n\thandleDownloadFile(item: SiteEntity): void {\n\t\twindow.location.href = acp + '/project/download?id=' + this.entity.id + \"&key=\" + item.key;\n\t}\n\n\n\thandleUpload(folderName: string): void {\n\n\t\tconst modal = this.modalService.show(UploadModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\t\tmodal.content.init(this.entity, folderName);\n\n\t\t// modal.content.onUploadComplete.subscribe(oid => {\n\n\t\t//   this.handleViewSite(oid);\n\t\t// });\n\t}\n\n\thandleRemove(section: { label: string, folder: string }): void {\n\n\t\tconst modal = this.modalService.show(BasicConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tmodal.content.message = 'Do you want to delete the [' + section.label + '] products? This action cannot be undone.';\n\t\tmodal.content.type = 'DANGER';\n\t\tmodal.content.submitText = 'Delete';\n\n\t\tmodal.content.onConfirm.subscribe(() => {\n\t\t\tthis.service.removeArtifacts(this.entity.id, section.folder).then(artifacts => {\n\t\t\t\tthis.artifacts = artifacts;\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\n\n\n\t\t// const modal = this.modalService.show(UploadModalComponent, {\n\t\t// \tanimated: true,\n\t\t// \tbackdrop: true,\n\t\t// \tignoreBackdropClick: true,\n\t\t// \t'class': 'upload-modal'\n\t\t// });\n\t\t// modal.content.init(this.entity, folderName);\n\n\t\t// modal.content.onUploadComplete.subscribe(oid => {\n\n\t\t//   this.handleViewSite(oid);\n\t\t// });\n\t}\n\n\tcapitalize(str): string {\n\t\treturn str.replace(/^\\w/, c => c.toUpperCase());\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.onError.emit(err);\n\t}\n\n}\n","<div>\n    <div class=\"modal-body\">\n        <div *ngIf=\"message != null\" class=\"error-container\">\n            <div class=\"label-holder\">\n                <strong>Error</strong>\n            </div>\n            <div class=\"holder\">\n                <div>\n                    <p class=\"error-message\">{{message}}</p>\n                </div>\n            </div>\n        </div>\n\n        <h3>Run ortho to process the following products: </h3>\n\n        <artifact-page *ngIf=\"entity != null\" [edit]=\"true\" [entity]=\"entity\" [config]=\"config\"\n            (onError)=\"error($event)\"></artifact-page>\n    </div>\n    <div class=\"modal-footer\">\n        <div class=\"btn-holder\" style=\"text-align: right;\">\n            <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                aria-disabled=\"false\" style=\"padding: 4px 18px;\">Cancel</button>\n            <button type=\"button\" (click)=\"confirm()\" class=\"btn btn-primary\" role=\"button\"\n                aria-disabled=\"false\" style=\"padding: 4px 18px;\">Submit</button>\n        </div>\n    </div>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef, Input, OnDestroy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ErrorHandler } from '@shared/component';\n\nimport { ManagementService } from '@site/service/management.service';\nimport { SiteEntity } from '@site/model/management';\nimport { Subject } from 'rxjs';\n\n\n@Component({\n    selector: 'run-ortho-modal',\n    templateUrl: './run-ortho-modal.component.html',\n    styleUrls: []\n})\nexport class RunOrthoModalComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n    entity: SiteEntity = null;\n    config = {\n\t\tprocessPtcloud: false,\n\t\tprocessDem: false,\n\t\tprocessOrtho: false\n\t};\n\n    /*\n     * Called on confirm\n     */\n    public onConfirm: Subject<any>;\n\n    constructor(public bsModalRef: BsModalRef) { }\n\n    init(entity: SiteEntity) {\n        this.entity = entity;\n    }\n\n    ngOnInit(): void {\n        this.onConfirm = new Subject();\n    }\n\n    ngOnDestroy(): void {\n        this.onConfirm.unsubscribe();\n    }\n\n    confirm(): void {\n        this.onConfirm.next(this.config);\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\" style=\"padding-bottom: 0;\" [@fadeInOnEnter]>\n  <div>\n    <div *ngIf=\"message != null\" class=\"error-container\">\n      <div class=\"label-holder\">\n        <strong>Error</strong>\n      </div>\n      <div class=\"holder\">\n        <div>\n          <p class=\"error-message\">{{message}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"entity != null\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2>{{entity.name}} <span *ngIf=\"!entity.metadataUploaded\" class=\"dot pending\"\n              style=\"margin-left: 0;margin-bottom: 5px;\"></span></h2>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>Pilot Name: </label> &nbsp; {{entity.pilotName}}\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>Upload Date: </label> &nbsp; {{entity.dateTime | idmdate : \"MMM dd, yyyy\"}}\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>Collection Date: </label> &nbsp; {{entity.collectionDate | idmdate : \"MMM dd, yyyy\"}}\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <label>Sensor:</label>\n\n          <table *ngIf=\"entity.sensor\" class=\"table table-bordered\">\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td><a [routerLink]=\"['/site/sensor', entity.sensor.oid]\" target=\"_blank\">{{entity.sensor.name}}</a>\n                </td>\n              </tr>\n              <tr>\n                <td>Type</td>\n                <td> {{entity.sensor.sensorType.name}}</td>\n              </tr>\n              <tr>\n                <td>Model</td>\n                <td>{{entity.sensor.model}}</td>\n              </tr>\n              <!--               <tr> -->\n              <!--                 <td>Description</td> -->\n              <!--                 <td>{{entity.sensor.description}}</td> -->\n              <!--               </tr> -->\n            </tbody>\n          </table>\n\n          <p *ngIf=\"!entity.sensor\" style=\"font-style:italic;\">Sensor metadata is not available for this collection.</p>\n        </div>\n\n        <div class=\"col-md-6\">\n          <label>Platform:</label>\n\n          <table *ngIf=\"entity.platform\" class=\"table table-bordered\">\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td><a [routerLink]=\"['/site/platform', entity.platform.oid]\"\n                    target=\"_blank\">{{entity.platform.name}}</a></td>\n              </tr>\n              <tr>\n                <td>Type</td>\n                <td> {{entity.platform.platformType.name}}</td>\n              </tr>\n              <!--               <tr> -->\n              <!--                 <td>Description</td> -->\n              <!--                 <td>{{entity.platform.description}}</td> -->\n              <!--               </tr> -->\n            </tbody>\n          </table>\n\n          <p *ngIf=\"!entity.platform\" style=\"font-style:italic;\">Platform metadata is not available for this collection.\n          </p>\n        </div>\n      </div>\n\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>UAV:</label>\n\n          <table *ngIf=\"entity.uav\" class=\"table table-bordered\">\n            <tbody>\n              <tr>\n                <td>Serial Number</td>\n                <td><a [routerLink]=\"['/site/uav', entity.uav.oid]\" target=\"_blank\">{{entity.uav.serialNumber}}</a></td>\n              </tr>\n              <tr>\n                <td>Type</td>\n                <td> {{entity.uav.faaNumber}}</td>\n              </tr>\n              <!--               <tr> -->\n              <!--                 <td>Description</td> -->\n              <!--                 <td>{{entity.uav.description}}</td> -->\n              <!--               </tr> -->\n            </tbody>\n          </table>\n\n          <p *ngIf=\"!entity.platform\" style=\"font-style:italic;\">UAV metadata is not available for this collection.</p>\n\n        </div>\n      </div>\n\n\n\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <ul class=\"breadcrumb\" style=\"margin-bottom: 10px;\">\n            <li *ngFor=\"let prev of previous\">\n              <span> {{prev.name}}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-sm-12\">\n          <tabset class=\"nav-full-width\">\n\n            <tab heading=\"raw\" (selectTab)=\"onSelect('raw')\">\n              <div class=\"image-list-container\">\n                <ul class=\"list-group row\">\n                  <li\n                    *ngFor=\"let item of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\"\n                    class=\"list-group-item col-xs-3\">\n                    <a class=\"thumbnail\"\n                      [ngClass]=\"{'card-disabled' : item.exclude, 'non-clickable' : !enableSelectableImages}\">\n                      <input type=\"checkbox\" class=\"x-box\" *ngIf=\"enableSelectableImages\" [checked]=\"item.exclude\"\n                        (change)=\"toggleExcludeImage($event, item)\" />\n                      <img style=\"max-height: 150px\"\n                        (click)=\"enableSelectableImages ? toggleExcludeImage($event, item) : false\"\n                        [ngClass]=\"{'img-disabled' : item.exclude}\"\n                        [src]=\"thumbnails[item.key] != null ? (thumbnails[item.key] | safeHtml) : (context + '/net/geoprism/images/thumbnail-default.png')\"\n                        alt=\"Image\">\n                      <div class=\"caption\">\n                        <h4 class=\"media-heading\">\n                          {{item.name}}\n                        </h4>\n                      </div>\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </tab>\n\n            <tab heading=\"video\" (selectTab)=\"onSelect('video')\">\n              <div *ngIf=\"video.src !== null\">\n                <div class=\"row\">\n                  <div class=\"col-md-1\"></div>\n                  <div class=\"col-md-10\">\n                    <h3>\n                      {{video.name}}\n                      <a (click)=\"handleDownloadVideo(video.src)\"><i class=\"fas fa-download\"></i></a>\n                      <a class=\"pull-right\" (click)=\"closeVideo()\"><i class=\"fa fa-times\" aria-hidden=\"true\"></i></a>\n                    </h3>\n                  </div>\n                  <div class=\"col-md-1\"></div>\n                </div>\n                <div class=\"row\">\n                  <div class=\"col-md-1\"></div>\n                  <div class=\"col-md-10\">\n                    <video style=\"width:100%\" controls>\n                      <source [src]=\"video.src\" type=\"video/mp4\" />\n                      Browser not supported\n                    </video>\n                  </div>\n                  <div class=\"col-md-1\"></div>\n                </div>\n              </div>\n\n              <div class=\"image-list-container\">\n                <ul class=\"list-group row\">\n                  <li *ngFor=\"let item of page.results\" class=\"list-group-item col-xs-3\">\n                    <a class=\"thumbnail\" (click)=\"showVideo(item)\">\n                      <img [src]=\"context + '/net/geoprism/images/thumbnail-video.png'\" alt=\"Video\">\n                      <div class=\"caption\">\n                        <h4 class=\"media-heading\">{{item.name}}</h4>\n                      </div>\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </tab>\n            <tab heading=\"products\" style=\"margin-top:10px;\" (selectTab)=\"onSelect('artifacts')\">\n              <artifact-page *ngIf=\"tabName === 'artifacts'\" [entity]=\"entity\" [processRunning]=\"processRunning\" (onError)=\"error($event)\"></artifact-page>\n            </tab>\n          </tabset>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-sm-12\">\n          <pagination-controls *ngIf=\"tabName === 'raw'\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n          <div *ngIf=\"showOrthoRerunMessage\" style=\"text-align:right;padding-right:20px;\">\n            <p>{{statusMessage}}</p>\n            <p>See this process on\n              <a (click)=\"bsModalRef.hide()\" routerLink=\"/site/tasks\">your tasks page</a>\n            </p>\n          </div>\n\n          <div class=\"btn-holder\" style=\"margin: 20px 0px 10px 0px;\">\n            <div class=\"row\">\n              <div class=\"col-sm-4\">\n                <button type=\"button\" class=\"btn btn-warning\" [disabled]=\"processRunning\" (click)=\"handleSetMetadata()\">\n                  <i class=\"fa fa-edit\" style=\"color:white\"></i>\n                  Edit Metadata\n                </button>\n                <button *ngIf=\"tabName === 'raw'\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"processRunning\" (click)=\"handleUpload()\">\n                  Upload\n                </button>\n              </div>\n              <div class=\"col-md-8\" style=\"text-align: right;\">\n                <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Close</button>\n                \n                <button *ngIf=\"processable\" type=\"button\" class=\"btn btn-secondary\"\n                  title=\"Downloads all files\" [disabled]=\"processRunning\"\n                  (click)=\"handleDownload()\" style=\"margin-left: 5px;\">\n                  Download All\n                </button>\n                \n                <button *ngIf=\"processable && entity.hasAllZip\" type=\"button\" class=\"btn btn-secondary\" [disabled]=\"processRunning\"\n                  (click)=\"handleDownloadOdmAll()\" title=\"Downloads the all.zip file generated from ODM.\"\n                  style=\"margin-left: 5px;\">\n                  Download All Generated Data\n                </button>\n                <button *ngIf=\"processable && enableSelectableImages\" [disabled]=\"processRunning || !canReprocessImagery\"\n                  (click)=\"handleRunOrtho()\" class=\"btn btn-primary\"\n                  title=\"Reprocesses the selected raw imagery and generates new products.\" style=\"margin-left: 5px;\">\n                  Reprocess Imagery\n                  <i class=\"fa fa-sync-alt\" [ngClass]=\"{'fa-spin' : processRunning}\" aria-hidden=\"true\"\n                    style=\"color:white;vertical-align: middle;margin-left: 10px;\"></i>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { ErrorHandler, BasicConfirmModalComponent } from '@shared/component';\n\nimport { SiteEntity, SiteObjectsResultSet } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\nimport { MetadataService } from '@site/service/metadata.service';\nimport { MetadataModalComponent } from './metadata-modal.component';\n\nimport {\n\tfadeInOnEnterAnimation,\n\tfadeOutOnLeaveAnimation,\n\tslideInLeftOnEnterAnimation,\n\tslideInRightOnEnterAnimation,\n} from 'angular-animations';\nimport { UploadModalComponent } from './upload-modal.component';\nimport { ArtifactPageComponent } from './artifact-page.component';\nimport { RunOrthoModalComponent } from './run-ortho-modal.component';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'collection-modal',\n\ttemplateUrl: './collection-modal.component.html',\n\tstyles: [],\n\tproviders: [BasicConfirmModalComponent, ArtifactPageComponent],\n\tanimations: [\n\t\tfadeInOnEnterAnimation(),\n\t\tfadeOutOnLeaveAnimation(),\n\t\tslideInLeftOnEnterAnimation(),\n\t\tslideInRightOnEnterAnimation(),\n\t]\n})\nexport class CollectionModalComponent implements OnInit, OnDestroy {\n\tentity: SiteEntity;\n\n\t@Input()\n\tset initData(ins: any) {\n\t\tthis.init(ins.entity, ins.folders, ins.previous)\n\t}\n\n\t/* \n\t * Breadcrumb of previous sites clicked on\n\t */\n\tprevious = [] as SiteEntity[];\n\tfolders: SiteEntity[] = [];\n\tthumbnails: any = {};\n\tprocessRunning: boolean = false;\n\tmessage: string;\n\tstatusMessage: string;\n\tprocessable: boolean = false;\n\tenableSelectableImages: boolean = false;\n\ttabName: string;\n\tshowOrthoRerunMessage: boolean = false;\n\tcanReprocessImagery: boolean = false;\n\n\tconstPageSize: number = 50;\n\n\tpage: SiteObjectsResultSet = new SiteObjectsResultSet();\n\n\t/*\n\t * Observable subject for TreeNode changes.  Called when create is successful \n\t */\n\tpublic onNodeChange: Subject<SiteEntity>;\n\n\tvideo: { src: string, name: string } = { src: null, name: null };\n\tcontext: string;\n\n\tnotifier: WebSocketSubject<any>;\n\n\tconstructor(private service: ManagementService, private metadataService: MetadataService, private modalService: BsModalService, public bsModalRef: BsModalRef) {\n\t\tthis.context = acp;\n\t}\n\n\tngOnInit(): void {\n\t\tthis.onNodeChange = new Subject();\n\n\t\tthis.page.count = 0;\n\t\tthis.page.pageNumber = 1;\n\t\tthis.page.pageSize = this.constPageSize;\n\t\tthis.page.results = [];\n\n\t\tlet baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + acp;\n\n\t\tthis.notifier = webSocket(baseUrl + '/websocket/notify');\n\t\tthis.notifier.subscribe(message => {\n\t\t\tif (this.entity != null && message.type === \"UPLOAD_JOB_CHANGE\" && message.content.collection === this.entity.id) {\n\t\t\t\tif (this.tabName === 'raw') {\n\t\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t\t}\n\t\t\t\telse if (this.tabName === 'video') {\n\t\t\t\t\tthis.getData(this.entity.id, this.tabName, null, null);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.notifier.unsubscribe();\n\t}\n\n\n\tinit(entity: SiteEntity, folders: SiteEntity[], previous: SiteEntity[]): void {\n\t\tthis.entity = entity;\n\t\tthis.folders = folders;\n\t\tthis.previous = [...previous];\n\n\t\tif (this.previous.length > 0 && this.previous[this.previous.length - 1].id !== this.entity.id) {\n\t\t\tthis.previous.push(this.entity);\n\t\t}\n\n\t\tthis.onSelect(\"raw\");\n\n\t\tthis.processable = this.metadataService.isProcessable(entity.type);\n\t}\n\n\tcreateImageFromBlob(image: Blob, imageData: any) {\n\t\tlet reader = new FileReader();\n\t\treader.addEventListener(\"load\", () => {\n\t\t\t// this.imageToShow = reader.result;\n\t\t\tthis.thumbnails[imageData.key] = reader.result;\n\t\t}, false);\n\n\t\tif (image) {\n\t\t\treader.readAsDataURL(image);\n\t\t}\n\t}\n\n\tgetThumbnail(image: any): void {\n\t\tif (image != null) {\n\n\t\t\tlet rootPath: string = image.key.substr(0, image.key.lastIndexOf(\"/\"));\n\t\t\tlet fileName: string = /[^/]*$/.exec(image.key)[0];\n\t\t\tconst lastPeriod: number = fileName.lastIndexOf(\".\");\n\t\t\tconst thumbKey: string = rootPath + \"/thumbnails/\" + fileName.substr(0, lastPeriod) + \".png\";\n\n\t\t\tthis.service.download(image.component, thumbKey, false).subscribe(blob => {\n\t\t\t\tthis.createImageFromBlob(blob, image);\n\t\t\t}, error => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t\t}\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tthis.getData(this.entity.id, this.tabName, pageNumber, this.page.pageSize);\n\t}\n\n\tonSelect(tabName: string): void {\n\n\t\tthis.tabName = tabName;\n\n\t\tif (tabName === \"raw\") {\n\t\t\tthis.enableSelectableImages = true;\n\t\t} else {\n\t\t\tthis.enableSelectableImages = false;\n\t\t}\n\n\t\tif (tabName === \"raw\" || tabName === \"video\") {\n\t\t\tthis.page.results = [];\n\n\t\t\tlet pn: number = null;\n\t\t\tlet ps: number = null;\n\n\t\t\tif (tabName === \"raw\") {\n\t\t\t\tif (this.page.pageNumber == null) {\n\t\t\t\t\tpn = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tpn = this.page.pageNumber;\n\t\t\t\t}\n\t\t\t\tps = this.constPageSize;\n\t\t\t}\n\n\t\t\tthis.video.src = null;\n\t\t\tthis.video.name = null;\n\n\t\t\tthis.getData(this.entity.id, this.tabName, pn, ps);\n\n\t\t}\n\t}\n\n\tgetData(component: string, folder: string, pageNumber: number, pageSize: number) {\n\t\tthis.service.getObjects(component, folder, pageNumber, pageSize).then(resultSet => {\n\t\t\tthis.page = resultSet;\n\n\t\t\tthis.canReprocessImagery = this.page.results.length > 1 ? true : false;\n\n\t\t\tfor (let i = 0; i < this.page.results.length; ++i) {\n\t\t\t\tlet item = this.page.results[i];\n\n\t\t\t\tif (this.isImage(item)) {\n\t\t\t\t\tthis.getThumbnail(item);\n\t\t\t\t}\n\n\t\t\t}\n\t\t});\n\t}\n\n\tisImage(item: any): boolean {\n\t\tif (item.name.toLowerCase().indexOf(\".png\") !== -1 || item.name.toLowerCase().indexOf(\".jpg\") !== -1 ||\n\t\t\titem.name.toLowerCase().indexOf(\".jpeg\") !== -1 || item.name.toLowerCase().indexOf(\".tif\") !== -1 ||\n\t\t\titem.name.toLowerCase().indexOf(\".tiff\") !== -1) {\n\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpreviewImage(event: any, image: any): void {\n\t\t//        this.bsModalRef = this.modalService.show( ImagePreviewModalComponent, {\n\t\t//            animated: true,\n\t\t//            backdrop: true,\n\t\t//            ignoreBackdropClick: true,\n\t\t//            'class': 'image-preview-modal'\n\t\t//        } );\n\t\t//        this.bsModalRef.content.image = image;\n\t\t//        this.bsModalRef.content.src = event.target.src;\n\t}\n\n\ttoggleExcludeImage(event: any, image: any): void {\n\t\tthis.service.setExclude(image.id, !image.exclude).then(result => {\n\t\t\timage.exclude = result.exclude;\n\t\t});\n\t\t//\n\t\t//\n\t\t//\t\tif (image.exclude) {\n\t\t//\t\t\tthis.excludes.push(image.name);\n\t\t//\t\t}\n\t\t//\t\telse {\n\t\t//\t\t\tlet position = this.excludes.indexOf(image.name);\n\t\t//\t\t\tif (position > -1) {\n\t\t//\t\t\t\tthis.excludes.splice(position, 1);\n\t\t//\t\t\t}\n\t\t//\t\t}\n\t}\n\n\tisProcessable(item: any): boolean {\n\t\treturn this.metadataService.isProcessable(item.type);\n\t}\n\n\thandleErosPush(): void {\n\t\tthis.processRunning = true;\n\n\t\tthis.service.pushToEros(this.entity.id).then(data => {\n\t\t\tthis.processRunning = false;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.showOrthoRerunMessage = false;\n\t\t\t\tthis.statusMessage = \"Your process is started.\";\n\t\t\t}, 30000);\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\thandleRunOrtho(): void {\n\n\t\tconst confirmModalRef = this.modalService.show(RunOrthoModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'confirmation-modal'\n\t\t});\n\t\tconfirmModalRef.content.init(this.entity);\n\t\tconfirmModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.processRunning = true;\n\t\t\tthis.showOrthoRerunMessage = true;\n\n\t\t\tthis.service.runOrtho(this.entity.id, data.processPtcloud, data.processDem, data.processOrtho).then(() => {\n\t\t\t\tthis.processRunning = false;\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.showOrthoRerunMessage = false;\n\t\t\t\t\tthis.statusMessage = \"Your process is started.\";\n\t\t\t\t}, 30000);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\n\t}\n\n\thandleDownload(): void {\n\n\t\twindow.location.href = acp + '/project/download-all?id=' + this.entity.id + \"&key=\" + this.tabName;\n\n\t\t//      this.service.downloadAll( data.id ).then( data => {\n\t\t//        \n\t\t//      } ).catch(( err: HttpErrorResponse ) => {\n\t\t//          this.error( err );\n\t\t//      } );\n\t}\n\n\thandleDownloadOdmAll(): void {\n\n\t\twindow.location.href = acp + '/project/download-odm-all?colId=' + this.entity.id;\n\n\t\t//      this.service.downloadAll( data.id ).then( data => {\n\t\t//        \n\t\t//      } ).catch(( err: HttpErrorResponse ) => {\n\t\t//          this.error( err );\n\t\t//      } );\n\t}\n\n\thandleDownloadVideo(src: string): void {\n\n\t\twindow.location.href = src;\n\t}\n\n\thandleDownloadFile(item: SiteEntity): void {\n\t\twindow.location.href = acp + '/project/download?id=' + this.entity.id + \"&key=\" + item.key;\n\t}\n\n\thandleSetMetadata(): void {\n\t\tlet modalRef = this.modalService.show(MetadataModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\t\tmodalRef.content.init(this.entity.id, this.entity.name);\n\n\t\tmodalRef.content.onMetadataChange.subscribe(() => {\n\t\t\tthis.entity.metadataUploaded = true;\n\t\t});\n\t}\n\n\thandleUpload(): void {\n\n\t\tconst modal = this.modalService.show(UploadModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\t\tmodal.content.init(this.entity, \"raw\");\n\n\t\t// modal.content.onUploadComplete.subscribe(oid => {\n\n\t\t//   this.handleViewSite(oid);\n\t\t// });\n\t}\n\n\n\tcapitalize(str): string {\n\t\treturn str.replace(/^\\w/, c => c.toUpperCase());\n\t}\n\n\n\tshowVideo(item: SiteEntity): void {\n\t\tthis.video.name = null;\n\t\tthis.video.src = null;\n\n\t\t// We have to null out the video and then set it after angular has refereshed\n\t\t// Otherwise the video tag does not register that the src has changed.\n\t\tsetTimeout(() => {\n\t\t\tthis.video.name = item.name;\n\t\t\tthis.video.src = acp + '/project/download?id=' + this.entity.component + \"&key=\" + item.key; // + \"#\" + Math.random();\n\t\t}, 200);\n\t}\n\n\tcloseVideo(): void {\n\t\tthis.video.name = null;\n\t\tthis.video.src = null;\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\n\nimport { Product, ProductDetail } from '../model/management';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ProductService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\tgetProducts(id: string, sortField: string, sortOrder: string): Promise<Product[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\t\tparams = params.set('sortField', sortField);\n\t\tparams = params.set('sortOrder', sortOrder);\n\n\t\treturn this.http.get<Product[]>(acp + '/product/get-all', { params: params }).toPromise();\n\t}\n\n\tgetDetail(id: string, pageNumber: number, pageSize: number): Promise<ProductDetail> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\tparams = params.set('pageSize', pageSize.toString());\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<ProductDetail>(acp + '/product/detail', { params: params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tremove(id: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/product/remove', JSON.stringify({ id: id }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\ttogglePublish(id: string): Promise<ProductDetail> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<ProductDetail>(acp + '/product/toggle-publish', JSON.stringify({ id: id }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n}\n","<div *ngIf=\"!showSite\" class=\"modal-body\" style=\"padding-bottom: 0;\">\n  <div>\n    <div *ngIf=\"message != null\" class=\"error-container\">\n      <div class=\"label-holder\">\n        <strong>Error</strong>\n      </div>\n      <div class=\"holder\">\n        <div>\n          <p class=\"error-message\">{{message}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"product != null\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2>{{product.name}}</h2>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <ul class=\"breadcrumb\" style=\"margin-bottom: 10px;\">\n            <li *ngFor=\"let entity of product.entities\">\n              <span> {{entity.name}}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"\" *ngIf=\"thumbnails[product.id] != null\">\n            <a class=\"thumbnail non-clickable\">\n              <img class=\"\" [src]=\"thumbnails[product.id] | safeHtml\" (error)=\"getDefaultImgURL($event)\" alt=\"Image\">\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>Pilot Name: </label> &nbsp; {{product.pilotName}}\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>Creation Date: </label> &nbsp; {{product.dateTime | idmdate : \"MMM dd, yyyy\"}}\n        </div>\n      </div>\n      \n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>Collection Date: </label> &nbsp; {{product.collectionDate | idmdate : \"MMM dd, yyyy\"}}\n        </div>\n      </div>\n\n      \n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <label>Sensor:</label>\n          \n          <table *ngIf=\"product.sensor\" class=\"table table-bordered\">\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td><a [routerLink]=\"['/site/sensor', product.sensor.oid]\" target=\"_blank\">{{product.sensor.name}}</a></td>\n              </tr>\n              <tr>\n                <td>Type</td>\n                <td> {{product.sensor.sensorType.name}}</td>\n              </tr>\n              <tr>\n                <td>Model</td>\n                <td>{{product.sensor.model}}</td>\n              </tr>\n<!--               <tr> -->\n<!--                 <td>Description</td> -->\n<!--                 <td>{{product.sensor.description}}</td> -->\n<!--               </tr> -->\n            </tbody>\n          </table>\n          \n          <p *ngIf=\"!product.sensor\" style=\"font-style:italic;\">Sensor metadata is not available for this collection.</p>\n        </div>\n        \n        <div class=\"col-md-6\">\n          <label>Platform:</label>\n          \n          <table *ngIf=\"product.platform\" class=\"table table-bordered\">\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td><a [routerLink]=\"['/site/platform', product.platform.oid]\" target=\"_blank\">{{product.platform.name}}</a></td>\n              </tr>\n              <tr>\n                <td>Type</td>\n                <td> {{product.platform.platformType.name}}</td>\n              </tr>\n<!--               <tr> -->\n<!--                 <td>Description</td> -->\n<!--                 <td>{{product.platform.description}}</td> -->\n<!--               </tr> -->\n            </tbody>\n          </table>\n          \n          <p *ngIf=\"!product.platform\" style=\"font-style:italic;\">Platform metadata is not available for this collection.</p>\n        </div>\n      </div>\n      \n      \n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>UAV:</label>\n          \n          <table *ngIf=\"product.uav\" class=\"table table-bordered\">\n            <tbody>\n              <tr>\n                <td>Serial Number</td>\n                <td><a [routerLink]=\"['/site/uav', product.uav.oid]\" target=\"_blank\">{{product.uav.serialNumber}}</a></td>\n              </tr>\n              <tr>\n                <td>FAA Number</td>\n                <td> {{product.uav.faaNumber}}</td>\n              </tr>\n<!--               <tr> -->\n<!--                 <td>Description</td> -->\n<!--                 <td>{{product.uav.description}}</td> -->\n<!--               </tr> -->\n            </tbody>\n          </table>\n          \n          <p *ngIf=\"!product.platform\" style=\"font-style:italic;\">UAV metadata is not available for this collection.</p>\n          \n        </div>\n      </div>\n      \n\n      <!-- <div class=\"row\">\n      <div class=\"col-md-12\">\n        <label>Raw Images</label> \n      </div>\n    </div> -->\n      <div class=\"row\" style=\"background-color: #ececec;\">\n        <div class=\"col-md-12\">\n          <div id=\"image-list-container\">\n            <h3>Raw Images</h3>\n            <ul class=\"list-group row\">\n              <li *ngFor=\"let item of product.page.resultSet | paginate: { itemsPerPage: product.page.pageSize, currentPage: product.page.pageNumber, totalItems: product.page.count }\" class=\"list-group-item col-xs-3\" style=\"background:none;\">\n                <div class=\"\" *ngIf=\"thumbnails[item.id] != null\">\n                  <a class=\"thumbnail\" (click)=\"previewImage(item)\">\n                    <img [src]=\"thumbnails[item.id] | safeHtml\" (error)=\"getDefaultImgURL($event)\" alt=\"Image\">\n                    <div class=\"caption\">\n                      <h4 class=\"media-heading\">{{item.name}}</h4>\n                    </div>\n                  </a>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n      </div>\n\n\n      <div class=\"row\" style=\"background-color: #ececec;\">\n        <div class=\"btn-holder\" style=\"text-align: right;margin:20px 20px 20px 20px;\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Close</button>\n          <button *ngIf=\"product.hasAllZip\" type=\"button\" class=\"btn btn-secondary\" style=\"margin-left: 5px;\" (click)=\"handleDownload()\">Download ODM Files</button>\n          <button (click)=\"handleGoto()\" class=\"btn btn-primary\" style=\"margin-left: 5px;\">\n            Collection Details\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<collection-modal *ngIf=\"showSite\" [initData]=\"initData\"></collection-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { CollectionModalComponent } from './collection-modal.component'\nimport { ImagePreviewModalComponent } from '../modal/image-preview-modal.component';\n\nimport { ProductDetail, SiteEntity } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\nimport { ProductService } from '@site/service/product.service';\n\nimport {\n\tfadeInOnEnterAnimation,\n\tfadeOutOnLeaveAnimation,\n\tbounceInOnEnterAnimation,\n} from 'angular-animations';\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'product-modal',\n\ttemplateUrl: './product-modal.component.html',\n\tproviders: [CollectionModalComponent],\n\tstyleUrls: [],\n\tanimations: [\n\t\tfadeInOnEnterAnimation(),\n\t\tfadeOutOnLeaveAnimation(),\n\t\tbounceInOnEnterAnimation()\n\t]\n})\nexport class ProductModalComponent implements OnInit {\n\tproduct: ProductDetail;\n\n\tthumbnails: any = {};\n\titems: any[] = [];\n\tshowSite: boolean = false;\n\tmessage: string;\n\tinitData: any;\n\trawImagePreviewModal: BsModalRef;\n\n\tconstructor(private pService: ProductService, private service: ManagementService, public bsModalRef: BsModalRef, private modalService: BsModalService) { }\n\n\tngOnInit(): void {\n\t}\n\n\tinit(product: ProductDetail): void {\n\t\tthis.product = product;\n\n\t\tif (this.product.imageKey) {\n\t\t\tthis.getThumbnail(this.product.id, this.product.imageKey);\n\t\t}\n\n\t\tthis.product.page.resultSet.forEach(pDocument => {\n\t\t\tthis.getThumbnail(pDocument.id, pDocument.key);\n\t\t});\n\t}\n\n\tcreateImageFromBlob(image: Blob, id: string) {\n\t\tlet reader = new FileReader();\n\t\treader.addEventListener(\"load\", () => {\n\t\t\t// this.imageToShow = reader.result;\n\t\t\tthis.thumbnails[id] = reader.result;\n\t\t}, false);\n\n\t\tif (image) {\n\t\t\treader.readAsDataURL(image);\n\t\t}\n\t}\n\n\tgetThumbnail(id: string, key: string): void {\n\n\t\tconst component: string = this.product.entities[this.product.entities.length - 1].id;\n\t\tconst rootPath: string = key.substr(0, key.lastIndexOf(\"/\"));\n\t\tconst fileName: string = /[^/]*$/.exec(key)[0];\n\t\tconst lastPeriod: number = fileName.lastIndexOf(\".\");\n\t\tconst thumbKey: string = rootPath + \"/thumbnails/\" + fileName.substr(0, lastPeriod) + \".png\";\n\n\t\tthis.service.download(component, thumbKey, false).subscribe(blob => {\n\t\t\tthis.createImageFromBlob(blob, id);\n\t\t}, error => {\n\t\t\tconsole.log(error);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tthis.pService.getDetail(this.product.id, pageNumber, 20).then(detail => {\n\t\t\tthis.init(detail);\n\t\t});\n\t}\n\n\tgetDefaultImgURL(event: any): void {\n\t\tevent.target.src = acp + \"/net/geoprism/images/thumbnail-default.png\";\n\t}\n\n\thandleGoto(): void {\n\t\tconst entity = this.product.entities[this.product.entities.length - 1];\n\t\tconst breadcrumbs = this.product.entities;\n\n\n\t\tthis.service.getItems(entity.id, null).then(nodes => {\n\t\t\tthis.initData = { \"entity\": entity, \"folders\": nodes, \"previous\": breadcrumbs }\n\n\t\t\tthis.showSite = true;\n\t\t});\n\n\t}\n\n\tpreviewImage(image: SiteEntity): void {\n\n\t\tthis.rawImagePreviewModal = this.modalService.show(ImagePreviewModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: false,\n\t\t\t'class': 'image-preview-modal'\n\t\t});\n\t\tthis.rawImagePreviewModal.content.init(this.product.id);\n\t}\n\n    handleDownload(): void {\n      //const entity = this.product.entities[this.product.entities.length - 1];        \n\n      window.location.href = acp + '/product/get-odm-all?id=' + this.product.id;\n    }\n\n\n\terror(err: HttpErrorResponse): void {\n\t  this.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<ng-container>\n    <div class=\"row\">\n        <div class=\"col-sm-12\">\n        \t<div style=\"padding:10px 15px;\">\n\t            <label>\n\t                <label>Order available products</label>\n\t            </label>\n\t            <select [(ngModel)]=\"sortField\" name=\"sortField\" (change)=\"refresh()\">\n\t                <option></option>\n\t                <option *ngFor=\"let option of fields\" [value]=\"option.value\">{{option.label}}</option>\n\t            </select>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"list-group\">\n\n        <div *ngIf=\"products.length < 1\" [@fadeInOnEnter] style=\"padding: 10px;text-align: center;color: grey;\">\n            <h4>\n                <span *ngIf=\"loading\">\n                    <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i>\n                    Loading Products\n                </span>\n                <p *ngIf=\"!loading\">No data found</p>\n            </h4>\n        </div>\n\n        <div *ngFor=\"let product of products\" class=\"list-group-item\">\n            <div class=\"card card-default\" [@fadeInOnEnter] [@fadeOutOnLeave]>\n                <div class=\"card-body\">\n                    <h5 class=\"card-title\" style=\"color:#a0a0a0\">\n                        {{product.name}}\n                    </h5>\n\n                    <ul class=\"breadcrumb\" style=\"margin: 5px 0 5px 0;\">\n                        <li *ngFor=\"let entity of product.entities\">\n                            <span> {{entity.name}} </span>\n                        </li>\n                    </ul>\n\n                    <div class=\"card-left\" style=\"width:calc(100% - 7.2em); padding:0px;\">\n\n                        <!-- <img src=\"https://via.placeholder.com/150x75\" class=\"img-responsive\"> -->\n\n                        <div *ngIf=\"thumbnails[product.id] != null\">\n                            <a class=\"thumbnail\" (click)=\"previewImage(product)\">\n                                <img class=\"\" [src]=\"thumbnails[product.id] | safeHtml\"\n                                    (error)=\"getDefaultImgURL($event)\" alt=\"Image\">\n                            </a>\n                        </div>\n                    </div>\n                    <div class=\"card-right\" style=\"padding:0px; width: 7.2em;\">\n                        <ul style=\"list-style: none;padding: 0;\">\n                            <li style=\"padding: 3px 0 3px 0; min-width:6em;\">\n                                <a class=\"fa fa-globe\" [style]=\"hasOrthoLayer(product) ? '' : 'cursor:not-allowed;'\"\n                                    aria-hidden=\"true\" (click)=\"handleMapIt(product)\"\n                                    title=\"View the Orthomosaic generated from the raw data using ODM.\">Aerial</a>\n                                <i *ngIf=\"product.orthoMapped\" [@bounceInOnEnter] [@bounceOutOnLeave]\n                                    class=\"fas fa-check\"\n                                    style=\"color: #007276;float: right;vertical-align: middle;line-height: 20px;\"></i>\n                            </li>\n                            <li style=\"padding: 3px 0 3px 0; min-width:7.2em;\">\n                                <a class=\"fa fa-industry\" [style]=\"hasDemLayer(product) ? '' : 'cursor:not-allowed;'\"\n                                    aria-hidden=\"true\" (click)=\"handleMapDem(product)\"\n                                    title=\"View the DEM hillshade.\">Hillshade</a>\n                                <i *ngIf=\"product.demMapped\" [@bounceInOnEnter] [@bounceOutOnLeave] class=\"fas fa-check\"\n                                    style=\"color: #007276;float: right;vertical-align: middle;line-height: 20px;\"></i>\n                            </li>\n                            <li style=\"padding: 3px 0 3px 0;\">\n                                <a class=\"fa fa-cube\" [style]=\"product.hasPointcloud ? '' : 'cursor:not-allowed;'\"\n                                    aria-hidden=\"true\" (click)=\"handlePointcloud(product)\"\n                                    title=\"View the 3D pointcloud for this product using the Potree viewer.\">3D</a>\n                            </li>\n                            <li style=\"padding: 3px 0 3px 0;\">\n                                <a class=\"fa fa-info-circle\" (click)=\"handleGetInfo(product)\"\n                                    title=\"View more information about this product, including raw data.\">Get Info</a>\n                            </li>\n                            <li style=\"padding: 3px 0 3px 0;\">\n                                <a class=\"fa fa-trash-alt\" (click)=\"handleDelete(product, $event)\"\n                                    title=\"Deletes the product and all associated data and public map services.\">Delete</a>\n                            </li>\n                            <li *ngIf=\"product.published\" style=\"padding: 3px 0 3px 0;\">\n                                <a class=\"fa fa-arrow-alt-circle-down\" (click)=\"handleTogglePublish(product)\"\n                                    title=\"Unpublishes the layer from the public mosaic. This layer will no longer be publicly accessible.\">Unpublish</a>\n                            </li>\n                            <li *ngIf=\"!product.published\" style=\"padding: 3px 0 3px 0;\">\n                                <a class=\"fa fa-arrow-alt-circle-up\" (click)=\"handleTogglePublish(product)\"\n                                    title=\"Publish the product to the publish mosaic. The aerial and hillshade services will be publicly accessible.\">Publish</a>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</ng-container>","import { Component, Input, Output, EventEmitter, SimpleChanges, OnDestroy } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\nimport { ImagePreviewModalComponent } from '../modal/image-preview-modal.component';\nimport { ProductModalComponent } from '../modal/product-modal.component';\n\nimport { Product } from '@site/model/management';\nimport { ProductService } from '@site/service/product.service';\nimport { ManagementService } from '@site/service/management.service';\n\nimport {\n    fadeInOnEnterAnimation,\n    fadeOutOnLeaveAnimation,\n    bounceInOnEnterAnimation,\n    bounceOutOnLeaveAnimation\n} from 'angular-animations';\n\ndeclare var acp: string;\n\n@Component({\n    selector: 'product-panel',\n    templateUrl: './product-panel.component.html',\n    animations: [\n        fadeInOnEnterAnimation(),\n        fadeOutOnLeaveAnimation(),\n        bounceInOnEnterAnimation(),\n        bounceOutOnLeaveAnimation()\n    ]\n})\nexport class ProductPanelComponent implements OnDestroy {\n\n    @Input() id: string;\n\n    @Output() public toggleMapOrtho = new EventEmitter<Product>();\n\n    @Output() public toggleMapDem = new EventEmitter<Product>();\n\n    /* \n     * List of products for the current node\n     */\n    products: Product[] = [];\n\n    thumbnails: any = {};\n\n    fields = [\n        { label: \"Name\", value: \"name\" },\n        { label: \"Sensor\", value: \"sensor\" },\n        { label: \"Flight Number\", value: \"faaNumber\" },\n        { label: \"Serial Number\", value: \"serialNumber\" },\n        { label: \"Product Date\", value: \"lastUpdateDate\" }\n    ];\n\n    sortField: string = \"name\";\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    loading: boolean = false;\n\n    requestId: number = 0;\n\n\n    constructor(private pService: ProductService, private mService: ManagementService, private modalService: BsModalService) { }\n    \n    ngOnDestroy(): void {\n        this.products.forEach(product => {\n            if (product.orthoMapped) {\n                this.handleMapIt(product);\n            }\n            if (product.demMapped) {\n                this.handleMapDem(product);\n            }\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        this.refreshProducts(changes['id'].currentValue);\n    }\n\n    refresh(): void {\n        this.refreshProducts(this.id);\n    }\n\n    refreshProducts(id: string): void {\n        this.products = [];\n        this.thumbnails = {};\n\n        this.loading = true;\n\n        const original = ++this.requestId;\n\n        this.pService.getProducts(id, this.sortField, \"ASC\").then(products => {\n            if (original === this.requestId) {\n\n                this.products = products;\n                this.loading = false;\n\n                this.products.forEach(product => {\n                    this.getThumbnail(product);\n                });\n            }\n        });\n    }\n\n    createImageFromBlob(image: Blob, product: Product) {\n        let reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n            // this.imageToShow = reader.result;\n            this.thumbnails[product.id] = reader.result;\n        }, false);\n\n        if (image) {\n            reader.readAsDataURL(image);\n        }\n    }\n\n    hasOrthoLayer(product: Product): boolean {\n        let len = product.layers.length;\n        for (let i = 0; i < len; ++i) {\n            if (product.layers[i].classification === 'ORTHO' && product.layers[i].key != null && product.layers[i].key.length > 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    hasDemLayer(product: Product): boolean {\n        let len = product.layers.length;\n        for (let i = 0; i < len; ++i) {\n            if ((product.layers[i].classification === 'DEM_DSM' || product.layers[i].classification === 'DEM_DTM') && product.layers[i].key != null && product.layers[i].key.length > 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    getThumbnail(product: Product): void {\n\n        // imageKey only exists if an image actually exists on s3\n        if (product.imageKey != null) {\n            const component: string = product.entities[product.entities.length - 1].id;\n            const rootPath: string = product.imageKey.substr(0, product.imageKey.lastIndexOf(\"/\"));\n            const fileName: string = /[^/]*$/.exec(product.imageKey)[0];\n            const lastPeriod: number = fileName.lastIndexOf(\".\");\n            const thumbKey: string = rootPath + \"/thumbnails/\" + fileName.substr(0, lastPeriod) + \".png\";\n\n            this.mService.download(component, thumbKey, false).subscribe(blob => {\n                this.createImageFromBlob(blob, product);\n            }, error => {\n                console.log(error);\n\n                this.thumbnails[product.id] = acp + \"/net/geoprism/images/thumbnail-default.png\";\n\n            });\n        }\n        else {\n            this.thumbnails[product.id] = acp + \"/net/geoprism/images/thumbnail-default.png\";\n        }\n    }\n\n    getDefaultImgURL(event: any): void {\n        event.target.src = acp + \"/net/geoprism/images/thumbnail-default.png\";\n    }\n\n    handleMapIt(product: Product): void {\n        if (this.hasOrthoLayer(product)) {\n            this.toggleMapOrtho.emit(product);\n        }\n    }\n\n    handleMapDem(product: Product): void {\n        if (this.hasDemLayer(product)) {\n            this.toggleMapDem.emit(product);\n        }\n    }\n\n    handlePointcloud(product: Product): void {\n        if (product.hasPointcloud) {\n            let componentId: string = product.entities[product.entities.length - 1].id;\n\n            window.open(acp + \"/pointcloud/\" + componentId + \"/potree\");\n        }\n    }\n\n    handleDelete(product: Product, event: any): void {\n\n        event.stopPropagation();\n\n        this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.message = 'Are you sure you want to delete [' + product.name + ']?';\n        this.bsModalRef.content.data = product;\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = 'Delete';\n\n        (<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.remove(data);\n        });\n    }\n\n    remove(product: Product): void {\n        this.pService.remove(product.id).then(response => {\n            this.products = this.products.filter((n: any) => n.id !== product.id);\n        });\n    }\n\n    previewImage(product: Product): void {\n\n        if (product.imageKey != null) {\n\n            const component: string = product.entities[product.entities.length - 1].id;\n\n            this.bsModalRef = this.modalService.show(ImagePreviewModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: false,\n                'class': 'image-preview-modal'\n            });\n            this.bsModalRef.content.init(product.id);\n        }\n    }\n\n    handleGetInfo(product: Product): void {\n        this.pService.getDetail(product.id, 1, 20).then(detail => {\n            this.bsModalRef = this.modalService.show(ProductModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true,\n                'class': 'product-info-modal'\n            });\n            this.bsModalRef.content.init(detail);\n        });\n    }\n\n    handleTogglePublish(product: Product): void {\n        this.pService.togglePublish(product.id).then(p => {\n            const mapIt: boolean = product.orthoMapped;\n            const demMapped: boolean = product.demMapped;\n\n            if (mapIt) {\n                this.toggleMapOrtho.emit(product);\n            }\n            if (demMapped) {\n                this.toggleMapDem.emit(product);\n            }\n\n            product.published = p.published;\n            product.layers = p.layers;\n\n            if (mapIt) {\n                this.toggleMapOrtho.emit(product);\n            }\n            if (demMapped) {\n                this.toggleMapDem.emit(product);\n            }\n        });\n    }\n}\n","<div *ngIf=\"entity != null\" class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"error-container\">\n    <div class=\"label-holder\">\n      <strong>Error</strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"error-message\">{{message}}</p>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"newInstance\" class=\"modal-title-container\">\n      <h3 >Add new {{entity.type}}</h3>\n  </div>\n\n  <form #ngForm=\"ngForm\">\n    <div *ngFor=\"let attribute of attributes\">\n      <div *ngIf=\"evaluate(attribute)\" class=\"form-group\">\n        <div *ngIf=\"attribute.type === 'text'\">\n          <label>{{attribute.label}}</label>\n          <input [(ngModel)]=\"entity[attribute.name]\" [name]=\"attribute.name\" type=\"input\" class=\"form-control\" [disabled]=\"attribute.readonly\" [placeholder]=\"attribute.label\" [required]=\"attribute.required\" />\n        </div>\n        <div *ngIf=\"attribute.type === 'list'\">\n          <label>{{attribute.label}}</label>\n          <select [(ngModel)]=\"entity[attribute.name]\" [name]=\"attribute.name\" type=\"input\" [disabled]=\"attribute.readonly\" [required]=\"attribute.required\">\n            <option></option>\n            <option *ngFor=\"let option of attribute.options\" [value]=\"option.value\">{{option.label}}</option>\n          </select>\n        </div>\n        <div *ngIf=\"attribute.type === 'text-area'\">\n          <label>{{attribute.label}}</label>\n          <textarea [(ngModel)]=\"entity[attribute.name]\" [name]=\"attribute.name\"  [disabled]=\"attribute.readonly\" class=\"form-control\" [required]=\"attribute.required\">\n          </textarea>\n        </div>\n        <div *ngIf=\"attribute.type === 'point'\">          \n          <map-attribute [(site)]=\"entity\" [center]=\"center\" [zoom]=\"zoom\" ></map-attribute>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"form-group\" *ngIf=\"entity.type === 'Collection' && !newInstance\">\n        <label>Privilege </label>\n        \n        <select style=\"padding:6px 10px;font-size:14px;\" [(ngModel)]=\"entity.privilegeType\" name=\"collection-privilege\" type=\"input\" [required]=\"true\" \n           [disabled]=\"admin === false || entity.ownerName !== userName\">\n            <option value=\"OWNER\">Owner</option>\n            <option value=\"AGENCY\">Agency</option>\n            <option value=\"PUBLIC\">Public</option>\n        </select>\n\n    </div>\n\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Cancel</button>\n      <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\" [disabled]=\"!ngForm.valid\">Apply</button>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { LngLat } from 'mapbox-gl';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { SiteEntity, AttributeType } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\n\n\n@Component({\n\tselector: 'entity-modal',\n\ttemplateUrl: './entity-modal.component.html',\n\tstyleUrls: []\n})\nexport class EntityModalComponent implements OnInit {\n    /*\n     * parent id of the node being created\n     */\n\tparentId: string;\n\tuserName: string = \"\";\n\n\tentity: SiteEntity;\n\n\tattributes: AttributeType[];\n\n\tadmin: boolean = false;\n\n\tnewInstance: boolean = false;\n\n\tmessage: string = null;\n\n\tcenter: LngLat = null;\n\tzoom: number = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n\tpublic onNodeChange: Subject<SiteEntity>;\n\n\tconstructor(private service: ManagementService, public bsModalRef: BsModalRef) { }\n\n\tngOnInit(): void {\n\t\tthis.onNodeChange = new Subject();\n\t}\n\n\tinit(newInstance: boolean, userName: string, admin: boolean, entity: SiteEntity, attributes: AttributeType[], center: LngLat, zoom: number) {\n\t\tthis.newInstance = newInstance;\n\t\tthis.userName = userName;\n\t\tthis.admin = admin;\n\t\tthis.entity = entity;\n\t\tthis.attributes = attributes;\n\t\tthis.center = center;\n\t\tthis.zoom = zoom;\n\t}\n\n\thandleOnSubmit(): void {\n\t\tthis.message = null;\n\n\t\tif (this.entity.type !== 'Site' || this.entity.geometry != null) {\n\t\t\tif (this.newInstance) {\n\t\t\t\tthis.service.applyWithParent(this.entity, this.parentId).then(data => {\n\t\t\t\t\tthis.onNodeChange.next(data);\n\t\t\t\t\tthis.bsModalRef.hide();\n\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\tthis.error(err);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.service.update(this.entity).then(node => {\n\t\t\t\t\tthis.onNodeChange.next(node);\n\n\t\t\t\t\tthis.bsModalRef.hide();\n\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\tconsole.log(err);\n\n\t\t\t\t\tthis.error(err);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.message = \"Sites require a location\";\n\t\t}\n\t}\n\n\tevaluate(attribute: AttributeType): boolean {\n\n\t\tif (this.newInstance && attribute.readonly) {\n\t\t\treturn false;\n\t\t}\n\t\telse if (attribute.condition != null) {\n\t\t\treturn this.service.evaluate(attribute.condition, this.entity);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t  this.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"modal-body\">\n  <div>\n    <div *ngIf=\"message != null\" class=\"error-container\">\n      <div class=\"label-holder\">\n        <strong>Error</strong>\n      </div>\n      <div class=\"holder\">\n        <div>\n          <p class=\"error-message\">{{message}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"entity != null\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2>{{entity.name}}</h2>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <ul class=\"breadcrumb\" style=\"margin-bottom: 10px;\">\n            <li *ngFor=\"let prev of previous\">\n              <span> {{prev.name}}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <tabset class=\"nav-full-width\">\n          <tab *ngFor=\"let folder of folders\" [heading]=\"folder.name\" (selectTab)=\"onSelect(folder)\">\n            <div class=\"row image-list-container\">              \n              <div class=\"col-sm-12\">\n                <table class=\"table table-striped\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\"></th>\n                      <th scope=\"col\">Name</th>\n                      <th scope=\"col\">Date uploaded</th>\n                    </tr>\n                  </thead>\n                  <tbody class=\"upload-name-style\">\n                    <tr *ngFor=\"let item of page.results  | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                      <td class=\"button-column\">\n                        <a class=\"fa fa-download\" (click)=\"handleDownloadFile(item)\" title=\"Download\"></a>\n                        <a style=\"margin-left: 5px;\" class=\"fa fa-trash-alt ico-remove\" (click)=\"handleDelete(item)\" title=\"Remove\"></a>\n                      </td>\n                      <td>{{ item.name }}</td>\n                      <td>{{ item.lastModified }}</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n            <div class=\"row\">\n                   <div class=\"col-sm-12\">\n                <ngx-file-drop dropZoneLabel=\"Drop files here\" (onFileDrop)=\"dropped($event)\">\n                  <ng-template ngx-file-drop-content-tmp let-openFileSelector=\"openFileSelector\">\n                    Drag & Drop File\n                    <button type=\"button\" (click)=\"openFileSelector()\">Browse Files</button>\n                  </ng-template>\n                </ngx-file-drop>\n              </div> \n            </div>\n          </tab>\n        </tabset>\n      </div>\n      \n      <div class=\"row\">      \n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n      </div>\n\n      <div class=\"row\">      \n        <div class=\"btn-holder\" style=\"text-align: right;margin: 20px 20px 10px 20px;\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Close</button>\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"handleDownload()\" style=\"margin-left: 5px;\">Download all</button>\n        </div>\n      </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { NgxFileDropEntry, FileSystemFileEntry, FileSystemDirectoryEntry } from 'ngx-file-drop';\n\nimport { ErrorHandler, BasicConfirmModalComponent } from '@shared/component';\n\nimport { SiteEntity, SiteObjectsResultSet } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\n\ndeclare var acp: string;\n\n@Component({\n    selector: 'accessible-support-modal',\n    templateUrl: './accessible-support-modal.component.html',\n    styles: [],\n})\nexport class AccessibleSupportModalComponent implements OnInit {\n\n    /* \n     * Breadcrumb of previous sites clicked on\n     */\n    previous = [] as SiteEntity[];\n    folders: SiteEntity[] = [];\n    message: string;\n\n    entity: SiteEntity;\n    folder: SiteEntity;\n\n    page: SiteObjectsResultSet = new SiteObjectsResultSet();\n\n    constructor(private service: ManagementService, private modalService: BsModalService, public bsModalRef: BsModalRef) {\n    }\n\n    ngOnInit(): void {\n        this.page.count = 0;\n        this.page.pageNumber = 1;\n        this.page.pageSize = 10;\n        this.page.results = [];\n    }\n\n    init(entity: SiteEntity, folders: SiteEntity[], previous: SiteEntity[]): void {\n\n        this.entity = entity;\n        this.folders = folders;\n        this.previous = [...previous];\n\n        if (this.previous.length > 0 && this.previous[this.previous.length - 1].id !== this.entity.id) {\n            this.previous.push(this.entity);\n        }\n\n        if (this.folders.length > 0) {\n            this.onSelect(this.folders[0]);\n        }\n    }\n\n    onPageChange(pageNumber: number): void {\n        this.getData(this.folder.component, this.folder.name, pageNumber, this.page.pageSize);\n    }\n\n    onSelect(folder: SiteEntity): void {\n\n        this.page.results = [];\n\n        this.folder = folder;\n\n        this.getData(folder.component, folder.name, 1, this.page.pageSize);\n    }\n\n    refresh(): void {\n\n        this.page.results = [];\n\n        this.getData(this.folder.component, this.folder.name, this.page.pageNumber, this.page.pageSize);\n    }\n\n    getData(component: string, folder: string, pageNumber: number, pageSize: number) {\n        this.service.getObjects(component, folder, pageNumber, pageSize).then(page => {\n            this.page = page;\n        });\n    }\n\n    handleDownload(): void {\n        window.location.href = acp + '/project/download-all?id=' + this.folder.component + \"&key=\" + this.folder.name;\n    }\n\n    handleDownloadFile(item: SiteEntity): void {\n        window.location.href = acp + '/project/download?id=' + this.folder.component + \"&key=\" + item.key;\n    }\n\n    dropped(files: NgxFileDropEntry[]): void {\n\n        for (const droppedFile of files) {\n\n            // Is it a file?\n            if (droppedFile.fileEntry.isFile) {\n                const fileEntry: FileSystemFileEntry = droppedFile.fileEntry as FileSystemFileEntry;\n\n                fileEntry.file((file: File) => {\n\n                    this.service.upload(this.folder.component, this.folder.name, file).then(() => {\n                        // Refresh the table\n                        this.refresh();\n                    });\n\n                });\n            } else {\n                // It was a directory (empty directories are added, otherwise only files)\n                const fileEntry: FileSystemDirectoryEntry = droppedFile.fileEntry as FileSystemDirectoryEntry;\n                console.log(droppedFile.relativePath, fileEntry);\n            }\n        }\n    }\n\n    handleDelete(item: SiteEntity): void {\n        let modalRef: BsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        modalRef.content.message = 'Are you sure you want to delete the file [' + item.name + ']?';\n        modalRef.content.type = 'DANGER';\n        modalRef.content.submitText = 'Delete';\n\n        modalRef.content.onConfirm.subscribe(() => {\n            this.remove(item);\n        });\n    }\n\n    remove(item: SiteEntity): void {\n        this.service.removeObject(item.component, item.key).then(() => {\n            // Refresh the table\n            this.refresh();\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\nimport { HttpBackendClient } from '@shared/service/http-backend-client.service';\n\nimport { PageResult } from '@shared/model/page';\nimport { MetadataOptions, UAV } from '../model/uav';\nimport { GenericTableService } from '@shared/model/generic-table';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class UAVService implements GenericTableService {\n\n    constructor(private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService) { }\n\n\n    page(criteria: Object): Promise<PageResult<UAV>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set('criteria', JSON.stringify(criteria));\n\n        return this.http\n            .get<PageResult<UAV>>(acp + '/uav/page', { params: params })\n            .toPromise();\n    }\n\n    get(oid: string): Promise<{ uav: UAV, bureaus: { value: string, label: string }[] }> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<{ uav: UAV, bureaus: { value: string, label: string }[] }>(acp + '/uav/get', JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    newInstance(): Promise<{ uav: UAV, bureaus: { value: string, label: string }[] }> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<{ uav: UAV, bureaus: { value: string, label: string }[] }>(acp + '/uav/newInstance', JSON.stringify({}), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(oid: string): Promise<void> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(acp + '/uav/remove', JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(uav: UAV): Promise<UAV> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<UAV>(acp + '/uav/apply', JSON.stringify({ uav: uav }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    search(text: string, field: string): Promise<{ oid: string, serialNumber: string, faaNumber: string }[]> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set('text', text);\n        params = params.set('field', field);\n\n        return this.http\n            .get<{ oid: string, serialNumber: string, faaNumber: string }[]>(acp + '/uav/search', { params: params })\n            .toPromise();\n    }\n\n    getMetadataOptions(oid: string): Promise<MetadataOptions> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set('oid', oid);\n\n        return this.http\n            .get<MetadataOptions>(acp + '/uav/get-metadata-options', { params: params })\n            .toPromise();\n    }\n}","<ng-container>\n    <div *ngIf=\"page.selection.pointOfContact != null\" class=\"row\" style=\"margin-top: 20px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">Point Of Contact</div>\n                <div class=\"panel-body\">\n                    <div class=\"form-group\">\n                        <label for=\"pointOfContact.name\">Name</label>\n                        <input type=\"text\" name=\"pointOfContact.name\" [(ngModel)]=\"page.selection.pointOfContact.name\"\n                            [maxlength]=\"100\" [required]=\"false\" [disabled]=\"false\"\n                            (change)=\"this.handlePageChange()\" />\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"pointOfContact.email\">Email</label>\n                        <input type=\"text\" name=\"pointOfContact.email\" [(ngModel)]=\"page.selection.pointOfContact.email\"\n                            [maxlength]=\"255\" [required]=\"false\" [disabled]=\"false\"\n                            (change)=\"this.handlePageChange()\" />\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">Platform</div>\n                <div class=\"panel-body\">\n                    <div class=\"form-group\">\n                        <label for=\"platform.name\">UAV</label>\n                        <div>\n                            <span>\n                                <input id=\"serialNumber\" style=\"height:auto;\" type=\"radio\" value=\"serialNumber\" name=\"field\" [checked]=\"field === 'serialNumber'\" [(ngModel)]=\"field\">\n                                <label for=\"serialNumber\" style=\"margin-left: 5px;\">Serial Number</label>\n                            </span>\n                            <span style=\"margin-left: 15px;\">\n                                <input id=\"faaNumber\" style=\"height:auto;\" type=\"radio\" value=\"faaNumber\" name=\"field\" [checked]=\"field === 'faaNumber'\" [(ngModel)]=\"field\">\n                                <label for=\"faaNumber\" style=\"margin-left: 5px;\">FAA Number</label>\n                            </span>\n                        </div>\n                        <input class=\"form-control search-input\" type=\"text\" placeholder=\"Search...\"\n                            [(ngModel)]=\"search\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\"\n                            (typeaheadOnSelect)=\"handleUavClick($event)\" [typeaheadOptionsLimit]=\"10\"\n                            [typeaheadOptionField]=\"field\" [ngModelOptions]=\"{standalone: true}\"\n                            (keydown.enter)=\"$event.preventDefault()\" required />\n                    </div>\n\n\n                    <ng-container *ngIf=\"uav != null\">\n                        <div class=\"form-group\">\n                            <label for=\"sensor.type\">Name</label>\n                            {{uav.platform}}\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.type\">Type</label>\n                            {{uav.platformType}}\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.type\">Serial Number</label>\n                            {{uav.serialNumber}}\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.type\">FAA Id Number</label>\n                            {{uav.faaNumber}}\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.type\">Bureau</label>\n                            {{uav.bureau}}\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div *ngIf=\"uav != null\" class=\"row\">\n        <div class=\"col-md-12\">\n\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">Sensor</div>\n                <div class=\"panel-body\">\n                    <div class=\"form-group\">\n                        <label for=\"sensor.name\">Name</label>\n                        <select [(ngModel)]=\"page.selection.sensor\" name=\"sensor\" class=\"form-control\"\n                            (change)=\"onSensorChange()\" required>\n                            <option></option>\n                            <option *ngFor=\"let sensor of uav.sensors\" [value]=\"sensor.oid\">{{sensor.name}}\n                            </option>\n                        </select>\n                    </div>\n                    <ng-container *ngIf=\"metaObject != null\">\n\n                        <div class=\"form-group\">\n                            <label for=\"sensor.type\">Type</label>\n                            {{metaObject.sensor.sensorType}}\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.wavelength\">Wave Length</label>\n                            <ul>\n                                <li *ngFor=\"let wavelength of metaObject.sensor.wavelengths\">\n                                    {{wavelength.name}}\n                                </li>\n                            </ul>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorWidth\">Sensor Width</label>\n                            {{metaObject.sensor.sensorWidth}}\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorWidth\">Sensor Width Units</label>\n                            Millimeters\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorHeight\">Sensor Height</label>\n                            {{metaObject.sensor.sensorHeight}}\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorWidth\">Sensor Height Units</label>\n                            Millimeters\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.pixelSizeWidth\">Pixel Size Width</label>\n                            {{metaObject.sensor.pixelSizeWidth}}\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.pixelSizeHeight\">Pixel Size Height</label>\n                            {{metaObject.sensor.pixelSizeHeight}}\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n\n        </div>\n    </div>\n\n</ng-container>","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ManagementService } from '@site/service/management.service';\nimport { Page } from '../modal/upload-modal.component';\nimport { MetadataOptions } from '@site/model/uav';\nimport { Observable, Observer } from 'rxjs';\nimport { UAVService } from '@site/service/uav.service';\n\n@Component({\n\tselector: 'metadata-page',\n\ttemplateUrl: './metadata-page.component.html',\n\tstyleUrls: []\n})\nexport class MetadataPageComponent implements OnInit {\n\t/*\n\t * page being updated\n\t */\n\t@Input() page: Page;\n\n\t@Output() pageChange = new EventEmitter<Page>();\n\n\t/* \n\t * Datasource to get search responses\n\t */\n\tdataSource: Observable<any>;\n\tsearch: string = '';\n\tfield: string = 'serialNumber';\n\n\tuav: MetadataOptions = null;\n\n\tmetaObject: any = null;\n\n\tconstructor(private service: ManagementService, private uavService: UAVService) {\n\t\tthis.dataSource = new Observable((observer: Observer<object>) => {\n\t\t\tthis.uavService.search(this.search, this.field).then(results => {\n\t\t\t\tobserver.next(results);\n\t\t\t})\n\t\t});\n\t}\n\n\tngOnInit(): void {\n\n\t\tif (this.page.selection.pointOfContact == null) {\n\t\t\tthis.service.getMetadataOptions(null).then(metadataOption => {\n\t\t\t\tthis.page.selection.pointOfContact = {\n\t\t\t\t\tname: metadataOption.name,\n\t\t\t\t\temail: metadataOption.email\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\tif (this.page.selection.uav != null) {\n\t\t\tthis.getUavInformation(this.page.selection.uav, false);\n\t\t}\n\n\t\tif (this.page.selection.sensor != null) {\n\t\t\tthis.onSensorChange();\n\t\t}\n\t}\n\n\thandlePageChange(): void {\n\t\tthis.pageChange.emit(this.page);\n\t}\n\n\tonSensorChange(): void {\n\n\t\tthis.metaObject = null;\n\n\t\tthis.service.getUAVMetadata(this.page.selection.uav, this.page.selection.sensor).then((options) => {\n\n\t\t\tthis.metaObject = {\n\t\t\t\tuav: options.uav,\n\t\t\t\tsensor: options.sensor\n\t\t\t};\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t// this.error(err);\n\t\t});\n\n\t\tthis.handlePageChange();\n\t}\n\n\thandleUavClick(event: any): void {\n\t\tthis.getUavInformation(event.item.oid, true);\n\n\t\tthis.pageChange.emit(this.page);\n\t}\n\n\tgetUavInformation(oid: string, reset: boolean): void {\n\t\tthis.uav = null;\n\t\tthis.metaObject = null;\n\n\t\tif (reset) {\n\t\t\tthis.page.selection.uav = null;\n\t\t\tthis.page.selection.sensor = null;\n\t\t}\n\n\t\tif (oid != null) {\n\t\t\tthis.page.selection.uav = oid;\n\n\t\t\tthis.uavService.getMetadataOptions(oid).then(metadataOption => {\n\t\t\t\tthis.uav = metadataOption;\n\n\t\t\t\tif (!reset) {\n\t\t\t\t\tthis.search = this.uav.serialNumber;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n}\n","<div>\n  <div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n\n\n    <div *ngIf=\"message != null && message.length > 0\" class=\"row error-container\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <div class=\"label-holder\">\n          <strong style=\"color:#8c0000;\">Error</strong>\n        </div>\n        <div class=\"holder\">\n          <div>\n            <p class=\"error-message\">{{message}}</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n\n    <div class=\"row\" *ngIf=\"labels.length > 0\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <ul class=\"breadcrumb\">\n          <li [@fadeInOnEnter] *ngFor=\"let label of labels\">\n            <span> {{label}}</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <!-- Section for each page -->\n    <div class=\"row\" *ngIf=\"page.type === 'CATEGORY'\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n\n        <div class=\"form-group\">\n          <label [for]=\"page.selection.type\">{{page.selection.type}}:</label>\n\n          <div *ngIf=\"!page.selection.isNew\" class=\"row\">\n            <div class=\"col-md-8\">\n              <select [name]=\"page.selection.type\" [(ngModel)]=\"page.selection.value\" [disabled]=\"page.selection.isNew\"\n                required>\n                <option></option>\n                <option *ngFor=\"let option of page.options\" [value]=\"option.id\">{{option.name}}</option>\n              </select>\n            </div>\n            <div class=\"col-md-2\">\n              <button *ngIf=\"!page.selection.isNew\" type=\"button btn btn-primary\" class=\"btn btn-primary\"\n                (click)=\"setIsNew(true)\">\n                Add\n              </button>\n            </div>\n          </div>\n        </div>\n        <div [@fadeInOnEnter] *ngIf=\"page.selection.isNew\" class=\"form-group\">\n          <div class=\"row\">\n            <div class=\"col-md-8\">\n              <input autofocus [(ngModel)]=\"page.selection.label\" name=\"label\" type=\"input\" class=\"form-control\"\n                [placeholder]=\"page.selection.type + ' name...'\" required />\n            </div>\n            <div class=\"col-md-2\">\n              <button *ngIf=\"!hasField('collectionDate')\" type=\"button btn btn-primary\" class=\"btn btn-primary\" (click)=\"setIsNew(false)\">\n                Cancel\n              </button>\n            </div>\n          </div>\n          <div [@fadeInOnEnter] class=\"row\" *ngIf=\"hasField('collectionDate')\">\n            <div class=\"col-md-8\">\n              <label for=\"platform\" style=\"margin-top: 10px;\">Collection Date:</label>\n              <input [(ngModel)]=\"page.selection.collectionDate\" name=\"collectionDate\" type=\"date\" class=\"form-control\"\n                required />\n            </div>\n          </div>\n\n          <metadata-page *ngIf=\"hasField('uav')\" [(page)]=\"page\"></metadata-page>\n        </div>\n      </div>\n    </div>\n\n    <!-- Summary page -->\n    <div [@fadeInOnEnter] class=\"row\" *ngIf=\"page.type === 'SUMMARY'\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n\n        <div *ngFor=\"let selection of selections\" class=\"form-group\">\n          <label [for]=\"selection.type\">{{selection.type}}:</label>\n          <input [(ngModel)]=\"selection.label\" [name]=\"selection.type\" type=\"input\" class=\"form-control\" disabled\n            required />\n        </div>\n\n      </div>\n    </div>\n\n  </div>\n  <div class=\"modal-footer\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"btn-holder\" style=\"text-align: right;\">\n          <button type=\"button\" [disabled]=\"disabled\" (click)=\"close()\" [disabled]=\"disabled\" class=\"btn btn-default\"\n            role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n            <span class=\"ui-button-text\">Close</span>\n          </button>\n\n          <button *ngIf=\"page.index > 0\" type=\"button btn btn-primary\" [disabled]=\"disabled\"\n            class=\"btn btn-secondary\" (click)=\"handleBackPage()\">\n            <i class=\"icon-upload icon-white\"></i>\n            Back\n          </button>\n\n          <button *ngIf=\"page.index < (pages.length - 1)\" type=\"button btn btn-primary\"\n            [disabled]=\"!isPageValid(page) || disabled\" class=\"btn btn-primary\" (click)=\"handleNextPage()\">\n            <i class=\"icon-upload icon-white\"></i>\n            Next\n          </button>\n\n          <button *ngIf=\"page.index === (pages.length - 1)\" type=\"button btn btn-primary\"\n            [disabled]=\"!isPageValid(page) || disabled\" class=\"btn btn-primary\" (click)=\"handleCreate()\">\n            <i class=\"icon-upload icon-white\"></i>\n            Create\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n</div>","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\n\nimport { Subject } from 'rxjs';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { Sensor } from '@site/model/sensor';\nimport { Platform } from '@site/model/platform';\nimport { SiteEntity, Selection } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\nimport { MetadataService } from '@site/service/metadata.service';\n\nimport { StepConfig } from '@shared/modal/step-indicator/modal-step-indicator'\n\nimport {\n\tfadeInOnEnterAnimation,\n\tfadeOutOnLeaveAnimation\n} from 'angular-animations';\nimport { UploadModalComponent } from './upload-modal.component';\n\nexport class Page {\n\tindex?: number;\n\tselection?: Selection;\n\toptions?: SiteEntity[];\n\ttype?: string\n};\n\n@Component({\n\tselector: 'create-collection-modal',\n\ttemplateUrl: './create-collection-modal.component.html',\n\tstyleUrls: ['./upload-modal.component.css'],\n\tanimations: [\n\t\tfadeInOnEnterAnimation(),\n\t\tfadeOutOnLeaveAnimation()\n\t]\n})\nexport class CreateCollectionModalComponent implements OnInit, OnDestroy {\n\tmessage: string = \"\";\n\n\tdisabled: boolean = false;\n\n\t/*\n\t * List of hierarchies\n\t */\n\thierarchy: string[] = [];\n\n\t/*\n\t * List of selections: One per hierarchy type\n\t */\n\tselections: Selection[] = [];\n\n\t/*\n\t * List of previous selection labels\n\t */\n\tlabels: string[] = [];\n\n\t/*\n\t * List of pages\n\t */\n\tpages: Page[] = [{\n\t\tindex: 0,\n\t\tselection: null,\n\t\toptions: [],\n\t\ttype: 'FILE',\n\t}];\n\n\t/*\n\t * Current page  \n\t */\n\thierarchyChange: boolean = false;\n\n\t/*\n\t * Current page  \n\t */\n\tpage: Page = this.pages[0];\n\n\tsensors: Sensor[] = [];\n\tplatforms: Platform[] = [];\n\n\tpublic onCreateComplete: Subject<any>;\n\n\tpublic onHierarchyChange: Subject<boolean>;\n\n\tmodalStepConfig: StepConfig = {\n\t\t\"steps\": [\n\t\t\t{ \"label\": \"Category\", \"active\": true, \"enabled\": true },\n\t\t\t{ \"label\": \"Final\", \"active\": true, \"enabled\": false }\n\t\t]\n\t};\n\n\tconstructor(private service: ManagementService, private modalService: BsModalService, private metadataService: MetadataService, public bsModalRef: BsModalRef) {\n\t}\n\n\n\tngAfterViewInit() {\n\n\t}\n\n\tngOnInit(): void {\n\t\tthis.onCreateComplete = new Subject();\n\t\tthis.onHierarchyChange = new Subject();\n\n\t\t// this.service.getMetadataOptions(null).then((options) => {\n\t\t// \tthis.sensors = options.sensors;\n\t\t// \tthis.platforms = options.platforms;\n\t\t// }).catch((err: HttpErrorResponse) => {\n\t\t// \tthis.error(err);\n\t\t// });\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.onCreateComplete.unsubscribe();\n\t\tthis.onHierarchyChange.unsubscribe();\n\t}\n\n\tinit(entities: SiteEntity[]): void {\n\t\tthis.hierarchy = this.metadataService.getHierarchy();\n\t\tthis.selections = [];\n\t\tthis.pages = [];\n\n\t\tfor (let i = 0; i < this.hierarchy.length; i++) {\n\t\t\tconst type = this.hierarchy[i];\n\n\t\t\tconst index = entities.findIndex(entity => { return entity.type === type });\n\n\t\t\tif (index !== -1) {\n\t\t\t\tconst entity = entities[index];\n\n\t\t\t\tthis.selections.push({\n\t\t\t\t\ttype: type,\n\t\t\t\t\tisNew: (i === (this.hierarchy.length - 1)),\n\t\t\t\t\tvalue: entity.id,\n\t\t\t\t\tlabel: entity.name\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.selections.push({\n\t\t\t\t\ttype: type,\n\t\t\t\t\tisNew: (i === (this.hierarchy.length - 1)),\n\t\t\t\t\tvalue: null,\n\t\t\t\t\tlabel: ''\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (i > 0) {\n\t\t\t\tthis.pages.push({\n\t\t\t\t\tindex: (this.pages.length),\n\t\t\t\t\tselection: this.selections[i],\n\t\t\t\t\toptions: [],\n\t\t\t\t\ttype: 'CATEGORY'\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.labels.push(this.selections[0].label);\n\n\t\tthis.pages.push({\n\t\t\tindex: (this.pages.length),\n\t\t\tselection: null,\n\t\t\toptions: [],\n\t\t\ttype: 'SUMMARY'\n\t\t});\n\n\t\tthis.page = this.pages[0];\n\n\t\tthis.service.getChildren(this.selections[0].value).then(children => {\n\t\t\tthis.pages[0].options = children.filter(child => {\n\t\t\t\treturn child.type === this.pages[0].selection.type;\n\t\t\t});\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tclose(): void {\n\t\tif (this.hierarchyChange) {\n\t\t\tthis.onHierarchyChange.next(true);\n\t\t}\n\n\t\tthis.bsModalRef.hide();\n\t}\n\n\n\tisPageValid(page: Page): boolean {\n\t\tif (page.type === 'CATEGORY') {\n\t\t\tif (page.selection != null) {\n\t\t\t\tif (page.selection.value != null && page.selection.value.length > 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse if (page.selection.label != null && page.selection.label.length > 0) {\n\t\t\t\t\tif (this.hasField('uav') && (page.selection.uav == null || page.selection.uav.length === 0)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.hasField('sensor') && (page.selection.sensor == null || page.selection.sensor.length === 0)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.hasField('collectionDate') && (page.selection.collectionDate == null || page.selection.collectionDate.length === 0)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tupdateCurrentPageLabel(): void {\n\t\tthis.page.options.forEach(entity => {\n\t\t\tif (entity.id === this.page.selection.value) {\n\t\t\t\tthis.page.selection.label = entity.name;\n\t\t\t}\n\t\t})\n\t}\n\n\tsetIsNew(isNew: boolean): void {\n\t\tthis.page.selection.isNew = isNew;\n\n\t\tif (isNew) {\n\t\t\tthis.page.selection.value = null;\n\t\t}\n\t\telse {\n\t\t\tthis.page.selection.label = null;\n\t\t}\n\t}\n\n\thandleCreate(): void {\n\t\tthis.service.createCollection(this.selections).then(resp => {\n\t\t\tthis.onCreateComplete.next(resp.oid);\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\thandleNextPage(): void {\n\n\t\tif ((this.page.index + 1) < this.pages.length) {\n\n\t\t\tconst nextPage = this.pages[this.page.index + 1];\n\n\t\t\tif (this.page.type === 'CATEGORY') {\n\t\t\t\tthis.updateCurrentPageLabel();\n\t\t\t\tthis.labels.push(this.page.selection.label);\n\t\t\t}\n\n\t\t\tif (nextPage.type === 'CATEGORY') {\n\n\t\t\t\tif (this.page.type === 'FILE') {\n\t\t\t\t\tthis.page = nextPage;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!this.page.selection.isNew && this.page.selection.value != null && this.page.selection.value.length > 0) {\n\n\t\t\t\t\t\tthis.service.getChildren(this.page.selection.value).then(children => {\n\t\t\t\t\t\t\tnextPage.options = children.filter(child => {\n\t\t\t\t\t\t\t\treturn child.type === nextPage.selection.type;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tthis.page = nextPage;\n\t\t\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\t\t\tthis.error(err);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.page = nextPage;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.page = nextPage;\n\n\t\t\t\tthis.modalStepConfig = {\n\t\t\t\t\t\"steps\": [\n\t\t\t\t\t\t{ \"label\": \"Category\", \"active\": true, \"enabled\": false },\n\t\t\t\t\t\t{ \"label\": \"Final\", \"active\": true, \"enabled\": false }\n\t\t\t\t\t]\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\thandleBackPage(): void {\n\n\t\tif (this.page.index > 0) {\n\n\t\t\tconst prevPage = this.pages[this.page.index - 1];\n\n\t\t\tif (prevPage.type === 'CATEGORY') {\n\t\t\t\tthis.labels.splice(this.labels.length - 1, 1);\n\n\t\t\t\tthis.modalStepConfig.steps.forEach(step => {\n\t\t\t\t\tif (step.label.toLowerCase() === \"category\" && step.enabled === false) {\n\t\t\t\t\t\tthis.modalStepConfig = {\n\t\t\t\t\t\t\t\"steps\": [\n\t\t\t\t\t\t\t\t{ \"label\": \"Category\", \"active\": true, \"enabled\": true },\n\t\t\t\t\t\t\t\t{ \"label\": \"Final\", \"active\": true, \"enabled\": false }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tthis.page = prevPage;\n\t\t}\n\t}\n\n\n\thasField(fieldName: string): boolean {\n\t\treturn this.metadataService.hasExtraField(this.page.selection.type, fieldName);\n\t}\t\n\n\terror(err: any): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<ng-template #bsItemTemplate let-match=\"match\" let-query=\"query\">\n    <b>{{ match.item.label}} - {{ match.item.total}}</b>\n</ng-template>\n\n<form #form=\"ngForm\">\n    <ng-container *ngIf=\"viewMode === 0\">\n\n        <div class=\"row\">\n            <div class=\"col-md-12\" style=\"padding-top: 10px;\">\n                <label>Layer Name</label>\n                <input type=\"text\" placeholder=\"Layer name...\" [(ngModel)]=\"layer.layerName\" name=\"layerName\" required\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12\" style=\"padding-top: 10px;\">\n                <label>Start Date</label>\n                <input type=\"date\" [(ngModel)]=\"layer.startDate\" name=\"startDate\" style=\"width: 100%;\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12\" style=\"padding-top: 10px;\">\n                <label>End Date</label>\n                <input type=\"date\" class=\"form-element\" [(ngModel)]=\"layer.endDate\" name=\"endDate\" style=\"width: 100%;\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-md-12\" style=\"padding-top: 10px;\">\n                <label>Search</label>\n                <input class=\"form-control search-input\" type=\"text\" name=\"search\" placeholder=\"Search for products...\"\n                    autocomplete=\"off\" [(ngModel)]=\"search\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\"\n                    (typeaheadOnSelect)=\"handleClick($event)\" [typeaheadOptionsLimit]=\"10\" [typeaheadMinLength]=\"2\"\n                    [typeaheadItemTemplate]=\"bsItemTemplate\" typeaheadOptionField=\"text\"\n                    (keydown.enter)=\"$event.preventDefault()\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <hr>\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <label>Filters</label>\n            </div>\n        </div>\n        <ng-container *ngFor=\"let filter of layer.filters\">\n            <div *ngIf=\"filter.field !== 'datetime'\" class=\"row\">\n                <div class=\"col-md-12\">\n                    {{filter.label}} contains {{filter.value}}\n                    <span class=\"float-right\" *ngIf=\"!readonly\">\n                        <a class=\"fa fa-trash-alt ico-remove\" (click)=\"handleRemove(filter)\" title=\"Remove filter\"></a>\n                    </span>\n                </div>\n            </div>\n        </ng-container>\n\n    </ng-container>\n    <ng-container *ngIf=\"page != null\">\n        <div class=\"row\">\n            <div class=\"col-md-12\" style=\"background:#f7f7f7; padding:0; height:100%;\">\n                <div class=\"list-group\">\n\n                    <div *ngFor=\"let result of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\"\n                        class=\"list-group-item\">\n                        <div class=\"card card-default\">\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\" style=\"color:#a0a0a0\">\n                                    {{result.properties.title}}\n                                </h5>\n\n                                <div>Date: <label>{{result.properties.datetime}}</label></div>\n\n                                <div class=\"card-left\" style=\"width:calc(100% - 13em); padding:0px;\">\n                                    <span class=\"thumbnail\">\n\t                                    <img style=\"max-height: 110px\"\n\t                                        [src]=\"thumbnails[result.id] != null ? (thumbnails[result.id] | safeHtml) : (context + '/net/geoprism/images/thumbnail-default.png')\"\n\t                                        alt=\"Image\">\n                                    </span>\n                                </div>\n                                <div class=\"card-right\" style=\"width: 13em;\">\n                                    <ul style=\"list-style: none;padding: 0;\">\n                                        <li style=\"padding: 3px 0 3px 0; min-width:6em;\">\n                                            Platform: <label>{{result.properties.platform}}</label>\n                                        </li>\n                                        <li style=\"padding: 3px 0 3px 0; min-width:6em;\">\n                                            Sensor: <label>{{result.properties.sensor}}</label>\n                                        </li>\n                                        <li style=\"padding: 3px 0 3px 0; min-width:6em;\">\n                                            Asset\n                                            <select [(ngModel)]=\"result.asset\" [name]=\"result.id + '-asset'\">\n                                                <ng-container *ngFor=\"let asset of result.assets | keyvalue\">\n                                                    <option\n                                                        *ngIf=\"asset.value.type === 'image/tiff; application=geotiff; profile=cloud-optimized'\"\n                                                        [value]=\"asset.key\">\n                                                        {{asset.key}}\n                                                    </option>\n                                                </ng-container>\n                                            </select>\n                                        </li>\n                                        <li style=\"padding: 3px 0 3px 0; min-width:6em;\">\n                                            <boolean-field [value]=\"result.enabled\"\n                                                (valueChange)=\"handleToggleItem(result)\" label=\"Enabled\">\n                                            </boolean-field>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <pagination-controls (pageChange)=\"onPageChange($event)\" maxSize=\"10\"></pagination-controls>\n            </div>\n        </div>\n    </ng-container>\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"btn-holder\" style=\"text-align: right;padding: 0 10px 10px 0;\">\n                <button type=\"button\" (click)=\"close()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\"\n                    style=\"padding: 4px 18px;\">\n                    <span class=\"ui-button-text\">Close</span>\n                </button>\n\n                <button *ngIf=\"viewMode === 0\" type=\"button btn btn-primary\" [disabled]=\"form.invalid\"\n                    class=\"btn btn-primary\" (click)=\"handleSubmit()\">\n                    <i class=\"icon-upload icon-white\"></i>\n                    Search for products...\n                </button>\n\n                <button *ngIf=\"viewMode !== 0\" type=\"button btn btn-primary\"\n                    [disabled]=\"form.invalid || layer.items.length === 0\" class=\"btn btn-primary\"\n                    (click)=\"handleSubmit()\">\n                    <i class=\"icon-upload icon-white\"></i>\n                    {{readonly ? 'Modify layer' : 'Create layer'}}\n                </button>\n            </div>\n        </div>\n    </div>\n</form>","import { Component, OnInit, OnDestroy, Output, EventEmitter, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ManagementService } from '@site/service/management.service';\nimport { Criteria, Filter, StacItem, StacLayer } from '@site/model/layer';\nimport { PageResult } from '@shared/model/page';\nimport { LngLatBounds } from 'mapbox-gl';\nimport { filter } from 'rxjs/operators';\n\nconst enum VIEW_MODE {\n\tFORM = 0,\n\tRESULTS = 1\n}\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'layer-panel',\n\ttemplateUrl: './layer-panel.component.html',\n\tstyleUrls: []\n})\nexport class LayerPanelComponent implements OnInit, OnDestroy {\n\n\t/* \n\t * Datasource to get search responses\n\t */\n\tdataSource: Observable<any>;\n\n\t/* \n\t * Model for text being searched\n\t */\n\tsearch: string = \"\";\n\n\t@Output() confirm: EventEmitter<StacLayer> = new EventEmitter<StacLayer>();\n\n\t@Output() cancel: EventEmitter<void> = new EventEmitter<void>();\n\n\t@Input() layer: StacLayer;\n\n\t@Input() bounds: LngLatBounds = null;\n\n\tpage: PageResult<StacItem> = null;\n\n\tviewMode: number = VIEW_MODE.FORM;\n\n\tthumbnails: any = {};\n\n\tcontext: string;\n\n\treadonly: boolean;\n\n\tconstructor(private service: ManagementService) {\n\t\tthis.context = acp;\n\n\t\tthis.dataSource = new Observable((observer: any) => {\n\n\t\t\tconst filters = this.getFilters();\n\n\t\t\tthis.service.getTotals(this.search, filters).then(results => {\n\t\t\t\tresults.forEach(result => result.text = this.search);\n\n\t\t\t\tobserver.next(results);\n\t\t\t});\n\t\t});\n\t}\n\n\tngOnInit(): void {\n\t\tthis.readonly = (this.layer != null);\n\t\tif (this.layer == null) {\n\t\t\tthis.layer = {\n\t\t\t\tid: uuidv4(),\n\t\t\t\tlayerName: \"\",\n\t\t\t\tstartDate: \"\",\n\t\t\t\tendDate: \"\",\n\t\t\t\tfilters: [],\n\t\t\t\titems: [],\n\t\t\t\tactive: true\n\t\t\t}\n\t\t}\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.thumbnails = {};\n\t}\n\n\tgetFilters(): Filter[] {\n\t\tconst filters = [...this.layer.filters];\n\n\t\tif (this.layer.startDate.length > 0 || this.layer.endDate.length > 0) {\n\t\t\tconst filter: Filter = {\n\t\t\t\tid: uuidv4(),\n\t\t\t\tlabel: \"Date\",\n\t\t\t\tfield: \"datetime\",\n\t\t\t};\n\n\t\t\tif (this.layer.startDate.length > 0) {\n\t\t\t\tfilter.startDate = this.layer.startDate;\n\t\t\t}\n\n\t\t\tif (this.layer.endDate.length > 0) {\n\t\t\t\tfilter.endDate = this.layer.endDate;\n\t\t\t}\n\n\t\t\tfilters.push(filter);\n\t\t}\n\n\t\treturn filters;\n\t}\n\n\thandleClick($event: any): void {\n\t\tthis.layer.filters.push({\n\t\t\tid: uuidv4(),\n\t\t\tlabel: $event.item.label,\n\t\t\tfield: $event.item.key,\n\t\t\tvalue: $event.item.text\n\t\t});\n\n\t\tthis.search = \"\";\n\t}\n\n\thandleRemove(filter: Filter): void {\n\t\tthis.layer.filters = this.layer.filters.filter(f => f.id !== filter.id);\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tconst filters = this.getFilters();\n\n\t\tconst criteria: Criteria = {};\n\n\t\tif (filters != null && filters.length > 0) {\n\t\t\tcriteria.must = filters;\n\t\t}\n\n\t\tif (this.bounds != null) {\n\t\t\tcriteria.should = [{\n\t\t\t\tfield: \"bounds\",\n\t\t\t\tid: uuidv4(),\n\t\t\t\tlabel: \"Bounds\",\n\t\t\t\tvalue: this.bounds\n\t\t\t}];\n\t\t}\n\n\t\tthis.service.getStacItems(criteria, 20, pageNumber).then(page => {\n\t\t\tthis.thumbnails = {};\n\t\t\tthis.page = page;\n\n\t\t\t// Replace any incoming stac item with the existing definition\n\t\t\t// if that stac item has already been selected\n\t\t\tthis.layer.items.forEach(item => {\n\t\t\t\tconst index = this.page.resultSet.findIndex(i => item.id === i.id);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tthis.page.resultSet[index] = item;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Get the thumbnail of each item\n\t\t\tthis.page.resultSet.forEach(item => {\n\t\t\t\tthis.getThumbnail(item);\n\t\t\t});\n\n\t\t\t// Assign the default asset for all stac items\n\t\t\tthis.page.resultSet.forEach(item => {\n\t\t\t\tif (item.asset == null) {\n\t\t\t\t\tif (item.assets['odm_orthophoto.cog'] != null) {\n\t\t\t\t\t\titem.asset = 'odm_orthophoto.cog';\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tconst keys = Object.keys(item.assets);\n\n\t\t\t\t\t\tkeys.forEach(key => {\n\t\t\t\t\t\t\tif (item.assets[key].type === \"image/tiff; application=geotiff; profile=cloud-optimized\") {\n\t\t\t\t\t\t\t\titem.asset = key;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\thandleToggleItem(item: StacItem): void {\n\t\titem.enabled = !item.enabled;\n\n\t\tconst index = this.layer.items.findIndex(i => i.id === item.id);\n\n\t\tif (index === -1 && item.enabled) {\n\t\t\tthis.layer.items.push(item);\n\t\t}\n\t\telse if (index !== -1 && !item.enabled) {\n\t\t\tthis.layer.items = this.layer.items.filter(f => f.id !== item.id);\n\t\t}\n\t}\n\n\thandleSubmit(): void {\n\t\tif (this.viewMode === VIEW_MODE.FORM) {\n\t\t\tthis.onPageChange(1);\n\n\t\t\tthis.viewMode = VIEW_MODE.RESULTS;\n\t\t}\n\t\telse if (this.viewMode === VIEW_MODE.RESULTS) {\n\t\t\tthis.confirm.emit(this.layer);\n\t\t\tthis.close();\n\t\t}\n\t}\n\n\tclose(): void {\n\t\tthis.cancel.emit();\n\t}\n\n\tgetThumbnail(item: StacItem): void {\n\t\tif (item.assets[\"thumbnail\"] != null) {\n\t\t\tconst key = item.assets[\"thumbnail\"].href;\n\n\t\t\tthis.service.downloadFile(key, false).then(blob => {\n\t\t\t\tthis.createImageFromBlob(blob, item);\n\t\t\t}, error => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t\t}\n\t}\n\n\tcreateImageFromBlob(image: Blob, item: StacItem) {\n\t\tlet reader = new FileReader();\n\t\treader.addEventListener(\"load\", () => {\n\t\t\t// this.imageToShow = reader.result;\n\t\t\tthis.thumbnails[item.id] = reader.result;\n\t\t}, false);\n\n\t\tif (image) {\n\t\t\treader.readAsDataURL(image);\n\t\t}\n\t}\n\n}\n","<div id=\"navigator-header-container\">\n  <uasdm-header [title]=\"'Site Viewer'\"></uasdm-header>\n</div>\n\n<div id=\"app-container\" class=\"container-fluid\" style=\"background: #f7f7f7;\">\n\n  <div class=\"row\">\n    <div id=\"navigator-left-sidebar\" class=\"col-md-3 lw-inner-col\">\n      <ng-container *ngIf=\"viewMode === 0\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n\n            <!-- IF at Site level -->\n            <ng-container *ngIf=\"!current\">\n              <div class=\"row\">\n                <div class=\"col-md-6\" style=\"height: 64px;\">\n                  <h3 style=\"font-weight:bold;\">IDM Sites</h3>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"col-sm-12\">\n                  <label>Bureau</label>\n                  <select [(ngModel)]=\"filter.value\" name=\"filter\" (change)=\"refreshSites()\">\n                    <option></option>\n                    <option *ngFor=\"let bureau of bureaus\" [value]=\"bureau.value\">\n                      {{bureau.label}}\n                    </option>\n                  </select>\n                </div>\n              </div>\n              <!--            \n            <div class=\"row\">\n              <div class=\"col-sm-12\">\n                <label>Sort</label>\n                <select [(ngModel)]=\"sort\" name=\"sort\" (change)=\"refreshSites()\">\n                  <option></option>\n                  <option value=\"name\">Name</option>\n                  <option value=\"bureau\">Bureau</option>\n                </select>\n              </div>\n            </div>\n          -->\n            </ng-container>\n\n\n            <!-- IF lower than Site -->\n            <div class=\"row\" *ngIf=\"current\">\n              <div class=\"col-md-12\" style=\"height: 65px; overflow: auto;\">\n                <ul class=\"breadcrumb\" style=\"background-color: white; vertical-align: middle; line-height:2\">\n                  <li>\n                    <i class=\"fa fa-angle-left breadcrumb-back-ico\" aria-hidden=\"true\"></i>\n                    <a (click)=\"back(null)\" style=\"color: #007276;\">IDM Sites</a>\n                  </li>\n                  <li *ngFor=\"let entity of breadcrumbs; last as isLast\" [ngClass]=\"{'active':isLast}\">\n                    <a *ngIf=\"!isLast\" (click)=\"back(entity)\" style=\"color: #007276;\"> {{entity.name}}</a>\n                    <span *ngIf=\"isLast\"> <b>{{entity.name}}</b> </span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n\n            <!-- Search bar -->\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"location-management-widget-section\">\n                  <input class=\"form-control search-input\" type=\"text\" placeholder=\"Search...\" [(ngModel)]=\"search\"\n                    [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"handleClick($event)\"\n                    [typeaheadOptionsLimit]=\"10\" [typeaheadItemTemplate]=\"bsItemTemplate\" typeaheadOptionField=\"label\"\n                    [ngModelOptions]=\"{standalone: true}\" (keydown.enter)=\"$event.preventDefault()\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- <hr> -->\n\n        <div class=\"row\">\n          <div class=\"col-md-12\" style=\"background:#f7f7f7; padding:0; height:100%;\">\n\n            <tabset #staticTabs class=\"nav-full-width\">\n              <tab heading=\"Data\">\n                <div id=\"hierarchy-tree-container\"\n                  class=\"location-management-widget-section location-management-list-container\"\n                  [style]=\"current != null ? 'height: calc(100vh - 296px);overflow-y: auto;overflow-x:hidden;' : 'height: calc(100vh - 360px);overflow-y: auto;overflow-x:hidden;'\">\n                  <div class=\"list-group\">\n\n                    <!-- If -->\n                    <div *ngIf=\"nodes.length < 1 && breadcrumbs.length === 0\" [@fadeInOnEnter]\n                      style=\"padding: 20px;text-align: center;color: grey;\">\n                      <span *ngIf=\"loadingSites\">\n                        <h4>\n                          <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i>\n                          Loading Sites\n                        </h4>\n                      </span>\n\n                      <span *ngIf=\"!loadingSites\">\n                        <h4>No Sites in this area.</h4>\n                        <p>\n                          Zoom out to find sites in other areas of the map.\n                        </p>\n                      </span>\n                    </div>\n\n                    <!-- Else -->\n                    <div *ngIf=\"nodes.length < 1 && breadcrumbs.length > 0\" [@fadeInOnEnter]\n                      style=\"padding: 20px;text-align: center;color: grey;\">\n                      <h4>No data at this level.</h4>\n                      <p>\n                        Create data containers as part of the upload process.\n                      </p>\n                    </div>\n\n                    <div *ngFor=\"let node of nodes; let i = index\" [@fadeInOnEnter] class=\"list-group-item\">\n\n                      <!-- Two column layout -->\n                      <div [@fadeInOnEnter] style=\"border-left: solid 15px;\" class=\"card card-default clickable\"\n                        *ngIf=\"getMetadata(node).root\" [ngClass]=\"{'active': hoverFeatureId === node.id}\"\n                        (click)=\"select(node, null, $event)\" (mouseenter)=\"onListEntityHover($event, node)\"\n                        (mouseleave)=\"onListEntityHoverOff()\">\n\n                        <!-- <div class=\"card-header\">Header</div> -->\n                        <div class=\"card-body card-5-7\">\n                          <div>\n                            <!-- <i class=\"fas fa-map-marker-alt\" style=\"font-size: 50px;\"></i> -->\n                            <h4\n                              style=\"word-break: break-all; border-bottom-color:rgba(195, 195, 195, 0.3); border-bottom-style:inset; border-bottom-width: 2px; margin-bottom:10px; padding-bottom:10px;\">\n                              <!-- <a (click)=\"select(node, $event)\"> -->\n                              {{node.name}}\n                              <!-- </a> -->\n                            </h4>\n                            <span>\n                              <span><b>{{node.numberOfChildren}}</b> {{getMetadata(node).childLabel}}</span>\n                              <span *ngIf=\"node.type !== 'folder'\" class=\"pull-right\">\n                                <a class=\"fa fa-pencil-alt ico-edit\" (click)=\"handleEdit(node, $event)\"\n                                  title=\"Edit\"></a>\n                                <a class=\"fa fa-trash-alt ico-remove\" (click)=\"handleDelete(node, $event)\"\n                                  title=\"Delete\"></a>\n                              </span>\n                            </span>\n                          </div>\n                        </div>\n                        <!-- <div class=\"card-footer\">Footer</div> -->\n                      </div>\n\n\n                      <!-- Single column card -->\n                      <div [@fadeInOnEnter] class=\"card card-default clickable\" *ngIf=\"!getMetadata(node).root\"\n                        (click)=\"select(node, null, $event)\">\n                        <div class=\"card-body\">\n                          <i (click)=\"handleExpand(node, $event)\" class=\"fa fa-caret-left expand-arrow-ico pull-right\"\n                            [ngClass]=\"{'fa-rotate-270':node.active}\" style=\"font-size: 25px; padding: 0 5px\"\n                            aria-hidden=\"true\"></i>\n\n                          <h4 style=\"word-break: break-all;\">{{node.name}}</h4>\n                          <p><b>{{node.numberOfChildren}}</b> {{getMetadata(node).childLabel}}</p>\n\n                          <div [collapse]=\"!node.active\" class=\"list-group\" style=\"margin-bottom: 0;\">\n                            <div *ngFor=\"let child of node.children\" (click)=\"select(child, node, $event)\"\n                              class=\"list-group-item\"\n                              style=\"background-color: #ececec;border: solid 1px lightgrey;border-radius: 0;\">\n                              <!-- <a (click)=\"select(child, $event)\"> -->\n                              {{child.name}}\n                              <!-- </a> -->\n                              <span *ngIf=\"child.type !== 'folder'\" class=\"pull-right button-column\">\n                                <a class=\"fa fa-pencil-alt ico-edit\" (click)=\"handleEdit(child, $event)\"\n                                  title=\"Edit\"></a>\n                                <a class=\"fa fa-trash-alt ico-remove\" (click)=\"handleDelete(child, $event)\"\n                                  title=\"Delete\"></a>\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                    </div>\n\n                    <div *ngFor=\"let node of supportingData\" class=\"list-group-item\">\n                      <div [@fadeInOnEnter] class=\"card card-default\">\n                        <div class=\"card-body\">\n                          <h4 style=\"word-break: break-all;\">Supporting Data</h4>\n                          <div class=\"list-group\">\n                            <div class=\"list-group-item\"\n                              style=\"background-color: #ececec;border: solid 1px lightgrey;border-radius: 0;\">\n                              <a (click)=\"select(node, null, $event)\">\n                                {{node.name}}\n                              </a>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                  </div>\n                </div>\n                <!-- <div *ngIf=\"supportingData.length > 0\" class=\"location-management-widget-section location-management-list-container\">\n                        \n                            <div class=\"card card-default\">\n                              <div class=\"card-body\">\n                                <h4>Supporting Data</h4>\n                                <div class=\"list-group\">\n                                  <div *ngFor=\"let node of supportingData\" class=\"list-group-item\" style=\"background-color: #ececec;border: solid 1px lightgrey;border-radius: 0;\">\n                                    <a (click)=\"select(node, $event)\">\n                                      {{node.name}}\n                                    </a>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                      </div> -->\n\n              </tab>\n              <tab *ngIf=\"current != null\" heading=\"Products\">\n                <div id=\"hierarchy-tree-container\"\n                  class=\"location-management-widget-section location-management-list-container\"\n                  style=\"height: calc(100vh - 296px);overflow-y: auto;overflow-x:hidden;\">\n                  <product-panel [id]=\"current.id\" (toggleMapOrtho)=\"handleMapOrtho($event)\"\n                    (toggleMapDem)=\"handleMapDem($event)\"></product-panel>\n                </div>\n              </tab>\n            </tabset>\n\n          </div>\n        </div>\n\n\n        <footer class=\"sidebar-footer\">\n          <div class=\"row\" *ngIf=\"current != null\" style=\"background:white;\">\n            <div class=\"col-md-12\" style=\"text-align: center;padding: 10px;border-top: 1px solid lightgrey;\">\n              <button (click)=\"handleCreateCollection()\" class=\"btn btn-primary\">Create Collection</button>\n            </div>\n          </div>\n          <div class=\"row\" *ngIf=\"current == null\" style=\"background:white;\">\n            <div class=\"col-md-12\" style=\"text-align: center;padding: 10px;border-top: 1px solid lightgrey;\">\n              <button (click)=\"handleCreate(null,null)\" class=\"btn btn-primary\">Add new site</button>\n            </div>\n          </div>\n        </footer>\n      </ng-container>\n      <ng-container *ngIf=\"viewMode === 1\">\n        <div id=\"hierarchy-tree-container\" class=\"location-management-widget-section location-management-list-container\"\n          style=\"height: calc(100vh - 50px);overflow-y: auto;overflow-x:hidden;\">\n\n          <layer-panel [layer]=\"stacLayer\" [bounds]=\"bounds\" (confirm)=\"handleStacConfirm($event)\" (cancel)=\"handleStacCancel()\">\n          </layer-panel>\n        </div>\n      </ng-container>\n    </div>\n    <div class=\"col-md-9\" id=\"site-explorer-map\">\n      <div class=\"row\">\n        <article style=\"position: absolute;z-index: 5;margin-left: 100px;margin-top: 10px;\">\n          <alert *ngIf=\"existingTask != null\" type=\"danger\" [dismissible]=\"false\">\n            <strong>Unfinished upload</strong> detected on file <strong>{{existingTask.filename}}</strong> for\n            Collection <strong>{{existingTask.task.collectionLabel}}</strong>. <a (click)=\"handleExistingTask()\">Click\n              to resolve</a>\n          </alert>\n\n          <div class=\"idm-toast\" *ngFor=\"let task of tasks; let idx = index\">\n            <alert *ngIf=\"task.status === 'Complete' && task.actions.length === 0\" type=\"success\" [dismissible]=\"true\"\n              (onClosed)=\"handleCloseToast(idx)\">\n              <strong>Upload {{task.status}}</strong> for {{task.collectionLabel}}. <a\n                (click)=\"handleViewSite(task.collection)\">Goto the collection view</a>\n            </alert>\n            <alert *ngIf=\"task.status === 'Complete' && task.actions.length !== 0\" type=\"warning\" [dismissible]=\"true\"\n              (onClosed)=\"handleCloseToast(idx)\">\n              <strong>Upload {{task.status}}</strong> for {{task.collectionLabel}}. Task completed with warnings. See\n              the <a routerLink=\"/site/tasks\">task page</a> for more details.\n            </alert>\n            <alert *ngIf=\"task.status === 'Failed'\" type=\"danger\" [dismissible]=\"true\"\n              (onClosed)=\"handleCloseToast(idx)\">\n              <strong>Upload {{task.status}}</strong> for {{task.collectionLabel}}. Task completed with errors. See the\n              <a routerLink=\"/site/tasks\">task page</a> for more details.\n            </alert>\n            <alert *ngIf=\"task.status !== 'Failed' && task.status !== 'Complete'\" type=\"info\" [dismissible]=\"true\"\n              (onClosed)=\"handleCloseToast(idx)\">\n              <strong>Upload {{task.status}}</strong> for {{task.collectionLabel}}.\n            </alert>\n          </div>\n        </article>\n\n\n        <article class=\"base-layer-panel\">\n\n          <div class=\"layer-toggle\" style=\"cursor: pointer;background:#fff;padding:8px;border-radius:4px;\"\n            (mouseenter)=\"baselayerIconHover = true\" (mouseleave)=\"baselayerIconHover = false\">\n            <i class=\"fas fa-layer-group\" *ngIf=\"!baselayerIconHover\"\n              style=\"vertical-align:middle; font-size: 18px;\"></i>\n            <div *ngIf=\"baselayerIconHover\" style=\"width: 200px;\">\n\n              <div class=\"row-form\">\n                <div class=\"list-group\">\n\n                  <h4>Layers</h4>\n                  \n<!--                   <span *ngIf=\"stacLayers.length === 0\" style=\"font-style: italic;color:grey;\">No custom layers</span> -->\n                  \n                  <div *ngFor=\"let layer of stacLayers\" class=\"list-group-item\" style=\"padding:0;height:30px;\">\n                    <boolean-field [value]=\"layer.active\" (valueChange)=\"handleToggleStacLayer(layer)\" label=\"\"\n                      [inline]=\"true\">\n                    </boolean-field>\n                    <span style=\"padding-top: 2px;\">\n                      <label style=\"padding-left: 5px;\">{{layer.layerName}}</label>\n                      <span class=\"pull-right\">\n                        <a class=\"fa fa-pencil-alt ico-edit\" (click)=\"handleStacLayer(layer)\"\n                          [title]=\"'Edit ' + layer.layerName\"></a>\n                        <a class=\"fa fa-trash-alt ico-remove\" (click)=\"handleRemoveStacLayer(layer)\"\n                          [title]=\"'Remove ' + layer.layerName\"></a>\n                        <a class=\"fa fa-eye\" (click)=\"handleStacZoom(layer)\"\n                          [title]=\"'Zoom to ' + layer.layerName\"></a>\n                      </span>\n                    </span>\n\n                  </div>\n                </div>\n              </div>\n              <div class=\"row-form\">\n                <a class=\"fa fa-plus\" (click)=\"handleStacLayer()\" title=\"Create a layer\">&nbsp;Create layer</a>\n              </div>\n              \n              <hr style=\"margin-top:10px;margin-bottom:10px;\">\n              \n              <h4>Basemaps</h4>\n              <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n                <input class=\"layer-toggle-input\" type='radio' name='rtoggle' [value]='baseLayer.id'\n                  [checked]=\"baseLayer.selected\" (change)=\"handleStyle(baseLayer)\">\n                <label class=\"layer-toggle-label\" style=\"padding-left: 5px;\">{{baseLayer.label}}</label>\n              </div>\n            </div>\n          </div>\n        </article>\n\n        <div id=\"mousemove-panel\" class=\"mapboxgl-ctrl-bottom-right\"\n          style=\"background: rgba(255, 255, 255, .5); right: 0; padding: 0 5px 0 5px;bottom: 0px;\"></div>\n\n        <div id=\"map\" class=\"map-view-port\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #bsItemTemplate let-match=\"match\" let-query=\"query\">\n  <span *ngIf=\"match.item.filename == null\">\n    <i class=\"fa fa-folder-open\"></i>\n  </span>\n  <span *ngIf=\"match.item.filename != null\">\n    <i class=\"fa fa-file\"></i>\n  </span>\n  <span>\n    <span *ngFor=\"let site of match.item.hierarchy; index as i\">\n      {{site.label}} /\n      <!-- <span *ngIf=\"i < (match.item.hierarchy.length -1)\">/</span> -->\n    </span>\n  </span>\n  <b>{{ match.item.label}}</b>\n</ng-template>","import { Component, OnInit, OnDestroy, AfterViewInit, ViewChild, TemplateRef } from \"@angular/core\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\nimport { TabsetComponent } from \"ngx-bootstrap\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Map, LngLatBounds, NavigationControl, MapboxEvent, AttributionControl } from \"mapbox-gl\";\n\nimport { Observable, Subject } from \"rxjs\";\nimport { debounceTime, distinctUntilChanged } from \"rxjs/operators\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { BasicConfirmModalComponent } from \"@shared/component/modal/basic-confirm-modal.component\";\nimport { NotificationModalComponent } from \"@shared/component/modal/notification-modal.component\";\nimport { AuthService } from \"@shared/service/auth.service\";\n\nimport { SiteEntity, Product, Task, MapLayer } from \"../model/management\";\n\nimport { EntityModalComponent } from \"./modal/entity-modal.component\";\nimport { CollectionModalComponent } from \"./modal/collection-modal.component\";\nimport { AccessibleSupportModalComponent } from \"./modal/accessible-support-modal.component\";\n\nimport { ManagementService } from \"../service/management.service\";\nimport { MapService } from \"../service/map.service\";\nimport { MetadataService } from \"../service/metadata.service\";\nimport { CookieService } from \"ngx-cookie-service\";\n\nimport {\n  fadeInOnEnterAnimation,\n  fadeOutOnLeaveAnimation\n} from \"angular-animations\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { CreateCollectionModalComponent } from \"./modal/create-collection-modal.component\";\nimport { UIOptions } from \"fine-uploader\";\nimport { FineUploaderBasic } from \"fine-uploader/lib/core\";\nimport { UploadModalComponent } from \"./modal/upload-modal.component\";\nimport { StacLayer } from \"@site/model/layer\";\n\nimport { bbox, bboxPolygon, envelope, featureCollection } from \"@turf/turf\";\n\n\nconst enum VIEW_MODE {\n  SITE = 0,\n  STAC = 1\n}\n\n\ndeclare var acp: any;\n\n@Component({\n  selector: \"projects\",\n  templateUrl: \"./projects.component.html\",\n  styles: [\"./projects.css\"],\n  animations: [\n    fadeInOnEnterAnimation(),\n    fadeOutOnLeaveAnimation()\n  ]\n})\nexport class ProjectsComponent implements OnInit, AfterViewInit, OnDestroy {\n\n  @ViewChild(\"staticTabs\") staticTabs: TabsetComponent;\n\n  // imageToShow: any;\n  userName: string = \"\";\n\n  /*\n   * Template for the delete confirmation\n   */\n  @ViewChild(\"confirmTemplate\") public confirmTemplate: TemplateRef<any>;\n\n  /* \n   * Datasource to get search responses\n   */\n  dataSource: Observable<any>;\n\n  /* \n   * Model for text being searched\n   */\n  search: string = \"\";\n\n  /* \n   * Root nodes of the tree\n   */\n  nodes = [] as SiteEntity[];\n\n  allPointsBounds;\n\n  /* \n   * Root nodes of the tree\n   */\n  supportingData = [] as SiteEntity[];\n\n  /* \n   * Breadcrumb of previous sites clicked on\n   */\n  breadcrumbs = [] as SiteEntity[];\n\n  /* \n   * Root nodes of the tree\n   */\n  current: SiteEntity;\n\n  /* \n   * mapbox-gl map\n   */\n  map: Map;\n\n  /* \n   * Flag denoting if the user is an admin\n   */\n  admin: boolean = false;\n\n  /* \n   * Flag denoting if the user is a worker\n   */\n  worker: boolean = false;\n\n  /* \n   * Flag denoting the draw control is active\n   */\n  active: boolean = false;\n\n  loadingSites: boolean = true;\n\n  /* \n   * List of base layers\n   */\n  baseLayers: any[] = [{\n    label: \"Outdoors\",\n    id: \"outdoors-v11\",\n    selected: true\n  }, {\n    label: \"Satellite\",\n    id: \"satellite-v9\"\n  }, {\n    label: \"Streets\",\n    id: \"streets-v11\"\n  }];\n\n  layers: MapLayer[] = [];\n\n  baselayerIconHover = false;\n\n  hoverFeatureId: string;\n\n  /* \n     * debounced subject for map extent change events\n     */\n  subject: Subject<MapboxEvent<MouseEvent | TouchEvent | WheelEvent>>;\n\n  /*\n   * Reference to the modal current showing\n  */\n  private bsModalRef: BsModalRef;\n\n  notifier: WebSocketSubject<any>;\n\n  tasks: Task[] = [];\n\n  existingTask: {\n    task: Task,\n    filename: string\n  } = null;\n\n  /* \n   * Filter by bureau\n   */\n  filter = { field: \"bureau\", value: \"\" };\n  bureaus: { value: string, label: string }[] = [];\n  bounds: LngLatBounds = null;\n  sort: string = \"name\";\n\n  stacLayers: StacLayer[] = [];\n\n  stacLayer: StacLayer = null;\n\n  viewMode: number = VIEW_MODE.SITE;\n\n  constructor(private service: ManagementService, private authService: AuthService, private mapService: MapService,\n    private modalService: BsModalService, private metadataService: MetadataService, private route: ActivatedRoute,\n    private cookieService: CookieService) {\n\n    this.subject = new Subject();\n    this.subject.pipe(debounceTime(300), distinctUntilChanged()).subscribe(event => this.handleExtentChange(event));\n\n    this.dataSource = new Observable((observer: any) => {\n\n      this.mapService.mbForwardGeocode(this.search).then(response => {\n        const match = response.features;\n\n        this.service.searchEntites(this.search).then(results => {\n\n          // Add Mapbox results to any local results\n          match.forEach(obj => {\n            let newObj = {\n              id: obj.id,\n              hierarchy: [],\n              label: obj.place_name,\n              center: obj.center,\n              source: \"MAPBOX\"\n            }\n\n            results.push(newObj);\n          });\n\n          observer.next(results);\n        });\n      });\n    });\n  }\n\n  ngOnInit(): void {\n    this.admin = this.authService.isAdmin();\n    this.worker = this.authService.isWorker();\n    this.userName = this.service.getCurrentUser();\n\n    this.service.bureaus().then(bureaus => {\n      this.bureaus = bureaus;\n    });\n\n\n    let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + acp;\n\n    this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n    this.notifier.subscribe(message => {\n      if (message.type === \"UPLOAD_JOB_CHANGE\") {\n        this.tasks.push(message.content);\n      }\n    });\n\n    const oid = this.route.snapshot.params[\"oid\"];\n    const action = this.route.snapshot.params[\"action\"];\n\n    if (oid != null && action != null && action === \"collection\") {\n      this.handleViewSite(oid);\n    }\n\n    let uiOptions: UIOptions = {\n      debug: false,\n      autoUpload: false,\n      multiple: false,\n      request: {\n        endpoint: acp + \"/file/upload\",\n        forceMultipart: true\n      },\n      resume: {\n        enabled: true,\n        recordsExpireIn: 1\n      },\n      chunking: {\n        enabled: true\n      },\n      retry: {\n        enableAuto: true\n      },\n      text: {\n        defaultResponseError: \"Upload failed\"\n      },\n      failedUploadTextDisplay: {\n        mode: \"none\"\n      },\n      validation: {\n        allowedExtensions: [\"zip\", \"tar.gz\"]\n      },\n      showMessage: function (message: string) {\n        // \n      },\n      callbacks: {\n        onUpload: function (id: any, name: any): void {\n        },\n        onProgress: function (id: any, name: any, uploadedBytes: any, totalBytes: any): void {\n        },\n        onUploadChunk: function (id: any, name: any, chunkData: any): void {\n        },\n        onUploadChunkSuccess: function (id: any, chunkData: any, responseJSON: any, xhr: any): void {\n        },\n        onComplete: function (id: any, name: any, responseJSON: any, xhrOrXdr: any): void {\n        },\n        onCancel: function (id: number, name: string) {\n        },\n        onError: function (id: number, errorReason: string, xhrOrXdr: string) {\n        }\n\n      }\n    };\n\n    const uploader = new FineUploaderBasic(uiOptions);\n\n    let resumables = uploader.getResumableFilesData() as any[];\n    if (resumables.length > 0) {\n      const resumable = resumables[0];\n\n      this.service.getUploadTask(resumable.uuid).then(task => {\n        this.existingTask = {\n          task: task,\n          filename: resumable.name\n        };\n\n        console.log(this.existingTask);\n      })\n    }\n  }\n\n\n  ngOnDestroy(): void {\n\n    if (this.subject != null) {\n      this.subject.unsubscribe();\n    }\n\n    this.map.remove();\n\n    this.notifier.complete();\n  }\n\n  ngAfterViewInit() {\n\n    this.map = new Map({\n      container: \"map\",\n      style: \"mapbox://styles/mapbox/outdoors-v11\",\n      zoom: 2,\n      attributionControl: false,\n      center: [-78.880453, 42.897852]\n    });\n\n    this.map.on(\"load\", () => {\n      this.initMap();\n    });\n\n  }\n\n  initMap(): void {\n\n    this.map.on(\"style.load\", () => {\n      this.addLayers();\n      this.refreshMapPoints(false);\n    });\n\n    this.addLayers();\n\n\n    this.refreshMapPoints(true);\n\n    // Add zoom and rotation controls to the map.\n    this.map.addControl(new NavigationControl(), \"bottom-right\");\n    this.map.addControl(new AttributionControl({ compact: true }), \"bottom-left\");\n\n    this.map.on(\"mousemove\", e => {\n      // e.point is the x, y coordinates of the mousemove event relative\n      // to the top-left corner of the map.\n      // e.lngLat is the longitude, latitude geographical position of the event\n      let coord = e.lngLat.wrap();\n\n      // EPSG:3857 = WGS 84 / Pseudo-Mercator\n      // EPSG:4326 = WGS 84 \n      // let coord4326 = window.proj4(window.proj4.defs(\"EPSG:3857\"), window.proj4.defs(\"EPSG:4326\"), [coord.lng, coord.lat]);\n      // let text = \"Long: \" + coord4326[0] + \" Lat: \" + coord4326[1];\n\n      let text = \"Lat: \" + coord.lat + \" Long: \" + coord.lng;\n      let mousemovePanel = document.getElementById(\"mousemove-panel\");\n      mousemovePanel.textContent = text;\n\n\n      let features = this.map.queryRenderedFeatures(e.point, { layers: [\"points\"] });\n\n      if (this.current == null) {\n        if (features.length > 0) {\n          let focusFeatureId = features[0].properties.oid; // just the first\n          this.map.setFilter(\"hover-points\", [\"all\",\n            [\"==\", \"oid\", focusFeatureId]\n          ])\n\n          this.highlightListItem(focusFeatureId)\n        }\n        else {\n          this.map.setFilter(\"hover-points\", [\"all\",\n            [\"==\", \"oid\", \"NONE\"]\n          ])\n\n          this.clearHighlightListItem();\n        }\n      }\n    });\n\n    this.map.on(\"zoomend\", (e) => {\n      this.subject.next(e);\n    });\n\n    this.map.on(\"moveend\", (e) => {\n      this.subject.next(e);\n    });\n\n    // Sit selection from map\n    this.map.on(\"dblclick\", (e) => {\n      let features = this.map.queryRenderedFeatures(e.point, { layers: [\"points\"] });\n\n      if (features.length > 0) {\n        let focusFeatureId = features[0].properties.oid; // just the first\n\n        this.handleViewSite(focusFeatureId);\n      }\n    });\n\n    // MapboxGL doesn\"t have a good way to detect when moving off the map\n    let sidebar = document.getElementById(\"navigator-left-sidebar\");\n    sidebar.addEventListener(\"mouseenter\", function () {\n      let mousemovePanel = document.getElementById(\"mousemove-panel\");\n      mousemovePanel.textContent = \"\";\n    });\n\n\n    // Show disclaimer\n    if (!Boolean(this.cookieService.get(\"acceptedDisclaimer\"))) {\n\n      this.bsModalRef = this.modalService.show(NotificationModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n      });\n      this.bsModalRef.content.messageTitle = \"Disclaimer\";\n      this.bsModalRef.content.message = (window as any).uasAppDisclaimer;\n      this.bsModalRef.content.submitText = \"I Accept\";\n\n      (<NotificationModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n        this.cookieService.set(\"acceptedDisclaimer\", \"true\");\n      });\n    }\n\n  }\n\n  addLayers(): void {\n\n    this.map.addSource(\"sites\", {\n      type: \"geojson\",\n      data: {\n        \"type\": \"FeatureCollection\",\n        \"features\": []\n      }\n    });\n\n\n    // Point layer\n    this.map.addLayer({\n      \"id\": \"points\",\n      \"type\": \"circle\",\n      \"source\": \"sites\",\n      \"paint\": {\n        \"circle-radius\": 10,\n        \"circle-color\": \"#800000\",\n        \"circle-stroke-width\": 2,\n        \"circle-stroke-color\": \"#FFFFFF\"\n      }\n    });\n\n    // Hover style\n    this.map.addLayer({\n      \"id\": \"hover-points\",\n      \"type\": \"circle\",\n      \"source\": \"sites\",\n      \"paint\": {\n        \"circle-radius\": 13,\n        \"circle-color\": \"#cf0000\",\n        \"circle-stroke-width\": 2,\n        \"circle-stroke-color\": \"#FFFFFF\"\n      },\n      filter: [\"all\",\n        [\"==\", \"id\", \"NONE\"] // start with a filter that doesn\"t select anything\n      ]\n    });\n\n\n    // Label layer\n    this.map.addLayer({\n      \"id\": \"points-label\",\n      \"source\": \"sites\",\n      \"type\": \"symbol\",\n      \"paint\": {\n        \"text-color\": \"black\",\n        \"text-halo-color\": \"#fff\",\n        \"text-halo-width\": 2\n      },\n      \"layout\": {\n        \"text-field\": \"{name}\",\n        \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\n        \"text-offset\": [0, 0.6],\n        \"text-anchor\": \"top\",\n        \"text-size\": 12,\n      }\n    });\n\n    this.layers.forEach(layer => {\n      if (layer.isMapped) {\n        this.addImageLayer(layer);\n      }\n    });\n\n    // https://k67ob0ncba.execute-api.us-east-1.amazonaws.com/cog/tiles/WebMercatorQuad/19/100308/199769@1x?url=s3%3A%2F%2Fosmre-uas-dev-public%2Fabcsite%2Fabcproject%2Fabcmission%2Fabccollection%2Fortho%2Fodm_orthophoto.cog.tif\n    // Test STAC layer\n    // s3://osmre-uas-dev-public/_stac_/da5c2faa-99aa-4f1e-87bc-a38cd1c6a236.json\n\n    /*\n    {\n  \"public\": true,\n  \"classification\": \"ORTHO\",\n  \"key\": \"abcsite/abcproject/abcmission/abccollection/ortho/odm_orthophoto.cog.tif\",\n  \"url\": \"https://k67ob0ncba.execute-api.us-east-1.amazonaws.com/cog/tilejson.json?url=s3%3A%2F%2Fosmre-uas-dev-public%2Fabcsite%2Fabcproject%2Fabcmission%2Fabccollection%2Fortho%2Fodm_orthophoto.cog.tif\",\n  \"isMapped\": false\n}\n    this.addImageLayer({\n      workspace: \"\",\n      classification: \"ORTHO\",\n      key: \"s3://osmre-uas-dev-public/_stac_/da5c2faa-99aa-4f1e-87bc-a38cd1c6a236.json\",\n      isMapped: false,\n      public: true,\n      url: \"https://k67ob0ncba.execute-api.us-east-1.amazonaws.com/stac/tilejson.json\"\n        + \"?url=\" + encodeURIComponent(\"s3://osmre-uas-dev-public/_stac_/da5c2faa-99aa-4f1e-87bc-a38cd1c6a236.json\")\n        + \"&assets=\" + encodeURIComponent(\"odm_orthophoto.cog\")\n    });\n    */\n  }\n\n  handleExtentChange(e: MapboxEvent<MouseEvent | TouchEvent | WheelEvent>): void {\n    const bounds = this.map.getBounds();\n\n    if (this.isValidBounds(bounds)) {\n      this.bounds = bounds;\n    }\n\n    if (this.current == null) {\n      this.refreshSites();\n    }\n  }\n\n  refreshSites(): Promise<void> {\n    const conditions = [];\n\n    if (this.bounds != null) {\n      conditions.push({\n        field: \"bounds\",\n        value: this.bounds\n      });\n    }\n\n    if (this.filter.value != null && this.filter.value.length > 0) {\n      conditions.push(this.filter);\n    }\n\n    this.refreshMapPoints(false);\n\n    this.loadingSites = true;\n\n    return this.service.roots(null, conditions, this.sort).then(nodes => {\n      this.setNodes(nodes);\n    }).finally(() => {\n      this.loadingSites = false;\n    })\n  }\n\n  isValidBounds(bounds: LngLatBounds): boolean {\n\n    const ne = bounds.getNorthEast();\n    const sw = bounds.getSouthWest();\n\n    if (Math.abs(ne.lng) > 180 || Math.abs(sw.lng) > 180) {\n      return false;\n    }\n\n    if (Math.abs(ne.lat) > 90 || Math.abs(sw.lat) > 90) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Goes to the server and fetches all points for all sites. Returns GeoJSON which is then used to refresh the map.\n   */\n  refreshMapPoints(zoom: boolean): void {\n\n    const conditions = [];\n\n    if (this.bounds != null) {\n      conditions.push({\n        field: \"bounds\",\n        value: this.bounds\n      });\n    }\n\n    if (this.filter.value != null && this.filter.value.length > 0) {\n      conditions.push(this.filter);\n    }\n\n\n    this.mapService.features(conditions).then(data => {\n      (<any>this.map.getSource(\"sites\")).setData(data.features);\n\n      if (zoom) {\n        this.allPointsBounds = new LngLatBounds([data.bbox[0], data.bbox[1]], [data.bbox[2], data.bbox[3]]);\n\n        this.map.fitBounds(this.allPointsBounds, { padding: 50 });\n      }\n    });\n  }\n\n  isData(node: any): boolean {\n\n    if (node.data.type === \"Site\") {\n      return false;\n    }\n    else if (node.data.type === \"Project\") {\n      return false;\n    }\n    else if (node.data.type === \"Mission\") {\n      return false;\n    }\n    else if (node.data.type === \"Collection\") {\n      return false;\n    }\n    else if (node.data.type === \"Imagery\") {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  handleOnUpdateData(): void {\n    //        this.tree.treeModel.expandAll();\n  }\n\n  handleCloseToast(idx: number): void {\n    this.tasks.splice(idx, 1);\n  }\n\n  handleCreateCollection(): void {\n\n    this.bsModalRef = this.modalService.show(CreateCollectionModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n      \"class\": \"upload-modal\"\n    });\n    this.bsModalRef.content.init(this.breadcrumbs);\n\n    this.bsModalRef.content.onCreateComplete.subscribe(oid => {\n\n      this.handleViewSite(oid);\n    });\n  }\n\n\n  handleCreate(parent: SiteEntity, type: string): void {\n    let parentId = parent != null ? parent.id : null;\n\n    this.service.newChild(parentId, type).then(data => {\n      this.bsModalRef = this.modalService.show(EntityModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n        \"class\": \"upload-modal\"\n      });\n      this.bsModalRef.content.init(true, this.userName, this.admin, data.item, data.attributes, this.map.getCenter(), this.map.getZoom());\n\n\n      if (parent != null) {\n        this.bsModalRef.content.parentId = parent.id;\n      }\n\n      this.bsModalRef.content.onNodeChange.subscribe(entity => {\n\n        if (parent != null) {\n\n        }\n        else {\n          if (this.breadcrumbs.length == 0) {\n            this.nodes.push(entity);\n          }\n\n          this.refreshMapPoints(false);\n        }\n      });\n    });\n  }\n\n  zoomToFeature(node: SiteEntity): void {\n    if (node.geometry != null) {\n      this.map.flyTo({\n        center: node.geometry.coordinates\n      });\n    }\n  }\n\n  handleExistingTask(): void {\n\n    this.service.view(this.existingTask.task.collection).then(resp => {\n      const modal = this.modalService.show(UploadModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n        \"class\": \"upload-modal\"\n      });\n      modal.content.init(resp.item, this.existingTask.task.uploadTarget);\n      modal.content.onUploadCancel.subscribe(() => {\n        this.existingTask = null;\n      });\n      modal.content.onUploadComplete.subscribe(() => {\n        this.existingTask = null;\n      });\n\n    });\n  }\n\n  handleEdit(node: SiteEntity, event: any): void {\n\n    event.stopPropagation();\n\n    this.service.edit(node.id).then(data => {\n      this.bsModalRef = this.modalService.show(EntityModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n        \"class\": \"edit-modal\"\n      });\n      this.bsModalRef.content.init(false, this.userName, this.admin, data.item, data.attributes, this.map.getCenter(), this.map.getZoom());\n\n      this.bsModalRef.content.onNodeChange.subscribe(entity => {\n        // Update the node\n        entity.children = node.children;\n        entity.active = node.active;\n\n        this.refreshEntity(entity, this.nodes);\n        this.refreshEntity(entity, this.breadcrumbs);\n\n        this.nodes.forEach(node => {\n          this.refreshEntity(entity, node.children);\n        });\n\n        if (this.metadataService.getMetadata(entity).root) {\n          this.refreshMapPoints(false);\n        }\n      });\n    });\n  }\n\n  refreshEntity(node: SiteEntity, nodes: SiteEntity[]): void {\n\n    if (nodes != null) {\n      let indexOf = nodes.findIndex(i => i.id === node.id);\n\n      if (indexOf !== -1) {\n        nodes[indexOf] = node;\n      }\n    }\n  }\n\n  handleDownloadAll(node: SiteEntity): void {\n\n    window.location.href = acp + \"/project/download-all?id=\" + node.component + \"&key=\" + node.name;\n\n    //      this.service.downloadAll( data.id ).then( data => {\n    //        \n    //      } ).catch(( err: HttpErrorResponse ) => {\n    //          this.error( err );\n    //      } );\n  }\n\n  handleDelete(node: SiteEntity, event: any): void {\n\n    event.stopPropagation();\n\n    let sText = \"<b>IMPORTANT:</b> [\" + node.name + \"] will be deleted along with all underlying data including all files in Collections and Accessible Support\";\n\n    if (node.type === \"Collection\") {\n      sText = \"<b>IMPORTANT:</b> [\" + node.name + \"] will be deleted along with all underlying data including all files.\";\n    }\n\n    sText += \" This can <b>NOT</b> be undone\";\n\n    this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n    });\n    this.bsModalRef.content.message = \"Are you sure you want to delete [\" + node.name + \"]?\";\n    this.bsModalRef.content.subText = sText;\n    this.bsModalRef.content.data = node;\n    this.bsModalRef.content.type = \"DANGER\";\n    this.bsModalRef.content.submitText = \"Delete\";\n\n    (<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n      this.remove(data);\n    });\n  }\n\n  remove(node: SiteEntity): void {\n    this.service.remove(node.id).then(() => {\n      this.nodes = this.nodes.filter((n: any) => n.id !== node.id);\n\n      this.nodes.forEach(n => {\n        if (n.children != null) {\n          n.children = n.children.filter((child: any) => child.id !== node.id);\n\n          n.numberOfChildren = n.children.length;\n        }\n      });\n\n      if (node.type === \"Site\") {\n        this.refreshMapPoints(false);\n      }\n    });\n  }\n\n\n  handleDownload(node: SiteEntity): void {\n    window.location.href = acp + \"/project/download?id=\" + node.component + \"&key=\" + node.key;\n\n    //this.service.download( node.data.component, node.data.key, true ).subscribe( blob => {\n    //    importedSaveAs( blob, node.data.name );\n    //} );\n  }\n\n  handleImageDownload(image: any): void {\n    window.location.href = acp + \"/project/download?id=\" + image.component + \"&key=\" + image.key;\n\n    //this.service.download( node.data.component, node.data.key, true ).subscribe( blob => {\n    //    importedSaveAs( blob, node.data.name );\n    //} );\n  }\n\n  handleStyle(layer: any): void {\n\n    this.baseLayers.forEach(baseLayer => {\n      baseLayer.selected = false;\n    });\n\n    layer.selected = true;\n\n    this.map.setStyle(\"mapbox://styles/mapbox/\" + layer.id);\n  }\n\n  highlightMapFeature(id: string): void {\n\n    this.map.setFilter(\"hover-points\", [\"all\",\n      [\"==\", \"oid\", id]\n    ])\n\n  }\n\n  clearHighlightMapFeature(): void {\n\n    this.map.setFilter(\"hover-points\", [\"all\",\n      [\"==\", \"oid\", \"NONE\"]\n    ])\n\n  }\n\n  onListEntityHover(event: any, site: SiteEntity): void {\n    if (this.current == null) {\n      this.highlightMapFeature(site.id);\n    }\n  }\n\n  onListEntityHoverOff(): void {\n    this.clearHighlightMapFeature();\n  }\n\n  highlightListItem(id: string): void {\n    this.nodes.forEach(node => {\n      if (node.id === id) {\n        this.hoverFeatureId = id;\n      }\n    })\n  }\n\n  clearHighlightListItem(): void {\n    if (this.hoverFeatureId) {\n      this.nodes.forEach(node => {\n        if (node.id === this.hoverFeatureId) {\n          this.hoverFeatureId = null;\n        }\n      })\n    }\n  }\n\n\n  handleClick($event: any): void {\n    let result = $event.item;\n\n    if (result.center) {\n      this.map.flyTo({\n        center: result.center,\n        zoom: 18\n      })\n    }\n    else {\n      const index = result.hierarchy.length - 1;\n\n      const selected = result.hierarchy[index];\n\n      this.handleViewSite(selected.id);\n    }\n  }\n\n  handleViewSite(id: string): void {\n    this.service.view(id).then(response => {\n      const node = response.item;\n      const breadcrumbs = response.breadcrumbs;\n\n      if (this.getMetadata(node).leaf) {\n        this.breadcrumbs = breadcrumbs;\n        this.current = breadcrumbs[breadcrumbs.length - 1];\n        this.nodes = this.current.children;\n\n        this.select(node, null, null);\n      }\n      else {\n        const parent = breadcrumbs.length > 0 ? breadcrumbs[breadcrumbs.length - 1] : null;\n        this.breadcrumbs = breadcrumbs;\n\n        this.select(node, parent, null);\n      }\n    });\n\n  }\n\n  handleMapOrtho(product: Product): void {\n\n    const layer = this.getLayerByClassification(\"ORTHO\", product);\n\n    if (layer != null && layer.key != null) {\n      if (this.map.getLayer(layer.key) != null) {\n        this.map.removeLayer(layer.key);\n        this.map.removeSource(layer.key);\n\n        layer.isMapped = false;\n        product.orthoMapped = false;\n      }\n      else {\n        this.addImageLayer(layer);\n\n        layer.isMapped = true;\n        product.orthoMapped = true;\n\n        if (product.boundingBox != null) {\n          let bbox = product.boundingBox;\n\n          let bounds = new LngLatBounds([bbox[0], bbox[2]], [bbox[1], bbox[3]]);\n\n          this.map.fitBounds(bounds, { padding: 50 });\n        }\n      }\n    }\n  }\n\n  getLayerByClassification(classification: string, product: Product): MapLayer {\n    let len = product.layers.length;\n\n    for (let i = 0; i < len; ++i) {\n      let layer: MapLayer = product.layers[i];\n\n      if (layer.classification === classification) {\n        return layer;\n      }\n    }\n\n    return null;\n  }\n\n  handleMapDem(product: Product): void {\n\n    const layer = this.getLayerByClassification(\"DEM_DSM\", product);\n\n    if (layer != null && layer.key != null) {\n      if (this.map.getLayer(layer.key) != null) {\n        this.map.removeLayer(layer.key);\n        this.map.removeSource(layer.key);\n\n        layer.isMapped = false;\n        product.demMapped = false;\n      }\n      else {\n        this.addImageLayer(layer);\n\n        layer.isMapped = true;\n        product.demMapped = true;\n\n        if (product.boundingBox != null) {\n          let bbox = product.boundingBox;\n\n          let bounds = new LngLatBounds([bbox[0], bbox[2]], [bbox[1], bbox[3]]);\n\n          this.map.fitBounds(bounds, { padding: 50 });\n        }\n      }\n    }\n  }\n\n  addImageLayer(layer: MapLayer) {\n\n    let url = layer.url;\n    if (acp !== \"\" && acp != null) {\n      url = acp + \"/\" + url;\n    }\n    if (!url.startsWith(\"/\")) {\n      url = \"/\" + url;\n    }\n\n    this.map.addLayer({\n      'id': layer.key,\n      'type': 'raster',\n      'source': {\n        'type': 'raster',\n        'url': url\n      },\n      'paint': {}\n    }, \"points\");\n\n    // Add the layer to the list of layers to be recreated on style change\n    this.layers.push(layer);\n  }\n\n  removeImageLayer(id: string) {\n    this.map.removeLayer(id);\n    this.map.removeSource(id);\n\n    this.layers = this.layers.filter(l => l.key !== id);\n  }\n\n  handleGoto(): void {\n\n    //    -111.12439336274211\n    //    39.32066259372583\n    //    -111.12342302258116\n    // 39.32107716199166\n\n    var bounds = new LngLatBounds([-111.12439336274211, 39.32066259372583, -111.12342302258116, 39.32107716199166]);\n\n    this.map.fitBounds(bounds);\n  }\n\n\n  getMetadata(node: SiteEntity): any {\n    const metadata = this.metadataService.getMetadata(node);\n\n    return metadata;\n  }\n\n\n  select(node: SiteEntity, parent: SiteEntity, event: any): void {\n\n    if (event != null) {\n      event.stopPropagation();\n    }\n\n    if (node != null && node.geometry != null && node.geometry.type === \"Point\") {\n      //this.map.fitBounds(this.allPointsBounds, { padding: 50 });\n\n      this.map.easeTo({\n        center: node.geometry.coordinates,\n        zoom: 8\n      });\n    }\n\n    const metadata = this.metadataService.getMetadata(node);\n\n    if (metadata.leaf) {\n      const breadcrumbs = [...this.breadcrumbs];\n\n      if (parent != null) {\n        breadcrumbs.push(parent);\n      }\n\n      if (this.metadataService.getTypeContainsFolders(node)) {\n        this.service.getItems(node.id, null).then(nodes => {\n          this.showLeafModal(node, nodes, breadcrumbs);\n        });\n      }\n      else {\n        this.showLeafModal(this.current, [node], breadcrumbs);\n      }\n    }\n    else if (node.type === \"object\") {\n      // Do nothing there are no children\n      //                return this.service.getItems( node.data.id, node.data.name );\n    }\n    else {\n      this.service.getItems(node.id, null).then(nodes => {\n        this.current = node;\n\n        if (parent != null) {\n          this.addBreadcrumb(parent);\n        }\n\n        this.addBreadcrumb(node);\n        this.setNodes(nodes);\n      });\n    }\n  }\n\n  addBreadcrumb(node: SiteEntity): void {\n\n    if (this.breadcrumbs.length == 0 || this.breadcrumbs[this.breadcrumbs.length - 1].id !== node.id) {\n      this.breadcrumbs.push(node);\n    }\n  }\n\n  handleExpand(node: SiteEntity, event: any): void {\n\n    if (event != null) {\n      event.stopPropagation();\n    }\n\n    if (node.children == null || node.children.length == 0) {\n      this.service.getItems(node.id, null).then(nodes => {\n        node.children = nodes;\n\n        this.expand(node);\n      });\n    }\n    else {\n      // this.expand( node );\n      node.children = [];\n      node.active = false;\n    }\n  }\n\n  handleGotoSite(product: Product): void {\n    const entity = product.entities[product.entities.length - 1];\n\n    const breadcrumbs = product.entities;\n\n    this.service.getItems(entity.id, null).then(nodes => {\n      this.showLeafModal(entity, nodes, breadcrumbs);\n    });\n  }\n\n\n  back(node: SiteEntity): void {\n\n    if (node != null) {\n      if (node.geometry != null && node.geometry.type === \"Point\") {\n        //this.map.fitBounds(this.allPointsBounds, { padding: 50 });\n\n        this.map.easeTo({\n          center: node.geometry.coordinates,\n          zoom: 8\n        });\n      }\n\n      this.service.getItems(node.id, null).then(nodes => {\n        var indexOf = this.breadcrumbs.findIndex(i => i.id === node.id);\n\n        this.current = node;\n        this.breadcrumbs.splice(indexOf + 1);\n        this.setNodes(nodes);\n      });\n    }\n    else if (this.breadcrumbs.length > 0) {\n\n      this.refreshSites().then(() => {\n        this.breadcrumbs = [];\n        this.staticTabs.tabs[0].active = true;\n\n        this.map.fitBounds(this.allPointsBounds, { padding: 50 });\n\n        // This hack exists because the handleExtentChange method gets called immediately after we do fitBounds\n        // and it gets called with some really closely zoomed-in bbox which dumps our nodes we just fetched...\n        let that = this;\n        window.setTimeout(function () {\n          that.current = null;\n        }, 500);\n      });\n    }\n  }\n\n  expand(node: SiteEntity) {\n    node.active = true;\n    this.current = node;\n  }\n\n  setNodes(nodes: SiteEntity[]): void {\n    this.nodes = [];\n    this.supportingData = [];\n\n    nodes.forEach(node => {\n      if (node.type === \"folder\") {\n        this.supportingData.push(node);\n      }\n      else {\n        this.nodes.push(node);\n      }\n    })\n  }\n\n  showLeafModal(collection: SiteEntity, folders: SiteEntity[], breadcrumbs: SiteEntity[]): void {\n\n    if (collection.type === \"Mission\") {\n      this.bsModalRef = this.modalService.show(AccessibleSupportModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n        class: \"leaf-modal modal-lg\"\n      });\n      this.bsModalRef.content.init(collection, folders, breadcrumbs);\n    }\n    else {\n      this.bsModalRef = this.modalService.show(CollectionModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n        class: \"leaf-modal modal-lg\"\n      });\n      this.bsModalRef.content.init(collection, folders, breadcrumbs);\n    }\n  }\n\n  handleStacLayer(layer?: StacLayer): void {\n\n    this.viewMode = VIEW_MODE.STAC;\n\n    if (layer != null) {\n      this.stacLayer = JSON.parse(JSON.stringify(layer));\n    }\n    else {\n      this.stacLayer = null;\n    }\n  }\n\n  handleRemoveStacLayer(layer: StacLayer): void {\n\n    if (layer.active) {\n      this.hideStacLayer(layer);\n    }\n\n    this.stacLayers = this.stacLayers.filter(f => f.id !== layer.id);\n  }\n\n  handleStacConfirm(layer: StacLayer): void {\n    const index = this.stacLayers.findIndex(l => l.id === layer.id);\n\n    if (index !== -1) {\n      // Remove existing image layers\n      if (this.stacLayers[index].active) {\n        this.hideStacLayer(this.stacLayers[index]);\n      }\n\n      this.stacLayers[index] = layer;\n    }\n    else {\n      this.stacLayers.push(layer);\n    }\n\n    if (layer.active) {\n\n      this.handleStacZoom(layer);\n\n      this.showStacLayer(layer);\n    }\n\n    this.viewMode = VIEW_MODE.SITE;\n    this.stacLayer = null;\n  }\n\n  handleStacZoom(layer: StacLayer): void {\n    const polygons = layer.items.map(item => bboxPolygon(item.bbox as [number, number, number, number]));\n\n    // Determine the bounding box of the layer\n    const features = featureCollection(polygons);\n    const env = envelope(features);\n    const bounds = bbox(env) as [number, number, number, number];\n\n    this.map.fitBounds(bounds);\n  }\n\n  handleStacCancel(): void {\n    this.viewMode = VIEW_MODE.SITE;\n    this.stacLayer = null;\n  }\n\n  handleToggleStacLayer(layer: StacLayer): void {\n    layer.active = !layer.active;\n\n    if (layer.active) {\n      this.showStacLayer(layer);\n    }\n    else {\n      this.hideStacLayer(layer);\n    }\n  }\n\n  showStacLayer(layer: StacLayer): void {\n    layer.items.forEach(item => {\n\n      const index = item.links.findIndex(link => link.rel === 'self');\n      const link = item.links[index];\n\n      let url = \"/stac/tilejson.json\";\n      url += \"?url=\" + encodeURIComponent(link.href);\n      url += \"&assets=\" + encodeURIComponent(item.asset);\n\n      this.addImageLayer({\n        classification: \"ORTHO\",\n        key: layer.id + '-' + item.id + '-' + item.asset,\n        isMapped: layer.active,\n        public: true,\n        url: url\n      });\n    });\n  }\n\n  hideStacLayer(layer: StacLayer): void {\n    layer.items.forEach(item => {\n      this.removeImageLayer(layer.id + '-' + item.id + '-' + item.asset);\n    });\n  }\n\n}\n","<uasdm-header [title]=\"'Data Upload'\"></uasdm-header>\n\n<div id=\"app-container\" class=\"container\">\n    <div *ngIf=\"sites.length === 0\" class=\"row\">\n        <div class=\"col-md-2\"></div>\n        <div class=\"col-md-8\">\n            <h4 style=\"margin-top: 50px;\">\n                There are no Sites added to the system. Add a Site, Project, Mission, and Collection using the \n                <a routerlink=\"/viewer\" routerlinkactive=\"active\" href=\"#/viewer\">Site Viewer</a> \n                before uploading data to.\n            </h4>\n        </div>\n        <div class=\"col-md-2\"></div>\n    </div>\n    <div *ngIf=\"sites.length > 0\" class=\"row\">\n        <div class=\"col-md-2\"></div>\n        <div class=\"col-md-8\">\n            <form #ngForm=\"ngForm\">\n\n                <!-- Existing task panel -->\n                <div class=\"\" *ngIf=\"existingTask && !currentTask\">\n                    <div class=\"panel panel-warning\" style=\"margin: 30px 0 30px 0;\">\n                        <div class=\"panel-heading\" style=\"font-size: 20px;\">Partial Upload Detected</div>\n                        <div class=\"panel-body\">\n                            <h4>A partial upload was detected. You can either cancel that partial upload or attempt to\n                                continue.</h4>\n                            <h4>\n                                <b>To continue an upload</b>\n                                please click the Continue Upload button and re-upload your file and we will try our best\n                                to continue where you left off.\n                            </h4>\n\n                            <hr>\n                            <button type=\"button\" class=\"btn btn-danger\" style=\"margin-top: 20px;\"\n                                (click)=\"removeUpload($event)\">\n                                <i class=\"icon-upload icon-white\"></i>\n                                Cancel Upload\n                            </button>\n                            <button type=\"button\" class=\"btn btn-primary\" style=\"margin-top: 20px;\"\n                                (click)=\"showUploadPanel()\">\n                                <i class=\"icon-upload icon-white\"></i>\n                                Continue Upload\n                            </button>\n                        </div>\n                    </div>\n                </div> <!-- End existing task panel -->\n\n                <!-- Task finished upload notification -->\n                <div *ngFor=\"let note of taskFinishedNotifications\" class=\"panel panel-success\" style=\"margin: 30px 0 30px 0;\">\n                    <div class=\"panel-heading\" style=\"font-size: 20px;\">\n                        Upload Details\n                        <i class=\"fa fa-times btn btn-close pull-right\" style=\"min-width:20px;padding:0;line-height: 27px;\" (click)=\"closeTaskFinishedNotification(note.id)\"></i>\n                    </div>\n                    <div class=\"panel-body\">\n                        <h4>\n                            Status:\n                            <b> Upload successfully completed </b>\n                        </h4>\n                        <h4>\n                            Message:\n                            <b> Your uploaded data is being processed into final image products. </b>\n                        </h4>\n                    </div>\n                </div> <!-- End task finished upload notification -->\n\n                <div style=\"margin-top: 30px;\" class=\"\" *ngIf=\"!disabled && !existingTask\">\n                    <div class=\"form-group\">\n                        <label for=\"site\">Site:</label>\n                        <select name=\"site\" (change)=\"onSiteSelect($event.target.value)\" [(ngModel)]=\"values.site\"\n                            required>\n                            <option></option>\n                            <option *ngFor=\"let site of sites\" [value]=\"site.id\">{{site.name}}</option>\n                        </select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"project\">Project:</label>\n                        <select name=\"project\" [attr.disabled]=\"values.site == null ? '' : null\"\n                            (change)=\"onProjectSelect($event.target.value)\" [(ngModel)]=\"values.project\" required>\n                            <option></option>\n                            <option *ngFor=\"let project of projects\" [value]=\"project.id\">{{project.name}}</option>\n                        </select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"mission\">Mission:</label>\n                        <select name=\"mission\" [attr.disabled]=\"values.project == null ? '' : null\"\n                            (change)=\"onMissionSelect($event.target.value)\" [(ngModel)]=\"values.mission\" required>\n                            <option></option>\n                            <option *ngFor=\"let mission of missions\" [value]=\"mission.id\">{{mission.name}}</option>\n                        </select>\n                    </div>\n                    <!-- \n                            <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input type=\"radio\" class=\"form-check-input\" name=\"radioopt\" [(ngModel)]=\"values.create\" [value]=\"true\" (change)=\"handleChange()\" [checked]=\"values.create==true\" />\n                                Create new collection\n                            </label>\n                            </div>\n                            <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input type=\"radio\" class=\"form-check-input\" name=\"radioopt\" value=\"false\" [(ngModel)]=\"values.create\" (change)=\"handleChange()\" [value]=\"false\" [checked]=\"values.create==false\" />\n                                Add to existing collection\n                            </label>\n                            </div>\n                            <div class=\"form-group\" *ngIf=\"values.create === true\">\n                            <label for=\"nameInput\">Name</label>\n                            <input [(ngModel)]=\"values.name\" name=\"name\" type=\"input\" class=\"form-control\" id=\"nameInput\" placeholder=\"Name\" #nameField=\"ngModel\" required forbiddenName>\n                            <div class=\"error-container\" *ngIf=\"nameField.errors && nameField.errors.forbiddenName\">\n                                Invalid name. No spaces or special characters such as <, >, -, +, =, !, @, #, $, %, ^, &, *, ?,/, \\ or apostrophes are allowed.        \n                            </div>\n                            </div>\n                    -->\n                    <div class=\"form-group\">\n                        <label for=\"collection\">Collection:</label>\n                        <select name=\"collection\" [attr.disabled]=\"values.mission == null ? '' : null\"\n                            (change)=\"onCollectionSelect($event.target.value)\" [(ngModel)]=\"values.collection\" required>\n                            <option></option>\n                            <option *ngFor=\"let collection of collections\" [value]=\"collection.id\">{{collection.name}}\n                            </option>\n                        </select>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"outFileName\">Output Product Name Prefix</label>\n                        <input [(ngModel)]=\"values.outFileName\" name=\"outFileName\" type=\"input\" class=\"form-control\" placeholder=\"Output product name prefix...\" />\n                    </div>\n                </div>\n\n                <!-- Current upload indicator -->\n                <div class=\"\" [hidden]=\"!uploadVisible\">\n                    <div *ngIf=\"currentTask\" class=\"panel panel-warning\" style=\"margin: 30px 0 30px 0;\">\n                        <div class=\"panel-heading\" style=\"font-size: 20px;\">Upload Details</div>\n                        <div class=\"panel-body\">\n                            <h4>\n                                Status:\n                                <b> {{currentTask.status}} </b>\n                            </h4>\n                            <h4>\n                                Message:\n                                <b> {{currentTask.message}} </b>\n                            </h4>\n                            <h4>\n                                Upload Started On:\n                                <b> {{currentTask.createDate | idmdate}} </b>\n                            </h4>\n                            <h4>\n                                Last Updated:\n                                <b> {{currentTask.lastUpdateDate | idmdate}} </b>\n                            </h4>\n                            <h4>\n                                Elapsed Time:\n                                <b> {{uploadCounter}} </b>\n                            </h4>\n                        </div>\n                    </div>\n\n                    <div *ngIf=\"showFileSelectPanel\" class=\"uploader-container\" style=\"margin-top: 20px;\" #uploader></div>\n\n                    <button type=\"button btn btn-primary\" [disabled]=\"!ngForm.valid || disabled\" class=\"btn btn-primary\"\n                        style=\"margin-top: 20px;\" (click)=\"handleUpload()\">\n                        <i class=\"icon-upload icon-white\"></i>\n                        Upload\n                    </button>\n                </div> <!-- End current upload indicator -->\n            </form>\n\n        </div>\n        <div class=\"col-md-2\"></div>\n    </div>\n</div>","import { Component, OnInit, AfterViewInit, Inject, ViewChild, ElementRef, KeyValueDiffers, DoCheck, HostListener } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { interval } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\n//use Fine Uploader UI for traditional endpoints\nimport { FineUploader, UIOptions } from 'fine-uploader';\n\nimport { ErrorModalComponent } from '@shared/component/modal/error-modal.component';\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\nimport { SiteEntity, UploadForm, Task } from '../model/management';\nimport { ManagementService } from '../service/management.service';\n\n\ndeclare var acp: string;\n\n@Component( {\n    selector: 'upload',\n    templateUrl: './upload.component.html',\n    styleUrls: []\n} )\nexport class UploadComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n    private bsModalRef: BsModalRef;\n\n    /* \n     * List of sites\n     */\n    sites = [] as SiteEntity[];\n\n    /* \n     * List of projects\n     */\n    projects = [] as SiteEntity[];\n\n    /* \n     * List of missions\n     */\n    missions = [] as SiteEntity[];\n\n    /* \n     * List of collections\n     */\n    collections = [] as SiteEntity[];\n\n    /* \n     * Form values\n     */\n    values = { create: false } as UploadForm;\n\n    /*\n     * FineUploader for uploading large files\n     */\n    uploader = null as FineUploader;\n\n    disabled: boolean = false;\n    taskStatusMessages: string[] = [];\n    currentTask: Task = null;\n    existingTask: boolean = false;\n    taskPolling: any;\n    pollingIsSet: boolean = false;\n    uploadVisible: boolean = true;\n    selectedContinue: boolean = false;\n    uploadCounter: string = \"00:00:00\";\n    uplodeCounterInterfal: any;\n    differ: any;\n    showFileSelectPanel: boolean = false;\n    taskFinishedNotifications: any[] = [];\n\n    constructor( private service: ManagementService, private modalService: BsModalService, differs: KeyValueDiffers ) {\n        this.differ = differs.find( [] ).create();\n    }\n\n    ngDoCheck() {\n\n        if ( this.uploader ) {\n            const change = this.differ.diff( this.uploader );\n            if ( change ) {\n                this.setExistingTask();\n            }\n        }\n    }\n\n    @ViewChild( 'uploader' ) set content( elem: ElementRef ) {\n\n        const that = this;\n\n        if ( elem != null && this.uploader == null ) {\n\n            let uiOptions: UIOptions = {\n                debug: false,\n                autoUpload: false,\n                multiple: false,\n                element: elem.nativeElement,\n                template: 'qq-template',\n                request: {\n                    endpoint: acp + \"/file/upload\",\n                    forceMultipart: true\n                },\n                resume: {\n                    enabled: true,\n                    recordsExpireIn: 1\n                },\n                chunking: {\n                    enabled: true\n                },\n                retry: {\n                    enableAuto: true\n                },\n                text: {\n                    defaultResponseError: \"Upload failed\"\n                },\n                failedUploadTextDisplay: {\n                    mode: 'none'\n                    //responseProperty: 'error'\n                },\n                validation: {\n                    allowedExtensions: ['zip', 'tar.gz']\n                },\n                showMessage: function( message: string ) {\n                    // \n                },\n                callbacks: {\n                    onUpload: function( id: any, name: any ): void {\n                        that.disabled = true;\n\n                        // document.getElementById(\"select-file-button\").className = document.getElementById(\"select-file-button\").className + \" hidden\";\n\n                        that.countUpload( that );\n                    },\n                    onProgress: function( id: any, name: any, uploadedBytes: any, totalBytes: any ): void {\n                    },\n                    onUploadChunk: function( id: any, name: any, chunkData: any ): void {\n                    },\n                    onUploadChunkSuccess: function( id: any, chunkData: any, responseJSON: any, xhr: any ): void {\n\n                        if ( responseJSON.message && responseJSON.message.currentTask && !that.currentTask ) {\n                            that.currentTask = responseJSON.message.currentTask;\n                        }\n\n                        if ( that.currentTask && !that.pollingIsSet ) {\n                            that.pollingIsSet = true;\n\n                            that.taskPolling = interval( 2000 )\n                                .pipe(switchMap(() => {\n                                    if ( that.currentTask ) {\n                                        return that.service.task( that.currentTask.oid );\n                                    }\n                                } ))\n                                .pipe(map(( data ) => data ))\n                                .subscribe(( data ) => {\n                                    that.currentTask = data.task\n                                } );\n                        }\n                    },\n                    onComplete: function( id: any, name: any, responseJSON: any, xhrOrXdr: any ): void {\n                        that.disabled = false;\n                        that.currentTask = null;\n                        that.existingTask = false;\n\n                        if ( that.taskPolling ) {\n                            that.taskPolling.unsubscribe();\n                            that.pollingIsSet = false;\n                        }\n\n                        this.clearStoredFiles();\n\n                        // document.getElementById(\"select-file-button\").classList.remove(\"hidden\");\n\n                        clearInterval( that.uplodeCounterInterfal );\n\n                        that.taskFinishedNotifications.push(\n                            {\n                                'id': id\n                            }\n                        )\n                    },\n                    onCancel: function( id: number, name: string ) {\n                        //that.currentTask = null;\n\n                        if ( that.currentTask && that.currentTask.uploadId ) {\n                            that.service.removeTask( that.currentTask.uploadId )\n                                .then(() => {\n                                    this.clearStoredFiles();\n                                } )\n                                .catch(( err: HttpErrorResponse ) => {\n                                    this.error( err );\n                                } );\n                        }\n\n                        that.disabled = false;\n                        that.currentTask = null;\n                        that.existingTask = false;\n\n                        if ( that.taskPolling ) {\n                            that.taskPolling.unsubscribe();\n                            that.pollingIsSet = false;\n                        }\n\n                        // document.getElementById(\"select-file-button\").classList.remove(\"hidden\");\n\n                        clearInterval( that.uplodeCounterInterfal );\n                    },\n                    onError: function( id: number, errorReason: string, xhrOrXdr: string ) {\n                        that.error( xhrOrXdr );\n                    }\n                }\n            };\n\n            this.uploader = new FineUploader( uiOptions );\n\n        }\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnInit(): void {\n        this.service.roots( null, null ).then( sites => {\n            this.sites = sites;\n        } );\n    }\n\n    closeTaskFinishedNotification( id: string ): void {\n        // iterate in reverse to allow splice while avoiding the reindex\n        // from affecting any of the next items in the array.\n        let i = this.taskFinishedNotifications.length;\n        while ( i-- ) {\n            let note = this.taskFinishedNotifications[i];\n            if ( id === note.id ) {\n                this.taskFinishedNotifications.splice( i, 1 );\n            }\n        }\n    }\n\n\n    setExistingTask(): void {\n        let resumable = this.uploader.getResumableFilesData() as any[];\n        if ( resumable.length > 0 ) {\n            this.existingTask = true;\n\n            if ( !this.selectedContinue ) {\n                this.hideUploadPanel();\n            }\n        }\n    }\n\n    onSiteSelect( siteId: string ): void {\n        this.values.site = siteId;\n\n        if ( siteId != null && siteId.length > 0 ) {\n\n            // Reset select options\n            this.projects = [] as SiteEntity[];\n            this.missions = [] as SiteEntity[];\n            this.collections = [] as SiteEntity[];\n\n            // Reset form values\n            this.values.project = null;\n            this.values.mission = null;\n            this.values.collection = null;\n\n            this.service.getChildren( this.values.site ).then( projects => {\n                this.projects = projects;\n            } );\n        }\n\n        //console.log( this.values );\n    }\n\n    onProjectSelect( projectId: string ): void {\n        this.values.project = projectId;\n\n        // Reset select options\n        this.missions = [] as SiteEntity[];\n        this.collections = [] as SiteEntity[];\n\n        // Reset form values\n        this.values.mission = null;\n        this.values.collection = null;\n\n        if ( projectId != null && projectId.length > 0 ) {\n            this.service.getChildren( this.values.project ).then( missions => {\n                this.missions = missions.filter( mission => {\n                    return mission.type === 'Mission';\n                } );\n            } );\n        }\n    }\n\n    onMissionSelect( missionId: string ): void {\n        this.values.mission = missionId;\n\n        // Reset select options\n        this.collections = [] as SiteEntity[];\n\n        // Reset form values\n        this.values.collection = null;\n        this.values.name = null;\n\n        if ( missionId != null && missionId.length > 0 && !this.values.create ) {\n\n            this.service.getChildren( this.values.mission ).then( collections => {\n                this.collections = collections;\n            } );\n        }\n    }\n\n    handleChange(): void {\n\n        // Reset select options\n        this.collections = [] as SiteEntity[];\n\n        // Reset form values\n        this.values.collection = null;\n        this.values.name = null;\n\n        if ( this.values.mission != null && this.values.mission.length > 0 && !this.values.create ) {\n\n            this.service.getChildren( this.values.mission ).then( collections => {\n                this.collections = collections;\n            } );\n        }\n    }\n\n    onCollectionSelect( collectionId: string ): void {\n        this.values.collection = collectionId;\n        this.values.uasComponentOid = collectionId;\n\n        if ( collectionId && collectionId.trim().length > 0 ) {\n            this.showFileSelectPanel = true;\n        }\n        else {\n            this.showFileSelectPanel = false\n        }\n    }\n\n    handleUpload(): void {\n\n        /*\n         * Validate form values before uploading\n         */\n        if ( !this.values.create && this.values.collection == null && !this.existingTask ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = \"A collection must first be selected before the file can be uploaded\";\n        }\n        else if ( this.values.create && ( this.values.mission == null || this.values.name == null || this.values.name.length == 0 ) && !this.existingTask ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = \"Name is required\";\n        }\n        else {\n            this.uploader.setParams( this.values );\n            this.uploader.uploadStoredFiles();\n        }\n\n    }\n\n    removeUpload( event: any ): void {\n        let that = this;\n\n        this.bsModalRef = this.modalService.show( BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = 'Are you sure you want to cancel the upload of [' + this.uploader.getResumableFilesData()[0].name + ']';\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = 'Cancel Upload';\n\n        ( <BasicConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.service.removeTask( this.uploader.getResumableFilesData()[0].uuid )\n                .then(() => {\n                    //that.uploader.clearStoredFiles();\n                    //that.uploader.cancelAll()\n\n                    // The above clearStoredFiles() and cancelAll() methods don't appear to work so \n                    // we are clearing localStorage manually.\n                    localStorage.clear();\n                    that.existingTask = false;\n                    that.showUploadPanel();\n\n                } );\n        } );\n    }\n\n    hideUploadPanel(): void {\n        this.uploadVisible = false;\n    }\n\n    showUploadPanel(): void {\n        this.uploadVisible = true;\n        this.selectedContinue = true;\n    }\n\n    countUpload( thisRef: any ): void {\n        let ct = 0;\n\n\n        function incrementSeconds() {\n            ct += 1;\n\n            let hours = Math.floor( ct / 3600 )\n            let minutes = Math.floor(( ct % 3600 ) / 60 );\n            let seconds = Math.floor( ct % 60 );\n\n            let hoursStr = minutes < 10 ? \"0\" + hours : hours;\n            let minutesStr = minutes < 10 ? \"0\" + minutes : minutes;\n            let secondsStr = seconds < 10 ? \"0\" + seconds : seconds;\n\n            thisRef.uploadCounter = hoursStr + \":\" + minutesStr + \":\" + secondsStr;\n        }\n\n        thisRef.uplodeCounterInterfal = setInterval( incrementSeconds, 1000 );\n    }\n\n    public canDeactivate(): boolean {\n        return this.disabled;\n    }\n\n    @HostListener( 'window:beforeunload', ['$event'] )\n    unloadNotification( $event: any ) {\n        if ( this.disabled ) {\n            $event.returnValue = 'An upload is currently in progress. Are you sure you want to leave?';\n        }\n    }\n\n    error( message: string ): void {\n        if ( message !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = message;\n        }\n    }\n}\n","<div class=\"panel-group\">\n  <div class=\"panel panel-default\" style=\"background: none;border: none;\">\n    <div class=\"panel-heading panel-heading-light clickable\" style=\"margin-top: 20px;\">\n      <h4 class=\"panel-title\">\n        <a data-toggle=\"collapse\" (click)=\"showProcess = !showProcess\" attr.aria-controls=\"task-group-panel-{{groupTypeId}}\">\n          <h4>{{taskCategory}}</h4>\n        </a>\n      </h4>\n      <span class=\"heading-status-label pull-right\">Current status: <span\n          [ngClass]=\"{'success':taskGroupType.status === 'Complete', 'warning':taskGroupType.status  === 'Warning', 'pending':taskGroupType.status === 'Queued' || taskGroupType.status === 'Processing','fail':taskGroupType.status === 'Failed'}\">{{taskGroupType.status}}</span></span>\n    </div>\n    <div id=\"task-group-panel-{{groupTypeId}}\" class=\"panel-body\" [isAnimated]=\"false\" [collapse]=\"!showProcess\">\n\n      <div class=\"task-container\" *ngFor=\"let task of taskGroupType.tasks; let idx=index\">\n        <div *ngIf=\"task.status !== 'Complete' && task.status !== 'Failed' && task.status !== 'Error'\" >\n          <ul class=\"list-unstyled\" style=\"margin: 0;\">\n            <li>Status: <b\n                [ngClass]=\"{'success':task.status === 'Complete', 'pending':(task.status === 'Queued' || task.status === 'Processing'),'fail':task.status === 'Failed'}\">{{task.status}}</b>\n            </li>\n            <li>Created on: <b>{{task.createDate | idmdate}}</b></li>\n            <li>Last update: <b>{{task.lastUpdateDate | idmdate}}</b></li>\n            <li style=\"word-break: break-all;\">Message: <b>{{task.message}}</b></li>\n            <li *ngIf=\"taskCategory == 'Upload'\">Sensor: <b>{{task.sensorName}}</b></li>\n          </ul>\n          \n          <div class=\"row\">\n            <div class=\"col-sm-12\">\n              <div class=\"button-holder\" style=\"margin-top: 30px;\">\n                <button class=\"btn btn-default\" *ngIf=\"task.actions.length > 0\" (click)=\"task.showError = !task.showError\">{{task.showError ? 'Hide' : 'Show'}} Messages</button>\n                <button class=\"btn btn-default caution\" (click)=\"removeTask(task)\">Delete Task</button>\n              </div>\n            </div>\n          </div>          \n        </div>\n\n        <div *ngIf=\"task.status === 'Complete' || task.status === 'Failed' || task.status === 'Error'\">\n          <ul class=\"list-unstyled\" style=\"margin: 0;\">\n            <li>Status: \n              <b [ngClass]=\"{'success':task.status === 'Complete','pending':(task.status === 'Queued' || task.status === 'Processing'), 'fail':task.status === 'Failed'}\">\n                {{task.status === 'Complete' && task.actions.length > 0 ? 'Complete With Messages' : task.status }}\n              </b>\n            </li>\n            <li>Message: <b>{{task.message}}</b></li>\n            <li>Created on: <b>{{task.createDate | idmdate}}</b></li>\n            <li>Last update: <b>{{task.lastUpdateDate | idmdate}}</b></li>\n            <li *ngIf=\"taskCategory == 'Upload'\">Sensor: <b>{{task.sensorName}}</b></li>\n          </ul>\n\n          <div class=\"row\">\n            <div class=\"col-sm-12\">\n              <div class=\"button-holder\" style=\"margin-top: 30px;\">\n                <button class=\"btn btn-default\" *ngIf=\"task.actions.length > 0\" (click)=\"task.showError = !task.showError\">{{task.showError ? 'Hide' : 'Show'}} Messages</button>\n                <button class=\"btn btn-default\" *ngIf=\"task.odmOutput\" (click)=\"showODMOutput = !showODMOutput\">Show Detailed Log Output</button>\n                <button class=\"btn btn-default caution\" (click)=\"removeTask(task)\">Delete Task</button>\n              </div>\n            </div>\n          </div>\n\n          <div *ngIf=\"task.odmOutput && showODMOutput\" class=\"row\">\n            <div class=\"col-sm-12\">\n              <h4>Output:</h4>\n              <textarea style=\"color:grey;width:500px;height:200px;\" [innerHTML]=\"task.odmOutput\"></textarea>\n            </div>\n          </div>\n        </div>\n        \n        <div *ngIf=\"task.showError\" class=\"row\">\n          <div class=\"col-sm-12\">\n            <h4 *ngIf=\"task.actions.length === 0\" style=\"color:grey;\">There are no actions for this task.</h4>\n            <table *ngIf=\"task.actions.length > 0\" class=\"table table-bordered\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Description</th>\n                  <th>Creation Date</th>\n                  <th>Last Updated</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let action of task.actions; let i=index\">\n                  <th scope=\"row\">{{i + 1}}</th>\n                  <td>{{action.description}}</td>\n                  <td>{{action.createDate | idmdate}}</td>\n                  <td>{{action.lastUpdateDate | idmdate}}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>        \n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\n\nimport { Task, TaskGroup, TaskGroupType } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\n\n\n@Component({\n\tselector: 'tasks-panel',\n\ttemplateUrl: './tasks-panel.component.html',\n\tstyleUrls: ['./tasks-panel.css']\n})\nexport class TasksPanelComponent implements OnInit {\n\n\t@Input() taskGroupType: TaskGroupType;\n\t@Input() groupTypeId: string;\n\t@Input() taskCategory: string;\n    \n\tshowUploads: boolean = false;\n\tshowProcess: boolean = false;\n\tshowStore: boolean = false;\n\tshowODMOutput: boolean = false;\n\tshowError: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n     */\n\tbsModalRef: BsModalRef;\n\n\n    /*\n     * List of tasks\n     */\n\ttaskGroups: TaskGroup[] = [];\n\n\tconstructor(private managementService: ManagementService, private modalService: BsModalService) {\n\n\t}\n\n\tngOnInit(): void {\n\t  if (this.taskGroupType != null && this.taskGroupType.tasks != null)\n\t  {\n\t\t  for (var i = 0; i < this.taskGroupType.tasks.length; ++i)\n\t\t  {\n\t\t    let task = this.taskGroupType.tasks[i];\n\t\t    \n\t\t    if (task.actions.length > 0)\n\t\t    {\n\t\t      task.showError = true;\n\t\t    }\n\t\t  }\n\t  }\n\t}\n\n\tngOnDestroy(): void {\n\t}\n\n\n\tremoveTask(task: Task): void {\n\n\t\tthis.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = 'Are you sure you want to delete [' + task.label + '?';\n\t\tthis.bsModalRef.content.data = task;\n\t\tthis.bsModalRef.content.type = 'DANGER';\n\t\tthis.bsModalRef.content.submitText = 'Delete';\n\n\t\t(<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(task => {\n\t\t\tthis.deleteTask(task);\n\t\t});\n\n\t}\n\n\tdeleteTask(task: Task) {\n\t\tthis.managementService.removeTask(task.uploadId)\n\t\t\t.then(() => {\n\t\t\t\tlet pos = null;\n\t\t\t\tfor (let i = 0; i < this.taskGroupType.tasks.length; i++) {\n\t\t\t\t\tlet thisTask = this.taskGroupType.tasks[i];\n\n\t\t\t\t\tif (thisTask.uploadId === task.uploadId) {\n\t\t\t\t\t\tpos = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (pos !== null) {\n\t\t\t\t\tthis.taskGroupType.tasks.splice(pos, 1);\n\t\t\t\t}\n\t\t\t});\n\t}\n}\n","<uasdm-header [title]=\"'Tasks'\"></uasdm-header>\n\n<div id=\"app-container\" class=\"container-fluid\" style=\"padding-top:20px;\">\n\n  <div class=\"row\">\n    <div class=\"col-sm-1\"></div>\n    <div class=\"col-sm-10\">\n      <div id=\"tasks\">\n\n        <div *ngIf=\"messages && messages.count > 0\">\n          <h2>Tasks</h2>\n\n          <div id=\"tasks-container\">\n            <div class=\"row\">\n              <h3 class=\"col-sm-7\">Issue</h3>\n              <h3 class=\"col-sm-5\" style=\"text-align:right; padding-right: 8em\">Actions</h3>\n            </div>\n            <div class=\"panel panel-default\"\n              *ngFor=\"let message of messages.resultSet | paginate: {id: 'message-pg-ctrl', itemsPerPage: messages.pageSize, currentPage: messages.pageNumber, totalItems: messages.count }\">\n              <!-- <div class=\"panel-heading\">Panel heading without title</div> -->\n\n\n              <div class=\"panel-body\">\n                <div class=\"row\">\n                  <ng-container [ngSwitch]=\"message.type\">\n                    <ng-container *ngSwitchCase=\"'MissingMetadataMessage'\">\n                      <div class=\"col-sm-7\">\n                        <div>\n                          <span class=\"dot pending\" style=\"margin-left:0;\"></span>\n                          {{message.message}}\n                        </div>\n                        <div style=\"margin-top:10px;margin-bottom:0;color:grey;\">\n                          <ul class=\"breadcrumb\" style=\"color:grey;\">\n                            <li *ngFor=\"let ancestor of message.data.ancestors\">\n                              <span> <b>{{ancestor}}</b> </span>\n                            </li>\n                            <li class=\"active\">\n                              <a (click)=\"handleGoto(message.collectionId)\" style=\"color: #007276;\">\n                                {{message.data.collectionName}}</a>\n                            </li>\n                          </ul>\n                        </div>\n                      </div>\n                      <div class=\"col-sm-5\" style=\"text-align: right;\">\n                        <div>\n                          <button class=\"btn btn-default\" (click)=\"handleGoto(message.data.collectionId)\">\n                            View Collection\n                          </button>\n                          <button style=\"margin-left: 10px;\" class=\"btn btn-primary\" (click)=\"handleMessage(message)\">\n                            Add Metadata\n                          </button>\n                        </div>\n                      </div>\n                    </ng-container>\n                    <ng-container *ngSwitchDefault>\n                      <div class=\"col-sm-7\">\n                        <div>\n                          <span class=\"dot pending\" style=\"margin-left:0;\"></span>\n                          {{message.message}}\n                        </div>\n                      </div>\n                      <div class=\"col-sm-5\" style=\"text-align: right;\">\n                        <div>\n                          <button class=\"btn btn-default\" (click)=\"handleGoto(message.data.component)\">\n                            View Collection\n                          </button>\n                        </div>\n                      </div>\n                    </ng-container>\n                  </ng-container>\n                </div>\n              </div>\n\n            </div>\n            <div class=\"row\">\n              <pagination-controls id=\"message-pg-ctrl\" (pageChange)=\"onMessagePageChange($event)\">\n              </pagination-controls>\n            </div>\n          </div>\n\n        </div>\n\n      </div>\n    </div>\n    <div class=\"col-sm-1\"></div>\n  </div>\n\n\n  <div class=\"row\" style=\"margin-bottom: 40px;\">\n    <div class=\"col-sm-1\"></div>\n    <div class=\"col-sm-10\">\n      <h3>Processing Jobs</h3>\n\n      <ul class=\"nav nav-tabs\" role=\"tablist\">\n        <li class=\"active\">\n          <a role=\"tab\" data-toggle=\"tab\" (click)=\"onTabClick($event, 'all')\">All</a>\n        </li>\n        <li>\n          <a role=\"tab\" data-toggle=\"tab\" (click)=\"onTabClick($event, 'action-required')\">Action Required</a>\n        </li>\n        <!-- \n        <li>\n          <a role=\"tab\" data-toggle=\"tab\" (click)=\"onTabClick($event, 'success')\">Successful</a>\n        </li>\n -->\n      </ul>\n\n      <div class=\"tab-content\">\n\n        <div *ngIf=\"activeTab === 'action-required'\" class=\"tab-pane active\" id=\"action-required\">\n\n          <div class=\"panel-group\">\n            <div\n              *ngFor=\"let taskGroup of taskPage.resultSet | paginate: { id: 'tasks-pg-ctrl', itemsPerPage: taskPage.pageSize, currentPage: taskPage.pageNumber, totalItems: taskPage.count }; let idx=index\"\n              class=\"panel panel-default\" style=\"background: none;border: none;\">\n\n              <div class=\"panel-heading clickable\">\n                <h4 class=\"panel-title\" style=\"display: inline-block; vertical-align: middle;\">\n                  <a data-toggle=\"collapse\" (click)=\"setVisibility(taskGroup)\"\n                    [attr.aria-expanded]=\"!visible[taskGroup.collectionId]\" [attr.aria-controls]=\"'taskGroup'+ idx\">\n                    <h4>{{taskGroup.label}}</h4>\n                  </a>\n                </h4>\n\n                <span class=\"dot\"\n                  [ngClass]=\"{'success':taskGroup.status === 'Complete','warning':taskGroup.status === 'Warning', 'pending blink':taskGroup.status === 'Processing' || taskGroup.status === 'Running' || taskGroup.status === 'Pending' || taskGroup.status === 'Queued','fail':taskGroup.status === 'Failed'}\"></span>\n\n                <button class=\"btn btn-default pull-right\" (click)=\"handleGoto(taskGroup.collectionId)\">View\n                  Collection</button>\n\n                <div style=\"margin-top:10px;margin-bottom:0;color:grey;\">\n                  <ul class=\"breadcrumb\" style=\"color:grey;\">\n                    <li *ngFor=\"let ancestor of taskGroup.ancestors\">\n                      <span> <b>{{ancestor}}</b> </span>\n                    </li>\n                    <li class=\"active\">\n                      {{taskGroup.label}}\n                    </li>\n                  </ul>\n                </div>\n\n              </div>\n\n              <div class=\"panel-body\" [isAnimated]=\"false\" [collapse]=\"!visible[taskGroup.collectionId]\">\n                <i *ngIf=\"taskGroup.loading\" class=\"fa fa-spinner fa-spin task-group-loading\"></i>\n\n                <span *ngIf=\"!taskGroup.loading\">\n                  <div *ngFor=\"let taskGroupType of taskGroup.groups; let grpi=index\">\n                    <div *ngIf=\"taskGroupType.tasks.length > 0\" [id]=\"'task'+ grpi\">\n\n                      <!-- Upload Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'UPLOAD'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Upload'\">\n                        </tasks-panel>\n                      </div>\n\n                      <!-- Process Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'PROCESS'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Process'\">\n                        </tasks-panel>\n                      </div>\n\n                      <!-- Store Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'STORE'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Store'\">\n                        </tasks-panel>\n                      </div>\n\n                    </div>\n                  </div>\n                </span>\n              </div>\n            </div>\n\n            <pagination-controls id=\"tasks-pg-ctrl\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n\n        <div *ngIf=\"activeTab === 'success'\" class=\"tab-pane active\" id=\"success\">\n          <div class=\"panel-group\">\n            <div\n              *ngFor=\"let taskGroup of taskPage.resultSet | paginate: {id: 'tasks-pg-ctrl', itemsPerPage: taskPage.pageSize, currentPage: taskPage.pageNumber, totalItems: taskPage.count }; let idx=index\"\n              class=\"panel panel-default\" style=\"background: none;border: none;\">\n\n              <div class=\"panel-heading clickable\">\n                <h4 class=\"panel-title\" style=\"display: inline-block; vertical-align: middle;\">\n                  <a data-toggle=\"collapse\" (click)=\"setVisibility(taskGroup)\"\n                    [attr.aria-expanded]=\"!visible[taskGroup.collectionId]\" [attr.aria-controls]=\"'taskGroup'+ idx\">\n                    <h4>{{taskGroup.label}}</h4>\n                  </a>\n                </h4>\n\n                <span class=\"dot\"\n                  [ngClass]=\"{'success':taskGroup.status === 'Complete','warning':taskGroup.status === 'Warning', 'pending blink':taskGroup.status === 'Processing' || taskGroup.status === 'Running' || taskGroup.status === 'Pending' || taskGroup.status === 'Queued', 'fail':taskGroup.status === 'Failed'}\"></span>\n\n                <button class=\"btn btn-default pull-right\" (click)=\"handleGoto(taskGroup.collectionId)\">View\n                  Collection</button>\n\n                <div style=\"margin-top:10px;margin-bottom:0;color:grey;\">\n                  <ul class=\"breadcrumb\" style=\"color:grey;\">\n                    <li *ngFor=\"let ancestor of taskGroup.ancestors\">\n                      <span> <b>{{ancestor}}</b> </span>\n                    </li>\n                    <li class=\"active\">\n                      {{taskGroup.label}}\n                    </li>\n                  </ul>\n                </div>\n\n              </div>\n\n              <div class=\"panel-body\" [isAnimated]=\"false\" [collapse]=\"!visible[taskGroup.collectionId]\">\n\n                <div *ngFor=\"let taskGroupType of taskGroup.groups; let grpi=index\">\n                  <div *ngIf=\"taskGroupType.tasks.length > 0\" [id]=\"'task'+ grpi\">\n\n                    <div *ngIf=\"taskGroupType.type === 'UPLOAD'\">\n                      <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Upload'\">\n                      </tasks-panel>\n                    </div>\n\n                    <div *ngIf=\"taskGroupType.type === 'PROCESS'\">\n                      <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Process'\">\n                      </tasks-panel>\n                    </div>\n\n                    <div *ngIf=\"taskGroupType.type === 'STORE'\">\n                      <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Store'\">\n                      </tasks-panel>\n                    </div>\n\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <pagination-controls id=\"tasks-pg-ctrl\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n\n        <div *ngIf=\"activeTab === 'all'\" class=\"tab-pane active\" id=\"all\">\n          <div class=\"panel-group\">\n            <div\n              *ngFor=\"let taskGroup of taskPage.resultSet | paginate: {id: 'tasks-pg-ctrl', itemsPerPage: taskPage.pageSize, currentPage: taskPage.pageNumber, totalItems: taskPage.count }; let idx=index\"\n              class=\"panel panel-default\" style=\"background: none;border: none;\">\n\n              <div class=\"panel-heading clickable\">\n                <h4 class=\"panel-title\" style=\"display: inline-block; vertical-align: middle;\">\n                  <a data-toggle=\"collapse\" (click)=\"setVisibility(taskGroup)\"\n                    [attr.aria-expanded]=\"!visible[taskGroup.collectionId]\" [attr.aria-controls]=\"'taskGroup'+ idx\">\n                    <h4>{{taskGroup.label}}</h4>\n                  </a>\n                </h4>\n\n                <span class=\"dot\"\n                  [ngClass]=\"{'success':taskGroup.status === 'Complete','warning':taskGroup.status === 'Warning', 'pending blink':taskGroup.status === 'Processing' || taskGroup.status === 'Running' || taskGroup.status === 'Pending' || taskGroup.status === 'Queued', 'fail':taskGroup.status === 'Failed'}\"></span>\n\n                <button class=\"btn btn-default pull-right\" (click)=\"handleGoto(taskGroup.collectionId)\">View\n                  Collection</button>\n\n                <div style=\"margin-top:10px;margin-bottom:0;color:grey;\">\n                  <ul class=\"breadcrumb\" style=\"color:grey;\">\n                    <li *ngFor=\"let ancestor of taskGroup.ancestors\">\n                      <span> <b>{{ancestor}}</b> </span>\n                    </li>\n                    <li class=\"active\">\n                      {{taskGroup.label}}\n                    </li>\n                  </ul>\n                </div>\n              </div>\n\n              <div class=\"panel-body\" [isAnimated]=\"false\" [collapse]=\"!visible[taskGroup.collectionId]\">\n                <i *ngIf=\"taskGroup.loading\" class=\"fa fa-spinner fa-spin task-group-loading\"></i>\n\n                <span *ngIf=\"!taskGroup.loading\">\n                  <div *ngFor=\"let taskGroupType of taskGroup.groups; let grpi=index\">\n                    <div *ngIf=\"taskGroupType.tasks.length > 0\" [id]=\"'task'+ grpi\">\n\n                      <!-- Upload Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'UPLOAD'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Upload'\">\n                        </tasks-panel>\n                      </div>\n\n                      <!-- Process Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'PROCESS'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Process'\">\n                        </tasks-panel>\n                      </div>\n\n                      <!-- Store Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'STORE'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Store'\">\n                        </tasks-panel>\n                      </div>\n\n                    </div>\n                  </div>\n                </span>\n              </div>\n            </div>\n\n            <pagination-controls id=\"tasks-pg-ctrl\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n\n      </div>\n    </div>\n    <div class=\"col-sm-1\"></div>\n\n  </div>\n\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { MetadataModalComponent } from './modal/metadata-modal.component';\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\nimport { CollectionModalComponent } from './modal/collection-modal.component';\nimport { PageResult } from '@shared/model/page';\n\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { Message, Task, TaskGroup } from '../model/management';\nimport { ManagementService } from '../service/management.service';\n\ndeclare var acp: any;\n\n@Component({\n  selector: 'tasks',\n  templateUrl: './tasks.component.html',\n  styleUrls: ['./tasks.css']\n})\nexport class TasksComponent implements OnInit {\n\n  userName: string = \"\";\n  totalTaskCount: number = 0;\n  activeTab: string = \"all\";\n  showSite: boolean = false;\n  initData: any;\n  showUploads: boolean = false;\n  showProcess: boolean = false;\n  showStore: boolean = false;\n  tasks: any;\n  taskPage: PageResult<TaskGroup> = { count: 0, pageSize: 10, pageNumber: 1, resultSet: [] };\n  errorStatuses = [\"Failed\", \"Processing\"];\n  completeStatuses = [\"Complete\"];\n  visible: {};\n\n  statuses = [];\n\n  /*\n   * Token used to determine if a change has occured in the page before loading the polling values\n   */\n  token: number = 0;\n\n  /*\n   * Reference to the modal current showing\n   */\n  bsModalRef: BsModalRef;\n\n  /*\n   * List of messages\n   */\n  messages: PageResult<Message> = { count: 0, pageSize: 5, pageNumber: 1, resultSet: [] };\n\n  /*\n   * List of tasks\n   */\n  // tasks: PageResult<Task>;\n\n  notifier: WebSocketSubject<{ type: string, content: any }>;\n\n  constructor(private managementService: ManagementService, private modalService: BsModalService) { }\n\n  ngOnInit(): void {\n    this.userName = this.managementService.getCurrentUser();\n    this.managementService.tasks([], this.taskPage.pageSize, this.taskPage.pageNumber, this.token).then(data => {\n      this.setTaskData(data);\n    });\n\n    this.getMessages();\n\n    let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + acp;\n\n    this.notifier = webSocket(baseUrl + '/websocket/notify');\n    this.notifier.subscribe(message => {\n      if (message.type === 'JOB_CHANGE') {\n        this.managementService.tasks(this.statuses, this.taskPage.pageSize, this.taskPage.pageNumber, this.token).then(data => {\n          if (data['token'] === this.token) {\n            this.updateTaskData(data);\n          }\n        });\n        this.getMessages();\n      }\n    });\n\n  }\n\n  ngOnDestroy(): void {\n\n    this.notifier.complete();\n  }\n\n  onPageChange(pageNumber: number): void {\n    this.token++;\n\n    this.managementService.tasks(this.statuses, this.taskPage.pageSize, pageNumber, this.token).then(tasks => {\n\n      this.setTaskData(tasks);\n    });\n  }\n\n  onTabClick(event: any, tab: string): void {\n    this.activeTab = tab;\n    this.taskPage = { count: 0, pageSize: 20, pageNumber: 1, resultSet: [] };\n    this.token++;\n\n    if (tab === \"success\") {\n      this.statuses = this.completeStatuses;\n    }\n    else if (tab === \"action-required\") {\n      this.statuses = this.errorStatuses;\n    }\n    else if (tab === \"all\") {\n      this.statuses = [];\n    }\n\n    this.managementService.tasks(this.statuses, this.taskPage.pageSize, this.taskPage.pageNumber, this.token).then(tasks => {\n\n      this.setTaskData(tasks);\n    });\n\n\n    if (!event.target.parentNode.classList.contains(\"active\")) {\n\n      let lis = event.target.parentNode.parentNode.getElementsByTagName(\"li\");\n      for (let i = 0; i < lis.length; i++) {\n        let li = lis[i];\n\n        li.classList.forEach(cls => {\n          if (cls === 'active') {\n            li.classList.remove('active');\n          }\n        })\n      }\n\n      event.target.parentNode.classList.add('active');\n    }\n  }\n\n  setTaskData(tasks: PageResult<TaskGroup>): void {\n    this.taskPage = tasks;\n    this.visible = {};\n\n    this.taskPage.resultSet.forEach(task => {\n      this.visible[task.collectionId] = false;\n    });\n  }\n\n  setGroupTasks(collection: TaskGroup, tasks: Task[]): void {\n    collection.groups = [];\n    collection.groups.push({ tasks: [], status: null, type: 'UPLOAD' });\n    collection.groups.push({ tasks: [], status: null, type: 'PROCESS' });\n    collection.groups.push({ tasks: [], status: null, type: 'STORE' });\n\n\n    for (let i = 0; i < tasks.length; i++) {\n      let task = tasks[i];\n\n\n      if (task.type === 'gov.geoplatform.uasdm.bus.WorkflowTask') {\n\n        let taskGroupTypeIndex = collection.groups.findIndex(value => { return value.type === 'UPLOAD' });\n\n        if (taskGroupTypeIndex === -1) {\n          collection.groups.push({ tasks: [task], status: task.status, type: 'UPLOAD' })\n        }\n        else {\n          collection.groups[taskGroupTypeIndex].tasks.push(task);\n        }\n      }\n      else if (task.type === 'gov.geoplatform.uasdm.odm.ODMProcessingTask' || task.type === 'gov.geoplatform.uasdm.bus.OrthoProcessingTask') {\n\n        let taskGroupTypeIndex = collection.groups.findIndex(value => { return value.type === 'PROCESS' });\n\n        if (taskGroupTypeIndex === -1) {\n          collection.groups.push({ tasks: [task], status: task.status, type: 'PROCESS' })\n        }\n        else {\n          collection.groups[taskGroupTypeIndex].tasks.push(task);\n        }\n      }\n      else if (task.type === 'gov.geoplatform.uasdm.odm.ODMUploadTask') {\n\n        let taskGroupTypeIndex = collection.groups.findIndex(value => { return value.type === 'STORE' });\n\n        if (taskGroupTypeIndex === -1) {\n          collection.groups.push({ tasks: [task], status: task.status, type: 'STORE' })\n        }\n        else {\n          collection.groups[taskGroupTypeIndex].tasks.push(task);\n        }\n      }\n    }\n\n    this.setTaskGroupStatuses(collection);\n  }\n\n\n  setTaskGroupStatuses(collection: TaskGroup): void {\n\n    let latestDate: Date = null;\n\n    collection.groups.forEach(group => {\n\n      let isLatestTask: boolean = false;\n\n      if (group.tasks.length > 0) {\n        const sortedTasks = group.tasks.sort((a: any, b: any) =>\n          new Date(b.lastUpdateDate).getTime() - new Date(a.lastUpdateDate).getTime()\n        );\n\n        group.status = sortedTasks[0].status;\n\n        const firstDate: Date = new Date(sortedTasks[0].lastUpdateDate);\n\n        isLatestTask = (latestDate == null || latestDate.getTime() - firstDate.getTime() <= 0);\n\n        if (isLatestTask) {\n          latestDate = firstDate;\n        }\n\n        if (group.status === 'Complete' && sortedTasks[0].actions.length > 0) {\n          group.status = 'Warning';\n        }\n      }\n    });\n  }\n\n\n  updateTaskData(page: PageResult<TaskGroup>): void {\n    this.taskPage = page;\n\n    this.taskPage.resultSet.forEach(task => {\n      if (this.visible[task.collectionId]) {\n        this.managementService.getTasks(task.collectionId).then(tasks => {\n          this.setGroupTasks(task, tasks);\n        });\n      }\n    });\n  }\n\n  setVisibility(taskGroup: TaskGroup): void {\n    if (!this.visible[taskGroup.collectionId]) {\n      this.visible[taskGroup.collectionId] = true;\n\n      if (taskGroup.groups == null && !taskGroup.loading) {\n        taskGroup.loading = true;\n        this.managementService.getTasks(taskGroup.collectionId).then(tasks => {\n          this.setGroupTasks(taskGroup, tasks);\n\n          taskGroup.loading = false;\n        });\n      }\n    }\n    else {\n      this.visible[taskGroup.collectionId] = false;\n    }\n  }\n\n\n  handleMessage(message: Message): void {\n\n    if (message.type === 'MissingMetadataMessage') {\n      this.bsModalRef = this.modalService.show(MetadataModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n        'class': 'upload-modal'\n      });\n      this.bsModalRef.content.init(message.data.collectionId);\n\n      this.bsModalRef.content.onMetadataChange.subscribe(() => {\n        this.getMessages();\n      });\n    }\n\n  }\n\n  handleGoto(collectionId: string): void {\n    // let breadcrumbs = []\n\n    this.managementService.view(collectionId).then(response => {\n      const entity = response.item;\n      const breadcrumbs = response.breadcrumbs;\n\n      this.managementService.getItems(collectionId, null).then(nodes => {\n        this.bsModalRef = this.modalService.show(CollectionModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: 'leaf-modal'\n        });\n        this.bsModalRef.content.init(entity, nodes, breadcrumbs);\n      })\n    })\n  }\n\n  removeTask(task: Task): void {\n\n    this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n    });\n    this.bsModalRef.content.message = 'Are you sure you want to delete [' + task.label + '?';\n    this.bsModalRef.content.data = task;\n    this.bsModalRef.content.type = 'DANGER';\n    this.bsModalRef.content.submitText = 'Delete';\n\n    (<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(task => {\n      this.deleteTask(task);\n    });\n\n  }\n\n  deleteTask(task: Task) {\n    this.managementService.removeTask(task.uploadId)\n      .then(() => {\n        let pos = null;\n        for (let i = 0; i < this.tasks.resultSet.length; i++) {\n          let thisTask = this.tasks[i];\n\n          if (thisTask.uploadId === task.uploadId) {\n            pos = i;\n            break;\n          }\n        }\n\n        if (pos !== null) {\n          this.tasks.resultSet.splice(pos, 1);\n        }\n\n        this.getMessages();\n\n        this.totalTaskCount = this.tasks.count;\n\n      });\n  }\n\n  getMessages(): void {\n    this.onMessagePageChange(this.messages.pageNumber);\n  }\n\n  onMessagePageChange(pageNumber: number): void {\n    this.managementService.getMessages(this.messages.pageSize, pageNumber).then(messages => {\n      this.messages = messages;\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams, HttpBackend, HttpHandler } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\nimport { HttpBackendClient } from '@shared/service/http-backend-client.service';\n\nimport { PageResult } from '@shared/model/page';\nimport { Sensor } from '../model/sensor';\nimport { GenericTableService } from '@shared/model/generic-table';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SensorService implements GenericTableService {\n\n    constructor(private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService) { }\n\n    page(criteria: Object): Promise<PageResult<Sensor>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set('criteria', JSON.stringify(criteria));\n\n        return this.http\n            .get<PageResult<Sensor>>(acp + '/sensor/page', { params: params })\n            .toPromise();\n    }\n\n    getAll(): Promise<{ oid: string, name: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        this.eventService.start();\n\n        return this.http\n            .get<{ oid: string, name: string }[]>(acp + '/sensor/get-all', { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    get(oid: string): Promise<Sensor> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<Sensor>(acp + '/sensor/get', JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    newInstance(): Promise<Sensor> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<Sensor>(acp + '/sensor/newInstance', JSON.stringify({}), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(oid: string): Promise<void> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(acp + '/sensor/remove', JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(sensor: Sensor): Promise<Sensor> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<Sensor>(acp + '/sensor/apply', JSON.stringify({ sensor: sensor }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n}","import { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\nimport { HttpBackendClient } from '@shared/service/http-backend-client.service';\n\nimport { PageResult } from '@shared/model/page';\nimport { Classification } from '@site/model/classification';\nimport { Injectable } from '@angular/core';\nimport { GenericTableService } from '@shared/model/generic-table';\n\nexport enum Endpoint {\n    SENSOR_TYPE = '/sensor-type',\n    PLATFORM_TYPE = '/platform-type',\n    PLATFORM_MANUFACTURER = '/platform-manufacturer',\n    WAVE_LENGTH = '/wave-length'\n}\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ClassificationService implements GenericTableService {\n\n    constructor(private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService) {\n    }\n\n    page(criteria: Object, baseUrl: string): Promise<PageResult<Classification>> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set('criteria', JSON.stringify(criteria));\n\n        return this.http\n            .get<PageResult<Classification>>(acp + baseUrl + '/page', { params: params })\n            .toPromise();\n    }\n\n    getAll(baseUrl: string): Promise<Classification[]> {\n        let params: HttpParams = new HttpParams();\n\n        this.eventService.start();\n\n        return this.http\n            .get<Classification[]>(acp + baseUrl + '/get-all', { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n\n    get(baseUrl: string, oid: string): Promise<Classification> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<Classification>(acp + baseUrl + '/get', JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    newInstance(baseUrl: string): Promise<Classification> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<Classification>(acp + baseUrl + '/newInstance', JSON.stringify({}), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(baseUrl: string, oid: string): Promise<void> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(acp + baseUrl + '/remove', JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(baseUrl: string, classification: Classification): Promise<Classification> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<Classification>(acp + baseUrl + '/apply', JSON.stringify({ classification: classification }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n}","<div>\n<!--     <uasdm-header></uasdm-header> -->\n\n<!--     <div id=\"app-container\" class=\"container\"> -->\n\n\t\t<h2>Sensors</h2>\n\n\t\t<generic-table *ngIf=\"config != null\" [cols]=\"cols\" [config]=\"config\" [refresh]=\"refresh\" (click)=\"onClick($event)\"></generic-table>\t\t\n<!-- \t</div> -->\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\n\nimport { Sensor } from '@site/model/sensor';\nimport { SensorService } from '@site/service/sensor.service';\nimport { Router } from '@angular/router';\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from '@shared/model/generic-table';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'sensors',\n    templateUrl: './sensors.component.html',\n    styles: ['./sensors.css']\n})\nexport class SensorsComponent implements OnInit {\n    bsModalRef: BsModalRef;\n    message: string = null;\n\n    config: GenericTableConfig;\n    cols: GenericTableColumn[] = [\n        { header: 'Name', field: 'name', type: 'TEXT', sortable: true },\n        { header: 'Model', field: 'model', type: 'TEXT', sortable: true },\n        { header: 'Description', field: 'description', type: 'TEXT', sortable: true },\n        { header: 'Type', field: 'sensorType', type: 'TEXT', sortable: true },\n        { header: '', type: 'ACTIONS', sortable: false },\n    ];\n    refresh: Subject<void>;\n\n\n    constructor(private service: SensorService, private modalService: BsModalService, private router: Router) { }\n\n\n    ngOnInit(): void {\n\n        this.config = {\n            service: this.service,\n            remove: true,\n            view: true,\n            create: true,\n            label: 'Sensor',\n            sort: { field: 'name', order: 1 },\n        }\n\n        this.refresh = new Subject<void>();\n    }\n\n    onClick(event: TableEvent): void {\n        if (event.type === 'view') {\n            this.onView(event.row as Sensor);\n        }\n        else if (event.type === 'remove') {\n            this.onRemove(event.row as Sensor);\n        }\n        else if (event.type === 'create') {\n            this.newInstance();\n        }\n    }\n\n\n    remove(sensor: Sensor): void {\n        this.service.remove(sensor.oid).then(response => {\n            this.refresh.next();\n        });\n    }\n\n    onRemove(sensor: Sensor): void {\n        this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.message = \"Are you sure you want to remove the sensor [\" + sensor.name + \"]\";\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = \"Delete\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.remove(sensor);\n        });\n    }\n\n    onView(sensor: Sensor): void {\n        this.router.navigate(['/site/sensor', sensor.oid]);\n    }\n\n    newInstance(): void {\n        this.router.navigate(['/site/sensor', '__NEW__']);\n    }\n}\n","<div>\n  <uasdm-header></uasdm-header>\n\n  <div id=\"app-container\" class=\"container\">\n    <div *ngIf=\"message != null\" class=\"error-container\">\n      <div class=\"label-holder\">\n        <strong>Error</strong>\n      </div>\n      <div class=\"holder\">\n        <div>\n          <p class=\"error-message\">{{message}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"modal-title-container\">\n      <h3>Sensor</h3>\n    </div>\n\n    <form #ngForm=\"ngForm\">\n      <div class=\"form-group\">\n        <label>Name</label>\n        <input [(ngModel)]=\"sensor.name\" name=\"name\" type=\"input\" class=\"form-control\" placeholder=\"Name\"\n          [disabled]=\"mode === 'READ'\" required />\n      </div>\n      <div class=\"form-group\">\n        <label>Description</label>\n        <textarea [(ngModel)]=\"sensor.description\" name=\"description\" type=\"input\" class=\"form-control\"\n          [disabled]=\"mode === 'READ'\" placeholder=\"Description\">\n        </textarea>\n      </div>\n      <div class=\"form-group\">\n        <label>Model</label>\n        <input [(ngModel)]=\"sensor.model\" name=\"model\" type=\"input\" class=\"form-control\" placeholder=\"Model\"\n          [disabled]=\"mode === 'READ'\" required />\n      </div>\n      <div class=\"form-group\">\n        <label>Type</label>\n        <select [(ngModel)]=\"sensor.sensorTypeOid\" name=\"sensorType\" type=\"input\" class=\"form-control\"\n          [disabled]=\"mode === 'READ'\" required>\n          <option></option>\n          <option *ngFor=\"let type of types\" [value]=\"type.oid\">{{type.name}}</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Pixel Size Width</label>\n        <input [(ngModel)]=\"sensor.pixelSizeWidth\" name=\"pixelSizeWidth\" type=\"number\" step=\"0\" class=\"form-control\" [disabled]=\"mode === 'READ'\" required />\n      </div>\n      <div class=\"form-group\">\n        <label>Pixel Size Height</label>\n        <input [(ngModel)]=\"sensor.pixelSizeHeight\" name=\"pixelSizeHeight\" type=\"number\" step=\"0\" class=\"form-control\" [disabled]=\"mode === 'READ'\" required />\n      </div>\n      <div class=\"form-group\">\n        <label>Sensor Width</label> (millimeters)\n        <input [(ngModel)]=\"sensor.sensorWidth\" name=\"sensorWidth\" type=\"number\" step=\"0\" class=\"form-control\" [disabled]=\"mode === 'READ'\" required />\n      </div>\n      <div class=\"form-group\">\n        <label>Sensor Height</label> (millimeters)\n        <input [(ngModel)]=\"sensor.sensorHeight\" name=\"sensorHeight\" type=\"number\" step=\"0\" class=\"form-control\" [disabled]=\"mode === 'READ'\" required />\n      </div>\n      <div class=\"form-group\">\n        <label>Wave Length</label>\n        <span *ngIf=\"sensor.wavelengths.length === 0\" class=\"error-message\">\n          A sensor requires at least one Wave Length\n        </span>\n        <div *ngFor=\"let wavelength of wavelengths\">\n          <boolean-field [value]=\"sensor.wavelengths && (-1 !== sensor.wavelengths.indexOf(wavelength.oid))\"\n            [label]=\"wavelength.name\" (valueChange)=\"updateSelectedWaveLength(wavelength, $event)\"\n            [disabled]=\"mode === 'READ'\"></boolean-field>\n        </div>\n      </div>\n      <div *ngIf=\"mode === 'READ' && sensor.platforms != null && sensor.platforms.length > 0\" class=\"form-group\">\n        <label>Used on Platforms</label>\n        <ul>\n          <li *ngFor=\"let platform of sensor.platforms\">\n            <a [routerLink]=\"['/site/platform', platform.oid]\">{{platform.name}}</a>\n          </li>\n        </ul>\n      </div>\n\n      <div *ngIf=\"isAdmin && mode === 'WRITE'\" class=\"btn-holder\" style=\"text-align: right;margin-bottom: 40px;\">\n        <button *ngIf=\"!newInstance\" type=\"button\" class=\"btn btn-default\" (click)=\"handleOnCancel()\">Cancel</button>\n        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\"\n          [disabled]=\"!ngForm.valid || sensor.wavelengths.length === 0\">Apply</button>\n      </div>\n      <div *ngIf=\"isAdmin && mode === 'READ'\" class=\"btn-holder\" style=\"text-align: right;margin-bottom: 40px;\">\n        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnEdit()\">Edit</button>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { Sensor } from '@site/model/sensor';\nimport { SensorService } from '@site/service/sensor.service';\nimport { ClassificationService, Endpoint } from '@site/service/classification.service';\nimport { Classification } from '@site/model/classification';\n\nimport { AuthService } from '@shared/service/auth.service';\n\n\n@Component({\n\tselector: 'sensor',\n\ttemplateUrl: './sensor.component.html',\n\tstyleUrls: []\n})\nexport class SensorComponent implements OnInit {\n    \n    isAdmin:boolean = false;\n    \n    original: Sensor;\n\tsensor: Sensor;\n\tnewInstance: boolean = false;\n\n\tmessage: string = null;\n\n\twavelengths: Classification[] = [];\n\ttypes: Classification[] = [];\n    mode: string = 'READ';\n\n\tconstructor(private service: SensorService, private classificationService: ClassificationService, private route: ActivatedRoute, private router: Router,\n\t\tprivate authService: AuthService) { \n            this.isAdmin = this.authService.isAdmin();\n        }\n\n\tngOnInit(): void {\n        const oid = this.route.snapshot.params['oid'];\n\n        if (oid === '__NEW__') {\n            this.service.newInstance().then((sensor: Sensor) => {\n                this.sensor = sensor;\n                this.newInstance = true;\n                this.mode = 'WRITE';\n            });\n        }\n        else {\n            this.service.get(oid).then((sensor: Sensor) => {\n                this.sensor = sensor;\n                this.original = JSON.parse(JSON.stringify(this.sensor));\n            });\n        }\n\n\t\tthis.classificationService.getAll(Endpoint.WAVE_LENGTH).then(wavelengths => {\n\t\t\tthis.wavelengths = wavelengths;\n\t\t});\n\n\t\tthis.classificationService.getAll(Endpoint.SENSOR_TYPE).then(types => {\n\t\t\tthis.types = types;\n\t\t});\n\t}\n\n\thandleOnSubmit(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.apply(this.sensor).then(data => {\n            // this.sensor = data;\n            // this.mode = 'READ';\n\n            // if (this.newInstance) {\n            //     this.router.navigate(['/site/sensor', data.oid]);\n\t\t\t// \tthis.newInstance = false;\n            //     this.original = data;\n            // }\n\t\t\tthis.router.navigate(['/site/equipment']);\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n    handleOnCancel(): void {\n        this.message = null;\n\n        this.sensor = JSON.parse(JSON.stringify(this.original));    \n        this.mode = 'READ';\n    }\n\n    handleOnEdit(): void {\n        this.mode = 'WRITE';\n    }\n\n\tupdateSelectedWaveLength(wavelength: Classification, checked: boolean): void {\n\n\t\tconst indexOf = this.sensor.wavelengths.findIndex(w => wavelength.oid === w);\n\n\t\tif (checked) {\n\n\t\t\tif (indexOf < 0) {\n\t\t\t\tthis.sensor.wavelengths.push(wavelength.oid);\n\n\t\t\t}\n\t\t} else {\n\t\t\tif (indexOf > -1) {\n\t\t\t\tthis.sensor.wavelengths.splice(indexOf, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams, HttpBackend } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\nimport { HttpBackendClient } from '@shared/service/http-backend-client.service';\n\nimport { PageResult } from '@shared/model/page';\nimport { Platform } from '../model/platform';\nimport { GenericTableService } from '@shared/model/generic-table';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class PlatformService implements GenericTableService {\n\n    constructor(private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService) { }\n\n    page(criteria: Object): Promise<PageResult<Platform>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set('criteria', JSON.stringify(criteria));\n\n        return this.http\n            .get<PageResult<Platform>>(acp + '/platform/page', { params: params })\n            .toPromise();\n    }\n\n    getAll(): Promise<{ oid: string, name: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        this.eventService.start();\n\n        return this.http\n            .get<{ oid: string, name: string }[]>(acp + '/platform/get-all', { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n\n    get(oid: string): Promise<Platform> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<Platform>(acp + '/platform/get', JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    newInstance(): Promise<Platform> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<Platform>(acp + '/platform/newInstance', JSON.stringify({}), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(oid: string): Promise<void> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(acp + '/platform/remove', JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(platform: Platform): Promise<Platform> {\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<Platform>(acp + '/platform/apply', JSON.stringify({ platform: platform }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n}","<div>\n<!-- \t<uasdm-header></uasdm-header> -->\n\n<!-- \t<div id=\"app-container\" class=\"container\"> -->\n\n\t\t<h2>Platforms</h2>\n\n\t\t<generic-table *ngIf=\"config != null\" [cols]=\"cols\" [config]=\"config\" [refresh]=\"refresh\" (click)=\"onClick($event)\"></generic-table>\t\t\n<!-- \t</div> -->\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\n\nimport { Platform } from '@site/model/platform';\nimport { PlatformService } from '@site/service/platform.service';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from '@shared/model/generic-table';\n\n@Component({\n    selector: 'platforms',\n    templateUrl: './platforms.component.html',\n    styles: ['./platforms.css']\n})\nexport class PlatformsComponent implements OnInit {\n    bsModalRef: BsModalRef;\n    message: string = null;\n\n    config: GenericTableConfig;\n    cols: GenericTableColumn[] = [\n        { header: 'Name', field: 'name', type: 'TEXT', sortable: true },\n        { header: 'Description', field: 'description', type: 'TEXT', sortable: true },\n        { header: '', type: 'ACTIONS', sortable: false },\n    ];\n    refresh: Subject<void>;\n\n    constructor(private service: PlatformService, private router: Router, private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n        this.config = {\n            service: this.service,\n            remove: true,\n            view: true,\n            create: true,\n            label: 'Platform',\n            sort: {field: 'name', order: 1}\n        }\n\n        this.refresh = new Subject<void>();\n    }\n\n    onClick(event: TableEvent): void {\n        if (event.type === 'view') {\n            this.onView(event.row as Platform);\n        }\n        else if (event.type === 'remove') {\n            this.onRemove(event.row as Platform);\n        }\n        else if (event.type === 'create') {\n            this.newInstance();\n        }\n    }\n\n    remove(platform: Platform): void {\n        this.service.remove(platform.oid).then(response => {\n            this.refresh.next();\n        });\n    }\n\n    onRemove(platform: Platform): void {\n        this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.message = \"Are you sure you want to remove the platform [\" + platform.name + \"]\";\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = \"Delete\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.remove(platform);\n        });\n    }\n\n    onView(platform: Platform): void {\n        this.router.navigate(['/site/platform', platform.oid]);\n    }\n\n    newInstance(): void {\n        this.router.navigate(['/site/platform', '__NEW__']);\n    }\n}\n","<div>\n  <uasdm-header></uasdm-header>\n\n  <div id=\"app-container\" class=\"container\">\n\n    <div *ngIf=\"platform != null\" class=\"modal-body\">\n      <div *ngIf=\"message != null\" class=\"error-container\">\n        <div class=\"label-holder\">\n          <strong>Error</strong>\n        </div>\n        <div class=\"holder\">\n          <div>\n            <p class=\"error-message\">{{message}}</p>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"modal-title-container\">\n        <h3>Platform</h3>\n      </div>\n\n      <form #ngForm=\"ngForm\">\n        <div class=\"form-group\">\n          <label>Name</label>\n          <input [(ngModel)]=\"platform.name\" name=\"name\" type=\"input\" class=\"form-control\" placeholder=\"Name\"\n            [disabled]=\"mode === 'READ'\" required />\n        </div>\n        <div class=\"form-group\">\n          <label>Description</label>\n          <textarea [(ngModel)]=\"platform.description\" [disabled]=\"mode === 'READ'\" name=\"description\" type=\"input\"\n            class=\"form-control\" placeholder=\"Description\">\n      </textarea>\n        </div>\n        <div class=\"form-group\">\n          <label>Type</label>\n          <select [(ngModel)]=\"platform.platformTypeOid\" [disabled]=\"mode === 'READ'\" name=\"platformType\" type=\"input\"\n            class=\"form-control\" placeholder=\"Type\" required>\n            <option></option>\n            <option *ngFor=\"let type of types\" [value]=\"type.oid\">{{type.name}}</option>\n          </select>\n        </div>\n        <div class=\"form-group\">\n          <label>Manufacturer</label>\n          <select [(ngModel)]=\"platform.manufacturer\" [disabled]=\"mode === 'READ'\" name=\"manufacturer\" type=\"input\"\n            class=\"form-control\" placeholder=\"Type\" required>\n            <option></option>\n            <option *ngFor=\"let manufacturer of manufacturers\" [value]=\"manufacturer.oid\">{{manufacturer.name}}\n            </option>\n          </select>\n        </div>\n        <div *ngIf=\"mode === 'WRITE'\" class=\"form-group\">\n          <label>Sensors</label>\n          <span *ngIf=\"platform.sensors.length === 0\" class=\"error-message\">\n            A platform requires at least one sensor\n          </span>\n\n          <div *ngFor=\"let sensor of sensors\">\n            <boolean-field [value]=\"platform.sensors && (-1 !== platform.sensors.indexOf(sensor.oid))\"\n              [label]=\"sensor.name\" (valueChange)=\"updateSelectedSensor(sensor, $event)\">\n            </boolean-field>\n          </div>\n        </div>\n        <div *ngIf=\"mode === 'READ'\" class=\"form-group\">\n          <label>Sensors</label>\n          <ul>\n            <li *ngFor=\"let oid of platform.sensors\">\n              <a [routerLink]=\"['/site/sensor', oid]\">{{getSensorName(oid)}}</a>\n            </li>\n          </ul>\n        </div>\n        <div *ngIf=\"isAdmin && mode === 'WRITE'\" class=\"btn-holder\" style=\"text-align: right;margin-bottom: 40px;\">\n          <button *ngIf=\"!newInstance\" type=\"button\" class=\"btn btn-default\" (click)=\"handleOnCancel()\">Cancel</button>\n          <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\"\n            [disabled]=\"!ngForm.valid || platform.sensors.length === 0\">Apply</button>\n        </div>\n        <div *ngIf=\"isAdmin && mode === 'READ'\" class=\"btn-holder\" style=\"text-align: right;margin-bottom: 40px;\">\n          <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnEdit()\">Edit</button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { Platform } from '@site/model/platform';\nimport { PlatformService } from '@site/service/platform.service';\nimport { Classification } from '@site/model/classification';\nimport { ClassificationService, Endpoint } from '@site/service/classification.service';\nimport { SensorService } from '@site/service/sensor.service';\nimport { Sensor } from '@site/model/sensor';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { AuthService } from '@shared/service/auth.service';\n\n@Component({\n    selector: 'platform',\n    templateUrl: './platform.component.html',\n    styleUrls: []\n})\nexport class PlatformComponent implements OnInit {\n    \n    isAdmin:boolean = false;\n    \n    original: Platform;\n    platform: Platform;\n    newInstance: boolean = false;\n\n    message: string = null;\n\n    manufacturers: Classification[] = [];\n    types: Classification[] = [];\n    sensors: { oid: string, name: string }[] = [];\n    mode: string = 'READ';\n\n    constructor(private service: PlatformService, private sensorService: SensorService,\n        private classificationService: ClassificationService, private authService: AuthService,\n        private route: ActivatedRoute, private router: Router) { \n            \n        this.isAdmin = this.authService.isAdmin(); \n    }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.params['oid'];\n\n        if (oid === '__NEW__') {\n            this.service.newInstance().then((platform: Platform) => {\n                this.platform = platform;\n                this.newInstance = true;\n                this.mode = 'WRITE';\n            });\n        }\n        else {\n            this.service.get(oid).then((platform: Platform) => {\n                this.platform = platform;\n                this.original = JSON.parse(JSON.stringify(this.platform));\n            });\n        }\n\n        this.classificationService.getAll(Endpoint.PLATFORM_MANUFACTURER).then(manufacturers => {\n            this.manufacturers = manufacturers;\n        });\n\n        this.classificationService.getAll(Endpoint.PLATFORM_TYPE).then(types => {\n            this.types = types;\n        });\n\n        this.sensorService.getAll().then(sensors => {\n            this.sensors = sensors;\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.service.apply(this.platform).then(data => {\n            // this.platform = data;\n            // this.mode = 'READ';\n\n            // if (this.newInstance) {\n            //     this.router.navigate(['/site/platform', data.oid]);\n            //     this.newInstance = false;\n            //     this.original = data;\n            // }\n            this.router.navigate(['/site/equipment']);\n\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleOnCancel(): void {\n        this.message = null;\n\n        this.platform = JSON.parse(JSON.stringify(this.original));\n        this.mode = 'READ';\n    }\n\n    handleOnEdit(): void {\n        this.mode = 'WRITE';\n    }\n\n    updateSelectedSensor(sensor: Classification, checked: boolean): void {\n\n        const indexOf = this.platform.sensors.findIndex(w => sensor.oid === w);\n\n        if (checked) {\n\n            if (indexOf < 0) {\n                this.platform.sensors.push(sensor.oid);\n\n            }\n        } else {\n            if (indexOf > -1) {\n                this.platform.sensors.splice(indexOf, 1);\n            }\n        }\n    }\n\n    getSensorName(oid: string): string {\n        const index = this.sensors.findIndex(s => s.oid === oid);\n\n        if (index !== -1) {\n            return this.sensors[index].name;\n        }\n\n        return '';\n    }\n\n\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div>\n<!-- \t<uasdm-header></uasdm-header> -->\n\n<!-- \t<div id=\"app-container\" class=\"container\"> -->\n\n\t\t<h4>{{_metadata.title}}</h4>\n\n\t\t<generic-table *ngIf=\"config != null\" [cols]=\"cols\" [config]=\"config\" [refresh]=\"refresh\" [baseUrl]=\"_metadata.baseUrl\" (click)=\"onClick($event)\"></generic-table>\t\t\n<!-- \t</div> -->\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\n\nimport { Classification, ClassificationComponentMetadata } from '@site/model/classification';\nimport { Router } from '@angular/router';\nimport { ClassificationService } from '@site/service/classification.service';\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from '@shared/model/generic-table';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'classifications',\n    templateUrl: './classifications.component.html',\n    styles: ['./classifications.css']\n})\nexport class ClassificationsComponent implements OnInit {\n\n    _metadata: ClassificationComponentMetadata = {label: \"\", title: \"\", baseUrl: \"\"};\n    @Input() set metadata(value: ClassificationComponentMetadata) {\n        this._metadata.title = value.title;\n        this._metadata.label = value.label;\n        this._metadata.baseUrl = value.baseUrl;\n        \n        this.config = {\n                service: this.service,\n                remove: true,\n                view: true,\n                create: true,\n                label: value.label\n            }\n    }\n\n    bsModalRef: BsModalRef;\n    message: string = null;\n\n    config: GenericTableConfig;\n    cols: GenericTableColumn[] = [\n        { header: 'Name', field: 'name', type: 'TEXT', sortable: true },\n        { header: '', type: 'ACTIONS', sortable: false },\n    ];\n    refresh: Subject<void>;\n\n    constructor(private router: Router, private service: ClassificationService, private modalService: BsModalService) {\n    }\n\n    ngOnInit(): void {\n//        this.activatedroute.data.subscribe(data => {\n//            this.metadata = data as ClassificationComponentMetadata;\n//            console.log(data)\n//\n////            if (this.metadata.columns === undefined) {\n////                this.metadata.columns = [];\n////            }\n////\n////            this.config = {\n////                service: this.service,\n////                remove: true,\n////                view: true,\n////                create: true,\n////                label: this.metadata.label\n////            }\n//\n//            this.refresh = new Subject<void>();\n//\n//            // this.service.page(this.metadata.baseUrl, 1).then(res => {\n//            //     this.res = res;\n//            // });\n//\n//        })\n    }\n\n    onClick(event: TableEvent): void {\n        if (event.type === 'view') {\n            this.onView(event.row as Classification);\n        }\n        else if (event.type === 'remove') {\n            this.onRemove(event.row as Classification);\n        }\n        else if (event.type === 'create') {\n            this.newInstance();\n        }\n    }\n\n    remove(classification: Classification): void {\n        this.service.remove(this._metadata.baseUrl, classification.oid).then(response => {\n            // this.res.resultSet = this.res.resultSet.filter(h => h.oid !== classification.oid);\n            this.refresh.next();\n        });\n    }\n\n    onRemove(classification: Classification): void {\n        this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.message = \"Are you sure you want to remove the \" + this._metadata.label + \" [\" + classification.name + \"]\";\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = \"Delete\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.remove(classification);\n        });\n    }\n\n    onView(classification: Classification): void {\n        this.router.navigate(['/site/' + this._metadata.baseUrl, classification.oid]);\n    }\n\n    newInstance(): void {\n        this.router.navigate(['/site/' + this._metadata.baseUrl, '__NEW__']);\n    }\n}\n","<div>\n  <uasdm-header></uasdm-header>\n\n  <div id=\"app-container\" class=\"container\">\n    <div *ngIf=\"message != null\" class=\"error-container\">\n      <div class=\"label-holder\">\n        <strong>Error</strong>\n      </div>\n      <div class=\"holder\">\n        <div>\n          <p class=\"error-message\">{{message}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"modal-title-container\">\n      <h3>{{metadata.title}}</h3>\n    </div>\n\n    <form #ngForm=\"ngForm\">\n      <div class=\"form-group\">\n        <label>Name</label>\n        <input [(ngModel)]=\"classification.name\" name=\"label\" type=\"input\" class=\"form-control\" placeholder=\"Name\"\n          [disabled]=\"mode === 'READ'\" required />\n      </div>\n      <div *ngFor=\"let column of metadata.columns\" class=\"form-group\">\n        <label></label>\n        <boolean-field *ngIf=\"column.type === 'boolean'\" [value]=\"classification[column.name]\" [label]=\"column.label\"\n          (valueChange)=\"classification[column.name] = $event\" [disabled]=\"mode === 'READ'\">\n        </boolean-field>\n      </div>\n      <div *ngIf=\"mode === 'WRITE'\" class=\"btn-holder\" style=\"text-align: right;\">\n        <button *ngIf=\"!newInstance\" type=\"button\" class=\"btn btn-default\" (click)=\"handleOnCancel()\">Cancel</button>\n        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\"\n          [disabled]=\"!ngForm.valid\">Apply</button>\n      </div>\n      <div *ngIf=\"mode === 'READ'\" class=\"btn-holder\" style=\"text-align: right;\">\n        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnEdit()\">Edit</button>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { Classification, ClassificationComponentMetadata } from '@site/model/classification';\nimport { ClassificationService } from '@site/service/classification.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n\tselector: 'classification',\n\ttemplateUrl: './classification.component.html',\n\tstyleUrls: []\n})\nexport class ClassificationComponent implements OnInit {\n\n\tmetadata: ClassificationComponentMetadata;\n\tclassification: Classification;\n\toriginal: Classification;\n\tnewInstance: boolean = false;\n\n\tmessage: string = null;\n\n\tmode: string = 'READ';\n\n\tconstructor(private service: ClassificationService, private route: ActivatedRoute, private router: Router) { }\n\n\tngOnInit(): void {\n        this.route.data.subscribe(data => {\n            this.metadata = data as ClassificationComponentMetadata;\n\n\t\t\tconst oid = this.route.snapshot.params['oid'];\n\n\t\t\tif (oid === '__NEW__') {\n\t\t\t\tthis.service.newInstance(this.metadata.baseUrl).then((classification: Classification) => {\n\t\t\t\t\tthis.classification = classification;\n\t\t\t\t\tthis.newInstance = true;\n\t\t\t\t\tthis.mode = 'WRITE';\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.service.get(this.metadata.baseUrl, oid).then((classification: Classification) => {\n\t\t\t\t\tthis.classification = classification;\n\t\t\t\t\tthis.original = JSON.parse(JSON.stringify(this.classification));\n\t\t\t\t});\n\t\t\t}\t\n        })\n\t}\n\n\thandleOnSubmit(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.apply(this.metadata.baseUrl, this.classification).then(data => {\n            this.classification = data;\n            this.mode = 'READ';\n\n            if (this.newInstance) {\n                this.router.navigate(['/site/' + this.metadata.baseUrl, data.oid]);\n\t\t\t\tthis.newInstance = false;\n                this.original = data;\n            }\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n    handleOnCancel(): void {\n        this.message = null;\n\n        this.classification = JSON.parse(JSON.stringify(this.original));    \n        this.mode = 'READ';\n    }\n\n    handleOnEdit(): void {\n        this.mode = 'WRITE';\n    }\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { ClassificationsComponent } from '@site/component/classification/classifications.component';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\ndeclare let acp: string;\n\n@Component({\n    selector: 'equipment',\n    templateUrl: './equipment.component.html',\n    styleUrls: ['./equipment.css']\n})\nexport class EquipmentComponent implements OnInit {\n\n    bsModalRef: BsModalRef;\n    \n    isSensorTypeCollapsed: boolean = true;\n    isSensorWavelengthCollapsed: boolean = true;\n    isPlatformTypeCollapsed: boolean = true;\n    isPlatformManufacturerCollapsed: boolean = true;\n    \n    constructor(private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n    }\n    \n\n}\n","<div>\n    <uasdm-header></uasdm-header>\n\n    <div id=\"app-container\" class=\"container\">\n    \n        <h2>Equipment Management</h2>\n        \n        <h3>Sensor Options</h3>\n        <section style=\"padding:20px;border:solid 1px lightgrey;background:#efefef;\">\n            \n            <a (click)=\"isSensorTypeCollapsed = !isSensorTypeCollapsed\">\n                <h4><i class=\"fa fa-fw collapsible-link\" [ngClass]=\"{'fa-chevron-down': !isSensorTypeCollapsed, 'fa-chevron-right': isSensorTypeCollapsed}\"></i>Sensor Types</h4>\n            </a>\n            <div id=\"sensorTypeCollabseContainer\" [collapse]=\"isSensorTypeCollapsed\">\n                <classifications [metadata]='{title: \"\", label: \"type\", baseUrl: \"/sensor-type\"}'></classifications>\n            </div>\n            \n            <a (click)=\"isSensorWavelengthCollapsed = !isSensorWavelengthCollapsed\">\n                <h4><i class=\"fa fa-fw collapsible-link\" [ngClass]=\"{'fa-chevron-down': !isSensorWavelengthCollapsed, 'fa-chevron-right': isSensorWavelengthCollapsed}\"></i>Wave Lengths</h4>\n            </a>\n            <div id=\"sensorWavelengthCollabseContainer\" [collapse]=\"isSensorWavelengthCollapsed\">\n                <classifications [metadata]='{title: \"\", label: \"wave length\", baseUrl: \"/wave-length\"}'></classifications>\n            </div>\n            \n        </section>\n\n        <sensors></sensors>\n        \n        <br><br>\n        \n        <h3>Plaform Options</h3>\n        <section style=\"padding:20px;border:solid 1px lightgrey;background:#efefef;\">\n        \n            <a (click)=\"isPlatformTypeCollapsed = !isPlatformTypeCollapsed\">\n                <h4><i class=\"fa fa-fw collapsible-link\" [ngClass]=\"{'fa-chevron-down': !isPlatformTypeCollapsed, 'fa-chevron-right': isPlatformTypeCollapsed}\"></i>Platform Types</h4>\n            </a>\n            <div id=\"platformTypeCollabseContainer\" [collapse]=\"isPlatformTypeCollapsed\">\n                <classifications [metadata]='{title: \"Platform Type\", label: \"type\", baseUrl: \"/platform-type\"}'></classifications>\n            </div>\n            \n            <a (click)=\"isPlatformManufacturerCollapsed = !isPlatformManufacturerCollapsed\">\n                 <h4><i class=\"fa fa-fw collapsible-link\" [ngClass]=\"{'fa-chevron-down': !isPlatformManufacturerCollapsed, 'fa-chevron-right': isPlatformManufacturerCollapsed}\"></i>Platform Manufacturer</h4>\n            </a>\n            <div id=\"platformManufacturerCollabseContainer\" [collapse]=\"isPlatformManufacturerCollapsed\">\n                <classifications [metadata]='{title: \"Platform Manufacturer\", label: \"manufacturer\", baseUrl: \"/platform-manufacturer\"}'></classifications>\n            </div>\n            \n        </section>\n        \n        <platforms></platforms>\n        \n        <br><br>\n        \n    </div>\n</div>","import { Directive, Input } from \"@angular/core\";\r\nimport { AbstractControl, NG_VALIDATORS, Validator, ValidatorFn } from \"@angular/forms\";\r\n\r\nexport function forbiddenNameValidator( nameRe: RegExp ): ValidatorFn {\r\n    return ( control: AbstractControl ): { [key: string]: any } | null => {\r\n        const forbidden = nameRe.test( control.value );\r\n        return forbidden ? { 'forbiddenName': { value: control.value } } : null;\r\n    };\r\n}\r\n\r\n@Directive( {\r\n    selector: '[forbiddenName]',\r\n    providers: [{ provide: NG_VALIDATORS, useExisting: ForbiddenNameDirective, multi: true }]\r\n} )\r\nexport class ForbiddenNameDirective implements Validator {\r\n    validate( control: AbstractControl ): { [key: string]: any } | null {\r\n        return forbiddenNameValidator( new RegExp( /[\\W<>\\-+=!@#$%^&*?/\\\\']/gm  ) )( control );\r\n    }\r\n  }","\nimport { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[OnlyNumber]' \n})\nexport class OnlyNumber {\n\n  constructor(private el: ElementRef) { }\n\n  @Input() OnlyNumber: boolean;\n \n  @HostListener('keydown', ['$event']) onKeyDown(event:any) {\n    let e = <KeyboardEvent> event;\n    if (this.OnlyNumber) {\n      if ([46, 8, 9, 27, 13, 110, 190].indexOf(e.keyCode) !== -1 ||\n        // Allow: Ctrl+A\n        (e.keyCode == 65 && e.ctrlKey === true) ||\n        // Allow: Ctrl+C\n        (e.keyCode == 67 && e.ctrlKey === true) ||\n        // Allow: Ctrl+X\n        (e.keyCode == 88 && e.ctrlKey === true) ||\n        // Allow: home, end, left, right\n        (e.keyCode >= 35 && e.keyCode <= 39)) {\n          // let it happen, don't do anything\n          return;\n        }\n        // Ensure that it is a number and stop the keypress\n        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n            e.preventDefault();\n        }\n      }\n  }\n}\n\n\n","import { Injectable } from \"@angular/core\";\r\nimport { CanDeactivate } from \"@angular/router\";\r\n\r\nimport { UploadComponent } from \"../component/upload.component\";\r\n\r\n@Injectable()\r\nexport class CanDeactivateGuardService implements CanDeactivate<UploadComponent> {\r\n  canDeactivate(component: UploadComponent): boolean {\r\n   \r\n    if(component.canDeactivate()){\r\n        if (confirm(\"An upload is currently in progress. Are you sure you want to leave?\")) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n  }\r\n}","<div>\n<!-- \t<uasdm-header></uasdm-header> -->\n\n<!-- \t<div id=\"app-container\" class=\"container\"> -->\n\n\t\t<h2>UAVs</h2>\n\n\t\t<generic-table *ngIf=\"config != null\" [cols]=\"cols\" [config]=\"config\" [refresh]=\"refresh\" (click)=\"onClick($event)\"></generic-table>\t\t\n<!-- \t</div> -->\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\n\nimport { UAV } from '@site/model/uav';\nimport { UAVService } from '@site/service/uav.service';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from '@shared/model/generic-table';\n\n@Component({\n    selector: 'uavs',\n    templateUrl: './uavs.component.html',\n    styles: ['./uavs.css']\n})\nexport class UAVsComponent implements OnInit {\n    bsModalRef: BsModalRef;\n    message: string = null;\n\n    config: GenericTableConfig;\n    cols: GenericTableColumn[] = [\n        { header: 'Serial Number', field: 'serialNumber', type: 'TEXT', sortable: true },\n        { header: 'FAA Id Number', field: 'faaNumber', type: 'TEXT', sortable: true },\n        { header: 'Description', field: 'description', type: 'TEXT', sortable: true },\n        { header: 'Bureau', field: 'bureau', type: 'TEXT', sortable: true },\n        { header: 'Platform', field: 'platform', type: 'TEXT', sortable: true },\n        { header: '', type: 'ACTIONS', sortable: false },\n    ];\n    refresh: Subject<void>;\n\n    constructor(private service: UAVService, private router: Router, private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n        this.config = {\n            service: this.service,\n            remove: true,\n            view: true,\n            create: true,\n            label: 'UAV'\n        }\n\n        this.refresh = new Subject<void>();\n    }\n\n    onClick(event: TableEvent): void {\n        if (event.type === 'view') {\n            this.onView(event.row as UAV);\n        }\n        else if (event.type === 'remove') {\n            this.onRemove(event.row as UAV);\n        }\n        else if (event.type === 'create') {\n            this.newInstance();\n        }\n    }\n\n    remove(uav: UAV): void {\n        this.service.remove(uav.oid).then(response => {\n            this.refresh.next();\n        });\n    }\n\n    onRemove(uav: UAV): void {\n        this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.message = \"Are you sure you want to remove the UAV [\" + uav.serialNumber + \"]\";\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = \"Delete\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.remove(uav);\n        });\n    }\n\n    onView(uav: UAV): void {\n        this.router.navigate(['/site/uav', uav.oid]);\n    }\n\n    newInstance(): void {\n        this.router.navigate(['/site/uav', '__NEW__']);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'uavs-page',\n    templateUrl: './uavs-page.component.html'\n})\nexport class UAVsPageComponent implements OnInit {\n\n    constructor() { }\n\n    ngOnInit(): void {\n        \n    }\n\n}\n","<div>\n\t<uasdm-header></uasdm-header>\n\n\t<div id=\"app-container\" class=\"container\">\n\n\t\t<uavs></uavs>\t\t\n\t</div>\n</div>","<div>\n  <uasdm-header></uasdm-header>\n\n  <div id=\"app-container\" class=\"container\">\n\n    <div *ngIf=\"uav != null\" class=\"modal-body\">\n      <div *ngIf=\"message != null\" class=\"error-container\">\n        <div class=\"label-holder\">\n          <strong>Error</strong>\n        </div>\n        <div class=\"holder\">\n          <div>\n            <p class=\"error-message\">{{message}}</p>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"modal-title-container\">\n        <h3>UAV</h3>\n      </div>\n\n      <form #ngForm=\"ngForm\">\n        <div class=\"form-group\">\n          <label>Platform</label>\n          <select *ngIf=\"mode !== 'READ'\" [(ngModel)]=\"uav.platform\" name=\"platform\" type=\"input\"\n            class=\"form-control\" required>\n            <option></option>\n            <option *ngFor=\"let platform of platforms\" [value]=\"platform.oid\">{{platform.name}}</option>\n          </select>\n          <ng-container *ngIf=\"mode === 'READ'\">\n            <div *ngFor=\"let platform of platforms | filter:'oid':uav.platform\">\n              <a [routerLink]=\"['/site/platform', platform.oid]\">{{platform.name}}</a>\n            </div>\n          </ng-container>          \n        </div>\n        <div class=\"form-group\">\n          <label>Serial Number</label>\n          <input [(ngModel)]=\"uav.serialNumber\" name=\"serialNumber\" type=\"input\" class=\"form-control\"\n            placeholder=\"Serial Number\" [disabled]=\"mode === 'READ'\" required />\n        </div>\n        <div class=\"form-group\">\n          <label>FAA Number</label>\n          <input [(ngModel)]=\"uav.faaNumber\" name=\"faaNumber\" type=\"input\" class=\"form-control\" placeholder=\"FAA Number\"\n            [disabled]=\"mode === 'READ'\" required max=\"10\" maxlength=\"10\" />\n        </div>\n        <div class=\"form-group\">\n          <label>Description</label>\n          <textarea [(ngModel)]=\"uav.description\" [disabled]=\"mode === 'READ'\" name=\"description\" type=\"input\"\n            class=\"form-control\" placeholder=\"Description\"></textarea>\n        </div>\n        <div class=\"form-group\">\n          <label>Bureau</label>\n          <select [(ngModel)]=\"uav.bureau\" [disabled]=\"mode === 'READ'\" name=\"bureau\" type=\"input\" class=\"form-control\"\n            required>\n            <option></option>\n            <option *ngFor=\"let bureau of bureaus\" [value]=\"bureau.value\">\n              {{bureau.label}}\n            </option>\n          </select>\n        </div>\n        <div *ngIf=\"isAdmin && mode === 'WRITE'\" class=\"btn-holder\" style=\"text-align: right;\">\n          <button *ngIf=\"!newInstance\" type=\"button\" class=\"btn btn-default\" (click)=\"handleOnCancel()\">Cancel</button>\n          <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\"\n            [disabled]=\"!ngForm.valid\">Apply</button>\n        </div>\n        <div *ngIf=\"isAdmin && mode === 'READ'\" class=\"btn-holder\" style=\"text-align: right;\">\n          <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnEdit()\">Edit</button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { UAV } from '@site/model/uav';\nimport { UAVService } from '@site/service/uav.service';\nimport { PlatformService } from '@site/service/platform.service';\nimport { AuthService } from '@shared/service/auth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n    selector: 'uav',\n    templateUrl: './uav.component.html',\n    styleUrls: []\n})\nexport class UAVComponent implements OnInit {\n    \n    isAdmin:boolean = false;\n    \n    original: UAV;\n    uav: UAV;\n    newInstance: boolean = false;\n\n    message: string = null;\n\n    bureaus: { value: string, label: string }[] = [];\n    platforms: { oid: string, name: string }[] = [];\n    mode: string = 'READ';\n\n    constructor(private service: UAVService, private platformService: PlatformService, private authService: AuthService,\n        private route: ActivatedRoute, private router: Router\n    ) {\n        this.isAdmin = this.authService.isAdmin();\n     }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.params['oid'];\n\n        if (oid === '__NEW__') {\n            this.service.newInstance().then((resp: { uav: UAV, bureaus: { value: string, label: string }[] }) => {\n                this.uav = resp.uav;\n                this.bureaus = resp.bureaus;\n                this.newInstance = true;\n                this.mode = 'WRITE';\n            });\n        }\n        else {\n            this.service.get(oid).then((resp: { uav: UAV, bureaus: { value: string, label: string }[] }) => {\n                this.uav = resp.uav;\n                this.bureaus = resp.bureaus;\n                this.original = JSON.parse(JSON.stringify(this.uav));\n            });\n        }\n\n        this.platformService.getAll().then(platforms => {\n            this.platforms = platforms;\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.service.apply(this.uav).then(data => {\n            this.uav = data;\n            this.mode = 'READ';\n\n            if (this.newInstance) {\n                this.router.navigate(['/site/uav', data.oid]);\n                this.newInstance = false;\n                this.original = data;\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleOnCancel(): void {\n        this.message = null;\n\n        this.uav = JSON.parse(JSON.stringify(this.original));\n        this.mode = 'READ';\n    }\n\n    handleOnEdit(): void {\n        this.mode = 'WRITE';\n    }\n\n\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\nimport { EventService } from '@shared/service/event.service';\nimport { HttpBackendClient } from '@shared/service/http-backend-client.service';\n\nimport { PageResult } from '@shared/model/page';\nimport { Report } from '@site/model/report';\nimport { GenericTableService } from '@shared/model/generic-table';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ReportService implements GenericTableService {\n\n    constructor(private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService) { }\n\n    page(criteria: Object): Promise<PageResult<Report>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set('criteria', JSON.stringify(criteria));\n\n        return this.http\n            .get<PageResult<Report>>(acp + '/collection-report/page', { params: params })\n            .toPromise();\n    }\n}","<div>\n\t<uasdm-header></uasdm-header>\n\n\t<div id=\"app-container\" class=\"container-fluid\">\n\n\t\t<h2>Report</h2>\n\n\t\t<div class=\"row\">\n            <input class=\"btn btn-primary pull-right\" style=\"margin-bottom:10px;margin-right:10px;\" type=\"submit\" value=\"Export CSV\" (click)=\"onExportCSV()\">\n        </div>\n\n        <div class=\"row\">\n\t\t\t<generic-table *ngIf=\"config != null\" [cols]=\"cols\" [config]=\"config\" (click)=\"onClick($event)\"></generic-table>\t\t\n        </div>\n\n\n\t</div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ReportService } from '@site/service/report.service';\nimport { ProductService } from '@site/service/product.service';\nimport { BsModalService } from 'ngx-bootstrap';\nimport { ProductModalComponent } from '../modal/product-modal.component';\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from '@shared/model/generic-table';\n\ndeclare var acp: any;\n\n@Component({\n    selector: 'reports',\n    templateUrl: './reports.component.html',\n    styles: ['./reports.css']\n})\nexport class ReportsComponent implements OnInit {\n    message: string = null;\n\n    config: GenericTableConfig;\n    cols: GenericTableColumn[] = [\n        {\n            header: 'Collection', field: 'collectionName', baseUrl: 'site/viewer/collection', urlField: 'collection', type: 'URL', sortable: true, columnType: (row: Object) => {\n                if (!row['exists']) {\n                    return 'TEXT';\n                }\n\n                return 'URL';\n            }\n        },\n        { header: 'Collection Owner', field: 'userName', type: 'TEXT', sortable: true },\n        { header: 'Collection Date', field: 'collectionDate', type: 'DATE', sortable: true },\n        { header: 'Mission', field: 'missionName', type: 'TEXT', sortable: true },\n        { header: 'Project', field: 'projectName', type: 'TEXT', sortable: true },\n        { header: 'Site', field: 'siteName', type: 'TEXT', sortable: true },\n        { header: 'Latitude', field: 'siteLatDecimalDegree', type: 'NUMBER', sortable: false, filter: false },\n        { header: 'Longitude', field: 'siteLongDecimalDegree', type: 'NUMBER', sortable: false, filter: false },\n        { header: 'Bureau', field: 'bureauName', type: 'TEXT', sortable: true },\n        { header: 'Platform', field: 'platformName', type: 'TEXT', sortable: true },\n        { header: 'Sensor', field: 'sensorName', type: 'TEXT', sortable: true },\n        { header: 'FAA Id Number', field: 'faaIdNumber', type: 'TEXT', sortable: true },\n        { header: 'Serial Number', field: 'serialNumber', type: 'TEXT', sortable: true },\n        { header: 'ODM Processing', field: 'odmProcessing', type: 'TEXT', sortable: false },\n        { header: 'RAW Images Count', field: 'rawImagesCount', type: 'NUMBER', sortable: false },\n        { header: 'EROS Metadata Complete', field: 'erosMetadataComplete', type: 'BOOLEAN', sortable: false },\n        { header: 'Video', field: 'video', type: 'BOOLEAN', sortable: false },\n        { header: 'Orthomosaic', field: 'orthomosaic', type: 'BOOLEAN', sortable: false },\n        { header: 'Point Cloud', field: 'pointCloud', type: 'BOOLEAN', sortable: false },\n        { header: 'Hillshade', field: 'hillshade', type: 'BOOLEAN', sortable: false },\n        { header: 'Products Shared', field: 'productsShared', type: 'BOOLEAN', sortable: false },\n        { header: 'Storage size', field: 'allStorageSize', type: 'NUMBER', sortable: true, filter: false },\n        { header: 'Number of Downloads', field: 'downloadCounts', type: 'NUMBER', sortable: true, filter: false },\n        { header: 'Date of Create', field: 'createDate', type: 'DATE', sortable: true, filter: false },\n        { header: 'Date of Delete', field: 'deleteDate', type: 'DATE', sortable: true, filter: false },\n        {\n            header: 'Product', field: 'product', text: 'View Product', type: 'CONSTANT', sortable: false, columnType: (row: Object) => {\n                if (row['product'] == null || row['product'].length === 0) {\n                    return 'NONE';\n                }\n\n                return 'CONSTANT';\n            }\n        },\n        {\n            header: 'Map Services', field: 'productURLs', type: 'STRING-ARRAY', sortable: false, columnType: (row: Object) => {\n                if (row['product'] == null || row['product'].length === 0) {\n                    return 'NONE';\n                }\n\n                return 'STRING-ARRAY';\n            }\n        },\n    ];\n\n    constructor(private service: ReportService, private pService: ProductService, private modalService: BsModalService) {\n    }\n\n    ngOnInit(): void {\n        this.config = {\n            service: this.service,\n            remove: false,\n            view: false,\n            create: false,\n            label: 'row'\n        }\n    }\n\n    onExportCSV(): void {\n        window.open(acp + '/collection-report/export-csv', '_blank');\n    }\n\n    onClick(event: TableEvent): void {\n        if (event.type === 'custom') {\n            if (event.col.field === 'product') {\n\n                const oid = event.row['product'];\n\n                if (oid != null && oid.length > 0) {\n                    this.pService.getDetail(oid, 1, 20).then(detail => {\n                        const bsModalRef = this.modalService.show(ProductModalComponent, {\n                            animated: true,\n                            backdrop: true,\n                            ignoreBackdropClick: true,\n                            'class': 'product-info-modal'\n                        });\n                        bsModalRef.content.init(detail);\n                    });\n                }\n            }\n\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ProjectsComponent } from './component/projects.component';\nimport { UploadComponent } from './component/upload.component';\nimport { TasksComponent } from './component/tasks.component';\nimport { SensorsComponent } from './component/sensor/sensors.component';\nimport { PlatformsComponent } from './component/platform/platforms.component';\n\nimport { CanDeactivateGuardService } from \"./service/can.deactivate.guard.service\";\nimport { AuthGuard, AdminGuardService } from '../shared/service/guard.service';\nimport { PlatformComponent } from './component/platform/platform.component';\nimport { SensorComponent } from './component/sensor/sensor.component';\nimport { ClassificationsComponent } from './component/classification/classifications.component';\nimport { Endpoint } from './service/classification.service';\nimport { ClassificationComponent } from './component/classification/classification.component';\nimport { UAVsComponent } from './component/uav/uavs.component';\nimport { UAVsPageComponent } from './component/uav/uavs-page.component';\nimport { UAVComponent } from './component/uav/uav.component';\nimport { ReportsComponent } from './component/report/reports.component';\nimport { EquipmentComponent } from './component/equipment/equipment.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        canActivate: [AuthGuard],\n        component: ProjectsComponent\n    },\n    {\n        path: 'viewer',\n        canActivate: [AuthGuard],\n        component: ProjectsComponent\n    },\n    {\n        path: 'viewer/:action/:oid',\n        canActivate: [AuthGuard],\n        component: ProjectsComponent\n    },\n    {\n        path: 'upload',\n        component: UploadComponent,\n        canDeactivate: [CanDeactivateGuardService]\n    },\n    {\n        path: 'tasks',\n        canActivate: [AuthGuard],\n        component: TasksComponent\n    },\n    {\n        path: 'report',\n        canActivate: [AuthGuard],\n        component: ReportsComponent\n    },\n    {\n        path: 'sensor/:oid',\n        canActivate: [AuthGuard],\n        component: SensorComponent,\n    },\n    {\n        path: 'platform/:oid',\n        canActivate: [AuthGuard],\n        component: PlatformComponent,\n    },\n    {\n        path: 'platform-manufacturer/:oid',\n        canActivate: [AdminGuardService],\n        component: ClassificationComponent,\n        data: {\n            title: 'Platform Manufacturer',\n            label: 'manufacturer',\n            baseUrl: Endpoint.PLATFORM_MANUFACTURER\n        }\n    },\n    {\n        path: 'platform-type/:oid',\n        canActivate: [AdminGuardService],\n        component: ClassificationComponent,\n        data: {\n            title: 'Platform Type',\n            label: 'type',\n            baseUrl: Endpoint.PLATFORM_TYPE\n        }\n    },\n    {\n        path: 'sensor-type/:oid',\n        canActivate: [AdminGuardService],\n        component: ClassificationComponent,\n        data: {\n            title: 'Sensor Type',\n            label: 'type',\n            baseUrl: Endpoint.SENSOR_TYPE,\n            columns: [\n                {\n                    name: 'isMultispectral',\n                    label: 'Is Multispectral',\n                    type: 'boolean'\n                }\n            ]\n        }\n\n    },\n    {\n        path: 'wave-length/:oid',\n        canActivate: [AdminGuardService],\n        component: ClassificationComponent,\n        data: {\n            title: 'Wave Length',\n            label: 'wave length',\n            baseUrl: Endpoint.WAVE_LENGTH\n        }\n    },\n    {\n        path: 'uavs',\n        canActivate: [AdminGuardService],\n        component: UAVsPageComponent,\n    },\n    {\n        path: 'uav/:oid',\n        canActivate: [AuthGuard],\n        component: UAVComponent,\n    },\n    {\n        path: 'equipment',\n        canActivate: [AdminGuardService],\n        component: EquipmentComponent,\n        data: {}\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n    providers: [{ provide: LocationStrategy, useClass: HashLocationStrategy }]\n})\nexport class SiteRoutingModule { }","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n//import { TreeModule } from 'angular-tree-component';\n//import { ContextMenuModule } from 'ngx-contextmenu';\nimport { NgxFileDropModule } from 'ngx-file-drop';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { AccordionModule } from 'ngx-bootstrap/accordion';\nimport { TabsModule } from 'ngx-bootstrap/tabs';\nimport { AlertModule } from 'ngx-bootstrap/alert';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\nimport { MapAttributeComponent } from './component/map-attribute/map-attribute.component';\nimport { ProductPanelComponent } from './component/product-panel/product-panel.component';\nimport { EntityModalComponent } from './component/modal/entity-modal.component';\nimport { MetadataModalComponent } from './component/modal/metadata-modal.component';\nimport { ImagePreviewModalComponent } from './component/modal/image-preview-modal.component';\nimport { UploadModalComponent } from './component/modal/upload-modal.component';\nimport { CollectionModalComponent } from './component/modal/collection-modal.component';\nimport { AccessibleSupportModalComponent } from './component/modal/accessible-support-modal.component';\nimport { ProductModalComponent } from './component/modal/product-modal.component';\nimport { ProjectsComponent } from './component/projects.component';\nimport { UploadComponent } from './component/upload.component';\nimport { TasksComponent } from './component/tasks.component';\nimport { TasksPanelComponent } from './component/tasks/tasks-panel.component';\nimport { SensorsComponent } from './component/sensor/sensors.component';\nimport { SensorComponent } from './component/sensor/sensor.component';\nimport { PlatformsComponent } from './component/platform/platforms.component';\nimport { PlatformComponent } from './component/platform/platform.component';\nimport { ClassificationsComponent } from './component/classification/classifications.component';\nimport { ClassificationComponent } from './component/classification/classification.component';\nimport { EquipmentComponent } from './component/equipment/equipment.component';\n\nimport { ForbiddenNameDirective } from './directive/forbidden-name.directive';\nimport { OnlyNumber } from './directive/number-only.directive';\n\nimport { ProductService } from './service/product.service';\nimport { ManagementService } from './service/management.service';\nimport { MapService } from './service/map.service';\nimport { CanDeactivateGuardService } from './service/can.deactivate.guard.service';\nimport { SensorService } from './service/sensor.service';\nimport { PlatformService } from './service/platform.service';\nimport { MetadataService } from './service/metadata.service';\nimport { ClassificationService } from './service/classification.service';\n\nimport { SiteRoutingModule } from './site-routing.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { UAVsComponent } from './component/uav/uavs.component';\nimport { UAVsPageComponent } from './component/uav/uavs-page.component';\nimport { UAVComponent } from './component/uav/uav.component';\nimport { UAVService } from './service/uav.service';\nimport { MetadataPageComponent } from './component/metadata-page/metadata-page.component';\nimport { ReportsComponent } from './component/report/reports.component';\nimport { ReportService } from './service/report.service';\nimport { CreateCollectionModalComponent } from './component/modal/create-collection-modal.component';\nimport { ArtifactPageComponent } from './component/modal/artifact-page.component';\nimport { RunOrthoModalComponent } from './component/modal/run-ortho-modal.component';\nimport { LayerPanelComponent } from './component/layer-panel/layer-panel.component';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tRouterModule,\n\t\tFormsModule,\n\t\tNgxPaginationModule,\n\t\t//        TreeModule,\n\t\t//        ContextMenuModule,\n\t\t//        ModalModule.forRoot(),\n\t\tAlertModule,\n\t\tBsDropdownModule,\n\t\tTypeaheadModule,\n\t\tAccordionModule,\n\t\tTabsModule.forRoot(),\n\t\tCollapseModule.forRoot(),\n\t\tSharedModule,\n\t\tSiteRoutingModule,\n\t\tNgxFileDropModule,\n\t],\n\tdeclarations: [\n\t\tMapAttributeComponent,\n\t\tProductPanelComponent,\n\t\tEntityModalComponent,\n\t\tMetadataModalComponent,\n\t\tImagePreviewModalComponent,\n\t\tCreateCollectionModalComponent,\n\t\tUploadModalComponent,\n\t\tArtifactPageComponent,\n\t\tRunOrthoModalComponent,\n\t\tCollectionModalComponent,\n\t\tAccessibleSupportModalComponent,\n\t\tProductModalComponent,\n\t\tProjectsComponent,\n\t\tUploadComponent,\n\t\tTasksComponent,\n\t\tForbiddenNameDirective,\n\t\tOnlyNumber,\n\t\tSensorComponent,\n\t\tSensorsComponent,\n\t\tPlatformComponent,\n\t\tPlatformsComponent,\n\t\tTasksPanelComponent,\n\t\tClassificationsComponent,\n\t\tClassificationComponent,\n\t\tUAVsComponent,\n        UAVsPageComponent,\n\t\tUAVComponent,\n\t\tMetadataPageComponent,\n\t\tReportsComponent,\n        EquipmentComponent,\n\t\tLayerPanelComponent\n\t],\n\tproviders: [\n\t\tCanDeactivateGuardService,\n\t\tManagementService,\n\t\tProductService,\n\t\tMapService,\n\t\tSensorService,\n\t\tPlatformService,\n\t\tMetadataService,\n\t\tClassificationService,\n\t\tUAVService,\n\t\tReportService\n\t],\n\tentryComponents: [\n\t\tRunOrthoModalComponent,\n\t\tCreateCollectionModalComponent,\n\t\tUploadModalComponent,\n\t\tEntityModalComponent,\n\t\tImagePreviewModalComponent,\n\t\tMetadataModalComponent,\n\t\tCollectionModalComponent,\n\t\tProductModalComponent\n\t]\n})\nexport class SiteModule { }\n"],"sourceRoot":""}