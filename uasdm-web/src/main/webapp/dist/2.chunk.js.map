{"version":3,"sources":["webpack:///./src/app/site/service/map.service.ts","webpack:///./src/app/site/component/map-attribute/map-attribute.component.html","webpack:///./src/app/site/component/map-attribute/map-attribute.component.ts","webpack:///./src/app/site/service/management.service.ts","webpack:///./src/app/site/component/modal/image-preview-modal.component.html","webpack:///./src/app/site/component/modal/image-preview-modal.component.ts","webpack:///./src/app/site/model/management.ts","webpack:///./src/app/site/model/sensor.ts","webpack:///./src/app/site/directive/number-only.directive.ts","webpack:///./src/app/site/component/modal/metadata-modal.component.html","webpack:///./src/app/site/component/modal/metadata-modal.component.ts","webpack:///./src/app/site/model/metadata.ts","webpack:///./src/app/site/service/metadata.service.ts","webpack:///./src/app/site/component/modal/leaf-modal.component.html","webpack:///./src/app/site/component/modal/leaf-modal.component.ts","webpack:///./src/app/site/service/product.service.ts","webpack:///./src/app/site/component/modal/product-modal.component.html","webpack:///./src/app/site/component/modal/product-modal.component.ts","webpack:///./src/app/site/component/product-panel/product-panel.component.html","webpack:///./src/app/site/component/product-panel/product-panel.component.ts","webpack:///./src/app/site/component/modal/entity-modal.component.html","webpack:///./src/app/site/component/modal/entity-modal.component.ts","webpack:///./src/app/site/component/modal/upload-modal.component.html","webpack:///./src/app/site/component/modal/upload-modal.component.ts","webpack:///./src/app/site/component/modal/accessible-support-modal.component.html","webpack:///./src/app/site/component/modal/accessible-support-modal.component.ts","webpack:///./src/app/site/component/projects.component.html","webpack:///./src/app/site/component/projects.component.ts","webpack:///./src/app/site/component/upload.component.html","webpack:///./src/app/site/component/upload.component.ts","webpack:///./src/app/site/component/tasks/tasks-panel.component.html","webpack:///./src/app/site/component/tasks/tasks-panel.component.ts","webpack:///./src/app/site/component/tasks.component.html","webpack:///./src/app/site/component/tasks.component.ts","webpack:///./src/app/site/service/sensor.service.ts","webpack:///./src/app/site/component/sensor/sensor.component.html","webpack:///./src/app/site/component/sensor/sensor.component.ts","webpack:///./src/app/site/component/sensor/sensors.component.html","webpack:///./src/app/site/component/sensor/sensors.component.ts","webpack:///./src/app/site/service/platform.service.ts","webpack:///./src/app/site/component/platform/platform.component.html","webpack:///./src/app/site/component/platform/platform.component.ts","webpack:///./src/app/site/component/platform/platforms.component.html","webpack:///./src/app/site/component/platform/platforms.component.ts","webpack:///./src/app/site/directive/forbidden-name.directive.ts","webpack:///./src/app/site/service/can.deactivate.guard.service.ts","webpack:///./src/app/site/site-routing.module.ts","webpack:///./src/app/site/site.module.ts"],"names":["mapboxKey","http","params","this","get","acp","toPromise","searchText","url","mapService","baseLayers","label","id","selected","center","zoom","coordinate","longitude","latitude","search","dataSource","Observable","create","observer","mbForwardGeocode","then","response","match","features","results","forEach","obj","newObj","hierarchy","place_name","source","push","next","refreshCoordinateFromMap","config","container","style","site","geometry","coordinates","map","on","initMap","remove","modes","static","draw","displayControlsDefault","controls","addControl","$event","onDrawUpdate","onDrawCreate","addLayers","feature","type","properties","oid","name","add","changeMode","featureIds","addSource","data","event","action","length","updateGeometry","console","log","ids","set","layer","baseLayer","setStyle","result","item","flyTo","handleClick","preventDefault","refreshCoordinateFromInput","noErrorHttpClient","eventService","authService","key","pageNumber","pageSize","toString","bounds","JSON","stringify","headers","start","post","pipe","finalize","complete","exclude","entity","parentId","getUserName","componentId","uploadId","folder","file","formData","FormData","append","statuses","token","collectionId","useSpinner","responseType","terms","debounceTime","distinctUntilChanged","switchMap","term","searchEntries","metaObj","json","condition","value","isAdmin","service","bsModalRef","message","open","loading","component","getImage","image","reader","FileReader","addEventListener","imageToShow","readAsDataURL","download","subscribe","blob","createImageFromBlob","error","err","getMessageFromError","SiteObjectsResultSet","WAVELENGTHS","OnlyNumber","el","e","indexOf","keyCode","ctrlKey","shiftKey","disabled","metaObject","pointOfContact","email","platform","otherName","class","serialNumber","faaIdNumber","sensor","model","wavelength","sensorWidth","sensorWidthUnits","sensorHeight","sensorHeightUnits","pixelSizeWidth","pixelSizeHeight","upload","dataType","sensors","platforms","wavelengths","otherSensorId","otherPlatformId","onMetadataChange","Subject","getMetadataOptions","options","handleSensorSelect","handlePlatformSelect","catch","getSelectedSensor","sensorType","waveLength","getSelectedPlatform","platformType","findIndex","i","checked","splice","submitCollectionMetadata","hide","handleSubmit","Metadata","root","leaf","drillable","expandable","uploadable","processable","childLabel","cache","fieldName","metadataService","modalService","previous","folders","thumbnails","processRunning","enableSelectableImages","showOrthoRerunMessage","constPageSize","page","video","src","context","ins","init","onNodeChange","count","onSelect","isProcessable","imageData","rootPath","substr","lastIndexOf","fileName","exec","lastPeriod","thumbKey","getData","pn","ps","getObjects","resultSet","isImage","getThumbnail","toLowerCase","setExclude","pushToEros","setTimeout","statusMessage","stopPropagation","confirmModalRef","show","animated","backdrop","ignoreBackdropClick","content","submitText","onConfirm","runOrtho","window","location","href","modalRef","metadataUploaded","str","replace","c","toUpperCase","pService","items","showSite","product","imageKey","pDocument","entities","getDetail","detail","target","breadcrumbs","getItems","nodes","initData","rawImagePreviewModal","mService","toggleMapOrtho","toggleMapDem","products","changes","refreshProducts","currentValue","getProducts","len","layers","classification","hasOrthoLayer","emit","hasDemLayer","hasPointcloud","filter","n","togglePublish","p","mapIt","orthoMapped","demMapped","published","userName","admin","newInstance","attributes","applyWithParent","update","node","attribute","readonly","evaluate","differs","objectKeys","Object","keys","importedValues","values","uploader","taskStatusMessages","currentTask","finishedTask","existingTask","pollingIsSet","uploadVisible","selectedContinue","uploadCounter","showFileSelectPanel","taskFinishedNotifications","processUpload","selections","labels","pages","index","selection","hierarchyChange","modalStepConfig","differ","find","elem","that","uiOptions","debug","autoUpload","multiple","element","nativeElement","template","request","endpoint","forceMultipart","resume","enabled","recordsExpireIn","chunking","retry","enableAuto","text","defaultResponseError","failedUploadTextDisplay","mode","validation","allowedExtensions","showMessage","callbacks","onUpload","countUpload","onProgress","uploadedBytes","totalBytes","onUploadChunk","chunkData","onUploadChunkSuccess","responseJSON","xhr","taskPolling","interval","task","onComplete","xhrOrXdr","isNew","unsubscribe","clearStoredFiles","clearInterval","uplodeCounterInterfal","success","onUploadComplete","onCancel","removeTask","onError","errorReason","diff","setExistingTask","onHierarchyChange","getHierarchy","getChildren","children","child","getResumableFilesData","hasField","uploads","getUploads","collection","nextPage","updateCurrentPageLabel","prevPage","steps","step","uploadStoredFiles","uploadTarget","getUploadTarget","setParams","hasExtraField","uuid","localStorage","clear","thisRef","ct","setInterval","hours","Math","floor","minutes","seconds","hoursStr","minutesStr","secondsStr","returnValue","close","files","droppedFile","fileEntry","isFile","refresh","relativePath","removeObject","supportingData","worker","active","loadingSites","baselayerIconHover","tasks","subject","handleExtentChange","searchEntites","isWorker","getCurrentUser","baseUrl","hostname","port","notifier","webSocket","attributionControl","refreshMapPoints","compact","coord","lngLat","wrap","lat","lng","document","getElementById","textContent","queryRenderedFeatures","point","current","focusFeatureId","setFilter","highlightListItem","clearHighlightListItem","handleViewSite","addLayer","isMapped","addImageLayer","getBounds","isValidBounds","roots","ne","getNorthEast","sw","getSouthWest","abs","getSource","setData","allPointsBounds","bbox","fitBounds","padding","idx","setNodes","parent","newChild","getCenter","getZoom","edit","refreshEntity","getMetadata","sText","subText","numberOfChildren","highlightMapFeature","clearHighlightMapFeature","hoverFeatureId","view","select","getLayerByClassification","getLayer","removeLayer","removeSource","boundingBox","workspace","encodeURI","layerName","easeTo","getTypeContainsFolders","showLeafModal","addBreadcrumb","expand","staticTabs","tabs","sites","projects","missions","collections","hideUploadPanel","siteId","project","mission","projectId","missionId","uasComponentOid","trim","showUploadPanel","managementService","showUploads","showProcess","showStore","showODMOutput","showError","taskGroups","taskGroupType","actions","deleteTask","pos","totalTaskCount","activeTab","taskPage","errorStatuses","completeStatuses","messages","setTaskData","getMissingMetadata","updateTaskData","tab","parentNode","classList","contains","lis","getElementsByTagName","li","cls","visible","groups","status","taskGroupTypeIndex","setTaskGroupStatuses","latestDate","group","isLatestTask","sortedTasks","sort","a","b","Date","lastUpdatedDate","getTime","firstDate","getTasks","setGroupTasks","taskGroup","onMessagePageChange","onTabClick","waveLengths","onSensorChange","apply","unlock","router","localizeService","res","h","showModal","onPageChange","onPlatformChange","ForbiddenNameDirective","control","nameRe","RegExp","test","provide","useExisting","multi","CanDeactivateGuardService","canDeactivate","confirm","routes","path","canActivate","SiteRoutingModule","useClass","forChild","SiteModule","forRoot"],"mappings":"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","file":"2.chunk.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { map } from 'rxjs/operators';\r\n// import 'rxjs/add/operator/toPromise';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { GeoJSONSource } from 'mapbox-gl';\r\n\r\nimport * as mapboxgl from 'mapbox-gl';\r\n\r\n\r\nconst mapboxKey = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNTFnaTYyZ2RuNDlxcmNnejNtNjN6In0.-kmlS8Tgb2fNc1NPb5rJEQ';\r\n\r\n\r\ndeclare var acp: any;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n    constructor( private http: HttpClient ) {\r\n        ( mapboxgl as any ).accessToken = mapboxKey;\r\n    }\r\n\r\n    features(): Promise<{ features: GeoJSONSource, bbox: number[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ features: GeoJSONSource, bbox: number[] }>( acp + '/project/features', { params: params } )\r\n            .toPromise()\r\n    }\r\n\r\n    mbForwardGeocode(searchText: string): Promise<any> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        let url = \"https://api.mapbox.com/geocoding/v5/mapbox.places/\"+ searchText +\".json?proximity=-74.70850,40.78375&access_token=\"+ mapboxKey;\r\n\r\n        return this.http\r\n            .get( url, { params: params } )\r\n            .toPromise()\r\n    }\r\n\r\n}","<div class=\"row-holder\">\n    <div class=\"label-holder\"></div>\n    <div class=\"holder\">\n    <div class=\"modal-body\">\n      <div id=\"search-container\" style=\"position: absolute;z-index: 999;padding: 15px;width: 35%;\">\n        <input class=\"form-control search-input\" type=\"text\" placeholder=\"Search...\" [(ngModel)]=\"search\"\n                          [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"handleClick($event)\"\n                          [typeaheadOptionsLimit]=\"10\" [typeaheadItemTemplate]=\"bsItemTemplate\" typeaheadOptionField=\"label\"\n                          [ngModelOptions]=\"{standalone: true}\" (keydown.enter)=\"$event.preventDefault()\" />\n      </div>\n\t\t  <div id=\"map-attribute-div\" class=\"map-view-port\" style=\"height:300px;\"></div>\n    </div>\n  </div>\n</div>\n<div class=\"row-holder\">\n    <div class=\"label-holder\"><label>Longitude</label></div>\n    <div class=\"holder\">\n    <div class=\"modal-body text-left\">\n      <input name=\"longitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"coordinate.longitude\" (change)=\"refreshCoordinateFromInput()\" required />\n    </div>\n  </div>\n</div>\n<div class=\"row-holder\">\n    <div class=\"label-holder\"><label>Latitude</label></div>\n    <div class=\"holder\">\n    <div class=\"modal-body text-left\">\n      <input name=\"latitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"coordinate.latitude\" (change)=\"refreshCoordinateFromInput()\" required />\n    </div>\n  </div>\n</div>\n\n<ng-template #bsItemTemplate let-match=\"match\" let-query=\"query\">\n  <span *ngIf=\"match.item.filename == null\">\n    <i class=\"fa fa-folder-open\"></i>\n  </span>\n  <span *ngIf=\"match.item.filename != null\">\n    <i class=\"fa fa-file\"></i>\n  </span>\n  <span>\n    <span *ngFor=\"let site of match.item.hierarchy; index as i\">\n        {{site.label}} /\n        <!-- <span *ngIf=\"i < (match.item.hierarchy.length -1)\">/</span> -->\n    </span>\n  </span>\n  <b>{{ match.item.label}}</b>\n</ng-template>","import { Component, OnInit, OnDestroy, AfterViewInit, Input } from '@angular/core';\nimport { Map, LngLat, NavigationControl, ImageSource, MapboxOptions } from 'mapbox-gl';\nimport * as MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport * as StaticMode from '@mapbox/mapbox-gl-draw-static-mode';\nimport { Observable } from 'rxjs';\n\n\nimport { SiteEntity } from '@site/model/management';\nimport { MapService } from '@site/service/map.service';\n\n\n@Component( {\n    selector: 'map-attribute',\n    templateUrl: './map-attribute.component.html',\n    styles: [],\n} )\nexport class MapAttributeComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    /* \n     * mapbox-gl map\n     */\n    map: Map;\n\n    /* \n     * Draw control\n     */\n    draw: MapboxDraw;\n\n    /* \n     * List of base layers\n     */\n    baseLayers: any[] = [{\n        label: 'Outdoors',\n        id: 'outdoors-v11',\n        selected: true\n    }, {\n        label: 'Satellite',\n        id: 'satellite-v9'\n    }, {\n        label: 'Streets',\n        id: 'streets-v11'\n    }];\n\n    @Input() site: SiteEntity;\n\n    @Input() center: LngLat = new LngLat( -78.880453, 42.897852 );\n    @Input() zoom: number = 2;\n\n    coordinate: {\n        longitude: number,\n        latitude: number\n    } = { longitude: null, latitude: null };\n\n    /* \n     * Datasource to get search responses\n     */\n    dataSource: Observable<any>;\n\n    /* \n     * Model for text being searched\n     */\n    search: string = \"\";\n\n    constructor( private mapService: MapService ) { \n        this.dataSource = Observable.create(( observer: any ) => {\n\n            this.mapService.mbForwardGeocode( this.search ).then( response => {\n                const match = response.features;\n                let results = [];\n\n                // Add Mapbox results to any local results\n                match.forEach( obj => {\n                    let newObj = {\n                        id: obj.id,\n                        hierarchy: [],\n                        label: obj.place_name,\n                        center: obj.center,\n                        source: \"MAPBOX\"\n                    }\n\n                    results.push( newObj );\n                } );\n\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.refreshCoordinateFromMap();\n    }\n\n    ngAfterViewInit() {\n\n        // setTimeout(() => {\n        //     if ( this.tree ) {\n        //         this.tree.treeModel.expandAll();\n        //     }\n        // }, 1000 );\n\n        let config: MapboxOptions = {\n            container: 'map-attribute-div',\n            style: 'mapbox://styles/mapbox/outdoors-v11',\n            zoom: this.zoom,\n            center: this.center\n        };\n\n        if ( this.site.geometry != null ) {\n            //                    config.zoom = 10;\n            config.center = this.site.geometry.coordinates;\n        }\n\n\n        this.map = new Map( config );\n\n        this.map.on( 'load', () => {\n            this.initMap();\n        } );\n    }\n\n    ngOnDestroy(): void {\n        this.map.remove();\n    }\n\n    initMap(): void {\n\n        let modes = MapboxDraw.modes;\n        modes.static = StaticMode;\n\n        this.draw = new MapboxDraw( {\n            modes: modes,\n            displayControlsDefault: false,\n            controls: {\n                static: true\n            }\n        } );\n\n        this.map.addControl( this.draw );\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl( new NavigationControl() );\n\n        this.map.on( \"draw.update\", ( $event ) => { this.onDrawUpdate( $event ) } );\n        this.map.on( \"draw.create\", ( $event ) => { this.onDrawCreate( $event ) } );\n        this.map.on( \"draw.modechange\", ( $event ) => { this.onDrawUpdate( $event ) } );\n\n        this.map.on( 'style.load', () => {\n            this.addLayers();\n            //            this.refresh( false );\n        } );\n\n        this.addLayers();\n    }\n\n\n    addLayers(): void {\n\n        if ( this.site.geometry != null ) {\n            let feature = {\n                id: this.site.id,\n                type: 'Feature',\n                properties: {\n                    oid: this.site.id,\n                    name: this.site.name\n                },\n                geometry: this.site.geometry\n            };\n\n            this.draw.add( feature );\n            this.draw.changeMode( 'simple_select', { featureIds: [feature.id] } );\n        }\n        else {\n            this.draw.changeMode( 'draw_point', {} );\n        }\n\n        this.map.addSource( 'sites', {\n            type: 'geojson',\n            data: {\n                \"type\": \"FeatureCollection\",\n                \"features\": []\n            }\n        } );\n    }\n\n    onDrawUpdate( event: any ): void {\n        if ( event.action === 'move' && event.features != null && event.features.length > 0 ) {\n            this.updateGeometry( event.features[0] )\n        }\n    }\n\n    onDrawCreate( event: any ): void {\n        if ( event.features != null && event.features.length > 0 ) {\n\n            let feature = event.features[0];\n            feature.id = this.site.id;\n\n            this.updateGeometry( feature )\n        }\n    }\n\n    updateGeometry( feature: any ): void {\n        this.site.geometry = feature.geometry;\n\n        this.refreshCoordinateFromMap();\n    }\n\n    refreshCoordinateFromMap(): void {\n        if ( this.site != null && this.site.geometry != null ) {\n            this.coordinate.longitude = this.site.geometry.coordinates[0];\n            this.coordinate.latitude = this.site.geometry.coordinates[1];\n        }\n    }\n\n    refreshCoordinateFromInput(): void {\n        if ( this.coordinate.longitude != null && this.coordinate.latitude != null ) {\n            console.log( this.site.geometry );\n\n            if ( this.site.geometry == null ) {\n                this.site.geometry = { type: 'Point' };\n            }\n\n            this.site.geometry.coordinates = [this.coordinate.longitude, this.coordinate.latitude];\n\n            var ids = this.draw.set( {\n                type: 'FeatureCollection',\n                features: [{\n                    id: this.site.id,\n                    type: 'Feature',\n                    properties: {\n                        oid: this.site.id,\n                        name: this.site.name\n                    },\n                    geometry: this.site.geometry\n                }]\n            } );\n\n            this.draw.changeMode( 'simple_select', { featureIds: ids } );\n        }\n    }\n\n    //    zoomToFeature( node: TreeNode ): void {\n    //        if ( node.data.geometry != null ) {\n    //            this.map.flyTo( {\n    //                center: node.data.geometry.coordinates\n    //            } );\n    //        }\n    //    }\n\n    handleStyle( layer: any ): void {\n\n        this.baseLayers.forEach( baseLayer => {\n            baseLayer.selected = false;\n        } );\n\n        layer.selected = true;\n\n        this.map.setStyle( 'mapbox://styles/mapbox/' + layer.id );\n    }\n\n    handleClick( $event: any ): void {\n        let result = $event.item;\n\n        if ( result.center ) {\n            this.map.flyTo( {\n                center: result.center,\n                zoom: 9\n            } )\n        }\n    }\n    \n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\nimport { LngLatBounds } from 'mapbox-gl';\nimport { Observable } from 'rxjs';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize, debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';\n\nimport { AuthService } from '@shared/service/auth.service';\nimport { EventService } from '@shared/service/event.service';\nimport { HttpBackendClient } from '@shared/service/http-backend-client.service';\n\nimport { SiteEntity, Message, Task, AttributeType, Condition, SiteObjectsResultSet, TaskGroup } from '../model/management';\nimport { Sensor } from '../model/sensor';\nimport { Platform } from '../model/platform';\nimport { PageResult } from '@shared/model/page';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ManagementService {\n\n\tconstructor(private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService, private authService: AuthService) { }\n\n\tgetChildren(id: string): Promise<SiteEntity[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\n\t\treturn this.http\n\t\t\t.get<SiteEntity[]>(acp + '/project/get-children', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tgetObjects(id: string, key: string, pageNumber: number, pageSize: number): Promise<SiteObjectsResultSet> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\t\tif (key != null) {\n\t\t\tparams = params.set('key', key);\n\t\t}\n\n\t\tif (pageNumber != null) {\n\t\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\t}\n\t\tif (pageSize != null) {\n\t\t\tparams = params.set('pageSize', pageSize.toString());\n\t\t}\n\n\t\treturn this.http\n\t\t\t.get<SiteObjectsResultSet>(acp + '/project/objects', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tview(id: string): Promise<{ breadcrumbs: SiteEntity[], item: SiteEntity }> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\t\treturn this.http\n\t\t\t.get<{ breadcrumbs: SiteEntity[], item: SiteEntity }>(acp + '/project/view', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tgetItems(id: string, key: string): Promise<SiteEntity[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\t\tif (key != null) {\n\t\t\tparams = params.set('key', key);\n\t\t}\n\n\t\treturn this.http\n\t\t\t.get<SiteEntity[]>(acp + '/project/items', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\troots(id: string, bounds: LngLatBounds): Promise<SiteEntity[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\n\t\tif (id != null) {\n\t\t\tparams = params.set('id', id);\n\t\t}\n\n\t\tif (bounds != null) {\n\t\t\tparams = params.set('bounds', JSON.stringify(bounds));\n\t\t}\n\n\t\treturn this.http\n\t\t\t.get<SiteEntity[]>(acp + '/project/roots', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tedit(id: string): Promise<{ item: SiteEntity, attributes: AttributeType[] }> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<{ item: SiteEntity, attributes: AttributeType[] }>(acp + '/project/edit', JSON.stringify({ id: id }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tsetExclude(id: string, exclude: boolean): Promise<SiteEntity> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<SiteEntity>(acp + '/project/set-exclude', JSON.stringify({ id: id, exclude: exclude }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\trunOrtho(id: string): Promise<{ item: SiteEntity, attributes: AttributeType[] }> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\t//   this.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<{ item: SiteEntity, attributes: AttributeType[] }>(acp + '/project/run-ortho', JSON.stringify({ id: id }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\t//\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tupdate(entity: SiteEntity): Promise<SiteEntity> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.noErrorHttpClient\n\t\t\t.post<SiteEntity>(acp + '/project/update', JSON.stringify({ entity: entity }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tnewChild(parentId: string, type: string): Promise<{ item: SiteEntity, attributes: AttributeType[] }> {\n\n\t\tlet url = '/project/new-default-child';\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tlet params = {} as any;\n\n\t\tif (parentId != null) {\n\t\t\tparams.parentId = parentId;\n\t\t}\n\n\t\tif (type) {\n\t\t\tparams.type = type;\n\n\t\t\turl = '/project/new-child';\n\t\t}\n\n\n\t\tthis.eventService.start();\n\n\n\t\treturn this.http\n\t\t\t.post<{ item: SiteEntity, attributes: AttributeType[] }>(acp + url, JSON.stringify(params), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\n\n\tapplyWithParent(entity: SiteEntity, parentId: string): Promise<SiteEntity> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\n\t\tlet params = { entity: entity } as any;\n\n\t\tif (parentId != null) {\n\t\t\tparams.parentId = parentId;\n\t\t}\n\n\n\t\tthis.eventService.start();\n\n\t\treturn this.noErrorHttpClient\n\t\t\t.post<SiteEntity>(acp + '/project/apply-with-parent', JSON.stringify(params), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tgetCurrentUser(): string {\n\t\t//        let userName: string = \"admin\";\n\t\t//\n\t\t//        if ( this.cookieService.check( \"user\" ) ) {\n\t\t//            let cookieData: string = this.cookieService.get( \"user\" )\n\t\t//            let cookieDataJSON: any = JSON.parse( JSON.parse( cookieData ) );\n\t\t//            userName = cookieDataJSON.userName;\n\t\t//        }\n\t\t//        else {\n\t\t//            console.log( 'Check fails for the existence of the cookie' )\n\t\t//\n\t\t//            let cookieData: string = this.cookieService.get( \"user\" )\n\t\t//\n\t\t//            if ( cookieData != null ) {\n\t\t//                let cookieDataJSON: any = JSON.parse( JSON.parse( cookieData ) );\n\t\t//                userName = cookieDataJSON.userName;\n\t\t//            }\n\t\t//            else {\n\t\t//                console.log( 'Unable to get cookie' );\n\t\t//            }\n\t\t//        }\n\n\t\treturn this.authService.getUserName();\n\t}\n\n\tremove(id: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/project/remove', JSON.stringify({ id: id }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tremoveObject(componentId: string, key: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/project/removeObject', JSON.stringify({ id: componentId, key: key }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tremoveTask(uploadId: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/project/remove-task', JSON.stringify({ uploadId: uploadId }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tupload(id: string, folder: string, file: File): Promise<Document> {\n\n\t\tthis.eventService.start();\n\n\t\tconst formData = new FormData()\n\t\tformData.append('file', file);\n\t\tformData.append('id', id);\n\t\tformData.append('folder', folder);\n\n\t\treturn this.http.post<Document>(acp + '/project/upload', formData)\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\ttasks(statuses: string[], pageSize: number, pageNumber: number, token: number): Promise<PageResult<TaskGroup>> {\n\n\t\t// status options: PROCESSING, COMPLETE, ERROR, QUEUED\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('statuses', JSON.stringify(statuses));\n\t\tparams = params.set('pageSize', pageSize.toString());\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\tparams = params.set('token', token.toString());\n\n\t\treturn this.http\n\t\t\t.get<PageResult<TaskGroup>>(acp + '/project/tasks', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\n\tgetTasks(collectionId: string): Promise<Task[]> {\n\n\t\t// status options: PROCESSING, COMPLETE, ERROR, QUEUED\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('collectionId', collectionId);\n\n\t\treturn this.http\n\t\t\t.get<Task[]>(acp + '/project/collection-tasks', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\ttask(id: string): Promise<{ messages: Message[], task: Task }> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\t\treturn this.http\n\t\t\t.get<{ messages: Message[], task: Task }>(acp + '/project/task', { params: params })\n\t\t\t.toPromise();\n\t}\n\n\tgetMissingMetadata(pageSize: number, pageNumber: number): Promise<PageResult<Message>> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('pageSize', pageSize.toString());\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\n\t\treturn this.http.get<PageResult<Message>>(acp + '/project/missing-metadata', { params: params })\n\t\t\t.toPromise();\n\t}\n\n\tdownload(id: string, key: string, useSpinner: boolean): Observable<Blob> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\t\tparams = params.set('key', key);\n\n\t\tif (useSpinner) {\n\t\t\tthis.eventService.start();\n\t\t}\n\n\t\treturn this.noErrorHttpClient.get<Blob>(acp + '/project/download', { params: params, responseType: 'blob' as 'json' })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tif (useSpinner) {\n\t\t\t\t\tthis.eventService.complete();\n\t\t\t\t}\n\t\t\t}))\n\t}\n\n\tdownloadAll(id: string, key: string, useSpinner: boolean): Observable<Blob> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\t\tparams = params.set('key', key);\n\n\t\tif (useSpinner) {\n\t\t\tthis.eventService.start();\n\t\t}\n\n\t\treturn this.noErrorHttpClient.get<Blob>(acp + '/project/download-all', { params: params, responseType: 'blob' as 'json' })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tif (useSpinner) {\n\t\t\t\t\tthis.eventService.complete();\n\t\t\t\t}\n\t\t\t}))\n\t}\n\n\tsearch(terms: Observable<string>) {\n\t\treturn terms\n\t\t\t.pipe(debounceTime(400))\n\t\t\t.pipe(distinctUntilChanged())\n\t\t\t.pipe(switchMap(term => this.searchEntries(term)));\n\t}\n\n\tsearchEntries(term: string): Observable<string> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('term', term);\n\n\t\treturn this.http\n\t\t\t.get<string>(acp + '/project/search', { params: params })\n\t}\n\n\tsearchEntites(term: string): Promise<any> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('term', term);\n\n\t\treturn this.http\n\t\t\t.get(acp + '/project/search', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tsubmitCollectionMetadata(metaObj: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.noErrorHttpClient\n\t\t\t.post<void>(acp + '/project/submit-metadata', JSON.stringify({ json: metaObj }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\t\n\tpushToEros(collectionId: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/eros/push', JSON.stringify({ collectionId: collectionId }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tgetMetadataOptions(id: string): Promise<{ sensors: Sensor[], platforms: Platform[], name: string, email: string, platform: string, sensor: string }> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\n\t\tif (id != null) {\n\t\t\tparams = params.set('id', id);\n\t\t}\n\n\t\treturn this.noErrorHttpClient\n\t\t\t.get<{ sensors: Sensor[], platforms: Platform[], name: string, email: string, platform: string, sensor: string }>(acp + '/project/metadata-options', { params: params })\n\t\t\t.toPromise()\n\t}\n\n\tevaluate(condition: Condition, entity: SiteEntity): boolean {\n\t\tif (condition != null && condition.type === 'eq') {\n\t\t\treturn (entity[condition.name] === condition.value);\n\t\t}\n\t\telse if (condition != null && condition.type === 'admin') {\n\t\t\treturn this.authService.isAdmin();\n\t\t}\n\n\t\treturn false;\n\t}\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"error-container\">\n        <div class=\"label-holder\">\n            <strong>Error</strong>\n        </div>\n        <div class=\"holder\">\n            <div>\n                <p class=\"error-message\">{{message}}</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"image-preview-container\">\n        <i class=\"fa fa-times btn btn-close\" style=\"min-width:0;\" (click)=\"bsModalRef.hide()\"></i>\n        <div class=\"image-container\">\n            <p *ngIf=\"loading\" style=\"text-align: left;\">Loading image...</p>\n            <img *ngIf=\"!loading\" class=\"image-preview img-responsive center-block\" [src]=\"imageToShow | safeHtml\" alt=\"Image\">\n        </div>\n    </div>\n\n    <!-- <form #ngForm=\"ngForm\">\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Cancel</button>\n    </div>\n  </form> -->\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef, Input } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ErrorHandler } from '@shared/component';\n\nimport { ManagementService } from '@site/service/management.service';\n\n\n@Component( {\n    selector: 'image-preview-modal',\n    templateUrl: './image-preview-modal.component.html',\n    styleUrls: []\n} )\nexport class ImagePreviewModalComponent {\n\n    message: string = null;\n    open: boolean = true;\n    loading: boolean = true;\n    imageToShow: any;\n    component: string;\n    key: string;\n\n    constructor( private service: ManagementService, public bsModalRef: BsModalRef ) { }\n\n    init( component: string, key: string ) {\n        this.component = component;\n        this.key = key;\n\n        this.getImage( this.component, this.key );\n    }\n\n    createImageFromBlob( image: Blob ) {\n        let reader = new FileReader();\n        reader.addEventListener( \"load\", () => {\n            this.imageToShow = reader.result;\n        }, false );\n\n        if ( image ) {\n            reader.readAsDataURL( image );\n        }\n    }\n\n    getImage( component: string, key: string ): void {\n\n        this.loading = true;\n\n        this.service.download( component, key, false ).subscribe( blob => {\n            this.createImageFromBlob( blob );\n            this.loading = false;\n        }, error => {\n            this.loading = false;\n\n            this.error( error );\n        } );\n    }\n\n    close(): void {\n        this.open = false;\n    }\n\n    error(err: HttpErrorResponse): void {\n\t  this.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","import { PageResult } from '@shared/model/page';\n\nexport class Condition {\n\tname: string;\n\tvalue: string;\n\ttype: string;\n}\n\nexport class AttributeType {\n\tname: string;\n\tlabel: string;\n\ttype: string;\n\trequired: boolean;\n\timmutable: boolean;\n\treadonly: boolean;\n\tcondition: Condition;\n\toptions?: { value: string, label: string }[];\n}\n\nexport class SiteObjectsResultSet {\n\tcount: number;\n\tpageNumber: number;\n\tpageSize: number;\n\tresults: SiteEntity[];\n\tfolder: string;\n}\n\nexport class SiteEntity {\n\tid: string;\n\tname: string;\n\tfolderName: string;\n\ttype: string;\n\tcomponent: string;\n\tkey: string;\n\tmetadataUploaded: boolean;\n\tgeometry?: any;\n\tnumberOfChildren: number;\n\tlastModified?: string;\n\townerName?: string;\n\townerPhone?: string;\n\townerEmail?: string;\n\tprivilegeType?: string;\n\tchildren?: SiteEntity[];\n\tactive?: boolean;\n\texclude?: boolean;\n}\n\nexport class CollectionHierarchy {\n\tsite: string;\n\tproject: string;\n\tmission: string;\n\tcollection: string;\n}\n\nexport class ImageHierarchy {\n\tsite: string;\n\tproject: string;\n\timage: string;\n}\n\nexport class Selection {\n\ttype: string;\n\tisNew: boolean;\n\tvalue: string;\n\tlabel: string;\n\tplatform?: string;\n\tsensor?: string;\n};\n\n\nexport class UploadForm {\n\tcreate: boolean;\n\tname: string;\n\toutFileName: string;\n\tuasComponentOid: string;\n\tsite: string;\n\tproject: string;\n\tmission: string;\n\tcollection: any;\n\timagery: any;\n\tuploadTarget: string;\n\tselections: string;\n\tprocessUpload: boolean;\n}\n\nexport class Action {\n\tcreateDate: string;\n\tlastUpdatedDate: string;\n\ttype: string;\n\tdescription: string;\n}\n\nexport class Task {\n\toid: string;\n\tlabel: string;\n\tcreateDate: string;\n\tlastUpdateDate: string;\n\tlastUpdatedDate: string;\n\tstatus: string;\n\tmessage: string;\n\tactions: Action[];\n\tuploadId: string;\n\todmOutput: string;\n\tcollection: string;\n\tcollectionLabel: string;\n\ttype: string;\n\tvisible?: boolean;\n\tshowError?: boolean;\n\tancestors?: string[];\n  sensorName?: string;\n}\n\nexport class TaskGroup {\n\tlabel: string;\n\tcollectionId: string;\n\tvisible?: boolean;\n\tgroups: TaskGroupType[];\n\tstatus: string;\n\tlastUpdatedDate: string;\n\tancestors?: string[];\n}\n\nexport class TaskGroupType {\n\ttasks: Task[];\n\tstatus: string;\n\ttype: string;\n}\n\nexport class Message {\n\tcollectionId: string;\n\tcollectionName: string;\n\tancestors: string[];\n\tmessage: string;\n\timageWidth: string;\n\timageHeight: string;\n}\n\nexport class ProductDocument {\n\tid: string;\n\tname: string;\n\tkey: string;\n}\n\nexport class Product {\n\tid: string;\n\tname: string;\n\tentities: SiteEntity[];\n\tpublished: boolean;\n\timageKey?: string;\n\tboundingBox?: number[];\n\tlayers: GeoserverLayer[];\n\torthoMapped?: boolean;\n\tdemMapped?: boolean;\n\thasPointcloud?: boolean;\n}\n\nexport class GeoserverLayer {\n  workspace: string;\n  classification: string;\n  key: string;\n  isMapped?: boolean;\n}\n\nexport class ProductDetail extends Product {\n\tpilotName: string;\n\tdateTime: string;\n\tsensor: string;\n\tpage?: PageResult<ProductDocument>;\n}\n","export class Sensor {\n    newInstance: boolean;\n    oid: string;\n    name: string;\n    displayLabel: string;\n    sensorType: string;\n    model: string;\n    waveLength: string[];\n}\n\nexport const WAVELENGTHS: string[] = [\"Natural Color RGB\", \"Thermal\", \"Red Edge\", \"Near Infra Red\", \"LiDAR\", \"Other\"];\n","\nimport { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[OnlyNumber]' \n})\nexport class OnlyNumber {\n\n  constructor(private el: ElementRef) { }\n\n  @Input() OnlyNumber: boolean;\n \n  @HostListener('keydown', ['$event']) onKeyDown(event:any) {\n    let e = <KeyboardEvent> event;\n    if (this.OnlyNumber) {\n      if ([46, 8, 9, 27, 13, 110, 190].indexOf(e.keyCode) !== -1 ||\n        // Allow: Ctrl+A\n        (e.keyCode == 65 && e.ctrlKey === true) ||\n        // Allow: Ctrl+C\n        (e.keyCode == 67 && e.ctrlKey === true) ||\n        // Allow: Ctrl+X\n        (e.keyCode == 88 && e.ctrlKey === true) ||\n        // Allow: home, end, left, right\n        (e.keyCode >= 35 && e.keyCode <= 39)) {\n          // let it happen, don't do anything\n          return;\n        }\n        // Ensure that it is a number and stop the keypress\n        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n            e.preventDefault();\n        }\n      }\n  }\n}\n\n\n","<div class=\"modal-header text-center\">\n    <h2>Collection Metadata</h2>\n</div>\n\n<div class=\"row\">\n    <div class=\"col-md-12\">\n        <form #ngForm=\"ngForm\" class=\"modal-form\">\n            <div class=\"modal-body\">\n\n                <div *ngIf=\"message != null\" class=\"error-container\">\n                    <div class=\"label-holder\">\n                        <strong>Error</strong>\n                    </div>\n                    <div class=\"holder\">\n                        <div>\n                            <p class=\"error-message\">{{message}}</p>\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class=\"panel panel-default\">\n                    <div class=\"panel-heading\">Point Of Contact</div>\n                    <div class=\"panel-body\">\n                        <div class=\"form-group\">\n                            <label for=\"pointOfContact.name\">Name</label>\n                            <input type=\"text\" name=\"pointOfContact.name\" [(ngModel)]=\"metaObject.pointOfContact.name\"\n                                [maxlength]=\"100\" [required]=\"false\" [disabled]=\"false\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"pointOfContact.email\">Email</label>\n                            <input type=\"text\" name=\"pointOfContact.email\" [(ngModel)]=\"metaObject.pointOfContact.email\"\n                                [maxlength]=\"255\" [required]=\"false\" [disabled]=\"false\" />\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"panel panel-default\">\n                    <div class=\"panel-heading\">Platform</div>\n                    <div class=\"panel-body\">\n                        <div class=\"form-group\">\n                            <label for=\"platform.name\">Name</label>\n                            <select [(ngModel)]=\"metaObject.platform.name\" name=\"platform.name\" type=\"input\" (change)=\"handlePlatformSelect()\" required>                               \n                                <option></option>\n                                <option *ngFor=\"let platform of platforms\" [value]=\"platform.oid\">{{platform.displayLabel}}</option>\n                            </select>\n                        </div>\n                        <div class=\"form-group\" *ngIf=\"metaObject.platform.name === otherPlatformId\">\n                            <label for=\"platform.class\">Other name</label>\n                            <input type=\"text\" name=\"platform.otherName\" [(ngModel)]=\"metaObject.platform.otherName\"\n                                maxlength=\"20\" required />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"platform.class\">Class</label>\n                            <input type=\"text\" name=\"platform.class\" [(ngModel)]=\"metaObject.platform.class\"\n                                [maxlength]=\"20\" [disabled]=\"false\" required />\n                        </div>\n                        <div *ngIf=\"metaObject.platform.name != null && metaObject.platform.name.length > 0\" class=\"form-group\">\n                            <label for=\"platform.type\">Type</label>\n                            <select [(ngModel)]=\"metaObject.platform.type\" name=\"platform.type\" type=\"input\" class=\"\"\n                                [disabled]=\"metaObject.platform.name !== otherPlatformId\" required>\n                                <option></option>\n                                <option>Fixed Wing</option>\n                                <option>Hybrid</option>\n                                <option>Multi-rotor</option>\n                                <option>Helicopter</option>\n                                <option>VTOL Fixed-wing</option>\n                                <option>Quadcopter</option>\n                            </select>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"platform.serialNumber\">Serial Number</label>\n                            <input type=\"text\" name=\"platform.serialNumber\"\n                                [(ngModel)]=\"metaObject.platform.serialNumber\" [maxlength]=\"50\"\n                                [required]=\"true\" [disabled]=\"false\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"platform.faaIdNumber\">FAA Id Number</label>\n                            <input type=\"text\" name=\"platform.faaIdNumber\" [(ngModel)]=\"metaObject.platform.faaIdNumber\"\n                                [maxlength]=\"30\" [required]=\"true\" [disabled]=\"false\" />\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class=\"panel panel-default\">\n                    <div class=\"panel-heading\">Sensor</div>\n                    <div class=\"panel-body\">\n                        <div class=\"form-group\">\n                            <label for=\"sensor.name\">Name</label>\n                            <select [(ngModel)]=\"metaObject.sensor.name\" name=\"sensor.name\" type=\"input\" (change)=\"handleSensorSelect()\" required>                               \n                                <option></option>\n                                <option *ngFor=\"let sensor of sensors\" [value]=\"sensor.oid\">{{sensor.displayLabel}}</option>\n                            </select>\n                        </div>                    \n                        <div class=\"form-group\" *ngIf=\"metaObject.sensor.name === otherSensorId\">\n                            <label for=\"sensor.class\">Other name</label>\n                            <input type=\"text\" name=\"sensor.otherName\" [(ngModel)]=\"metaObject.sensor.otherName\"\n                                maxlength=\"20\" required />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.type\">Type</label>\n                            <input type=\"text\" name=\"sensor.type\" [(ngModel)]=\"metaObject.sensor.type\" [maxlength]=\"20\"\n                                [required]=\"true\" [disabled]=\"metaObject.sensor.name !== otherSensorId\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.model\">Model</label>\n                            <input type=\"text\" name=\"sensor.model\" [(ngModel)]=\"metaObject.sensor.model\"\n                                [maxlength]=\"20\" [required]=\"true\" [disabled]=\"metaObject.sensor.name !== otherSensorId\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.wavelength\">Wave Length</label>\n                            <div *ngFor=\"let wavelength of wavelengths\">\n                              <boolean-field [value]=\"metaObject.sensor.wavelength && (-1 !== metaObject.sensor.wavelength.indexOf(wavelength))\" [label]=\"wavelength\" (valueChange)=\"updateSelectedWaveLength(wavelength, $event)\" [disabled]=\"metaObject.sensor.name !== otherSensorId\"></boolean-field>                              \n                            </div>                                                        \n                        </div>\n                        <!-- <div class=\"form-group\">\n                            <label for=\"sensor.imageWidth\">Image Width</label>\n                            <input type=\"text\" name=\"sensor.imageWidth\" [(ngModel)]=\"imageWidth\"\n                                [required]=\"true\" [disabled]=\"true\" OnlyNumber=\"true\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.imageHeight\">Image Height</label>\n                            <input type=\"text\" name=\"sensor.imageHeight\" [(ngModel)]=\"imageHeight\"\n                                [required]=\"true\" [disabled]=\"true\" OnlyNumber=\"true\" />\n                        </div> -->\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorWidth\">Sensor Width</label>\n                            <input type=\"number\" name=\"sensor.sensorWidth\" [(ngModel)]=\"metaObject.sensor.sensorWidth\"\n                                [required]=\"true\" [disabled]=\"false\" OnlyNumber=\"true\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorWidth\">Sensor Width Units</label>\n                            <select [(ngModel)]=\"metaObject.sensor.sensorWidthUnits\" name=\"sensor.sensorWidthUnits\" type=\"input\" required disabled>\n                                <option value=\"mm\" selected>Millimeters</option>\n                            </select>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorHeight\">Sensor Height</label>\n                            <input type=\"number\" name=\"sensor.sensorHeight\" [(ngModel)]=\"metaObject.sensor.sensorHeight\"\n                                [required]=\"true\" [disabled]=\"false\" OnlyNumber=\"true\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.sensorWidth\">Sensor Height Units</label>\n                            <select [(ngModel)]=\"metaObject.sensor.sensorHeightUnits\" name=\"sensor.sensorHeightUnits\" type=\"input\" required disabled>\n                                <option value=\"mm\" selected>Millimeters</option>\n                            </select>                            \n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.pixelSizeWidth\">Pixel Size Width</label>\n                            <input type=\"number\" name=\"sensor.pixelSizeWidth\"\n                                [(ngModel)]=\"metaObject.sensor.pixelSizeWidth\" [required]=\"true\" [disabled]=\"false\"\n                                OnlyNumber=\"true\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"sensor.pixelSizeHeight\">Pixel Size Height</label>\n                            <input type=\"number\" name=\"sensor.pixelSizeHeight\"\n                                [(ngModel)]=\"metaObject.sensor.pixelSizeHeight\" [required]=\"true\" [disabled]=\"false\"\n                                OnlyNumber=\"true\" />\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"button-holder\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Cancel</button>\n                    <button type=\"button\" [disabled]=\"!ngForm.valid\" class=\"btn btn-primary\"\n                        (click)=\"handleSubmit()\">\n                        <i class=\"icon-upload icon-white\"></i> Submit\n                    </button>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { ErrorHandler } from '@shared/component';\nimport { ManagementService } from '@site/service/management.service';\n\nimport { Sensor, WAVELENGTHS } from '@site/model/sensor';\nimport { Platform } from '@site/model/platform';\n\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'metadata-modal',\n\ttemplateUrl: './metadata-modal.component.html',\n\tstyleUrls: []\n})\nexport class MetadataModalComponent {\n    /*\n     * collectionId for the metadata\n     */\n\tcollectionId: string;\n\n\tmessage: string = null;\n\n\tdisabled: boolean = false;\n\n\t// imageHeight: string;\n\n\t// imageWidth: string;\n\n\tmetaObject: any = {\n\t\tcollectionId: \"\",\n\t\t// agency:{\n\t\t//     name:\"Department of Interior\",\n\t\t//     shortName: \"\",\n\t\t//     fieldCenter: \"\"\n\t\t// },\n\t\tpointOfContact: {\n\t\t\tname: \"\",\n\t\t\temail: \"\"\n\t\t},\n\t\t// project: {\n\t\t//     name:\"\",\n\t\t//     shortName:\"\",\n\t\t//     description:\"\"\n\t\t// },\n\t\t// mission: {\n\t\t//     name:\"\",\n\t\t//     description:\"\"\n\t\t// },\n\t\t// collect: {\n\t\t//     name:\"\",\n\t\t//     description:\"\"\n\t\t// },\n\t\tplatform: {\n\t\t\tname: \"\",\n\t\t\totherName: \"\",\n\t\t\tclass: \"\",\n\t\t\ttype: \"\",\n\t\t\tserialNumber: \"\",\n\t\t\tfaaIdNumber: \"\"\n\t\t},\n\t\tsensor: {\n\t\t\tname: \"\",\n\t\t\totherName: \"\",\n\t\t\ttype: \"\",\n\t\t\tmodel: \"\",\n\t\t\twavelength: [],\n\t\t\t// imageWidth:\"\",\n\t\t\t// imageHeight:\"\",\n\t\t\tsensorWidth: \"\",\n\t\t\tsensorWidthUnits: \"mm\",\n\t\t\tsensorHeight: \"\",\n\t\t\tsensorHeightUnits: \"mm\",\n\t\t\tpixelSizeWidth: \"\",\n\t\t\tpixelSizeHeight: \"\"\n\t\t},\n\t\tupload: {\n\t\t\tdataType: \"raw\"\n\t\t}\n\t};\n\n    /*\n     * Observable subject called when metadata upload is successful\n     */\n\tpublic onMetadataChange: Subject<string>;\n\n\tsensors: Sensor[] = [];\n\tplatforms: Platform[] = [];\n\twavelengths: string[] = WAVELENGTHS;\n\n\totherSensorId: string = \"\";\n\totherPlatformId: string = \"\";\n\n\tconstructor(public bsModalRef: BsModalRef, private service: ManagementService) { }\n\n\tinit(collectionId: string): void {\n\t\tthis.collectionId = collectionId;\n\n\t\tthis.onMetadataChange = new Subject();\n\n\t\tthis.service.getMetadataOptions(this.collectionId).then((options) => {\n\t\t\tthis.sensors = options.sensors;\n\t\t\tthis.platforms = options.platforms;\n\n\t\t\tthis.metaObject.pointOfContact.name = options.name;\n\t\t\tthis.metaObject.pointOfContact.email = options.email;\n\t\t\tthis.metaObject.sensor.name = options.sensor;\n\t\t\tthis.metaObject.platform.name = options.platform;\n\n\t\t\tthis.sensors.forEach(sensor => {\n\t\t\t\tif (sensor.name === 'OTHER') {\n\t\t\t\t\tthis.otherSensorId = sensor.oid;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.platforms.forEach(platform => {\n\t\t\t\tif (platform.name === 'OTHER') {\n\t\t\t\t\tthis.otherPlatformId = platform.oid;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.handleSensorSelect();\n\t\t\tthis.handlePlatformSelect();\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\thandleSensorSelect(): void {\n\t\tif (this.metaObject.sensor.name != null && this.metaObject.sensor.name !== \"\" && this.metaObject.sensor.name !== this.otherSensorId) {\n\t\t\tconst sensor = this.getSelectedSensor();\n\n\t\t\tthis.metaObject.sensor.type = sensor.sensorType;\n\t\t\tthis.metaObject.sensor.model = sensor.model;\n\t\t\tthis.metaObject.sensor.wavelength = [...sensor.waveLength];\n\n\t\t\tconsole.log(this.metaObject.sensor);\n\t\t}\n\t}\n\n\thandlePlatformSelect(): void {\n\t\tif (this.metaObject.platform.name != null && this.metaObject.platform.name !== \"\" && this.metaObject.platform.name !== this.otherPlatformId) {\n\t\t\tconst platform = this.getSelectedPlatform();\n\n\t\t\tthis.metaObject.platform.type = platform.platformType;\n\t\t}\n\t}\n\n\tgetSelectedSensor(): Sensor {\n\t\tvar indexOf = this.sensors.findIndex(i => i.oid === this.metaObject.sensor.name);\n\n\t\treturn this.sensors[indexOf];\n\t}\n\n\tgetSelectedPlatform(): Platform {\n\t\tvar indexOf = this.platforms.findIndex(i => i.oid === this.metaObject.platform.name);\n\n\t\treturn this.platforms[indexOf];\n\t}\n\n\tupdateSelectedWaveLength(wavelength: string, checked: boolean): void {\n\n\t\tconst indexOf = this.metaObject.sensor.wavelength.indexOf(wavelength)\n\n\t\tif (checked) {\n\n\t\t\tif (indexOf < 0) {\n\t\t\t\tthis.metaObject.sensor.wavelength.push(wavelength);\n\n\t\t\t}\n\t\t} else {\n\t\t\tif (indexOf > -1) {\n\t\t\t\tthis.metaObject.sensor.wavelength.splice(indexOf, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\thandleSubmit(): void {\n\n\t\tthis.metaObject.collectionId = this.collectionId;\n\t\t// this.metaObject.imageWidth = this.imageWidth;\n\t\t// this.metaObject.imageHeight = this.imageHeight;\n\n\t\tthis.service.submitCollectionMetadata(this.metaObject).then(() => {\n\t\t\tthis.bsModalRef.hide();\n\t\t\tthis.onMetadataChange.next(this.collectionId);\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t  this.message = ErrorHandler.getMessageFromError(err);\n\t}\n}\n","export class Metadata {\n    root: boolean;\n    leaf: boolean;\n    drillable: boolean;\n    expandable: boolean;\n    uploadable: boolean;\n    processable: boolean;\n    childLabel: string;\n\n    constructor( root: boolean, leaf: boolean, drillable: boolean, expandable: boolean, uploadable: boolean, processable: boolean, childLabel: string ) {\n        this.root = root;\n        this.leaf = leaf;\n        this.drillable = drillable;\n        this.expandable = expandable;\n        this.uploadable = uploadable;\n        this.processable = processable;\n        this.childLabel = childLabel;\n    }\n}","import { Injectable } from '@angular/core';\n\nimport { SiteEntity } from '../model/management';\nimport { Metadata } from '../model/metadata';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class MetadataService {\n\n    private cache: any = {};\n\n    constructor() {\n        // ( root, leaf, drillable, expandable, uploadable, processable )\n        this.cache['Site'] = new Metadata( true, false, true, false, false, false, 'Projects' );\n        this.cache['Project'] = new Metadata( false, false, true, false, false, false, 'Missions' );\n        this.cache['Mission'] = new Metadata( false, false, false, true, false, false, 'Collections' );\n        this.cache['Collection'] = new Metadata( false, true, false, false, false, true, 'Images' );\n        this.cache['folder'] = new Metadata( false, true, false, false, true, false, '' );\n\n        // Metadata for specific folder types\n        this.cache['raw'] = new Metadata( false, false, false, false, true, false, '' );\n        this.cache['accessible'] = new Metadata( false, false, false, false, true, false, '' );\n    }\n\n    getMetadata( entity: SiteEntity ): Metadata {\n        return this.cache[entity.type];\n    }\n\n    getTypeContainsFolders( entity: SiteEntity ): boolean {\n        return ( entity.type === 'Collection' );\n    }\n\n    isUploadable( type: string ): boolean {\n        if ( this.cache[type] != null ) {\n            return this.cache[type].uploadable;\n        }\n\n        return false;\n    }\n\n    hasExtraField( type: string, fieldName: string ): boolean {\n        if ( type === 'Collection' ) {\n            return ( fieldName === 'platform' || fieldName === 'sensor' );\n        }\n\n        return false;\n    }\n\n    isProcessable( type: string ): boolean {\n        if ( this.cache[type] != null ) {\n            return this.cache[type].processable;\n        }\n\n        return false;\n    }\n\n    getUploadTarget( type: string ): string {\n        if ( type === 'Imagery' ) {\n            return 'imagery';\n        }\n\n        return 'raw';\n    }\n\n    getHierarchy(): string[] {\n\n        return ['Site', 'Project', 'Mission', 'Collection'];\n    }\n}","<div class=\"modal-body\" [@fadeInOnEnter]>\n  <div>\n    <div *ngIf=\"message != null\" class=\"error-container\">\n      <div class=\"label-holder\">\n        <strong>Error</strong>\n      </div>\n      <div class=\"holder\">\n        <div>\n          <p class=\"error-message\">{{message}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"entity != null\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2>{{entity.name}} <span *ngIf=\"!entity.metadataUploaded\" class=\"dot pending\" style=\"margin-left: 0;margin-bottom: 5px;\"></span></h2>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <ul class=\"breadcrumb\" style=\"margin-bottom: 10px;\">\n            <li *ngFor=\"let prev of previous\">\n              <span> {{prev.name}}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-sm-12\" style=\"padding: 0;\">\n          <tabset class=\"nav-full-width\">\n            <tab *ngFor=\"let folder of folders\" [heading]=\"folder.name\" (selectTab)=\"onSelect(folder)\">\n\n              <div [ngSwitch]=\"folder.name\">\n                <div class=\"image-list-container\" *ngSwitchDefault>\n                  <ul class=\"list-group row\">\n                    <li *ngFor=\"let item of page.results\" class=\"list-group-item col-xs-3\">\n                      <a class=\"thumbnail non-clickable\">\n                        <img [src]=\"context + '/net/geoprism/images/thumbnail-default.png'\" alt=\"Image\">\n                        <div class=\"caption\">\n                          <h4 class=\"media-heading\">{{item.name}}</h4>\n                        </div>\n                      </a>\n                    </li>\n                  </ul>\n                </div>\n                \n                <div class=\"image-list-container\" *ngSwitchCase=\"'ortho'\">\n                  <ul class=\"list-group row\">\n                    <li *ngFor=\"let item of page.results\" class=\"list-group-item col-xs-3\">\n                      <a class=\"thumbnail non-clickable\">\n                        <img [src]=\"thumbnails[item.key] != null ? (thumbnails[item.key] | safeHtml) : (context + '/net/geoprism/images/thumbnail-default.png')\" alt=\"Image\">\n                        <div class=\"caption\">\n                          <h4 class=\"media-heading\">{{item.name}}</h4>\n                        </div>\n                      </a>\n                    </li>\n                  </ul>\n                </div>\n\n                <div class=\"image-list-container\" *ngSwitchCase=\"'raw'\">\n                  <ul class=\"list-group row\">\n                    <li\n                      *ngFor=\"let item of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\"\n                      class=\"list-group-item col-xs-3\">\n                      <a class=\"thumbnail\"\n                        [ngClass]=\"{'card-disabled' : item.exclude, 'non-clickable' : !enableSelectableImages}\">\n                        <input type=\"checkbox\" class=\"x-box\" *ngIf=\"enableSelectableImages\"\n                          [checked]=\"item.exclude\" (change)=\"toggleExcludeImage($event, item)\" />\n                        <img style=\"max-height: 150px\" (click)=\"enableSelectableImages ? toggleExcludeImage($event, item) : false\"\n                          [ngClass]=\"{'img-disabled' : item.exclude}\"\n                          [src]=\"thumbnails[item.key] != null ? (thumbnails[item.key] | safeHtml) : (context + '/net/geoprism/images/thumbnail-default.png')\"\n                          alt=\"Image\">\n                        <div class=\"caption\">\n                          <h4 class=\"media-heading\">\n                            {{item.name}}\n                          </h4>\n                        </div>\n                      </a>\n                    </li>\n                  </ul>\n                </div>\n\n                <div *ngSwitchCase=\"'video'\">\n                  <div *ngIf=\"video.src !== null\">\n                    <div class=\"row\">\n                      <div class=\"col-md-1\"></div>\n                      <div class=\"col-md-10\">\n                        <h3>\n                          {{video.name}}\n                          <a (click)=\"handleDownloadVideo(video.src)\"><i class=\"fas fa-download\"></i></a>\n                          <a class=\"pull-right\" (click)=\"closeVideo()\"><i class=\"fa fa-times\"\n                              aria-hidden=\"true\"></i></a>\n                        </h3>\n                      </div>\n                      <div class=\"col-md-1\"></div>\n                    </div>\n                    <div class=\"row\">\n                      <div class=\"col-md-1\"></div>\n                      <div class=\"col-md-10\">\n                        <video style=\"width:100%\" controls>\n                          <source [src]=\"video.src\" type=\"video/mp4\" />\n                          Browser not supported\n                        </video>\n                      </div>\n                      <div class=\"col-md-1\"></div>\n                    </div>\n                  </div>\n\n                  <div class=\"image-list-container\">\n                    <ul class=\"list-group row\">\n                      <li *ngFor=\"let item of page.results\" class=\"list-group-item col-xs-3\">\n                        <a class=\"thumbnail\" (click)=\"showVideo(item)\">\n                          <img [src]=\"context + '/net/geoprism/images/thumbnail-video.png'\" alt=\"Video\">\n                          <div class=\"caption\">\n                            <h4 class=\"media-heading\">{{item.name}}</h4>\n                          </div>\n                        </a>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n\n              </div>\n            </tab>\n          </tabset>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-sm-12\">\n          <pagination-controls *ngIf=\"folder.name === 'raw'\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n          <div *ngIf=\"showOrthoRerunMessage\" style=\"text-align:right;padding-right:20px;\">\n            <p>{{statusMessage}}</p>\n            <p>See this process on\n              <a routerlink=\"/site/tasks\" routerlinkactive=\"active\" href=\"#/site/tasks\">your tasks page</a>\n            </p>\n          </div>\n\n          <div class=\"btn-holder\" style=\"margin: 20px 20px 10px 20px;\">\n            <div class=\"row\">\n              <div class=\"col-sm-2\">\n                <button *ngIf=\"!entity.metadataUploaded\" type=\"button\" class=\"btn btn-warning\"\n                  [disabled]=\"processRunning\" (click)=\"handleSetMetadata()\">\n                  <i class=\"fa fa-plus\" style=\"color:white\"></i>\n                  Add Metadata\n                </button>\n              </div>\n              <div class=\"col-md-10\" style=\"text-align: right;\">\n                <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Close</button>\n                <button *ngIf=\"processable\" type=\"button\" class=\"btn btn-secondary\" title=\"Downloads all files in the {{folder.name}} folder.\" [disabled]=\"processRunning\"\n                  (click)=\"handleDownload()\" style=\"margin-left: 5px;\">\n                  Download All {{capitalize(folder.name)}}\n                </button>\n                <button *ngIf=\"processable\" type=\"button\" class=\"btn btn-secondary\" [disabled]=\"processRunning\"\n                  (click)=\"handleDownloadOdmAll()\" title=\"Downloads the all.zip file generated from ODM.\" style=\"margin-left: 5px;\">\n                  Download All Generated Data\n                </button>\n                <button *ngIf=\"processable && enableSelectableImages\" [disabled]=\"processRunning\"\n                  (click)=\"handleRunOrtho()\" class=\"btn btn-primary\" title=\"Reprocesses the selected raw imagery and generates new products.\" style=\"margin-left: 5px;\">\n                  Reprocess Imagery\n                  <i class=\"fa fa-sync-alt\" [ngClass]=\"{'fa-spin' : processRunning}\" aria-hidden=\"true\"\n                    style=\"color:white;vertical-align: middle;margin-left: 10px;\"></i>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { ErrorHandler, BasicConfirmModalComponent } from '@shared/component';\n\nimport { SiteEntity, SiteObjectsResultSet } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\nimport { MetadataService } from '@site/service/metadata.service';\nimport { MetadataModalComponent } from './metadata-modal.component';\n\nimport {\n\tfadeInOnEnterAnimation,\n\tfadeOutOnLeaveAnimation,\n\tslideInLeftOnEnterAnimation,\n\tslideInRightOnEnterAnimation,\n} from 'angular-animations';\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'leaf-modal',\n\ttemplateUrl: './leaf-modal.component.html',\n\tstyles: [],\n\tproviders: [BasicConfirmModalComponent],\n\tanimations: [\n\t\tfadeInOnEnterAnimation(),\n\t\tfadeOutOnLeaveAnimation(),\n\t\tslideInLeftOnEnterAnimation(),\n\t\tslideInRightOnEnterAnimation(),\n\t]\n})\nexport class LeafModalComponent implements OnInit {\n\tentity: SiteEntity;\n\n\t@Input()\n\tset initData(ins: any) {\n\t\tthis.init(ins.entity, ins.folders, ins.previous)\n\t}\n\n    /* \n     * Breadcrumb of previous sites clicked on\n     */\n\tprevious = [] as SiteEntity[];\n\tfolders: SiteEntity[] = [];\n\tthumbnails: any = {};\n\tprocessRunning: boolean = false;\n\tmessage: string;\n\tstatusMessage: string;\n\tprocessable: boolean = false;\n\tenableSelectableImages: boolean = false;\n\tfolder: SiteEntity;\n\tshowOrthoRerunMessage: boolean = false;\n\n\tconstPageSize: number = 50;\n\n\tpage: SiteObjectsResultSet = new SiteObjectsResultSet();\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate confirmModalRef: BsModalRef;\n\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n\tpublic onNodeChange: Subject<SiteEntity>;\n\n\tvideo: { src: string, name: string } = { src: null, name: null };\n\tcontext: string;\n\n\tconstructor(private service: ManagementService, private metadataService: MetadataService, private modalService: BsModalService, public bsModalRef: BsModalRef) {\n\t\tthis.context = acp;\n\t}\n\n\tngOnInit(): void {\n\t\tthis.onNodeChange = new Subject();\n\n\t\tthis.page.count = 0;\n\t\tthis.page.pageNumber = 1;\n\t\tthis.page.pageSize = this.constPageSize;\n\t\tthis.page.results = [];\n\t}\n\n\tinit(entity: SiteEntity, folders: SiteEntity[], previous: SiteEntity[]): void {\n\t\tthis.entity = entity;\n\t\tthis.folders = folders;\n\t\tthis.previous = [...previous];\n\n\t\tif (this.previous.length > 0 && this.previous[this.previous.length - 1].id !== this.entity.id) {\n\t\t\tthis.previous.push(this.entity);\n\t\t}\n\n\t\tif (this.folders.length > 0) {\n\t\t\tthis.onSelect(this.folders[0]);\n\t\t}\n\n\t\tthis.processable = this.metadataService.isProcessable(entity.type);\n\t}\n\n\tcreateImageFromBlob(image: Blob, imageData: any) {\n\t\tlet reader = new FileReader();\n\t\treader.addEventListener(\"load\", () => {\n\t\t\t// this.imageToShow = reader.result;\n\t\t\tthis.thumbnails[imageData.key] = reader.result;\n\t\t}, false);\n\n\t\tif (image) {\n\t\t\treader.readAsDataURL(image);\n\t\t}\n\t}\n\n\tgetThumbnail(image: any): void {\n\t\tif (image != null) {\n\n\t\t\tlet rootPath: string = image.key.substr(0, image.key.lastIndexOf(\"/\"));\n\t\t\tlet fileName: string = /[^/]*$/.exec(image.key)[0];\n\t\t\tconst lastPeriod: number = fileName.lastIndexOf(\".\");\n\t\t\tconst thumbKey: string = rootPath + \"/thumbnails/\" + fileName.substr(0, lastPeriod) + \".png\";\n\n\t\t\tthis.service.download(image.component, thumbKey, false).subscribe(blob => {\n\t\t\t\tthis.createImageFromBlob(blob, image);\n\t\t\t}, error => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t\t}\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tthis.getData(this.folder.component, this.folder.name, pageNumber, this.page.pageSize);\n\t}\n\n\tonSelect(folder: SiteEntity): void {\n\t\tthis.page.results = [];\n\n\t\tif (folder.name === \"raw\") {\n\t\t\tthis.enableSelectableImages = true;\n\t\t} else {\n\t\t\tthis.enableSelectableImages = false;\n\t\t}\n\n\t\tlet pn: number = null;\n\t\tlet ps: number = null;\n\n\t\tif (folder.name === \"raw\") {\n\t\t\tif (this.page.pageNumber == null) {\n\t\t\t\tpn = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpn = this.page.pageNumber;\n\t\t\t}\n\t\t\tps = this.constPageSize;\n\t\t}\n\n\t\tthis.folder = folder;\n\n\t\tthis.video.src = null;\n\t\tthis.video.name = null;\n\n\t\tthis.getData(folder.component, folder.name, pn, ps);\n\t}\n\n\tgetData(component: string, folder: string, pageNumber: number, pageSize: number) {\n\t\tthis.service.getObjects(component, folder, pageNumber, pageSize).then(resultSet => {\n\t\t\tthis.page = resultSet;\n\n\t\t\tfor (let i = 0; i < this.page.results.length; ++i) {\n\t\t\t\tlet item = this.page.results[i];\n\n\t\t\t\tif (this.isImage(item)) {\n\t\t\t\t\tthis.getThumbnail(item);\n\t\t\t\t}\n\n\t\t\t}\n\t\t});\n\t}\n\n\tisImage(item: any): boolean {\n\t\tif (item.name.toLowerCase().indexOf(\".png\") !== -1 || item.name.toLowerCase().indexOf(\".jpg\") !== -1 ||\n\t\t\titem.name.toLowerCase().indexOf(\".jpeg\") !== -1 || item.name.toLowerCase().indexOf(\".tif\") !== -1 ||\n\t\t\titem.name.toLowerCase().indexOf(\".tiff\") !== -1) {\n\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpreviewImage(event: any, image: any): void {\n\t\t//        this.bsModalRef = this.modalService.show( ImagePreviewModalComponent, {\n\t\t//            animated: true,\n\t\t//            backdrop: true,\n\t\t//            ignoreBackdropClick: true,\n\t\t//            'class': 'image-preview-modal'\n\t\t//        } );\n\t\t//        this.bsModalRef.content.image = image;\n\t\t//        this.bsModalRef.content.src = event.target.src;\n\t}\n\n\ttoggleExcludeImage(event: any, image: any): void {\n\t\tthis.service.setExclude(image.id, !image.exclude).then(result => {\n\t\t\timage.exclude = result.exclude;\n\t\t});\n//\n//\n//\t\tif (image.exclude) {\n//\t\t\tthis.excludes.push(image.name);\n//\t\t}\n//\t\telse {\n//\t\t\tlet position = this.excludes.indexOf(image.name);\n//\t\t\tif (position > -1) {\n//\t\t\t\tthis.excludes.splice(position, 1);\n//\t\t\t}\n//\t\t}\n\t}\n\n\tisProcessable(item: any): boolean {\n\t\treturn this.metadataService.isProcessable(item.type);\n\t}\n\t\n\thandleErosPush(): void {\n\t  this.processRunning = true;\n\t\n\t  this.service.pushToEros(this.entity.id).then(data => {\n\t\t\tthis.processRunning = false;\n\t\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.showOrthoRerunMessage = false;\n\t\t\t\tthis.statusMessage = \"Your process is started.\";\n\t\t\t}, 30000);\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\thandleRunOrtho(): void {\n\n\t\t// this.notificationModalRef = this.modalService.show( NotificationModalComponent, {\n\t\t//     animated: true,\n\t\t//     backdrop: true,\n\t\t//     ignoreBackdropClick: true,\n\t\t//     class: 'modal-dialog-centered'\n\t\t// } );\n\t\t// this.notificationModalRef.content.message = \"Your ortho task is running for [\" + this.entity.name + \"]. You can view the current process and results on your tasks page.\";\n\t\t// this.notificationModalRef.content.submitText = 'OK';\n\n\n\t\tevent.stopPropagation();\n\n\t\tthis.confirmModalRef = this.modalService.show(BasicConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'confirmation-modal'\n\t\t});\n\t\tthis.confirmModalRef.content.message = 'Running this process will replace all output products for this ' + this.entity.type + '. Are you sure you want to re-process this data?';\n\t\t// this.bsModalRef.content.data = node;\n\t\tthis.confirmModalRef.content.type = 'DANGER';\n\t\tthis.confirmModalRef.content.submitText = \"Run Process\";\n\n\t\t(<BasicConfirmModalComponent>this.confirmModalRef.content).onConfirm.subscribe(data => {\n\t\t\tthis.processRunning = true;\n\t\t\tthis.showOrthoRerunMessage = true;\n\n\t\t\tthis.service.runOrtho(this.entity.id).then(data => {\n\t\t\t\tthis.processRunning = false;\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.showOrthoRerunMessage = false;\n\t\t\t\t\tthis.statusMessage = \"Your process is started.\";\n\t\t\t\t}, 30000);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\n\t}\n\n\thandleDownload(): void {\n\n\t\twindow.location.href = acp + '/project/download-all?id=' + this.folder.component + \"&key=\" + this.folder.name;\n\n\t\t//      this.service.downloadAll( data.id ).then( data => {\n\t\t//        \n\t\t//      } ).catch(( err: HttpErrorResponse ) => {\n\t\t//          this.error( err );\n\t\t//      } );\n\t}\n\t\n\thandleDownloadOdmAll(): void {\n\n    window.location.href = acp + '/project/download-odm-all?colId=' + this.entity.id;\n\n    //      this.service.downloadAll( data.id ).then( data => {\n    //        \n    //      } ).catch(( err: HttpErrorResponse ) => {\n    //          this.error( err );\n    //      } );\n  }\n\n\thandleDownloadVideo(src: string): void {\n\n\t\twindow.location.href = src;\n\t}\n\n\thandleDownloadFile(item: SiteEntity): void {\n\t\twindow.location.href = acp + '/project/download?id=' + this.folder.component + \"&key=\" + item.key;\n\t}\n\n\thandleSetMetadata(): void {\n\t\tlet modalRef = this.modalService.show(MetadataModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\t\tmodalRef.content.init(this.entity.id);\n\n\t\tmodalRef.content.onMetadataChange.subscribe(() => {\n\t\t\tthis.entity.metadataUploaded = true;\n\t\t});\n\t}\n\t\n\tcapitalize(str): string {\n    return str.replace(/^\\w/, c => c.toUpperCase());\n  }\n\n\n\tshowVideo(item: SiteEntity): void {\n\t\tthis.video.name = null;\n\t\tthis.video.src = null;\n\n\t\t// We have to null out the video and then set it after angular has refereshed\n\t\t// Otherwise the video tag does not register that the src has changed.\n\t\tsetTimeout(() => {\n\t\t\tthis.video.name = item.name;\n\t\t\tthis.video.src = acp + '/project/download?id=' + this.folder.component + \"&key=\" + item.key; // + \"#\" + Math.random();\n\t\t}, 200);\n\t}\n\n\tcloseVideo(): void {\n\t\tthis.video.name = null;\n\t\tthis.video.src = null;\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t  this.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\n\nimport { Product, ProductDetail } from '../model/management';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ProductService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\tgetProducts(id: string): Promise<Product[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\n\t\treturn this.http.get<Product[]>(acp + '/product/get-all', { params: params }).toPromise();\n\t}\n\n\tgetDetail(id: string, pageNumber: number, pageSize: number): Promise<ProductDetail> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('id', id);\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\tparams = params.set('pageSize', pageSize.toString());\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<ProductDetail>(acp + '/product/detail', { params: params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tremove(id: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/product/remove', JSON.stringify({ id: id }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\ttogglePublish(id: string): Promise<ProductDetail> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<ProductDetail>(acp + '/product/toggle-publish', JSON.stringify({ id: id }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n}\n","<div *ngIf=\"!showSite\" class=\"modal-body\" style=\"padding-bottom: 0;\">\n  <div>\n    <div *ngIf=\"message != null\" class=\"error-container\">\n      <div class=\"label-holder\">\n        <strong>Error</strong>\n      </div>\n      <div class=\"holder\">\n        <div>\n          <p class=\"error-message\">{{message}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"product != null\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2>{{product.name}}</h2>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <ul class=\"breadcrumb\" style=\"margin-bottom: 10px;\">\n            <li *ngFor=\"let entity of product.entities\">\n              <span> {{entity.name}}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"\" *ngIf=\"thumbnails[product.id] != null\">\n            <a class=\"thumbnail non-clickable\">\n              <img class=\"\" [src]=\"thumbnails[product.id] | safeHtml\" (error)=\"getDefaultImgURL($event)\" alt=\"Image\">\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>Pilot Name: </label> &nbsp; {{product.pilotName}}\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>Date/Time: </label> &nbsp; {{product.dateTime}}\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <label>Sensor Information:</label> &nbsp; {{product.sensor}}\n        </div>\n      </div>\n\n      <!-- <div class=\"row\">\n      <div class=\"col-md-12\">\n        <label>Raw Images</label> \n      </div>\n    </div> -->\n      <div class=\"row\" style=\"background-color: #ececec;\">\n        <div class=\"col-md-12\">\n          <div id=\"image-list-container\">\n            <h3>Raw Images</h3>\n            <ul class=\"list-group row\">\n              <li *ngFor=\"let item of product.page.resultSet | paginate: { itemsPerPage: product.page.pageSize, currentPage: product.page.pageNumber, totalItems: product.page.count }\" class=\"list-group-item col-xs-3\" style=\"background:none;\">\n                <div class=\"\" *ngIf=\"thumbnails[item.id] != null\">\n                  <a class=\"thumbnail\" (click)=\"previewImage(item)\">\n                    <img [src]=\"thumbnails[item.id] | safeHtml\" (error)=\"getDefaultImgURL($event)\" alt=\"Image\">\n                    <div class=\"caption\">\n                      <h4 class=\"media-heading\">{{item.name}}</h4>\n                    </div>\n                  </a>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n      </div>\n\n\n      <div class=\"row\" style=\"background-color: #ececec;\">\n        <div class=\"btn-holder\" style=\"text-align: right;margin:20px 20px 20px 20px;\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Close</button>\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"handleDownload()\">Download ODM Files</button>\n          <button (click)=\"handleGoto()\" class=\"btn btn-primary\" style=\"margin-left: 5px;\">\n            Collection Details\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<leaf-modal *ngIf=\"showSite\" [initData]=\"initData\"></leaf-modal>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { LeafModalComponent } from './leaf-modal.component'\nimport { ImagePreviewModalComponent } from '../modal/image-preview-modal.component';\n\nimport { ProductDetail, SiteEntity } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\nimport { ProductService } from '@site/service/product.service';\n\nimport {\n\tfadeInOnEnterAnimation,\n\tfadeOutOnLeaveAnimation,\n\tbounceInOnEnterAnimation,\n} from 'angular-animations';\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'product-modal',\n\ttemplateUrl: './product-modal.component.html',\n\tproviders: [LeafModalComponent],\n\tstyleUrls: [],\n\tanimations: [\n\t\tfadeInOnEnterAnimation(),\n\t\tfadeOutOnLeaveAnimation(),\n\t\tbounceInOnEnterAnimation()\n\t]\n})\nexport class ProductModalComponent implements OnInit {\n\tproduct: ProductDetail;\n\n\tthumbnails: any = {};\n\titems: any[] = [];\n\tshowSite: boolean = false;\n\tmessage: string;\n\tinitData: any;\n\trawImagePreviewModal: BsModalRef;\n\n\tconstructor(private pService: ProductService, private service: ManagementService, public bsModalRef: BsModalRef, private modalService: BsModalService) { }\n\n\tngOnInit(): void {\n\t}\n\n\tinit(product: ProductDetail): void {\n\t\tthis.product = product;\n\n\t\tif (this.product.imageKey) {\n\t\t\tthis.getThumbnail(this.product.id, this.product.imageKey);\n\t\t}\n\n\t\tthis.product.page.resultSet.forEach(pDocument => {\n\t\t\tthis.getThumbnail(pDocument.id, pDocument.key);\n\t\t});\n\t}\n\n\tcreateImageFromBlob(image: Blob, id: string) {\n\t\tlet reader = new FileReader();\n\t\treader.addEventListener(\"load\", () => {\n\t\t\t// this.imageToShow = reader.result;\n\t\t\tthis.thumbnails[id] = reader.result;\n\t\t}, false);\n\n\t\tif (image) {\n\t\t\treader.readAsDataURL(image);\n\t\t}\n\t}\n\n\tgetThumbnail(id: string, key: string): void {\n\n\t\tconst component: string = this.product.entities[this.product.entities.length - 1].id;\n\t\tconst rootPath: string = key.substr(0, key.lastIndexOf(\"/\"));\n\t\tconst fileName: string = /[^/]*$/.exec(key)[0];\n\t\tconst lastPeriod: number = fileName.lastIndexOf(\".\");\n\t\tconst thumbKey: string = rootPath + \"/thumbnails/\" + fileName.substr(0, lastPeriod) + \".png\";\n\n\t\tthis.service.download(component, thumbKey, false).subscribe(blob => {\n\t\t\tthis.createImageFromBlob(blob, id);\n\t\t}, error => {\n\t\t\tconsole.log(error);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tthis.pService.getDetail(this.product.id, pageNumber, 20).then(detail => {\n\t\t\tthis.init(detail);\n\t\t});\n\t}\n\n\tgetDefaultImgURL(event: any): void {\n\t\tevent.target.src = acp + \"/net/geoprism/images/thumbnail-default.png\";\n\t}\n\n\thandleGoto(): void {\n\t\tconst entity = this.product.entities[this.product.entities.length - 1];\n\t\tconst breadcrumbs = this.product.entities;\n\n\n\t\tthis.service.getItems(entity.id, null).then(nodes => {\n\t\t\tthis.initData = { \"entity\": entity, \"folders\": nodes, \"previous\": breadcrumbs }\n\n\t\t\tthis.showSite = true;\n\t\t});\n\n\t}\n\n\tpreviewImage(image: SiteEntity): void {\n\n\t\tthis.rawImagePreviewModal = this.modalService.show(ImagePreviewModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: false,\n\t\t\t'class': 'image-preview-modal'\n\t\t});\n\t\tthis.rawImagePreviewModal.content.init(image.component, image.key);\n\t}\n\n    handleDownload(): void {\n      //const entity = this.product.entities[this.product.entities.length - 1];        \n\n      window.location.href = acp + '/product/get-odm-all?id=' + this.product.id;\n    }\n\n\n\terror(err: HttpErrorResponse): void {\n\t  this.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"list-group\">\n\n    <div *ngIf=\"products.length < 1\" [@fadeInOnEnter] style=\"padding: 10px;text-align: center;color: grey;\">\n        <h4>\n          <span *ngIf=\"loading\">\n            <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i>\n            Loading Products\n          </span>\n          <p *ngIf=\"!loading\">No data found</p>\n        </h4>\n    </div>\n    \n    <div *ngFor=\"let product of products\" class=\"list-group-item\">\n        <div class=\"card card-default\" [@fadeInOnEnter] [@fadeOutOnLeave]>\n            <div class=\"card-body\">\n                <h5 class=\"card-title\" style=\"color:#a0a0a0\">\n                    {{product.name}}\n                </h5>\n\n                <ul class=\"breadcrumb\" style=\"margin: 5px 0 5px 0;\">\n                    <li *ngFor=\"let entity of product.entities\">\n                        <span> {{entity.name}} </span>\n                    </li>\n                </ul>\n\n                <div class=\"card-left\" style=\"width:calc(100% - 7.2em); padding:0px;\">\n                    \n                    <!-- <img src=\"https://via.placeholder.com/150x75\" class=\"img-responsive\"> -->\n\n                    <div *ngIf=\"thumbnails[product.id] != null\">\n                        <a class=\"thumbnail\" (click)=\"previewImage(product)\">\n                            <img class=\"\" [src]=\"thumbnails[product.id] | safeHtml\" (error)=\"getDefaultImgURL($event)\" alt=\"Image\">\n                        </a>\n                    </div>\n                </div>\n                <div class=\"card-right\" style=\"padding:0px; width: 7.2em;\">\n                    <ul style=\"list-style: none;padding: 0;\">\n                        <li style=\"padding: 3px 0 3px 0; min-width:6em;\">\n                            <a class=\"fa fa-globe\" [style]=\"hasOrthoLayer(product) ? '' : 'cursor:not-allowed;'\" aria-hidden=\"true\" (click)=\"handleMapIt(product)\" title=\"View the Orthomosaic generated from the raw data using ODM.\">Aerial</a>\n                            <i *ngIf=\"product.orthoMapped\" [@bounceInOnEnter] [@bounceOutOnLeave] class=\"fas fa-check\" style=\"color: #007276;float: right;vertical-align: middle;line-height: 20px;\"></i>\n                        </li>\n                        <li style=\"padding: 3px 0 3px 0; min-width:7.2em;\">\n                            <a class=\"fa fa-industry\" [style]=\"hasDemLayer(product) ? '' : 'cursor:not-allowed;'\" aria-hidden=\"true\" (click)=\"handleMapDem(product)\" title=\"View the DEM hillshade.\">Hillshade</a>\n                            <i *ngIf=\"product.demMapped\" [@bounceInOnEnter] [@bounceOutOnLeave] class=\"fas fa-check\" style=\"color: #007276;float: right;vertical-align: middle;line-height: 20px;\"></i>\n                        </li>\n                        <li style=\"padding: 3px 0 3px 0;\">\n                            <a class=\"fa fa-cube\" [style]=\"product.hasPointcloud ? '' : 'cursor:not-allowed;'\" aria-hidden=\"true\" (click)=\"handlePointcloud(product)\" title=\"View the 3D pointcloud for this product using the Potree viewer.\">3D</a>\n                        </li>\n                        <li style=\"padding: 3px 0 3px 0;\">\n                            <a class=\"fa fa-info-circle\" (click)=\"handleGetInfo(product)\" title=\"View more information about this product, including raw data.\">Get Info</a>\n                        </li>\n                        <li style=\"padding: 3px 0 3px 0;\">\n                            <a class=\"fa fa-trash-alt\" (click)=\"handleDelete(product, $event)\" title=\"Deletes the product and all associated data and public map services.\">Delete</a>\n                        </li>\n                        <li *ngIf=\"product.published\" style=\"padding: 3px 0 3px 0;\">\n                            <a class=\"fa fa-arrow-alt-circle-down\" (click)=\"handleTogglePublish(product)\" title=\"Unpublishes the layer from the public mosaic. This layer will no longer be publicly accessible from Geoserver.\">Unpublish</a>\n                        </li>\n                        <li *ngIf=\"!product.published\" style=\"padding: 3px 0 3px 0;\">\n                            <a class=\"fa fa-arrow-alt-circle-up\" (click)=\"handleTogglePublish(product)\" title=\"Publish the product to the publish mosaic. The aerial and hillshade services will be publicly accessible.\">Publish</a>\n                        </li>\n                    </ul>             \n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, Input, Output, EventEmitter, SimpleChanges } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\nimport { ImagePreviewModalComponent } from '../modal/image-preview-modal.component';\nimport { ProductModalComponent } from '../modal/product-modal.component';\n\nimport { Product } from '@site/model/management';\nimport { ProductService } from '@site/service/product.service';\nimport { ManagementService } from '@site/service/management.service';\n\nimport {\n    fadeInOnEnterAnimation,\n    fadeOutOnLeaveAnimation,\n    bounceInOnEnterAnimation,\n    bounceOutOnLeaveAnimation\n} from 'angular-animations';\n\ndeclare var acp: string;\n\n@Component({\n    selector: 'product-panel',\n    templateUrl: './product-panel.component.html',\n    animations: [\n        fadeInOnEnterAnimation(),\n        fadeOutOnLeaveAnimation(),\n        bounceInOnEnterAnimation(),\n        bounceOutOnLeaveAnimation()\n    ]\n})\nexport class ProductPanelComponent {\n\n    @Input() id: string;\n\n    @Output() public toggleMapOrtho = new EventEmitter<Product>();\n    \n    @Output() public toggleMapDem = new EventEmitter<Product>();\n\n    /* \n     * List of products for the current node\n     */\n    products: Product[] = [];\n\n    thumbnails: any = {};\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n    \n    loading: boolean = false;\n\n\n    constructor(private pService: ProductService, private mService: ManagementService, private modalService: BsModalService) { }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        this.refreshProducts(changes['id'].currentValue);\n    }\n\n    refreshProducts(id: string): void {\n        this.products = [];\n        this.thumbnails = {};\n        \n        this.loading = true;\n\n        this.pService.getProducts(id).then(products => {\n            this.products = products;\n            this.loading = false;\n\n            this.products.forEach(product => {\n                this.getThumbnail(product);\n            });\n        });\n    }\n\n    createImageFromBlob(image: Blob, product: Product) {\n        let reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n            // this.imageToShow = reader.result;\n            this.thumbnails[product.id] = reader.result;\n        }, false);\n\n        if (image) {\n            reader.readAsDataURL(image);\n        }\n    }\n    \n    hasOrthoLayer(product: Product): boolean {\n      let len = product.layers.length;\n      for (let i = 0; i < len; ++i)\n      {\n        if (product.layers[i].classification === 'ORTHO' && product.layers[i].key != null && product.layers[i].key.length > 0)\n        {\n          return true;\n        }\n      }\n      \n      return false;\n    }\n    \n    hasDemLayer(product: Product): boolean {\n      let len = product.layers.length;\n      for (let i = 0; i < len; ++i)\n      {\n        if ((product.layers[i].classification === 'DEM_DSM' || product.layers[i].classification === 'DEM_DTM') && product.layers[i].key != null && product.layers[i].key.length > 0)\n        {\n          return true;\n        }\n      }\n      \n      return false;\n    }\n\n    getThumbnail(product: Product): void {\n\n        // imageKey only exists if an image actually exists on s3\n        if (product.imageKey) {\n            const component: string = product.entities[product.entities.length - 1].id;\n            const rootPath: string = product.imageKey.substr(0, product.imageKey.lastIndexOf(\"/\"));\n            const fileName: string = /[^/]*$/.exec(product.imageKey)[0];\n            const lastPeriod: number = fileName.lastIndexOf(\".\");\n            const thumbKey: string = rootPath + \"/thumbnails/\" + fileName.substr(0, lastPeriod) + \".png\";\n\n            this.mService.download(component, thumbKey, false).subscribe(blob => {\n                this.createImageFromBlob(blob, product);\n            }, error => {\n                console.log(error);\n\n                this.thumbnails[product.id] = acp + \"/net/geoprism/images/thumbnail-default.png\";\n\n            });\n        }\n        else {\n            this.thumbnails[product.id] = acp + \"/net/geoprism/images/thumbnail-default.png\";\n        }\n    }\n\n    getDefaultImgURL(event: any): void {\n        event.target.src = acp + \"/net/geoprism/images/thumbnail-default.png\";\n    }\n\n    handleMapIt(product: Product): void {\n      if (this.hasOrthoLayer(product))\n      {\n        this.toggleMapOrtho.emit(product);\n      }\n    }\n    \n    handleMapDem(product: Product): void {\n      if (this.hasDemLayer(product))\n      {\n        this.toggleMapDem.emit(product);\n      }\n    }\n    \n    handlePointcloud(product: Product): void {\n      if (product.hasPointcloud)\n      {\n        let componentId: string = product.entities[product.entities.length-1].id;\n      \n        window.open(acp + \"/pointcloud/\" + componentId + \"/potree\");\n      }\n    }\n\n    handleDelete(product: Product, event: any): void {\n\n        event.stopPropagation();\n\n        this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.message = 'Are you sure you want to delete [' + product.name + ']?';\n        this.bsModalRef.content.data = product;\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = 'Delete';\n\n        (<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.remove(data);\n        });\n    }\n\n    remove(product: Product): void {\n        this.pService.remove(product.id).then(response => {\n            this.products = this.products.filter((n: any) => n.id !== product.id);\n        });\n    }\n\n    previewImage(product: Product): void {\n        const component: string = product.entities[product.entities.length - 1].id;\n\n        this.bsModalRef = this.modalService.show(ImagePreviewModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: false,\n            'class': 'image-preview-modal'\n        });\n        this.bsModalRef.content.init(component, product.imageKey);\n    }\n\n    handleGetInfo(product: Product): void {\n        this.pService.getDetail(product.id, 1, 20).then(detail => {\n            this.bsModalRef = this.modalService.show(ProductModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true,\n                'class': 'product-info-modal'\n            });\n            this.bsModalRef.content.init(detail);\n        });\n    }\n\n    handleTogglePublish(product: Product): void {\n        this.pService.togglePublish(product.id).then(p => {\n            const mapIt:boolean = product.orthoMapped;\n            const demMapped:boolean = product.demMapped;\n            \n            if (mapIt) {\n                this.toggleMapOrtho.emit(product);\n            }\n            if (demMapped) {\n                this.toggleMapDem.emit(product);\n            }\n\n            product.published = p.published;\n            product.layers = p.layers;\n\n            if (mapIt) {\n                this.toggleMapOrtho.emit(product);\n            }\n            if (demMapped) {\n                this.toggleMapDem.emit(product);\n            }\n        });\n    }\n}\n","<div *ngIf=\"entity != null\" class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"error-container\">\n    <div class=\"label-holder\">\n      <strong>Error</strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"error-message\">{{message}}</p>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"newInstance\" class=\"modal-title-container\">\n      <h3 >Add new {{entity.type}}</h3>\n  </div>\n\n  <form #ngForm=\"ngForm\">\n    <div *ngFor=\"let attribute of attributes\">\n      <div *ngIf=\"evaluate(attribute)\" class=\"form-group\">\n        <div *ngIf=\"attribute.type === 'text'\">\n          <label>{{attribute.label}}</label>\n          <input [(ngModel)]=\"entity[attribute.name]\" [name]=\"attribute.name\" type=\"input\" class=\"form-control\" [disabled]=\"attribute.readonly\" [placeholder]=\"attribute.label\" [required]=\"attribute.required\" />\n        </div>\n        <div *ngIf=\"attribute.type === 'list'\">\n          <label>{{attribute.label}}</label>\n          <select [(ngModel)]=\"entity[attribute.name]\" [name]=\"attribute.name\" type=\"input\" [disabled]=\"attribute.readonly\" [required]=\"attribute.required\">\n            <option></option>\n            <option *ngFor=\"let option of attribute.options\" [value]=\"option.value\">{{option.label}}</option>\n          </select>\n        </div>\n        <div *ngIf=\"attribute.type === 'text-area'\">\n          <label>{{attribute.label}}</label>\n          <textarea [(ngModel)]=\"entity[attribute.name]\" [name]=\"attribute.name\"  [disabled]=\"attribute.readonly\" class=\"form-control\" [required]=\"attribute.required\">\n          </textarea>\n        </div>\n        <div *ngIf=\"attribute.type === 'point'\">          \n          <map-attribute [(site)]=\"entity\" [center]=\"center\" [zoom]=\"zoom\" ></map-attribute>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"form-group\" *ngIf=\"entity.type === 'Collection' && !newInstance\">\n        <label>Privilege </label>\n        \n        <select style=\"padding:6px 10px;font-size:14px;\" [(ngModel)]=\"entity.privilegeType\" name=\"collection-privilege\" type=\"input\" [required]=\"true\" \n           [disabled]=\"admin === false || entity.ownerName !== userName\">\n            <option value=\"OWNER\">Owner</option>\n            <option value=\"AGENCY\">Agency</option>\n            <option value=\"PUBLIC\">Public</option>\n        </select>\n\n    </div>\n\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Cancel</button>\n      <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\" [disabled]=\"!ngForm.valid\">Apply</button>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { LngLat } from 'mapbox-gl';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { SiteEntity, AttributeType } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\n\n\n@Component({\n\tselector: 'entity-modal',\n\ttemplateUrl: './entity-modal.component.html',\n\tstyleUrls: []\n})\nexport class EntityModalComponent implements OnInit {\n    /*\n     * parent id of the node being created\n     */\n\tparentId: string;\n\tuserName: string = \"\";\n\n\tentity: SiteEntity;\n\n\tattributes: AttributeType[];\n\n\tadmin: boolean = false;\n\n\tnewInstance: boolean = false;\n\n\tmessage: string = null;\n\n\tcenter: LngLat = null;\n\tzoom: number = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n\tpublic onNodeChange: Subject<SiteEntity>;\n\n\tconstructor(private service: ManagementService, public bsModalRef: BsModalRef) { }\n\n\tngOnInit(): void {\n\t\tthis.onNodeChange = new Subject();\n\t}\n\n\tinit(newInstance: boolean, userName: string, admin: boolean, entity: SiteEntity, attributes: AttributeType[], center: LngLat, zoom: number) {\n\t\tthis.newInstance = newInstance;\n\t\tthis.userName = userName;\n\t\tthis.admin = admin;\n\t\tthis.entity = entity;\n\t\tthis.attributes = attributes;\n\t\tthis.center = center;\n\t\tthis.zoom = zoom;\n\t}\n\n\thandleOnSubmit(): void {\n\t\tthis.message = null;\n\n\t\tif (this.entity.type !== 'Site' || this.entity.geometry != null) {\n\t\t\tif (this.newInstance) {\n\t\t\t\tthis.service.applyWithParent(this.entity, this.parentId).then(data => {\n\t\t\t\t\tthis.onNodeChange.next(data);\n\t\t\t\t\tthis.bsModalRef.hide();\n\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\tthis.error(err);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.service.update(this.entity).then(node => {\n\t\t\t\t\tthis.onNodeChange.next(node);\n\n\t\t\t\t\tthis.bsModalRef.hide();\n\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\tconsole.log(err);\n\n\t\t\t\t\tthis.error(err);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.message = \"Sites require a location\";\n\t\t}\n\t}\n\n\tevaluate(attribute: AttributeType): boolean {\n\n\t\tif (this.newInstance && attribute.readonly) {\n\t\t\treturn false;\n\t\t}\n\t\telse if (attribute.condition != null) {\n\t\t\treturn this.service.evaluate(attribute.condition, this.entity);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t  this.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div>\n  <div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n\n\n    <div *ngIf=\"message != null && message.length > 0\" class=\"row error-container\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <div class=\"label-holder\">\n          <strong style=\"color:#8c0000;\">Error</strong>\n        </div>\n        <div class=\"holder\">\n          <div>\n            <p class=\"error-message\">{{message}}</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n\n    <div class=\"row\" *ngIf=\"!existingTask\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <ol class=\"list-group list-group-horizontal\">\n          <!-- \n          <li class=\"list-group-item\" [ngClass]=\"{'list-group-item-success':page.type === 'FILE'}\" >Upload</li>\n -->\n\n          <modal-step-indicator [stepConfig]=\"modalStepConfig\"></modal-step-indicator>\n\n          <!-- <li class=\"list-group-item\" [ngClass]=\"{'list-group-item-success':page.type === 'CATEGORY'}\">Categories</li> -->\n          <!-- <li class=\"list-group-item\" [ngClass]=\"{'list-group-item-success':page.type === 'SUMMARY'}\">Finalize</li> -->\n        </ol>\n      </div>\n    </div>\n\n    <div class=\"row\" *ngIf=\"!existingTask && labels.length > 0\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <ul class=\"breadcrumb\">\n          <li [@fadeInOnEnter] *ngFor=\"let label of labels\">\n            <span> {{label}}</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <!-- Section for each page -->\n    <div class=\"row\" *ngIf=\"page.type === 'CATEGORY'\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n\n        <div class=\"form-group\">\n          <label [for]=\"page.selection.type\">{{page.selection.type}}:</label>\n\n          <div *ngIf=\"!page.selection.isNew\" class=\"row\">\n            <div class=\"col-md-8\">\n              <select [name]=\"page.selection.type\" [(ngModel)]=\"page.selection.value\" [disabled]=\"page.selection.isNew\"\n                required>\n                <option></option>\n                <option *ngFor=\"let option of page.options\" [value]=\"option.id\">{{option.name}}</option>\n              </select>\n            </div>\n            <div class=\"col-md-2\">\n              <button *ngIf=\"!page.selection.isNew\" type=\"button btn btn-primary\" class=\"btn btn-primary\"\n                (click)=\"setIsNew(true)\">\n                Add\n              </button>\n            </div>\n          </div>\n        </div>\n        <div [@fadeInOnEnter] *ngIf=\"page.selection.isNew\" class=\"form-group\">\n          <div class=\"row\">\n            <div class=\"col-md-8\">\n              <input autofocus [(ngModel)]=\"page.selection.label\" name=\"label\" type=\"input\" class=\"form-control\"\n                [placeholder]=\"page.selection.type + ' name...'\" required />\n            </div>\n            <div class=\"col-md-2\">\n              <button type=\"button btn btn-primary\" class=\"btn btn-primary\" (click)=\"setIsNew(false)\">\n                Cancel\n              </button>\n            </div>\n          </div>\n          <div [@fadeInOnEnter] class=\"row\" *ngIf=\"hasField('platform')\">\n            <div class=\"col-md-8\">\n              <label for=\"platform\" style=\"margin-top: 10px;\">Platform:</label>\n              <select [(ngModel)]=\"page.selection.platform\" name=\"platform\" type=\"input\" required>\n                <option></option>\n                <option *ngFor=\"let platform of platforms\" [value]=\"platform.oid\">{{platform.displayLabel}}</option>\n              </select>\n            </div>\n          </div>\n          <div [@fadeInOnEnter] class=\"row\" *ngIf=\"hasField('sensor')\">\n            <div class=\"col-md-8\">\n              <label for=\"sensor\" style=\"margin-top: 10px;\">Sensor:</label>\n              <select [(ngModel)]=\"page.selection.sensor\" name=\"sensor\" type=\"input\" required>\n                <option></option>\n                <option *ngFor=\"let sensor of sensors\" [value]=\"sensor.oid\">{{sensor.displayLabel}}</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Summary page -->\n    <div [@fadeInOnEnter] class=\"row\" *ngIf=\"page.type === 'SUMMARY' && !existingTask && currentTask == null\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n\n        <div *ngFor=\"let selection of selections\" class=\"form-group\">\n          <label [for]=\"selection.type\">{{selection.type}}:</label>\n          <input [(ngModel)]=\"selection.label\" [name]=\"selection.type\" type=\"input\" class=\"form-control\" disabled\n            required />\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"outFileName\">Output Product Name Prefix</label>\n          <input [(ngModel)]=\"values.outFileName\" name=\"outFileName\" type=\"input\" class=\"form-control\"\n            placeholder=\"Output product name prefix...\" />\n        </div>\n        <div class=\"form-group\">\n           <boolean-field [value]=\"processUpload\" label=\"Generate products from raw images\" (valueChange)=\"updateProcessUpload($event)\"></boolean-field>\n        </div>\n      </div>\n    </div>\n\n    <!-- <div [@fadeInOnEnter] class=\"row\" *ngIf=\"finishedTask != null\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <a (click)=\"handleAddMetadata(finishedTask)\">Add Metadata</a>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div> -->\n\n\n    <div [@fadeInOnEnter] [hidden]=\"page.type !== 'FILE' && page.type !== 'SUMMARY'\" class=\"row\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n\n        <!-- Existing task panel -->\n        <div *ngIf=\"existingTask && !currentTask\">\n          <div class=\"panel panel-warning\" style=\"margin: 30px 0 30px 0;\">\n            <div class=\"panel-heading\" style=\"font-size: 20px;\">Partial Upload Detected</div>\n            <div class=\"panel-body\">\n              <h4>A partial upload was detected. You can either cancel that partial upload or attempt to\n                continue.</h4>\n              <h4>\n                <b>To continue an upload</b>\n                please re-upload your file and we will try our best to continue where you left off.\n              </h4>\n\n              <hr>\n              <button type=\"button\" class=\"btn btn-danger\" style=\"margin-top: 20px;\" (click)=\"removeUpload($event)\">\n                <i class=\"icon-upload icon-white\"></i>\n                Cancel Upload\n              </button>\n              <!-- \n                            <button type=\"button\" class=\"btn btn-primary\" style=\"margin-top: 20px;\"\n                                (click)=\"showUploadPanel()\">\n                                <i class=\"icon-upload icon-white\"></i>\n                                Continue Upload\n                            </button>\n -->\n            </div>\n          </div>\n        </div> <!-- End existing task panel -->\n\n        <!-- Task finished upload notification -->\n        <div *ngFor=\"let note of taskFinishedNotifications\" class=\"panel panel-success\" style=\"margin: 30px 0 30px 0;\">\n          <div class=\"panel-heading\" style=\"font-size: 20px;\">\n            Upload Details\n            <i class=\"fa fa-times btn btn-close pull-right\" style=\"min-width:20px;padding:0;line-height: 27px;\"\n              (click)=\"closeTaskFinishedNotification(note.id)\"></i>\n          </div>\n          <div class=\"panel-body\">\n            <h4>\n              Status:\n              <b> Upload successfully completed </b>\n            </h4>\n            <h4>\n              Message:\n              <b> {{note.message}} </b>\n              <!-- You can view your uploads on the <a href=\"management#/site/tasks\" >Workflow Task page</a>. -->\n            </h4>\n          </div>\n        </div> <!-- End task finished upload notification -->\n\n        <!-- Current upload indicator -->\n        <div class=\"\" [hidden]=\"!uploadVisible\">\n\n          <div class=\"well\">\n            <h4>All files uploaded through the upload wizard must</h4>\n            <ul>\n              <li>be compressed into a .zip or .tar.gz format </li>\n              <li>not contain spaces or special characters such as <, >, -, +, =, !, @, #, $, %, ^, &, *, ?,/,\\ or apostrophes in any file name</li>\n            </ul>\n\n            <h4>\n              Supported File Formats\n            </h4>\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>Type</th>\n                  <th>Formats</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>RGB Image Data</td>\n                  <td>jpg, jpeg, png</td>\n                </tr>\n                <tr>\n                  <td>Multispectral Image Data</td>\n                  <td>tif</td>\n                </tr>\n                <tr>\n                  <td>Video</td>\n                  <td>mp4</td>\n                </tr>\n              </tbody>\n            </table>\n\n          </div>\n\n          <div *ngIf=\"currentTask\" class=\"panel panel-warning\" style=\"margin: 30px 0 30px 0;\">\n            <div class=\"panel-heading\" style=\"font-size: 20px;\">Upload Details</div>\n            <div class=\"panel-body\">\n              <h4>\n                Status:\n                <b> {{currentTask.status}} </b>\n              </h4>\n              <h4>\n                Message:\n                <b> {{currentTask.message}} </b>\n              </h4>\n              <h4>\n                Upload Started On:\n                <b> {{currentTask.createDate}} </b>\n              </h4>\n              <h4>\n                Last Updated:\n                <b> {{currentTask.lastUpdatedDate}} </b>\n              </h4>\n              <h4>\n                Elapsed Time:\n                <b> {{uploadCounter}} </b>\n              </h4>\n            </div>\n          </div>\n\n          <div class=\"uploader-container\" style=\"margin-top: 20px;\" #uploader></div>\n        </div> <!-- End current upload indicator -->\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n\n    <!-- <div [@fadeInOnEnter] class=\"row\" *ngIf=\"currentTask != null\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"col-md-8\">\n        <a (click)=\"handleAddMetadata(currentTask)\">Add Metadata</a>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div> -->\n\n  </div>\n  <div class=\"modal-footer\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"btn-holder\" style=\"text-align: right;\">\n          <button type=\"button\" [disabled]=\"disabled\" (click)=\"close()\" [disabled]=\"disabled\" class=\"btn btn-default\"\n            role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n            <span class=\"ui-button-text\">Close</span>\n          </button>\n\n          <button *ngIf=\"!existingTask && page.index > 0\" type=\"button btn btn-primary\" [disabled]=\"disabled\"\n            class=\"btn btn-secondary\" (click)=\"handleBackPage()\">\n            <i class=\"icon-upload icon-white\"></i>\n            Back\n          </button>\n\n          <button *ngIf=\"!existingTask && page.index < (pages.length - 1)\" type=\"button btn btn-primary\"\n            [disabled]=\"!isPageValid(page) || disabled\" class=\"btn btn-primary\" (click)=\"handleNextPage()\">\n            <i class=\"icon-upload icon-white\"></i>\n            Next\n          </button>\n\n          <button *ngIf=\"page.index === (pages.length - 1)\" type=\"button btn btn-primary\"\n            [disabled]=\"!isPageValid(page) || disabled\" class=\"btn btn-primary\" (click)=\"handleUpload()\">\n            <i class=\"icon-upload icon-white\"></i>\n            Upload\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n</div>","import { Component, OnInit, ViewChild, ElementRef, KeyValueDiffers, HostListener } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\n\nimport { interval, Subject } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\n//use Fine Uploader UI for traditional endpoints\nimport { FineUploader, UIOptions } from 'fine-uploader';\n\nimport { ErrorHandler, BasicConfirmModalComponent } from '@shared/component';\n\nimport { Sensor } from '@site/model/sensor';\nimport { Platform } from '@site/model/platform';\nimport { SiteEntity, UploadForm, Task, Selection } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\nimport { MetadataService } from '@site/service/metadata.service';\nimport { MetadataModalComponent } from './metadata-modal.component';\n\nimport { StepConfig } from '@shared/modal/step-indicator/modal-step-indicator'\n\nimport {\n\tfadeInOnEnterAnimation,\n\tfadeOutOnLeaveAnimation\n} from 'angular-animations';\n\ndeclare var acp: string;\n\nclass Page {\n\tindex: number;\n\tselection: Selection;\n\toptions: SiteEntity[];\n\ttype: string\n};\n\n@Component({\n\tselector: 'upload-modal',\n\ttemplateUrl: './upload-modal.component.html',\n\tstyleUrls: ['./upload-modal.component.css'],\n\tanimations: [\n\t\tfadeInOnEnterAnimation(),\n\t\tfadeOutOnLeaveAnimation()\n\t]\n})\nexport class UploadModalComponent implements OnInit {\n\tobjectKeys = Object.keys;\n\n\timportedValues: boolean = false;\n\n\tmessage: string = \"\";\n\n    /* \n     * Form values\n     */\n\tvalues = { create: false } as UploadForm;\n\n    /*\n     * FineUploader for uploading large files\n     */\n\tuploader = null as FineUploader;\n\n\tdisabled: boolean = false;\n\ttaskStatusMessages: string[] = [];\n\tcurrentTask: Task = null;\n\tfinishedTask: Task = null;\n\texistingTask: boolean = false;\n\ttaskPolling: any;\n\tpollingIsSet: boolean = false;\n\tuploadVisible: boolean = true;\n\tselectedContinue: boolean = false;\n\tuploadCounter: string = \"00:00:00\";\n\tuplodeCounterInterfal: any;\n\tdiffer: any;\n\tshowFileSelectPanel: boolean = false;\n\ttaskFinishedNotifications: any[] = [];\n\n\n    /*\n     * Flag indicating if the upload should be processed by ODM\n     */\n\tprocessUpload: boolean = true;\n\n    /*\n     * List of hierarchies\n     */\n\thierarchy: string[] = [];\n\n    /*\n     * List of selections: One per hierarchy type\n     */\n\tselections: Selection[] = [];\n\n    /*\n     * List of previous selection labels\n     */\n\tlabels: string[] = [];\n\n    /*\n     * List of pages\n     */\n\tpages: Page[] = [{\n\t\tindex: 0,\n\t\tselection: null,\n\t\toptions: [],\n\t\ttype: 'FILE',\n\t}];\n\n    /*\n     * Current page  \n     */\n\thierarchyChange: boolean = false;\n\n    /*\n     * Current page  \n     */\n\tpage: Page = this.pages[0];\n\n\tsensors: Sensor[] = [];\n\tplatforms: Platform[] = [];\n\n\tpublic onUploadComplete: Subject<any>;\n\n\tpublic onHierarchyChange: Subject<boolean>;\n\n\t// modalState: any = {\"state\":'category', \"attribute\":\"\", \"termOption\":\"\"}\n\n\tmodalStepConfig: StepConfig = {\n\t\t\"steps\": [\n\t\t\t{ \"label\": \"Category\", \"active\": true, \"enabled\": true },\n\t\t\t{ \"label\": \"Final\", \"active\": true, \"enabled\": false }\n\t\t]\n\t};\n\n\tconstructor(private service: ManagementService, private metadataService: MetadataService, private modalService: BsModalService, public bsModalRef: BsModalRef, differs: KeyValueDiffers) {\n\t\tthis.differ = differs.find([]).create();\n\t}\n\n\t@ViewChild('uploader') set content(elem: ElementRef) {\n\n\t\tconst that = this;\n\n\t\tif (elem != null && this.uploader == null) {\n\n\t\t\tlet uiOptions: UIOptions = {\n\t\t\t\tdebug: false,\n\t\t\t\tautoUpload: false,\n\t\t\t\tmultiple: false,\n\t\t\t\telement: elem.nativeElement,\n\t\t\t\ttemplate: 'qq-template',\n\t\t\t\trequest: {\n\t\t\t\t\tendpoint: acp + \"/file/upload\",\n\t\t\t\t\tforceMultipart: true\n\t\t\t\t},\n\t\t\t\tresume: {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\trecordsExpireIn: 1\n\t\t\t\t},\n\t\t\t\tchunking: {\n\t\t\t\t\tenabled: true\n\t\t\t\t},\n\t\t\t\tretry: {\n\t\t\t\t\tenableAuto: true\n\t\t\t\t},\n\t\t\t\ttext: {\n\t\t\t\t\tdefaultResponseError: \"Upload failed\"\n\t\t\t\t},\n\t\t\t\tfailedUploadTextDisplay: {\n\t\t\t\t\tmode: 'none'\n\t\t\t\t\t//responseProperty: 'error'\n\t\t\t\t},\n\t\t\t\tvalidation: {\n\t\t\t\t\tallowedExtensions: ['zip', 'tar.gz']\n\t\t\t\t},\n\t\t\t\tshowMessage: function(message: string) {\n\t\t\t\t\t// \n\t\t\t\t},\n\t\t\t\tcallbacks: {\n\t\t\t\t\tonUpload: function(id: any, name: any): void {\n\t\t\t\t\t\tthat.disabled = true;\n\t\t\t\t\t\tthis.finishedTask = null;\n\n\t\t\t\t\t\tthat.countUpload(that);\n\n\t\t\t\t\t\tif (that.message && that.message.length > 0) {\n\t\t\t\t\t\t\tthat.message = \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonProgress: function(id: any, name: any, uploadedBytes: any, totalBytes: any): void {\n\t\t\t\t\t},\n\t\t\t\t\tonUploadChunk: function(id: any, name: any, chunkData: any): void {\n\t\t\t\t\t},\n\t\t\t\t\tonUploadChunkSuccess: function(id: any, chunkData: any, responseJSON: any, xhr: any): void {\n\n\t\t\t\t\t\tif (responseJSON.message && responseJSON.message.currentTask && !that.currentTask) {\n\t\t\t\t\t\t\tthat.currentTask = responseJSON.message.currentTask;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (that.currentTask && !that.pollingIsSet) {\n\t\t\t\t\t\t\tthat.pollingIsSet = true;\n\n\t\t\t\t\t\t\tthat.taskPolling = interval(2000).pipe(switchMap(() => {\n\t\t\t\t\t\t\t\tif (that.currentTask) {\n\t\t\t\t\t\t\t\t\treturn that.service.task(that.currentTask.oid);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t\t.pipe(map((data) => data))\n\t\t\t\t\t\t\t\t.subscribe((data) => {\n\t\t\t\t\t\t\t\t\tthat.currentTask = data.task\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonComplete: function(id: any, name: any, responseJSON: any, xhrOrXdr: any): void {\n\t\t\t\t\t\tthat.disabled = false;\n\t\t\t\t\t\tthat.finishedTask = that.currentTask;\n\t\t\t\t\t\tthat.currentTask = null;\n\t\t\t\t\t\tthat.existingTask = false;\n\n\t\t\t\t\t\tif (!that.hierarchyChange) {\n\t\t\t\t\t\t\tfor (let i = 0; i < that.selections.length; i++) {\n\t\t\t\t\t\t\t\tif (that.selections[i].isNew) {\n\t\t\t\t\t\t\t\t\tthat.hierarchyChange = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (that.taskPolling) {\n\t\t\t\t\t\t\tthat.taskPolling.unsubscribe();\n\t\t\t\t\t\t\tthat.pollingIsSet = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.clearStoredFiles();\n\n\t\t\t\t\t\tclearInterval(that.uplodeCounterInterfal);\n\n\t\t\t\t\t\tif (responseJSON.success) {\n\t\t\t\t\t\t\t// let notificationMsg = \"\";\n\t\t\t\t\t\t\t// notificationMsg = \"Your uploaded data is being processed into final image products. You can view the progress at the Workflow Tasks page.\";\n\n\t\t\t\t\t\t\t// that.taskFinishedNotifications.push({\n\t\t\t\t\t\t\t//     'id': id,\n\t\t\t\t\t\t\t//     \"message\": notificationMsg\n\t\t\t\t\t\t\t// })\n\n\t\t\t\t\t\t\tthat.bsModalRef.hide();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthat.onUploadComplete.next();\n\t\t\t\t\t},\n\t\t\t\t\tonCancel: function(id: number, name: string) {\n\t\t\t\t\t\t//that.currentTask = null;\n\n\t\t\t\t\t\tif (that.currentTask && that.currentTask.uploadId) {\n\t\t\t\t\t\t\tthat.service.removeTask(that.currentTask.uploadId)\n\t\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t\tthis.clearStoredFiles();\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch((err: HttpErrorResponse) => {\n\t\t\t\t\t\t\t\t\tthis.error(err);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (that.existingTask) {\n\t\t\t\t\t\t\tthat.page = that.pages[0];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthat.disabled = false;\n\t\t\t\t\t\tthat.currentTask = null;\n\t\t\t\t\t\tthat.existingTask = false;\n\n\t\t\t\t\t\tif (that.taskPolling) {\n\t\t\t\t\t\t\tthat.taskPolling.unsubscribe();\n\t\t\t\t\t\t\tthat.pollingIsSet = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tclearInterval(that.uplodeCounterInterfal);\n\t\t\t\t\t},\n\t\t\t\t\tonError: function(id: number, errorReason: string, xhrOrXdr: string) {\n\t\t\t\t\t\tthat.error({ error: { message: xhrOrXdr } });\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.uploader = new FineUploader(uiOptions);\n\n\t\t}\n\t}\n\n\tngAfterViewInit() {\n\n\t}\n\n\tngDoCheck() {\n\n\t\tif (this.uploader) {\n\t\t\tconst change = this.differ.diff(this.uploader);\n\t\t\tif (change) {\n\t\t\t\tthis.setExistingTask();\n\t\t\t}\n\t\t}\n\t}\n\n\tngOnInit(): void {\n\t\tthis.onUploadComplete = new Subject();\n\t\tthis.onHierarchyChange = new Subject();\n\n\t\tthis.service.getMetadataOptions(null).then((options) => {\n\t\t\tthis.sensors = options.sensors;\n\t\t\tthis.platforms = options.platforms;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tinit(entities: SiteEntity[]): void {\n\t\tthis.hierarchy = this.metadataService.getHierarchy();\n\t\tthis.selections = [];\n\t\tthis.pages = [];\n\n\t\tfor (let i = 0; i < this.hierarchy.length; i++) {\n\t\t\tconst type = this.hierarchy[i];\n\n\t\t\tconst index = entities.findIndex(entity => { return entity.type === type });\n\n\t\t\tif (index !== -1) {\n\t\t\t\tconst entity = entities[index];\n\n\t\t\t\tthis.selections.push({ type: type, isNew: false, value: entity.id, label: entity.name });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.selections.push({ type: type, isNew: false, value: null, label: '' });\n\t\t\t}\n\n\t\t\tif (i > 0) {\n\t\t\t\tthis.pages.push({\n\t\t\t\t\tindex: (this.pages.length),\n\t\t\t\t\tselection: this.selections[i],\n\t\t\t\t\toptions: [],\n\t\t\t\t\ttype: 'CATEGORY'\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.labels.push(this.selections[0].label);\n\n\t\tthis.pages.push({\n\t\t\tindex: (this.pages.length),\n\t\t\tselection: null,\n\t\t\toptions: [],\n\t\t\ttype: 'SUMMARY'\n\t\t});\n\n\t\tthis.page = this.pages[0];\n\n\t\tthis.service.getChildren(this.selections[0].value).then(children => {\n\t\t\tthis.pages[0].options = children.filter(child => {\n\t\t\t\treturn child.type === this.pages[0].selection.type;\n\t\t\t});\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\t// Handle the case where there is an existing file upload\n\t\tif (this.existingTask) {\n\t\t\tthis.page = this.pages[this.pages.length - 1];\n\t\t}\n\t}\n\n\tclose(): void {\n\t\tif (this.hierarchyChange) {\n\t\t\tthis.onHierarchyChange.next(true);\n\t\t}\n\n\t\tthis.bsModalRef.hide();\n\t}\n\n\tcloseTaskFinishedNotification(id: string): void {\n\t\t// iterate in reverse to allow splice while avoiding the reindex\n\t\t// from affecting any of the next items in the array.\n\t\tlet i = this.taskFinishedNotifications.length;\n\t\twhile (i--) {\n\t\t\tlet note = this.taskFinishedNotifications[i];\n\t\t\tif (id === note.id) {\n\t\t\t\tthis.taskFinishedNotifications.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tsetExistingTask(): void {\n\t\tlet resumable = this.uploader.getResumableFilesData() as any[];\n\t\tif (resumable.length > 0) {\n\t\t\tthis.existingTask = true;\n\t\t\t//            if ( !this.selectedContinue ) {\n\t\t\t//                this.hideUploadPanel();\n\t\t\t//            }\n\t\t}\n\t}\n\n\tisPageValid(page: Page): boolean {\n\t\tif (page.type === 'CATEGORY') {\n\t\t\tif (page.selection != null) {\n\t\t\t\tif (page.selection.value != null && page.selection.value.length > 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse if (page.selection.label != null && page.selection.label.length > 0) {\n\t\t\t\t\tif (this.hasField('platform') && (page.selection.platform == null || page.selection.platform.length === 0)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.hasField('sensor') && (page.selection.sensor == null || page.selection.sensor.length === 0)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (page.type === 'FILE') {\n\t\t\tif (this.uploader != null) {\n\t\t\t\tconst uploads: any = this.uploader.getUploads();\n\n\t\t\t\treturn (uploads != null && uploads.length > 0);\n\t\t\t};\n\t\t}\n\t\telse if (page.type === 'SUMMARY') {\n\t\t\treturn (this.currentTask == null);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tupdateCurrentPageLabel(): void {\n\t\tthis.page.options.forEach(entity => {\n\t\t\tif (entity.id === this.page.selection.value) {\n\t\t\t\tthis.page.selection.label = entity.name;\n\t\t\t}\n\t\t})\n\t}\n\n\tsetIsNew(isNew: boolean): void {\n\t\tthis.page.selection.isNew = isNew;\n\n\t\tif (isNew) {\n\t\t\tthis.page.selection.value = null;\n\t\t}\n\t\telse {\n\t\t\tthis.page.selection.label = null;\n\t\t}\n\t}\n\n\thandleAddMetadata(task: Task): void {\n\t\tlet modalRef = this.modalService.show(MetadataModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\t\tmodalRef.content.init(task.collection);\n\t}\n\n\thandleNextPage(): void {\n\n\t\tif ((this.page.index + 1) < this.pages.length) {\n\n\t\t\tconst nextPage = this.pages[this.page.index + 1];\n\n\t\t\tif (this.page.type === 'CATEGORY') {\n\t\t\t\tthis.updateCurrentPageLabel();\n\t\t\t\tthis.labels.push(this.page.selection.label);\n\t\t\t}\n\n\t\t\tif (nextPage.type === 'CATEGORY') {\n\n\t\t\t\tif (this.page.type === 'FILE') {\n\t\t\t\t\tthis.page = nextPage;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!this.page.selection.isNew && this.page.selection.value != null && this.page.selection.value.length > 0) {\n\n\t\t\t\t\t\tthis.service.getChildren(this.page.selection.value).then(children => {\n\t\t\t\t\t\t\tnextPage.options = children.filter(child => {\n\t\t\t\t\t\t\t\treturn child.type === nextPage.selection.type;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tthis.page = nextPage;\n\t\t\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\t\t\tthis.error(err);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.page = nextPage;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.page = nextPage;\n\n\t\t\t\tthis.modalStepConfig = {\n\t\t\t\t\t\"steps\": [\n\t\t\t\t\t\t{ \"label\": \"Category\", \"active\": true, \"enabled\": false },\n\t\t\t\t\t\t{ \"label\": \"Final\", \"active\": true, \"enabled\": true }\n\t\t\t\t\t]\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\thandleBackPage(): void {\n\n\t\tif (this.page.index > 0) {\n\n\t\t\tconst prevPage = this.pages[this.page.index - 1];\n\n\t\t\tif (prevPage.type === 'CATEGORY') {\n\t\t\t\tthis.labels.splice(this.labels.length - 1, 1);\n\n\t\t\t\tthis.modalStepConfig.steps.forEach(step => {\n\t\t\t\t\tif (step.label.toLowerCase() === \"category\" && step.enabled === false) {\n\t\t\t\t\t\tthis.modalStepConfig = {\n\t\t\t\t\t\t\t\"steps\": [\n\t\t\t\t\t\t\t\t{ \"label\": \"Category\", \"active\": true, \"enabled\": true },\n\t\t\t\t\t\t\t\t{ \"label\": \"Final\", \"active\": true, \"enabled\": false }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tthis.page = prevPage;\n\t\t}\n\t}\n\n\thandleUpload(): void {\n\n\n\t\tif (!this.existingTask) {\n            /*\n             * Validate form values before uploading\n             */\n\t\t\tconst selection = this.selections[this.selections.length - 1];\n\n\t\t\t//            if ( selection.value == null  ) {\n\t\t\t//                this.message = \"A [\" + selection.type + \"] must first be selected before the file can be uploaded\";\n\t\t\t//            }\n\t\t\t//            else {\n\t\t\t//                this.values.uasComponentOid = selection.value;\n\t\t\tthis.values.selections = JSON.stringify(this.selections);\n\t\t\tthis.values.uploadTarget = this.metadataService.getUploadTarget(selection.type);\n\t\t\tthis.values.processUpload = this.processUpload;\n\n\t\t\tthis.uploader.setParams(this.values);\n\t\t\tthis.uploader.uploadStoredFiles();\n\t\t\t//            }\n\t\t}\n\t\telse {\n\t\t\tthis.uploader.uploadStoredFiles();\n\t\t}\n\t}\n\n\thasField(fieldName: string): boolean {\n\t\treturn this.metadataService.hasExtraField(this.page.selection.type, fieldName);\n\t}\n\n\tremoveUpload(event: any): void {\n\t\tlet that = this;\n\n\t\tthis.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = 'Are you sure you want to cancel the upload of [' + this.uploader.getResumableFilesData()[0].name + ']';\n\t\tthis.bsModalRef.content.type = 'DANGER';\n\t\tthis.bsModalRef.content.submitText = 'Cancel Upload';\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.removeTask(this.uploader.getResumableFilesData()[0].uuid)\n\t\t\t\t.then(() => {\n\t\t\t\t\t//that.uploader.clearStoredFiles();\n\t\t\t\t\t//that.uploader.cancelAll()\n\n\t\t\t\t\t// The above clearStoredFiles() and cancelAll() methods don't appear to work so \n\t\t\t\t\t// we are clearing localStorage manually.\n\t\t\t\t\tlocalStorage.clear();\n\t\t\t\t\tthat.existingTask = false;\n\t\t\t\t\tthis.page = this.pages[0];\n\t\t\t\t\t//                    that.showUploadPanel();\n\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\tthis.error(err);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tupdateProcessUpload(checked: boolean): void {\n\t\tthis.processUpload = checked;\n\t}\n\n\n\t//    hideUploadPanel(): void {\n\t//        this.uploadVisible = false;\n\t//    }\n\t//\n\t//    showUploadPanel(): void {\n\t//        this.uploadVisible = true;\n\t//        this.selectedContinue = true;\n\t//    }\n\n\tcountUpload(thisRef: any): void {\n\t\tlet ct = 0;\n\n\t\tfunction incrementSeconds() {\n\t\t\tct += 1;\n\n\t\t\tlet hours = Math.floor(ct / 3600)\n\t\t\tlet minutes = Math.floor((ct % 3600) / 60);\n\t\t\tlet seconds = Math.floor(ct % 60);\n\n\t\t\tlet hoursStr = minutes < 10 ? \"0\" + hours : hours;\n\t\t\tlet minutesStr = minutes < 10 ? \"0\" + minutes : minutes;\n\t\t\tlet secondsStr = seconds < 10 ? \"0\" + seconds : seconds;\n\n\t\t\tthisRef.uploadCounter = hoursStr + \":\" + minutesStr + \":\" + secondsStr;\n\t\t}\n\n\t\tthisRef.uplodeCounterInterfal = setInterval(incrementSeconds, 1000);\n\t}\n\n\terror(err: any): void {\n\t  this.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n\tpublic canDeactivate(): boolean {\n\t\treturn this.disabled;\n\t}\n\n\t@HostListener('window:beforeunload', ['$event'])\n\tunloadNotification($event: any) {\n\t\tif (this.disabled) {\n\t\t\t$event.returnValue = 'An upload is currently in progress. Are you sure you want to leave?';\n\t\t}\n\t}\n}\n","<div class=\"modal-body\">\n  <div>\n    <div *ngIf=\"message != null\" class=\"error-container\">\n      <div class=\"label-holder\">\n        <strong>Error</strong>\n      </div>\n      <div class=\"holder\">\n        <div>\n          <p class=\"error-message\">{{message}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"entity != null\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2>{{entity.name}}</h2>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <ul class=\"breadcrumb\" style=\"margin-bottom: 10px;\">\n            <li *ngFor=\"let prev of previous\">\n              <span> {{prev.name}}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <tabset class=\"nav-full-width\">\n          <tab *ngFor=\"let folder of folders\" [heading]=\"folder.name\" (selectTab)=\"onSelect(folder)\">\n            <div class=\"row image-list-container\">              \n              <div class=\"col-sm-12\">\n                <table class=\"table table-striped\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\"></th>\n                      <th scope=\"col\">Name</th>\n                      <th scope=\"col\">Date uploaded</th>\n                    </tr>\n                  </thead>\n                  <tbody class=\"upload-name-style\">\n                    <tr *ngFor=\"let item of page.results  | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                      <td class=\"button-column\">\n                        <a class=\"fa fa-download\" (click)=\"handleDownloadFile(item)\" title=\"Download\"></a>\n                        <a style=\"margin-left: 5px;\" class=\"fa fa-trash-alt ico-remove\" (click)=\"handleDelete(item)\" title=\"Remove\"></a>\n                      </td>\n                      <td>{{ item.name }}</td>\n                      <td>{{ item.lastModified }}</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n            <div class=\"row\">\n                   <div class=\"col-sm-12\">\n                <ngx-file-drop dropZoneLabel=\"Drop files here\" (onFileDrop)=\"dropped($event)\">\n                  <ng-template ngx-file-drop-content-tmp let-openFileSelector=\"openFileSelector\">\n                    Drag & Drop File\n                    <button type=\"button\" (click)=\"openFileSelector()\">Browse Files</button>\n                  </ng-template>\n                </ngx-file-drop>\n              </div> \n            </div>\n          </tab>\n        </tabset>\n      </div>\n      \n      <div class=\"row\">      \n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n      </div>\n\n      <div class=\"row\">      \n        <div class=\"btn-holder\" style=\"text-align: right;margin: 20px 20px 10px 20px;\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Close</button>\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"handleDownload()\" style=\"margin-left: 5px;\">Download all</button>\n        </div>\n      </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { NgxFileDropEntry, FileSystemFileEntry, FileSystemDirectoryEntry } from 'ngx-file-drop';\n\nimport { ErrorHandler, BasicConfirmModalComponent } from '@shared/component';\n\nimport { SiteEntity, SiteObjectsResultSet } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\n\ndeclare var acp: string;\n\n@Component({\n    selector: 'accessible-support-modal',\n    templateUrl: './accessible-support-modal.component.html',\n    styles: [],\n})\nexport class AccessibleSupportModalComponent implements OnInit {\n\n    /* \n     * Breadcrumb of previous sites clicked on\n     */\n    previous = [] as SiteEntity[];\n    folders: SiteEntity[] = [];\n    message: string;\n\n    entity: SiteEntity;\n    folder: SiteEntity;\n\n    page: SiteObjectsResultSet = new SiteObjectsResultSet();\n\n    constructor(private service: ManagementService, private modalService: BsModalService, public bsModalRef: BsModalRef) {\n    }\n\n    ngOnInit(): void {\n        this.page.count = 0;\n        this.page.pageNumber = 1;\n        this.page.pageSize = 10;\n        this.page.results = [];\n    }\n\n    init(entity: SiteEntity, folders: SiteEntity[], previous: SiteEntity[]): void {\n\n        this.entity = entity;\n        this.folders = folders;\n        this.previous = [...previous];\n\n        if (this.previous.length > 0 && this.previous[this.previous.length - 1].id !== this.entity.id) {\n            this.previous.push(this.entity);\n        }\n\n        if (this.folders.length > 0) {\n            this.onSelect(this.folders[0]);\n        }\n    }\n\n    onPageChange(pageNumber: number): void {\n        this.getData(this.folder.component, this.folder.name, pageNumber, this.page.pageSize);\n    }\n\n    onSelect(folder: SiteEntity): void {\n\n        this.page.results = [];\n\n        this.folder = folder;\n\n        this.getData(folder.component, folder.name, 1, this.page.pageSize);\n    }\n\n    refresh(): void {\n\n        this.page.results = [];\n\n        this.getData(this.folder.component, this.folder.name, this.page.pageNumber, this.page.pageSize);\n    }\n\n    getData(component: string, folder: string, pageNumber: number, pageSize: number) {\n        this.service.getObjects(component, folder, pageNumber, pageSize).then(page => {\n            this.page = page;\n        });\n    }\n\n    handleDownload(): void {\n        window.location.href = acp + '/project/download-all?id=' + this.folder.component + \"&key=\" + this.folder.name;\n    }\n\n    handleDownloadFile(item: SiteEntity): void {\n        window.location.href = acp + '/project/download?id=' + this.folder.component + \"&key=\" + item.key;\n    }\n\n    dropped(files: NgxFileDropEntry[]): void {\n\n        for (const droppedFile of files) {\n\n            // Is it a file?\n            if (droppedFile.fileEntry.isFile) {\n                const fileEntry: FileSystemFileEntry = droppedFile.fileEntry as FileSystemFileEntry;\n\n                fileEntry.file((file: File) => {\n\n                    this.service.upload(this.folder.component, this.folder.name, file).then(() => {\n                        // Refresh the table\n                        this.refresh();\n                    });\n\n                });\n            } else {\n                // It was a directory (empty directories are added, otherwise only files)\n                const fileEntry: FileSystemDirectoryEntry = droppedFile.fileEntry as FileSystemDirectoryEntry;\n                console.log(droppedFile.relativePath, fileEntry);\n            }\n        }\n    }\n\n    handleDelete(item: SiteEntity): void {\n        let modalRef: BsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        modalRef.content.message = 'Are you sure you want to delete the file [' + item.name + ']?';\n        modalRef.content.type = 'DANGER';\n        modalRef.content.submitText = 'Delete';\n\n        modalRef.content.onConfirm.subscribe(() => {\n            this.remove(item);\n        });\n    }\n\n    remove(item: SiteEntity): void {\n        this.service.removeObject(item.component, item.key).then(() => {\n            // Refresh the table\n            this.refresh();\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div id=\"navigator-header-container\">\n    <uasdm-header [title]=\"'Site Viewer'\"></uasdm-header>\n</div>\n\n<div id=\"app-container\" class=\"container-fluid\" style=\"background: #f7f7f7;\">\n\n    <div class=\"row\">\n        <div id=\"navigator-left-sidebar\" class=\"col-md-3 lw-inner-col\">\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n            \n                  <!-- IF at Site level -->\n                  <div class=\"row\" *ngIf=\"!current\">\n                    <div class=\"col-md-6\" style=\"height: 64px;\">\n                      <h3 style=\"font-weight:bold;\">IDM Sites</h3>\n                    </div>\n                  </div>\n            \n                  <!-- IF lower than Site -->\n                  <div class=\"row\" *ngIf=\"current\">\n                    <div class=\"col-md-12\" style=\"height: 65px; overflow: auto;\">\n                      <ul class=\"breadcrumb\" style=\"background-color: white; vertical-align: middle; line-height:2\">\n                        <li>\n                          <i class=\"fa fa-angle-left breadcrumb-back-ico\" aria-hidden=\"true\"></i>\n                          <a (click)=\"back(null)\" style=\"color: #007276;\">IDM Sites</a>\n                        </li>\n                        <li *ngFor=\"let entity of breadcrumbs; last as isLast\" [ngClass]=\"{'active':isLast}\">\n                          <a *ngIf=\"!isLast\" (click)=\"back(entity)\" style=\"color: #007276;\"> {{entity.name}}</a>\n                          <span *ngIf=\"isLast\"> <b>{{entity.name}}</b> </span>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n            \n                  <!-- Search bar -->\n                  <div class=\"row\">\n                    <div class=\"col-md-12\">\n                      <div class=\"location-management-widget-section\">\n                        <input class=\"form-control search-input\" type=\"text\" placeholder=\"Search...\" [(ngModel)]=\"search\"\n                          [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"handleClick($event)\"\n                          [typeaheadOptionsLimit]=\"10\" [typeaheadItemTemplate]=\"bsItemTemplate\" typeaheadOptionField=\"label\"\n                          [ngModelOptions]=\"{standalone: true}\" (keydown.enter)=\"$event.preventDefault()\" />\n                      </div>\n                    </div>\n                  </div>\n              </div>\n            </div>\n\n            <!-- <hr> -->\n\n            <div class=\"row\">\n                <div class=\"col-md-12\" style=\"background:#f7f7f7; padding:0; height:100%;\">\n                  \n                  <tabset #staticTabs class=\"nav-full-width\">\n                    <tab heading=\"Data\">                \n                      <div id=\"hierarchy-tree-container\" class=\"location-management-widget-section location-management-list-container\"\n                      style=\"height: calc(100vh - 296px);overflow-y: auto;\">\n                        <div class=\"list-group\">\n\n                          <!-- If -->\n                          <div *ngIf=\"nodes.length < 1 && breadcrumbs.length === 0\" [@fadeInOnEnter] style=\"padding: 20px;text-align: center;color: grey;\">\n                            <span *ngIf=\"loadingSites\">\n                              <h4>\n                                <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i>\n                                Loading Sites\n                              </h4>\n                            </span>\n                          \n                            <span *ngIf=\"!loadingSites\">\n                              <h4>No Sites in this area.</h4>\n                              <p>\n                                Zoom out to find sites in other areas of the map.\n                              </p>\n                            </span>\n                          </div>\n\n                          <!-- Else -->\n                          <div *ngIf=\"nodes.length < 1 && breadcrumbs.length > 0\" [@fadeInOnEnter] style=\"padding: 20px;text-align: center;color: grey;\">\n                            <h4>No data at this level.</h4>\n                            <p>\n                              Create data containers as part of the upload process.\n                            </p>\n                          </div>\n\n                          <div *ngFor=\"let node of nodes; let i = index\" [@fadeInOnEnter] class=\"list-group-item\">\n\n                            <!-- Two column layout -->\n                            <div [@fadeInOnEnter] style=\"border-left: solid 15px;\" class=\"card card-default clickable\" *ngIf=\"getMetadata(node).root\" [ngClass]=\"{'active': hoverFeatureId === node.id}\"\n                                (click)=\"select(node, null, $event)\" (mouseenter)=\"onListEntityHover($event, node)\" (mouseleave)=\"onListEntityHoverOff()\">\n                              \n                                <!-- <div class=\"card-header\">Header</div> -->\n                              <div class=\"card-body card-5-7\" >\n                                <div>\n                                   <!-- <i class=\"fas fa-map-marker-alt\" style=\"font-size: 50px;\"></i> -->\n                                   <h4 style=\"word-break: break-all; border-bottom-color:rgba(195, 195, 195, 0.3); border-bottom-style:inset; border-bottom-width: 2px; margin-bottom:10px; padding-bottom:10px;\">\n                                     <!-- <a (click)=\"select(node, $event)\"> -->\n                                      {{node.name}}\n                                     <!-- </a> -->\n                                  </h4>\n                                  <span>\n                                    <span><b>{{node.numberOfChildren}}</b> {{getMetadata(node).childLabel}}</span>\n                                    <span *ngIf=\"node.type !== 'folder'\" class=\"pull-right\">\n\t                                    <a class=\"fa fa-pencil-alt ico-edit\" (click)=\"handleEdit(node, $event)\" title=\"Edit\"></a>\n\t                                    <a class=\"fa fa-trash-alt ico-remove\" (click)=\"handleDelete(node, $event)\" title=\"Delete\"></a>                                   \n\t                                  </span>  \n                                  </span>\n                                </div>\n                              </div>\n                              <!-- <div class=\"card-footer\">Footer</div> -->\n                            </div>\n\n\n                            <!-- Single column card -->\n                            <div [@fadeInOnEnter] class=\"card card-default clickable\" *ngIf=\"!getMetadata(node).root\" (click)=\"select(node, null, $event)\">\n                              <div class=\"card-body\">\n                                  <i (click)=\"handleExpand(node, $event)\" class=\"fa fa-caret-left expand-arrow-ico pull-right\" [ngClass]=\"{'fa-rotate-270':node.active}\" style=\"font-size: 25px; padding: 0 5px\" aria-hidden=\"true\"></i>\n\n                                  <h4 style=\"word-break: break-all;\">{{node.name}}</h4>\n                                  <p><b>{{node.numberOfChildren}}</b> {{getMetadata(node).childLabel}}</p>\n                                  \n                                  <div [collapse]=\"!node.active\" class=\"list-group\" style=\"margin-bottom: 0;\">\n                                    <div *ngFor=\"let child of node.children\" (click)=\"select(child, node, $event)\" class=\"list-group-item\" style=\"background-color: #ececec;border: solid 1px lightgrey;border-radius: 0;\">\n                                      <!-- <a (click)=\"select(child, $event)\"> -->\n                                        {{child.name}}\n                                      <!-- </a> -->\n                                      <span *ngIf=\"child.type !== 'folder'\" class=\"pull-right button-column\">\n                                        <a class=\"fa fa-pencil-alt ico-edit\" (click)=\"handleEdit(child, $event)\" title=\"Edit\"></a>\n                                        <a class=\"fa fa-trash-alt ico-remove\" (click)=\"handleDelete(child, $event)\" title=\"Delete\"></a>                                   \n                                      </span>                                 \n                                    </div>\n                                  </div>\n                              </div>\n                            </div>\n\n                          </div> \n\n                          <div *ngFor=\"let node of supportingData\" class=\"list-group-item\">\n                            <div [@fadeInOnEnter] class=\"card card-default\">\n                              <div class=\"card-body\">\n                                <h4 style=\"word-break: break-all;\">Supporting Data</h4>\n                                <div class=\"list-group\">\n                                  <div class=\"list-group-item\" style=\"background-color: #ececec;border: solid 1px lightgrey;border-radius: 0;\">\n                                    <a (click)=\"select(node, null, $event)\">\n                                      {{node.name}}\n                                    </a>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                        </div>\n                      </div>\n                      <!-- <div *ngIf=\"supportingData.length > 0\" class=\"location-management-widget-section location-management-list-container\">\n                        \n                            <div class=\"card card-default\">\n                              <div class=\"card-body\">\n                                <h4>Supporting Data</h4>\n                                <div class=\"list-group\">\n                                  <div *ngFor=\"let node of supportingData\" class=\"list-group-item\" style=\"background-color: #ececec;border: solid 1px lightgrey;border-radius: 0;\">\n                                    <a (click)=\"select(node, $event)\">\n                                      {{node.name}}\n                                    </a>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                      </div> -->\n\n                    </tab>\n                    <tab *ngIf=\"current != null\" heading=\"Products\">\n                      <div id=\"hierarchy-tree-container\" class=\"location-management-widget-section location-management-list-container\"\n                      style=\"height: calc(100vh - 296px);overflow-y: auto;\">\n                        <product-panel [id]=\"current.id\" (toggleMapOrtho)=\"handleMapOrtho($event)\" (toggleMapDem)=\"handleMapDem($event)\"></product-panel>           \n                      </div>\n                    </tab>\n                  </tabset>\n\n                </div>\n            </div>\n            \n\n            <footer class=\"sidebar-footer\">\n              <div class=\"row\" *ngIf=\"current != null\" style=\"background:white;\">\n                <div class=\"col-md-12\" style=\"text-align: center;padding: 10px;border-top: 1px solid lightgrey;\">\n                  <button (click)=\"handleUploadFile()\" class=\"btn btn-primary\">Upload</button>              \n                </div>\n              </div>\n              <div class=\"row\" *ngIf=\"current == null\" style=\"background:white;\">\n                <div class=\"col-md-12\" style=\"text-align: center;padding: 10px;border-top: 1px solid lightgrey;\">\n                  <button (click)=\"handleCreate(null,null)\" class=\"btn btn-primary\">Add new site</button>\n                </div>\n              </div>\n            </footer>\n            \n        </div>\n        <div class=\"col-md-9\" id=\"site-explorer-map\">\n            <div class=\"row\">\n                <article style=\"position: absolute;z-index: 5;margin-left: 100px;margin-top: 10px;\">\n                  <div class=\"idm-toast\" *ngFor=\"let task of tasks; let idx = index\">\n                    <alert *ngIf=\"task.status === 'Complete' && task.actions.length === 0\" type=\"success\" [dismissible]=\"true\" (onClosed)=\"handleCloseToast(idx)\">\n                      <strong>Upload {{task.status}}</strong> for {{task.collectionLabel}}. <a (click)=\"handleViewSite(task.collection)\">Goto the collection view</a>\n                    </alert>\n                    <alert *ngIf=\"task.status === 'Complete' && task.actions.length !== 0\" type=\"warning\" [dismissible]=\"true\" (onClosed)=\"handleCloseToast(idx)\">\n                      <strong>Upload {{task.status}}</strong> for {{task.collectionLabel}}. Task completed with warnings.  See the <a routerLink=\"/site/tasks\">task page</a> for more details.\n                    </alert>\n                    <alert *ngIf=\"task.status === 'Failed'\" type=\"danger\" [dismissible]=\"true\" (onClosed)=\"handleCloseToast(idx)\">\n                      <strong>Upload {{task.status}}</strong> for {{task.collectionLabel}}. Task completed with errors.  See the <a routerLink=\"/site/tasks\">task page</a> for more details.\n                    </alert>\n                    <alert *ngIf=\"task.status !== 'Failed' && task.status !== 'Complete'\" type=\"info\" [dismissible]=\"true\" (onClosed)=\"handleCloseToast(idx)\">\n                      <strong>Upload {{task.status}}</strong> for {{task.collectionLabel}}.\n                    </alert>\n                  </div>    \n                </article>\n\n\n                <article class=\"base-layer-panel\">\n\n                  <div class=\"layer-toggle\" style=\"cursor: pointer;background:#fff;padding:8px;border-radius:4px;\" (mouseenter)=\"baselayerIconHover = true\"  (mouseleave)=\"baselayerIconHover = false\">\n                    <i class=\"fas fa-layer-group\" *ngIf=\"!baselayerIconHover\" style=\"vertical-align:middle; font-size: 18px;\"></i>\n                    <div *ngIf=\"baselayerIconHover\">\n                      <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n                          <input class=\"layer-toggle-input\" type='radio' name='rtoggle' [value]='baseLayer.id' [checked]=\"baseLayer.selected\" (change)=\"handleStyle(baseLayer)\">\n                          <label class=\"layer-toggle-label\">{{baseLayer.label}}</label>\n                        </div>\n                    </div>\n                  </div>\n                    <!-- <accordion> \n                      <accordion-group heading=\"Base Maps\" style=\"border:none;\">\n                        <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n                          <input class=\"layer-toggle-input\" type='radio' name='rtoggle' [value]='baseLayer.id' [checked]=\"baseLayer.selected\" (change)=\"handleStyle(baseLayer)\">\n                          <label class=\"layer-toggle-label\">{{baseLayer.label}}</label>\n                        </div>\n                      </accordion-group>\n                    </accordion> -->\n                </article>\n\n                <div id=\"mousemove-panel\" class=\"mapboxgl-ctrl-bottom-right\" style=\"background: rgba(255, 255, 255, .5); right: 0; padding: 0 5px 0 5px;bottom: 0px;\"></div>\n\n                <div id=\"map\" class=\"map-view-port\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #bsItemTemplate let-match=\"match\" let-query=\"query\">\n  <span *ngIf=\"match.item.filename == null\">\n    <i class=\"fa fa-folder-open\"></i>\n  </span>\n  <span *ngIf=\"match.item.filename != null\">\n    <i class=\"fa fa-file\"></i>\n  </span>\n  <span>\n    <span *ngFor=\"let site of match.item.hierarchy; index as i\">\n        {{site.label}} /\n        <!-- <span *ngIf=\"i < (match.item.hierarchy.length -1)\">/</span> -->\n    </span>\n  </span>\n  <b>{{ match.item.label}}</b>\n</ng-template>\n\n","import { Component, OnInit, OnDestroy, AfterViewInit, ViewChild, TemplateRef } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { TabsetComponent } from 'ngx-bootstrap';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Map, LngLatBounds, NavigationControl, MapboxEvent, AttributionControl } from 'mapbox-gl';\n\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from \"rxjs/operators\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\nimport { AuthService } from '@shared/service/auth.service';\n\nimport { SiteEntity, Product, Task, GeoserverLayer } from '../model/management';\n\nimport { EntityModalComponent } from './modal/entity-modal.component';\nimport { UploadModalComponent } from './modal/upload-modal.component';\nimport { LeafModalComponent } from './modal/leaf-modal.component';\nimport { AccessibleSupportModalComponent } from './modal/accessible-support-modal.component';\n\nimport { ManagementService } from '../service/management.service';\nimport { MapService } from '../service/map.service';\nimport { MetadataService } from '../service/metadata.service';\n\nimport {\n  fadeInOnEnterAnimation,\n  fadeOutOnLeaveAnimation\n} from 'angular-animations';\n\n\ndeclare var acp: any;\n\n@Component({\n  selector: 'projects',\n  templateUrl: './projects.component.html',\n  styles: ['./projects.css'],\n  animations: [\n    fadeInOnEnterAnimation(),\n    fadeOutOnLeaveAnimation()\n  ]\n})\nexport class ProjectsComponent implements OnInit, AfterViewInit, OnDestroy {\n\n  @ViewChild('staticTabs') staticTabs: TabsetComponent;\n\n  // imageToShow: any;\n  userName: string = \"\";\n\n    /*\n     * Template for the delete confirmation\n     */\n  @ViewChild('confirmTemplate') public confirmTemplate: TemplateRef<any>;\n\n    /* \n     * Datasource to get search responses\n     */\n  dataSource: Observable<any>;\n\n    /* \n     * Model for text being searched\n     */\n  search: string = \"\";\n\n    /* \n     * Root nodes of the tree\n     */\n  nodes = [] as SiteEntity[];\n  \n  allPointsBounds;\n\n    /* \n     * Root nodes of the tree\n     */\n  supportingData = [] as SiteEntity[];\n\n    /* \n     * Breadcrumb of previous sites clicked on\n     */\n  breadcrumbs = [] as SiteEntity[];\n\n    /* \n     * Root nodes of the tree\n     */\n  current: SiteEntity;\n\n    /* \n     * mapbox-gl map\n     */\n  map: Map;\n\n    /* \n     * Flag denoting if the user is an admin\n     */\n  admin: boolean = false;\n\n    /* \n     * Flag denoting if the user is a worker\n     */\n  worker: boolean = false;\n\n    /* \n     * Flag denoting the draw control is active\n     */\n  active: boolean = false;\n  \n  loadingSites: boolean = true;\n\n    /* \n     * List of base layers\n     */\n  baseLayers: any[] = [{\n    label: 'Outdoors',\n    id: 'outdoors-v11',\n    selected: true\n  }, {\n    label: 'Satellite',\n    id: 'satellite-v9'\n  }, {\n    label: 'Streets',\n    id: 'streets-v11'\n  }];\n\n  layers: GeoserverLayer[] = [];\n\n  baselayerIconHover = false;\n\n  hoverFeatureId: string;\n\n  /* \n     * debounced subject for map extent change events\n     */\n  subject: Subject<MapboxEvent<MouseEvent | TouchEvent | WheelEvent>>;\n\n    /*\n     * Reference to the modal current showing\n    */\n  private bsModalRef: BsModalRef;\n\n  notifier: WebSocketSubject<any>;\n\n  tasks: Task[] = [];\n\n  constructor(private service: ManagementService, private authService: AuthService, private mapService: MapService,\n    private modalService: BsModalService, private metadataService: MetadataService) {\n\n    this.subject = new Subject();\n    this.subject.pipe(debounceTime(300), distinctUntilChanged()).subscribe(event => this.handleExtentChange(event));\n\n    this.dataSource = Observable.create((observer: any) => {\n\n      this.mapService.mbForwardGeocode(this.search).then(response => {\n        const match = response.features;\n\n        this.service.searchEntites(this.search).then(results => {\n\n          // Add Mapbox results to any local results\n          match.forEach(obj => {\n            let newObj = {\n              id: obj.id,\n              hierarchy: [],\n              label: obj.place_name,\n              center: obj.center,\n              source: \"MAPBOX\"\n            }\n\n            results.push(newObj);\n          });\n\n          observer.next(results);\n        });\n      });\n    });\n  }\n\n  ngOnInit(): void {\n    this.admin = this.authService.isAdmin();\n    this.worker = this.authService.isWorker();\n    this.userName = this.service.getCurrentUser();\n\n\n    let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + acp;\n\n    this.notifier = webSocket(baseUrl + '/websocket/notify');\n    this.notifier.subscribe(message => {\n      if (message.type === 'UPLOAD_JOB_CHANGE') {\n        this.tasks.push(message.content);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.map.remove();\n\n    this.notifier.complete();\n  }\n\n  ngAfterViewInit() {\n\n    this.map = new Map({\n      container: 'map',\n      style: 'mapbox://styles/mapbox/outdoors-v11',\n      zoom: 2,\n      attributionControl: false,\n      center: [-78.880453, 42.897852]\n    });\n\n    this.map.on('load', () => {\n      this.initMap();\n    });\n\n  }\n\n  initMap(): void {\n\n    this.map.on('style.load', () => {\n      this.addLayers();\n      this.refreshMapPoints(false);\n    });\n\n    this.addLayers();\n\n\n    this.refreshMapPoints(true);\n\n    // Add zoom and rotation controls to the map.\n    this.map.addControl(new NavigationControl());\n    this.map.addControl(new AttributionControl({ compact: true }), 'bottom-left');\n\n    this.map.on('mousemove', e => {\n      // e.point is the x, y coordinates of the mousemove event relative\n      // to the top-left corner of the map.\n      // e.lngLat is the longitude, latitude geographical position of the event\n      let coord = e.lngLat.wrap();\n\n      // EPSG:3857 = WGS 84 / Pseudo-Mercator\n      // EPSG:4326 = WGS 84 \n      // let coord4326 = window.proj4(window.proj4.defs('EPSG:3857'), window.proj4.defs('EPSG:4326'), [coord.lng, coord.lat]);\n      // let text = \"Long: \" + coord4326[0] + \" Lat: \" + coord4326[1];\n\n      let text = \"Lat: \" + coord.lat + \" Long: \" + coord.lng;\n      let mousemovePanel = document.getElementById(\"mousemove-panel\");\n      mousemovePanel.textContent = text;\n\n\n      let features = this.map.queryRenderedFeatures(e.point, { layers: ['points'] });\n\n      if (this.current == null) {\n        if (features.length > 0) {\n          let focusFeatureId = features[0].properties.oid; // just the first\n          this.map.setFilter('hover-points', ['all',\n            ['==', 'oid', focusFeatureId]\n          ])\n\n          this.highlightListItem(focusFeatureId)\n        }\n        else {\n          this.map.setFilter('hover-points', ['all',\n            ['==', 'oid', \"NONE\"]\n          ])\n\n          this.clearHighlightListItem();\n        }\n      }\n    });\n\n    this.map.on('zoomend', (e) => {\n      this.subject.next(e);\n    });\n\n    this.map.on('moveend', (e) => {\n      this.subject.next(e);\n    });\n\n    // Sit selection from map\n    this.map.on('dblclick', (e) => {\n      let features = this.map.queryRenderedFeatures(e.point, { layers: ['points'] });\n\n      if (features.length > 0) {\n        let focusFeatureId = features[0].properties.oid; // just the first\n\n        this.handleViewSite(focusFeatureId);\n      }\n    });\n\n    // MapboxGL doesn't have a good way to detect when moving off the map\n    let sidebar = document.getElementById(\"navigator-left-sidebar\");\n    sidebar.addEventListener(\"mouseenter\", function() {\n      let mousemovePanel = document.getElementById(\"mousemove-panel\");\n      mousemovePanel.textContent = \"\";\n    });\n  }\n\n  addLayers(): void {\n\n    this.map.addSource('sites', {\n      type: 'geojson',\n      data: {\n        \"type\": \"FeatureCollection\",\n        \"features\": []\n      }\n    });\n\n\n    // Point layer\n    this.map.addLayer({\n      \"id\": \"points\",\n      \"type\": \"circle\",\n      \"source\": 'sites',\n      \"paint\": {\n        \"circle-radius\": 10,\n        \"circle-color\": '#800000',\n        \"circle-stroke-width\": 2,\n        \"circle-stroke-color\": '#FFFFFF'\n      }\n    });\n\n    // Hover style\n    this.map.addLayer({\n      \"id\": \"hover-points\",\n      \"type\": \"circle\",\n      \"source\": 'sites',\n      \"paint\": {\n        \"circle-radius\": 13,\n        \"circle-color\": '#cf0000',\n        \"circle-stroke-width\": 2,\n        \"circle-stroke-color\": '#FFFFFF'\n      },\n      filter: ['all',\n        ['==', 'id', 'NONE'] // start with a filter that doesn't select anything\n      ]\n    });\n\n\n    // Label layer\n    this.map.addLayer({\n      \"id\": \"points-label\",\n      \"source\": 'sites',\n      \"type\": \"symbol\",\n      \"paint\": {\n        \"text-color\": \"black\",\n        \"text-halo-color\": \"#fff\",\n        \"text-halo-width\": 2\n      },\n      \"layout\": {\n        \"text-field\": \"{name}\",\n        \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\n        \"text-offset\": [0, 0.6],\n        \"text-anchor\": \"top\",\n        \"text-size\": 12,\n      }\n    });\n\n    this.layers.forEach(layer => {\n      if (layer.isMapped)\n      {\n        this.addImageLayer(layer);\n      }\n    });\n  }\n\n  handleExtentChange(e: MapboxEvent<MouseEvent | TouchEvent | WheelEvent>): void {\n    if (this.current == null) {\n      const bounds = this.map.getBounds();\n\n      // Sometimes bounds aren't valid for 4326, so validate it before sending to server\n      if (this.isValidBounds(bounds)) {\n        this.loadingSites = true;\n        this.service.roots(null, bounds).then(nodes => {\n          this.nodes = nodes;\n          this.loadingSites = false;\n        });\n      }\n      else {\n        // console.log(\"Invalid bounds\", bounds);\n      }\n    }\n  }\n\n  isValidBounds(bounds: LngLatBounds): boolean {\n\n    const ne = bounds.getNorthEast();\n    const sw = bounds.getSouthWest();\n\n    if (Math.abs(ne.lng) > 180 || Math.abs(sw.lng) > 180) {\n      return false;\n    }\n\n    if (Math.abs(ne.lat) > 90 || Math.abs(sw.lat) > 90) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Goes to the server and fetches all points for all sites. Returns GeoJSON which is then used to refresh the map.\n   */\n  refreshMapPoints(zoom: boolean): void {\n    this.mapService.features().then(data => {\n      (<any>this.map.getSource('sites')).setData(data.features);\n\n      if (zoom) {\n        this.allPointsBounds = new LngLatBounds([data.bbox[0], data.bbox[1]], [data.bbox[2], data.bbox[3]]);\n\n        this.map.fitBounds(this.allPointsBounds, { padding: 50 });\n      }\n    });\n  }\n\n  isData(node: any): boolean {\n\n    if (node.data.type === \"Site\") {\n      return false;\n    }\n    else if (node.data.type === \"Project\") {\n      return false;\n    }\n    else if (node.data.type === \"Mission\") {\n      return false;\n    }\n    else if (node.data.type === \"Collection\") {\n      return false;\n    }\n    else if (node.data.type === \"Imagery\") {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  handleOnUpdateData(): void {\n    //        this.tree.treeModel.expandAll();\n  }\n\n  handleCloseToast(idx: number): void {\n    this.tasks.splice(idx, 1);\n  }\n\n  handleUploadFile(): void {\n\n    this.bsModalRef = this.modalService.show(UploadModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n      'class': 'upload-modal'\n    });\n    this.bsModalRef.content.init(this.breadcrumbs);\n\n    this.bsModalRef.content.onUploadComplete.subscribe(node => {\n\n      this.service.getItems(this.current.id, null).then(nodes => {\n        this.setNodes(nodes);\n      });\n    });\n  }\n\n\n  handleCreate(parent: SiteEntity, type: string): void {\n    let parentId = parent != null ? parent.id : null;\n\n    this.service.newChild(parentId, type).then(data => {\n      this.bsModalRef = this.modalService.show(EntityModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n        'class': 'upload-modal'\n      });\n      this.bsModalRef.content.init(true, this.userName, this.admin, data.item, data.attributes, this.map.getCenter(), this.map.getZoom());\n\n\n      if (parent != null) {\n        this.bsModalRef.content.parentId = parent.id;\n      }\n\n      this.bsModalRef.content.onNodeChange.subscribe(entity => {\n\n        if (parent != null) {\n\n        }\n        else {\n          if (this.breadcrumbs.length == 0) {\n            this.nodes.push(entity);\n          }\n\n          this.refreshMapPoints(false);\n        }\n      });\n    });\n  }\n\n  zoomToFeature(node: SiteEntity): void {\n    if (node.geometry != null) {\n      this.map.flyTo({\n        center: node.geometry.coordinates\n      });\n    }\n  }\n\n  handleEdit(node: SiteEntity, event: any): void {\n\n    event.stopPropagation();\n\n    this.service.edit(node.id).then(data => {\n      this.bsModalRef = this.modalService.show(EntityModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n        'class': 'edit-modal'\n      });\n      this.bsModalRef.content.init(false, this.userName, this.admin, data.item, data.attributes, this.map.getCenter(), this.map.getZoom());\n\n      this.bsModalRef.content.onNodeChange.subscribe(entity => {\n        // Update the node\n        entity.children = node.children;\n        entity.active = node.active;\n\n        this.refreshEntity(entity, this.nodes);\n        this.refreshEntity(entity, this.breadcrumbs);\n\n        this.nodes.forEach(node => {\n          this.refreshEntity(entity, node.children);\n        });\n\n        if (this.metadataService.getMetadata(entity).root) {\n          this.refreshMapPoints(false);\n        }\n      });\n    });\n  }\n\n  refreshEntity(node: SiteEntity, nodes: SiteEntity[]): void {\n\n    if (nodes != null) {\n      let indexOf = nodes.findIndex(i => i.id === node.id);\n\n      if (indexOf !== -1) {\n        nodes[indexOf] = node;\n      }\n    }\n  }\n\n  handleDownloadAll(node: SiteEntity): void {\n\n    window.location.href = acp + '/project/download-all?id=' + node.component + \"&key=\" + node.name;\n\n    //      this.service.downloadAll( data.id ).then( data => {\n    //        \n    //      } ).catch(( err: HttpErrorResponse ) => {\n    //          this.error( err );\n    //      } );\n  }\n\n  handleDelete(node: SiteEntity, event: any): void {\n\n    event.stopPropagation();\n\n    let sText = '<b>IMPORTANT:</b> [' + node.name + '] will be deleted along with all underlying data including all files in Collections and Accessible Support';\n\n    if (node.type === 'Collection') {\n      sText = '<b>IMPORTANT:</b> [' + node.name + '] will be deleted along with all underlying data including all files.';\n    }\n\n    sText += ' This can <b>NOT</b> be undone';\n\n    this.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n    });\n    this.bsModalRef.content.message = 'Are you sure you want to delete [' + node.name + ']?';\n    this.bsModalRef.content.subText = sText;\n    this.bsModalRef.content.data = node;\n    this.bsModalRef.content.type = 'DANGER';\n    this.bsModalRef.content.submitText = 'Delete';\n\n    (<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n      this.remove(data);\n    });\n  }\n\n  remove(node: SiteEntity): void {\n    this.service.remove(node.id).then(() => {\n      this.nodes = this.nodes.filter((n: any) => n.id !== node.id);\n\n      this.nodes.forEach(n => {\n        if (n.children != null) {\n          n.children = n.children.filter((child: any) => child.id !== node.id);\n\n          n.numberOfChildren = n.children.length;\n        }\n      });\n\n      if (node.type === 'Site') {\n        this.refreshMapPoints(false);\n      }\n    });\n  }\n\n\n  handleDownload(node: SiteEntity): void {\n    window.location.href = acp + '/project/download?id=' + node.component + \"&key=\" + node.key;\n\n    //this.service.download( node.data.component, node.data.key, true ).subscribe( blob => {\n    //    importedSaveAs( blob, node.data.name );\n    //} );\n  }\n\n  handleImageDownload(image: any): void {\n    window.location.href = acp + '/project/download?id=' + image.component + \"&key=\" + image.key;\n\n    //this.service.download( node.data.component, node.data.key, true ).subscribe( blob => {\n    //    importedSaveAs( blob, node.data.name );\n    //} );\n  }\n\n  handleStyle(layer: any): void {\n\n    this.baseLayers.forEach(baseLayer => {\n      baseLayer.selected = false;\n    });\n\n    layer.selected = true;\n\n    this.map.setStyle('mapbox://styles/mapbox/' + layer.id);\n  }\n\n  highlightMapFeature(id: string): void {\n\n    this.map.setFilter('hover-points', ['all',\n      ['==', 'oid', id]\n    ])\n\n  }\n\n  clearHighlightMapFeature(): void {\n\n    this.map.setFilter('hover-points', ['all',\n      ['==', 'oid', \"NONE\"]\n    ])\n\n  }\n\n  onListEntityHover(event: any, site: SiteEntity): void {\n    if (this.current == null) {\n      this.highlightMapFeature(site.id);\n    }\n  }\n\n  onListEntityHoverOff(): void {\n    this.clearHighlightMapFeature();\n  }\n\n  highlightListItem(id: string): void {\n    this.nodes.forEach(node => {\n      if (node.id === id) {\n        this.hoverFeatureId = id;\n      }\n    })\n  }\n\n  clearHighlightListItem(): void {\n    if (this.hoverFeatureId) {\n      this.nodes.forEach(node => {\n        if (node.id === this.hoverFeatureId) {\n          this.hoverFeatureId = null;\n        }\n      })\n    }\n  }\n\n\n  handleClick($event: any): void {\n    let result = $event.item;\n\n    if (result.center) {\n      this.map.flyTo({\n        center: result.center,\n        zoom: 18\n      })\n    }\n    else {\n      const index = result.hierarchy.length - 1;\n\n      const selected = result.hierarchy[index];\n\n      this.handleViewSite(selected.id);\n    }\n  }\n\n  handleViewSite(id: string): void {\n    this.service.view(id).then(response => {\n      const node = response.item;\n      const breadcrumbs = response.breadcrumbs;\n\n      if (this.getMetadata(node).leaf) {\n        this.breadcrumbs = breadcrumbs;\n        this.current = breadcrumbs[breadcrumbs.length - 1];\n        this.nodes = this.current.children;\n\n        this.select(node, null, null);\n      }\n      else {\n        const parent = breadcrumbs.length > 0 ? breadcrumbs[breadcrumbs.length - 1] : null;\n        this.breadcrumbs = breadcrumbs;\n\n        this.select(node, parent, null);\n      }\n    });\n\n  }\n  \n  handleMapOrtho(product: Product): void {\n\n    const layer = this.getLayerByClassification(\"ORTHO\", product);\n\n    if (layer != null && layer.key != null) {\n      if (this.map.getLayer(layer.key) != null) {\n        this.map.removeLayer(layer.key);\n        this.map.removeSource(layer.key);\n\n        layer.isMapped = false;\n        product.orthoMapped = false;\n      }\n      else {\n        this.addImageLayer(layer);\n\n        layer.isMapped = true;\n        product.orthoMapped = true;\n\n        if (product.boundingBox != null) {\n          let bbox = product.boundingBox;\n\n          let bounds = new LngLatBounds([bbox[0], bbox[2]], [bbox[1], bbox[3]]);\n\n          this.map.fitBounds(bounds, { padding: 50 });\n        }\n      }\n    }\n  }\n  \n  getLayerByClassification(classification: string, product: Product): GeoserverLayer {\n    let len = product.layers.length;\n  \n    for (let i = 0; i < len; ++i)\n    {\n      let layer: GeoserverLayer = product.layers[i];\n    \n      if (layer.classification === classification)\n      {\n        return layer;\n      }\n    }\n  \n    return null;\n  }\n  \n  handleMapDem(product: Product): void {\n\n    const layer = this.getLayerByClassification(\"DEM_DSM\", product);\n\n    if (layer != null && layer.key != null) {\n      if (this.map.getLayer(layer.key) != null) {\n        this.map.removeLayer(layer.key);\n        this.map.removeSource(layer.key);\n\n        layer.isMapped = false;\n        product.demMapped = false;\n      }\n      else {\n        this.addImageLayer(layer);\n\n        layer.isMapped = true;\n        product.demMapped = true;\n\n        if (product.boundingBox != null) {\n          let bbox = product.boundingBox;\n\n          let bounds = new LngLatBounds([bbox[0], bbox[2]], [bbox[1], bbox[3]]);\n\n          this.map.fitBounds(bounds, { padding: 50 });\n        }\n      }\n    }\n  }\n\n  addImageLayer(layer: GeoserverLayer) {\n    const workspace = encodeURI(layer.workspace);\n    const layerName = encodeURI(layer.workspace + ':' + layer.key);\n\n    this.map.addLayer({\n      'id': layer.key,\n      'type': 'raster',\n      'source': {\n        'type': 'raster',\n        'tiles': [\n          '/geoserver/' + workspace + '/wms?layers=' + layerName + '&bbox={bbox-epsg-3857}&format=image/png&service=WMS&version=1.1.1&request=GetMap&srs=EPSG:3857&transparent=true&width=256&height=256'\n        ],\n        'tileSize': 256\n      },\n      'paint': {}\n    }, \"points\");\n  }\n\n  handleGoto(): void {\n\n    //    -111.12439336274211\n    //    39.32066259372583\n    //    -111.12342302258116\n    // 39.32107716199166\n\n    var bounds = new LngLatBounds([-111.12439336274211, 39.32066259372583, -111.12342302258116, 39.32107716199166]);\n\n    this.map.fitBounds(bounds);\n  }\n\n\n  getMetadata(node: SiteEntity): any {\n    const metadata = this.metadataService.getMetadata(node);\n\n    return metadata;\n  }\n\n\n  select(node: SiteEntity, parent: SiteEntity, event: any): void {\n\n    if (event != null) {\n      event.stopPropagation();\n    }\n    \n    if (node != null && node.geometry != null && node.geometry.type === \"Point\")\n    {\n      //this.map.fitBounds(this.allPointsBounds, { padding: 50 });\n      \n      this.map.easeTo({\n        center: node.geometry.coordinates,\n        zoom: 8\n      });\n    }\n\n    const metadata = this.metadataService.getMetadata(node);\n\n    if (metadata.leaf) {\n      const breadcrumbs = [...this.breadcrumbs];\n\n      if (parent != null) {\n        breadcrumbs.push(parent);\n      }\n\n      if (this.metadataService.getTypeContainsFolders(node)) {\n        this.service.getItems(node.id, null).then(nodes => {\n          this.showLeafModal(node, nodes, breadcrumbs);\n        });\n      }\n      else {\n        this.showLeafModal(this.current, [node], breadcrumbs);\n      }\n    }\n    else if (node.type === \"object\") {\n      // Do nothing there are no children\n      //                return this.service.getItems( node.data.id, node.data.name );\n    }\n    else {\n      this.service.getItems(node.id, null).then(nodes => {\n        this.current = node;\n\n        if (parent != null) {\n          this.addBreadcrumb(parent);\n        }\n\n        this.addBreadcrumb(node);\n        this.setNodes(nodes);\n      });\n    }\n  }\n\n  addBreadcrumb(node: SiteEntity): void {\n\n    if (this.breadcrumbs.length == 0 || this.breadcrumbs[this.breadcrumbs.length - 1].id !== node.id) {\n      this.breadcrumbs.push(node);\n    }\n  }\n\n  handleExpand(node: SiteEntity, event: any): void {\n\n    if (event != null) {\n      event.stopPropagation();\n    }\n\n    if (node.children == null || node.children.length == 0) {\n      this.service.getItems(node.id, null).then(nodes => {\n        node.children = nodes;\n\n        this.expand(node);\n      });\n    }\n    else {\n      // this.expand( node );\n      node.children = [];\n      node.active = false;\n    }\n  }\n\n  handleGotoSite(product: Product): void {\n    const entity = product.entities[product.entities.length - 1];\n\n    const breadcrumbs = product.entities;\n\n    this.service.getItems(entity.id, null).then(nodes => {\n      this.showLeafModal(entity, nodes, breadcrumbs);\n    });\n  }\n\n\n  back(node: SiteEntity): void {\n\n    if (node != null) {\n      if (node.geometry != null && node.geometry.type === \"Point\")\n      {\n        //this.map.fitBounds(this.allPointsBounds, { padding: 50 });\n        \n        this.map.easeTo({\n          center: node.geometry.coordinates,\n          zoom: 8\n        });\n      }\n    \n      this.service.getItems(node.id, null).then(nodes => {\n        var indexOf = this.breadcrumbs.findIndex(i => i.id === node.id);\n\n        this.current = node;\n        this.breadcrumbs.splice(indexOf + 1);\n        this.setNodes(nodes);\n      });\n    }\n    else if (this.breadcrumbs.length > 0) {\n      this.loadingSites = true;\n      this.service.roots(null, null).then(nodes => {\n        this.loadingSites = false;\n        this.breadcrumbs = [];\n        this.setNodes(nodes);\n        this.staticTabs.tabs[0].active = true;\n      \n        this.map.fitBounds(this.allPointsBounds, { padding: 50 });\n        \n        // This hack exists because the handleExtentChange method gets called immediately after we do fitBounds\n        // and it gets called with some really closely zoomed-in bbox which dumps our nodes we just fetched...\n        let that = this;\n        window.setTimeout(function(){\n          that.current = null;\n        }, 500);\n      });\n    }\n  }\n\n  expand(node: SiteEntity) {\n    node.active = true;\n    this.current = node;\n  }\n\n  setNodes(nodes: SiteEntity[]): void {\n    this.nodes = [];\n    this.supportingData = [];\n\n    nodes.forEach(node => {\n      if (node.type === 'folder') {\n        this.supportingData.push(node);\n      }\n      else {\n        this.nodes.push(node);\n      }\n    })\n  }\n\n  showLeafModal(collection: SiteEntity, folders: SiteEntity[], breadcrumbs: SiteEntity[]): void {\n\n    if (collection.type === 'Mission') {\n      this.bsModalRef = this.modalService.show(AccessibleSupportModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n        class: 'leaf-modal modal-lg'\n      });\n      this.bsModalRef.content.init(collection, folders, breadcrumbs);\n    }\n    else {\n      this.bsModalRef = this.modalService.show(LeafModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n        class: 'leaf-modal modal-lg'\n      });\n      this.bsModalRef.content.init(collection, folders, breadcrumbs);\n    }\n  }\n\n\n\n  //    /*\n  //     *  Context menu visibility functions\n  //     */\n  //    public canEdit = ( item: any ): boolean => {\n  //        if ( this.admin ) {\n  //            return true;\n  //        }\n  //        else if ( this.worker ) {\n  //            return ( item.data.type === \"Mission\" || item.data.type === \"Collection\" );\n  //        }\n  //\n  //        return false;\n  //    }\n  //\n  //    public canRunOrtho = ( item: any ): boolean => {\n  //        if ( item.data == null || item.data.type !== \"Collection\" ) {\n  //            return false;\n  //        }\n  //\n  //        return true;\n  //\n  //        // TODO : If we don't have raw images uploaded then they can't run ortho\n  //\n  //        // TODO : Different roles?\n  //        //      if ( this.admin ) {\n  //        //        return true;\n  //        //      }\n  //        //\n  //        //      return false;\n  //    }\n  //\n  //    public canDelete = ( item: any ): boolean => {\n  //        if ( this.admin ) {\n  //            return true;\n  //        }\n  //\n  //        return false;\n  //    }\n  //\n  //    public canAddChild = ( item: any ): boolean => {\n  //        if ( this.admin && item.data.type !== \"Collection\" && item.data.type !== \"Imagery\" ) {\n  //            return true;\n  //        }\n  //        else if ( this.worker && ( item.data.type === \"Project\" || item.data.type === \"Mission\" ) ) {\n  //            return true;\n  //        }\n  //\n  //        return false;\n  //    }\n  //\n  //    public canCreateImageDir( item: any ): boolean {\n  //        if ( gpAppType && gpAppType.toLowerCase() === 'nps' && item.data.type === 'Project' ) {\n  //            return true;\n  //        }\n  //    }\n  //\n  //    public canEditSite = ( item: any ): boolean => {\n  //        return item.data.type === \"Site\" && this.canEdit( item );\n  //    }\n  //\n  //    public hasMapImage = ( item: any ): boolean => {\n  //        return ( item.data.imageKey != null );\n  //    }\n  //\n  //    public isSite = ( item: any ): boolean => {\n  //        return item.data.type === \"Site\";\n  //    }\n  //\n  //    public isImageDir = ( item: any ): boolean => {\n  //        return item.data.type === \"Imagery\";\n  //    }\n  //\n  //    public isCollection = ( item: any ): boolean => {\n  //        return item.data.type === \"Collection\";\n  //    }\n  //\n  //    public canUpload = ( item: any ): boolean => {\n  //        // Only allow direct uploads on Imagery child nodes\n  //        if ( gpAppType && gpAppType.toLowerCase() === 'nps' && item.parent.data.type !== \"Collection\" ) {\n  //            if ( item.data.name === \"raw\" ) {\n  //                return true;\n  //            }\n  //            else if ( item.data.name === \"georef\" ) {\n  //                return true;\n  //            }\n  //            else if ( item.data.name === \"ortho\" ) {\n  //                return true;\n  //            }\n  //            // else if(item.data.type === \"Collection\"){\n  //            //     return true;\n  //            // }\n  //            // else if(item.data.type === \"Imagery\"){\n  //            //     return true;\n  //            // }\n  //        }\n  //\n  //        return false;\n  //    }\n}\n","<uasdm-header [title]=\"'Data Upload'\"></uasdm-header>\n\n<div id=\"app-container\" class=\"container\">\n    <div *ngIf=\"sites.length === 0\" class=\"row\">\n        <div class=\"col-md-2\"></div>\n        <div class=\"col-md-8\">\n            <h4 style=\"margin-top: 50px;\">\n                There are no Sites added to the system. Add a Site, Project, Mission, and Collection using the \n                <a routerlink=\"/viewer\" routerlinkactive=\"active\" href=\"#/viewer\">Site Viewer</a> \n                before uploading data to.\n            </h4>\n        </div>\n        <div class=\"col-md-2\"></div>\n    </div>\n    <div *ngIf=\"sites.length > 0\" class=\"row\">\n        <div class=\"col-md-2\"></div>\n        <div class=\"col-md-8\">\n            <form #ngForm=\"ngForm\">\n\n                <!-- Existing task panel -->\n                <div class=\"\" *ngIf=\"existingTask && !currentTask\">\n                    <div class=\"panel panel-warning\" style=\"margin: 30px 0 30px 0;\">\n                        <div class=\"panel-heading\" style=\"font-size: 20px;\">Partial Upload Detected</div>\n                        <div class=\"panel-body\">\n                            <h4>A partial upload was detected. You can either cancel that partial upload or attempt to\n                                continue.</h4>\n                            <h4>\n                                <b>To continue an upload</b>\n                                please click the Continue Upload button and re-upload your file and we will try our best\n                                to continue where you left off.\n                            </h4>\n\n                            <hr>\n                            <button type=\"button\" class=\"btn btn-danger\" style=\"margin-top: 20px;\"\n                                (click)=\"removeUpload($event)\">\n                                <i class=\"icon-upload icon-white\"></i>\n                                Cancel Upload\n                            </button>\n                            <button type=\"button\" class=\"btn btn-primary\" style=\"margin-top: 20px;\"\n                                (click)=\"showUploadPanel()\">\n                                <i class=\"icon-upload icon-white\"></i>\n                                Continue Upload\n                            </button>\n                        </div>\n                    </div>\n                </div> <!-- End existing task panel -->\n\n                <!-- Task finished upload notification -->\n                <div *ngFor=\"let note of taskFinishedNotifications\" class=\"panel panel-success\" style=\"margin: 30px 0 30px 0;\">\n                    <div class=\"panel-heading\" style=\"font-size: 20px;\">\n                        Upload Details\n                        <i class=\"fa fa-times btn btn-close pull-right\" style=\"min-width:20px;padding:0;line-height: 27px;\" (click)=\"closeTaskFinishedNotification(note.id)\"></i>\n                    </div>\n                    <div class=\"panel-body\">\n                        <h4>\n                            Status:\n                            <b> Upload successfully completed </b>\n                        </h4>\n                        <h4>\n                            Message:\n                            <b> Your uploaded data is being processed into final image products. </b>\n                        </h4>\n                    </div>\n                </div> <!-- End task finished upload notification -->\n\n                <div style=\"margin-top: 30px;\" class=\"\" *ngIf=\"!disabled && !existingTask\">\n                    <div class=\"form-group\">\n                        <label for=\"site\">Site:</label>\n                        <select name=\"site\" (change)=\"onSiteSelect($event.target.value)\" [(ngModel)]=\"values.site\"\n                            required>\n                            <option></option>\n                            <option *ngFor=\"let site of sites\" [value]=\"site.id\">{{site.name}}</option>\n                        </select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"project\">Project:</label>\n                        <select name=\"project\" [attr.disabled]=\"values.site == null ? '' : null\"\n                            (change)=\"onProjectSelect($event.target.value)\" [(ngModel)]=\"values.project\" required>\n                            <option></option>\n                            <option *ngFor=\"let project of projects\" [value]=\"project.id\">{{project.name}}</option>\n                        </select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"mission\">Mission:</label>\n                        <select name=\"mission\" [attr.disabled]=\"values.project == null ? '' : null\"\n                            (change)=\"onMissionSelect($event.target.value)\" [(ngModel)]=\"values.mission\" required>\n                            <option></option>\n                            <option *ngFor=\"let mission of missions\" [value]=\"mission.id\">{{mission.name}}</option>\n                        </select>\n                    </div>\n                    <!-- \n                            <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input type=\"radio\" class=\"form-check-input\" name=\"radioopt\" [(ngModel)]=\"values.create\" [value]=\"true\" (change)=\"handleChange()\" [checked]=\"values.create==true\" />\n                                Create new collection\n                            </label>\n                            </div>\n                            <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input type=\"radio\" class=\"form-check-input\" name=\"radioopt\" value=\"false\" [(ngModel)]=\"values.create\" (change)=\"handleChange()\" [value]=\"false\" [checked]=\"values.create==false\" />\n                                Add to existing collection\n                            </label>\n                            </div>\n                            <div class=\"form-group\" *ngIf=\"values.create === true\">\n                            <label for=\"nameInput\">Name</label>\n                            <input [(ngModel)]=\"values.name\" name=\"name\" type=\"input\" class=\"form-control\" id=\"nameInput\" placeholder=\"Name\" #nameField=\"ngModel\" required forbiddenName>\n                            <div class=\"error-container\" *ngIf=\"nameField.errors && nameField.errors.forbiddenName\">\n                                Invalid name. No spaces or special characters such as <, >, -, +, =, !, @, #, $, %, ^, &, *, ?,/, \\ or apostrophes are allowed.        \n                            </div>\n                            </div>\n                    -->\n                    <div class=\"form-group\">\n                        <label for=\"collection\">Collection:</label>\n                        <select name=\"collection\" [attr.disabled]=\"values.mission == null ? '' : null\"\n                            (change)=\"onCollectionSelect($event.target.value)\" [(ngModel)]=\"values.collection\" required>\n                            <option></option>\n                            <option *ngFor=\"let collection of collections\" [value]=\"collection.id\">{{collection.name}}\n                            </option>\n                        </select>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"outFileName\">Output Product Name Prefix</label>\n                        <input [(ngModel)]=\"values.outFileName\" name=\"outFileName\" type=\"input\" class=\"form-control\" placeholder=\"Output product name prefix...\" />\n                    </div>\n                </div>\n\n                <!-- Current upload indicator -->\n                <div class=\"\" [hidden]=\"!uploadVisible\">\n                    <div *ngIf=\"currentTask\" class=\"panel panel-warning\" style=\"margin: 30px 0 30px 0;\">\n                        <div class=\"panel-heading\" style=\"font-size: 20px;\">Upload Details</div>\n                        <div class=\"panel-body\">\n                            <h4>\n                                Status:\n                                <b> {{currentTask.status}} </b>\n                            </h4>\n                            <h4>\n                                Message:\n                                <b> {{currentTask.message}} </b>\n                            </h4>\n                            <h4>\n                                Upload Started On:\n                                <b> {{currentTask.createDate}} </b>\n                            </h4>\n                            <h4>\n                                Last Updated:\n                                <b> {{currentTask.lastUpdatedDate}} </b>\n                            </h4>\n                            <h4>\n                                Elapsed Time:\n                                <b> {{uploadCounter}} </b>\n                            </h4>\n                        </div>\n                    </div>\n\n                    <div *ngIf=\"showFileSelectPanel\" class=\"uploader-container\" style=\"margin-top: 20px;\" #uploader></div>\n\n                    <button type=\"button btn btn-primary\" [disabled]=\"!ngForm.valid || disabled\" class=\"btn btn-primary\"\n                        style=\"margin-top: 20px;\" (click)=\"handleUpload()\">\n                        <i class=\"icon-upload icon-white\"></i>\n                        Upload\n                    </button>\n                </div> <!-- End current upload indicator -->\n            </form>\n\n        </div>\n        <div class=\"col-md-2\"></div>\n    </div>\n</div>","import { Component, OnInit, AfterViewInit, Inject, ViewChild, ElementRef, KeyValueDiffers, DoCheck, HostListener } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { interval } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\n//use Fine Uploader UI for traditional endpoints\nimport { FineUploader, UIOptions } from 'fine-uploader';\n\nimport { ErrorModalComponent } from '@shared/component/modal/error-modal.component';\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\nimport { SiteEntity, UploadForm, Task } from '../model/management';\nimport { ManagementService } from '../service/management.service';\n\n\ndeclare var acp: string;\n\n@Component( {\n    selector: 'upload',\n    templateUrl: './upload.component.html',\n    styleUrls: []\n} )\nexport class UploadComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n    private bsModalRef: BsModalRef;\n\n    /* \n     * List of sites\n     */\n    sites = [] as SiteEntity[];\n\n    /* \n     * List of projects\n     */\n    projects = [] as SiteEntity[];\n\n    /* \n     * List of missions\n     */\n    missions = [] as SiteEntity[];\n\n    /* \n     * List of collections\n     */\n    collections = [] as SiteEntity[];\n\n    /* \n     * Form values\n     */\n    values = { create: false } as UploadForm;\n\n    /*\n     * FineUploader for uploading large files\n     */\n    uploader = null as FineUploader;\n\n    disabled: boolean = false;\n    taskStatusMessages: string[] = [];\n    currentTask: Task = null;\n    existingTask: boolean = false;\n    taskPolling: any;\n    pollingIsSet: boolean = false;\n    uploadVisible: boolean = true;\n    selectedContinue: boolean = false;\n    uploadCounter: string = \"00:00:00\";\n    uplodeCounterInterfal: any;\n    differ: any;\n    showFileSelectPanel: boolean = false;\n    taskFinishedNotifications: any[] = [];\n\n    constructor( private service: ManagementService, private modalService: BsModalService, differs: KeyValueDiffers ) {\n        this.differ = differs.find( [] ).create();\n    }\n\n    ngDoCheck() {\n\n        if ( this.uploader ) {\n            const change = this.differ.diff( this.uploader );\n            if ( change ) {\n                this.setExistingTask();\n            }\n        }\n    }\n\n    @ViewChild( 'uploader' ) set content( elem: ElementRef ) {\n\n        const that = this;\n\n        if ( elem != null && this.uploader == null ) {\n\n            let uiOptions: UIOptions = {\n                debug: false,\n                autoUpload: false,\n                multiple: false,\n                element: elem.nativeElement,\n                template: 'qq-template',\n                request: {\n                    endpoint: acp + \"/file/upload\",\n                    forceMultipart: true\n                },\n                resume: {\n                    enabled: true,\n                    recordsExpireIn: 1\n                },\n                chunking: {\n                    enabled: true\n                },\n                retry: {\n                    enableAuto: true\n                },\n                text: {\n                    defaultResponseError: \"Upload failed\"\n                },\n                failedUploadTextDisplay: {\n                    mode: 'none'\n                    //responseProperty: 'error'\n                },\n                validation: {\n                    allowedExtensions: ['zip', 'tar.gz']\n                },\n                showMessage: function( message: string ) {\n                    // \n                },\n                callbacks: {\n                    onUpload: function( id: any, name: any ): void {\n                        that.disabled = true;\n\n                        // document.getElementById(\"select-file-button\").className = document.getElementById(\"select-file-button\").className + \" hidden\";\n\n                        that.countUpload( that );\n                    },\n                    onProgress: function( id: any, name: any, uploadedBytes: any, totalBytes: any ): void {\n                    },\n                    onUploadChunk: function( id: any, name: any, chunkData: any ): void {\n                    },\n                    onUploadChunkSuccess: function( id: any, chunkData: any, responseJSON: any, xhr: any ): void {\n\n                        if ( responseJSON.message && responseJSON.message.currentTask && !that.currentTask ) {\n                            that.currentTask = responseJSON.message.currentTask;\n                        }\n\n                        if ( that.currentTask && !that.pollingIsSet ) {\n                            that.pollingIsSet = true;\n\n                            that.taskPolling = interval( 2000 )\n                                .pipe(switchMap(() => {\n                                    if ( that.currentTask ) {\n                                        return that.service.task( that.currentTask.oid );\n                                    }\n                                } ))\n                                .pipe(map(( data ) => data ))\n                                .subscribe(( data ) => {\n                                    that.currentTask = data.task\n                                } );\n                        }\n                    },\n                    onComplete: function( id: any, name: any, responseJSON: any, xhrOrXdr: any ): void {\n                        that.disabled = false;\n                        that.currentTask = null;\n                        that.existingTask = false;\n\n                        if ( that.taskPolling ) {\n                            that.taskPolling.unsubscribe();\n                            that.pollingIsSet = false;\n                        }\n\n                        this.clearStoredFiles();\n\n                        // document.getElementById(\"select-file-button\").classList.remove(\"hidden\");\n\n                        clearInterval( that.uplodeCounterInterfal );\n\n                        that.taskFinishedNotifications.push(\n                            {\n                                'id': id\n                            }\n                        )\n                    },\n                    onCancel: function( id: number, name: string ) {\n                        //that.currentTask = null;\n\n                        if ( that.currentTask && that.currentTask.uploadId ) {\n                            that.service.removeTask( that.currentTask.uploadId )\n                                .then(() => {\n                                    this.clearStoredFiles();\n                                } )\n                                .catch(( err: HttpErrorResponse ) => {\n                                    this.error( err );\n                                } );\n                        }\n\n                        that.disabled = false;\n                        that.currentTask = null;\n                        that.existingTask = false;\n\n                        if ( that.taskPolling ) {\n                            that.taskPolling.unsubscribe();\n                            that.pollingIsSet = false;\n                        }\n\n                        // document.getElementById(\"select-file-button\").classList.remove(\"hidden\");\n\n                        clearInterval( that.uplodeCounterInterfal );\n                    },\n                    onError: function( id: number, errorReason: string, xhrOrXdr: string ) {\n                        that.error( xhrOrXdr );\n                    }\n                }\n            };\n\n            this.uploader = new FineUploader( uiOptions );\n\n        }\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnInit(): void {\n        this.service.roots( null, null ).then( sites => {\n            this.sites = sites;\n        } );\n    }\n\n    closeTaskFinishedNotification( id: string ): void {\n        // iterate in reverse to allow splice while avoiding the reindex\n        // from affecting any of the next items in the array.\n        let i = this.taskFinishedNotifications.length;\n        while ( i-- ) {\n            let note = this.taskFinishedNotifications[i];\n            if ( id === note.id ) {\n                this.taskFinishedNotifications.splice( i, 1 );\n            }\n        }\n    }\n\n\n    setExistingTask(): void {\n        let resumable = this.uploader.getResumableFilesData() as any[];\n        if ( resumable.length > 0 ) {\n            this.existingTask = true;\n\n            if ( !this.selectedContinue ) {\n                this.hideUploadPanel();\n            }\n        }\n    }\n\n    onSiteSelect( siteId: string ): void {\n        this.values.site = siteId;\n\n        if ( siteId != null && siteId.length > 0 ) {\n\n            // Reset select options\n            this.projects = [] as SiteEntity[];\n            this.missions = [] as SiteEntity[];\n            this.collections = [] as SiteEntity[];\n\n            // Reset form values\n            this.values.project = null;\n            this.values.mission = null;\n            this.values.collection = null;\n\n            this.service.getChildren( this.values.site ).then( projects => {\n                this.projects = projects;\n            } );\n        }\n\n        //console.log( this.values );\n    }\n\n    onProjectSelect( projectId: string ): void {\n        this.values.project = projectId;\n\n        // Reset select options\n        this.missions = [] as SiteEntity[];\n        this.collections = [] as SiteEntity[];\n\n        // Reset form values\n        this.values.mission = null;\n        this.values.collection = null;\n\n        if ( projectId != null && projectId.length > 0 ) {\n            this.service.getChildren( this.values.project ).then( missions => {\n                this.missions = missions.filter( mission => {\n                    return mission.type === 'Mission';\n                } );\n            } );\n        }\n    }\n\n    onMissionSelect( missionId: string ): void {\n        this.values.mission = missionId;\n\n        // Reset select options\n        this.collections = [] as SiteEntity[];\n\n        // Reset form values\n        this.values.collection = null;\n        this.values.name = null;\n\n        if ( missionId != null && missionId.length > 0 && !this.values.create ) {\n\n            this.service.getChildren( this.values.mission ).then( collections => {\n                this.collections = collections;\n            } );\n        }\n    }\n\n    handleChange(): void {\n\n        // Reset select options\n        this.collections = [] as SiteEntity[];\n\n        // Reset form values\n        this.values.collection = null;\n        this.values.name = null;\n\n        if ( this.values.mission != null && this.values.mission.length > 0 && !this.values.create ) {\n\n            this.service.getChildren( this.values.mission ).then( collections => {\n                this.collections = collections;\n            } );\n        }\n    }\n\n    onCollectionSelect( collectionId: string ): void {\n        this.values.collection = collectionId;\n        this.values.uasComponentOid = collectionId;\n\n        if ( collectionId && collectionId.trim().length > 0 ) {\n            this.showFileSelectPanel = true;\n        }\n        else {\n            this.showFileSelectPanel = false\n        }\n    }\n\n    handleUpload(): void {\n\n        /*\n         * Validate form values before uploading\n         */\n        if ( !this.values.create && this.values.collection == null && !this.existingTask ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = \"A collection must first be selected before the file can be uploaded\";\n        }\n        else if ( this.values.create && ( this.values.mission == null || this.values.name == null || this.values.name.length == 0 ) && !this.existingTask ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = \"Name is required\";\n        }\n        else {\n            this.uploader.setParams( this.values );\n            this.uploader.uploadStoredFiles();\n        }\n\n    }\n\n    removeUpload( event: any ): void {\n        let that = this;\n\n        this.bsModalRef = this.modalService.show( BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = 'Are you sure you want to cancel the upload of [' + this.uploader.getResumableFilesData()[0].name + ']';\n        this.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = 'Cancel Upload';\n\n        ( <BasicConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.service.removeTask( this.uploader.getResumableFilesData()[0].uuid )\n                .then(() => {\n                    //that.uploader.clearStoredFiles();\n                    //that.uploader.cancelAll()\n\n                    // The above clearStoredFiles() and cancelAll() methods don't appear to work so \n                    // we are clearing localStorage manually.\n                    localStorage.clear();\n                    that.existingTask = false;\n                    that.showUploadPanel();\n\n                } );\n        } );\n    }\n\n    hideUploadPanel(): void {\n        this.uploadVisible = false;\n    }\n\n    showUploadPanel(): void {\n        this.uploadVisible = true;\n        this.selectedContinue = true;\n    }\n\n    countUpload( thisRef: any ): void {\n        let ct = 0;\n\n\n        function incrementSeconds() {\n            ct += 1;\n\n            let hours = Math.floor( ct / 3600 )\n            let minutes = Math.floor(( ct % 3600 ) / 60 );\n            let seconds = Math.floor( ct % 60 );\n\n            let hoursStr = minutes < 10 ? \"0\" + hours : hours;\n            let minutesStr = minutes < 10 ? \"0\" + minutes : minutes;\n            let secondsStr = seconds < 10 ? \"0\" + seconds : seconds;\n\n            thisRef.uploadCounter = hoursStr + \":\" + minutesStr + \":\" + secondsStr;\n        }\n\n        thisRef.uplodeCounterInterfal = setInterval( incrementSeconds, 1000 );\n    }\n\n    public canDeactivate(): boolean {\n        return this.disabled;\n    }\n\n    @HostListener( 'window:beforeunload', ['$event'] )\n    unloadNotification( $event: any ) {\n        if ( this.disabled ) {\n            $event.returnValue = 'An upload is currently in progress. Are you sure you want to leave?';\n        }\n    }\n\n    error( message: string ): void {\n        if ( message !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = message;\n        }\n    }\n}\n","<div class=\"panel-group\">\n  <div class=\"panel panel-default\" style=\"background: none;border: none;\">\n    <div class=\"panel-heading panel-heading-light clickable\" style=\"margin-top: 20px;\">\n      <h4 class=\"panel-title\">\n        <a data-toggle=\"collapse\" (click)=\"showProcess = !showProcess\" attr.aria-controls=\"task-group-panel-{{groupTypeId}}\">\n          <h4>{{taskCategory}}</h4>\n        </a>\n      </h4>\n      <span class=\"heading-status-label pull-right\">Current status: <span\n          [ngClass]=\"{'success':taskGroupType.status === 'Complete', 'warning':taskGroupType.status  === 'Warning', 'pending':taskGroupType.status === 'Queued' || taskGroupType.status === 'Processing','fail':taskGroupType.status === 'Failed'}\">{{taskGroupType.status}}</span></span>\n    </div>\n    <div id=\"task-group-panel-{{groupTypeId}}\" class=\"panel-body\" [isAnimated]=\"false\" [collapse]=\"!showProcess\">\n\n      <div class=\"task-container\" *ngFor=\"let task of taskGroupType.tasks; let idx=index\">\n        <div *ngIf=\"task.status !== 'Complete' && task.status !== 'Failed' && task.status !== 'Error'\" >\n          <ul class=\"list-unstyled\" style=\"margin: 0;\">\n            <li>Status: <b\n                [ngClass]=\"{'success':task.status === 'Complete', 'pending':(task.status === 'Queued' || task.status === 'Processing'),'fail':task.status === 'Failed'}\">{{task.status}}</b>\n            </li>\n            <li>Created on: <b>{{task.createDate}}</b></li>\n            <li>Last update: <b>{{task.lastUpdatedDate}}</b></li>\n            <li style=\"word-break: break-all;\">Message: <b>{{task.message}}</b></li>\n            <li *ngIf=\"taskCategory == 'Upload'\">Sensor: <b>{{task.sensorName}}</b></li>\n          </ul>\n          \n          <div class=\"row\">\n            <div class=\"col-sm-12\">\n              <div class=\"button-holder\" style=\"margin-top: 30px;\">\n                <button class=\"btn btn-default\" *ngIf=\"task.actions.length > 0\" (click)=\"task.showError = !task.showError\">{{task.showError ? 'Hide' : 'Show'}} Messages</button>\n                <button class=\"btn btn-default caution\" (click)=\"removeTask(task)\">Delete Task</button>\n              </div>\n            </div>\n          </div>          \n        </div>\n\n        <div *ngIf=\"task.status === 'Complete' || task.status === 'Failed' || task.status === 'Error'\">\n          <ul class=\"list-unstyled\" style=\"margin: 0;\">\n            <li>Status: \n              <b [ngClass]=\"{'success':task.status === 'Complete','pending':(task.status === 'Queued' || task.status === 'Processing'), 'fail':task.status === 'Failed'}\">\n                {{task.status === 'Complete' && task.actions.length > 0 ? 'Complete With Messages' : task.status }}\n              </b>\n            </li>\n            <li>Message: <b>{{task.message}}</b></li>\n            <li>Created on: <b>{{task.createDate}}</b></li>\n            <li>Last update: <b>{{task.lastUpdatedDate}}</b></li>\n            <li *ngIf=\"taskCategory == 'Upload'\">Sensor: <b>{{task.sensorName}}</b></li>\n          </ul>\n\n          <div class=\"row\">\n            <div class=\"col-sm-12\">\n              <div class=\"button-holder\" style=\"margin-top: 30px;\">\n                <button class=\"btn btn-default\" *ngIf=\"task.actions.length > 0\" (click)=\"task.showError = !task.showError\">{{task.showError ? 'Hide' : 'Show'}} Messages</button>\n                <button class=\"btn btn-default\" *ngIf=\"task.odmOutput\" (click)=\"showODMOutput = !showODMOutput\">Show Detailed Log Output</button>\n                <button class=\"btn btn-default caution\" (click)=\"removeTask(task)\">Delete Task</button>\n              </div>\n            </div>\n          </div>\n\n          <div *ngIf=\"task.odmOutput && showODMOutput\" class=\"row\">\n            <div class=\"col-sm-12\">\n              <h4>Output:</h4>\n              <textarea style=\"color:grey;width:500px;height:200px;\" [innerHTML]=\"task.odmOutput\"></textarea>\n            </div>\n          </div>\n        </div>\n        \n        <div *ngIf=\"task.showError\" class=\"row\">\n          <div class=\"col-sm-12\">\n            <h4 *ngIf=\"task.actions.length === 0\" style=\"color:grey;\">There are no actions for this task.</h4>\n            <table *ngIf=\"task.actions.length > 0\" class=\"table table-bordered\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Description</th>\n                  <th>Creation Date</th>\n                  <th>Last Updated</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let action of task.actions; let i=index\">\n                  <th scope=\"row\">{{i + 1}}</th>\n                  <td>{{action.description}}</td>\n                  <td>{{action.createDate}}</td>\n                  <td>{{action.lastUpdatedDate}}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>        \n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\n\nimport { Task, TaskGroup, TaskGroupType } from '@site/model/management';\nimport { ManagementService } from '@site/service/management.service';\n\n\n@Component({\n\tselector: 'tasks-panel',\n\ttemplateUrl: './tasks-panel.component.html',\n\tstyleUrls: ['./tasks-panel.css']\n})\nexport class TasksPanelComponent implements OnInit {\n\n\t@Input() taskGroupType: TaskGroupType;\n\t@Input() groupTypeId: string;\n\t@Input() taskCategory: string;\n    \n\tshowUploads: boolean = false;\n\tshowProcess: boolean = false;\n\tshowStore: boolean = false;\n\tshowODMOutput: boolean = false;\n\tshowError: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n     */\n\tbsModalRef: BsModalRef;\n\n\n    /*\n     * List of tasks\n     */\n\ttaskGroups: TaskGroup[] = [];\n\n\tconstructor(private managementService: ManagementService, private modalService: BsModalService) {\n\n\t}\n\n\tngOnInit(): void {\n\t  if (this.taskGroupType != null && this.taskGroupType.tasks != null)\n\t  {\n\t\t  for (var i = 0; i < this.taskGroupType.tasks.length; ++i)\n\t\t  {\n\t\t    let task = this.taskGroupType.tasks[i];\n\t\t    \n\t\t    if (task.actions.length > 0)\n\t\t    {\n\t\t      task.showError = true;\n\t\t    }\n\t\t  }\n\t  }\n\t}\n\n\tngOnDestroy(): void {\n\t}\n\n\n\tremoveTask(task: Task): void {\n\n\t\tthis.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = 'Are you sure you want to delete [' + task.label + '?';\n\t\tthis.bsModalRef.content.data = task;\n\t\tthis.bsModalRef.content.type = 'DANGER';\n\t\tthis.bsModalRef.content.submitText = 'Delete';\n\n\t\t(<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(task => {\n\t\t\tthis.deleteTask(task);\n\t\t});\n\n\t}\n\n\tdeleteTask(task: Task) {\n\t\tthis.managementService.removeTask(task.uploadId)\n\t\t\t.then(() => {\n\t\t\t\tlet pos = null;\n\t\t\t\tfor (let i = 0; i < this.taskGroupType.tasks.length; i++) {\n\t\t\t\t\tlet thisTask = this.taskGroupType.tasks[i];\n\n\t\t\t\t\tif (thisTask.uploadId === task.uploadId) {\n\t\t\t\t\t\tpos = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (pos !== null) {\n\t\t\t\t\tthis.taskGroupType.tasks.splice(pos, 1);\n\t\t\t\t}\n\t\t\t});\n\t}\n}\n","<uasdm-header [title]=\"'Tasks'\"></uasdm-header>\n\n<div id=\"app-container\" class=\"container-fluid\" style=\"padding-top:20px;\">\n\n  <div class=\"row\">\n    <div class=\"col-sm-1\"></div>\n    <div class=\"col-sm-10\">\n      <div id=\"tasks\">\n\n        <div *ngIf=\"messages && messages.count > 0\">\n          <h2>Tasks</h2>\n\n          <div id=\"tasks-container\">\n            <div class=\"row\">\n              <h3 class=\"col-sm-7\">Issue</h3>\n              <h3 class=\"col-sm-5\" style=\"text-align:right; padding-right: 8em\">Actions</h3>\n            </div>\n            <div class=\"panel panel-default\" *ngFor=\"let message of messages.resultSet | paginate: {id: 'message-pg-ctrl', itemsPerPage: messages.pageSize, currentPage: messages.pageNumber, totalItems: messages.count }\">\n              <!-- <div class=\"panel-heading\">Panel heading without title</div> -->\n          \n              <div class=\"panel-body\">\n                <div class=\"row\">\n                  <div class=\"col-sm-7\">\n                    <div>\n                      <span class=\"dot pending\" style=\"margin-left:0;\"></span>\n                      {{message.message}}\n                    </div>\n                    <div style=\"margin-top:10px;margin-bottom:0;color:grey;\">\n                      <ul class=\"breadcrumb\" style=\"color:grey;\">\n                        <li *ngFor=\"let ancestor of message.ancestors\">\n                          <span > <b>{{ancestor}}</b> </span>\n                        </li>\n                        <li class=\"active\">\n                          <a (click)=\"handleGoto(message.collectionId)\" style=\"color: #007276;\"> {{message.collectionName}}</a>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                  <div class=\"col-sm-5\" style=\"text-align: right;\">\n                    <div>\n                      <button class=\"btn btn-default\" (click)=\"handleGoto(message.collectionId)\">View Collection</button>\n                      <button style=\"margin-left: 10px;\" class=\"btn btn-primary\" (click)=\"handleMessage(message)\">Add Metadata</button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n          \n            </div>\n            <div class=\"row\">\n              <pagination-controls id=\"message-pg-ctrl\" (pageChange)=\"onMessagePageChange($event)\"></pagination-controls>                  \n            </div>\n          </div>\n          \n        </div>\n\n      </div>\n    </div>\n    <div class=\"col-sm-1\"></div>\n  </div>\n\n\n  <div class=\"row\" style=\"margin-bottom: 40px;\">\n    <div class=\"col-sm-1\"></div>\n    <div class=\"col-sm-10\">\n      <h3>Processing Jobs</h3>\n\n      <ul class=\"nav nav-tabs\" role=\"tablist\">\n        <li class=\"active\">\n          <a role=\"tab\" data-toggle=\"tab\" (click)=\"onTabClick($event, 'all')\">All</a>\n        </li>\n        <li>\n          <a role=\"tab\" data-toggle=\"tab\" (click)=\"onTabClick($event, 'action-required')\">Action Required</a>\n        </li>\n<!-- \n        <li>\n          <a role=\"tab\" data-toggle=\"tab\" (click)=\"onTabClick($event, 'success')\">Successful</a>\n        </li>\n -->        \n      </ul>\n\n      <div class=\"tab-content\" >\n\n        <div *ngIf=\"activeTab === 'action-required'\" class=\"tab-pane active\" id=\"action-required\">\n          \n          <div class=\"panel-group\">\n            <div *ngFor=\"let taskGroup of taskPage.resultSet | paginate: { id: 'tasks-pg-ctrl', itemsPerPage: taskPage.pageSize, currentPage: taskPage.pageNumber, totalItems: taskPage.count }; let idx=index\" class=\"panel panel-default\" style=\"background: none;border: none;\">\n            \n                <div class=\"panel-heading clickable\" style=\"margin-top: 20px;background-color: #e9e9e9\">\n                  <h4 class=\"panel-title\" style=\"display: inline-block; vertical-align: middle;\">\n                    <a data-toggle=\"collapse\" (click)=\"setVisibility(taskGroup)\" [attr.aria-expanded]=\"!visible[taskGroup.collectionId]\"\n                      [attr.aria-controls]=\"'taskGroup'+ idx\">\n                      <h4>{{taskGroup.label}}</h4>\n                    </a>\n                  </h4>\n                  \n                  <span class=\"dot\" [ngClass]=\"{'success':taskGroup.status === 'Complete','warning':taskGroup.status === 'Warning', 'pending blink':taskGroup.status === 'Processing' || taskGroup.status === 'Running' || taskGroup.status === 'Pending' || taskGroup.status === 'Queued','fail':taskGroup.status === 'Failed'}\" ></span>\n\n                  <button class=\"btn btn-default pull-right\" (click)=\"handleGoto(taskGroup.collectionId)\">View Collection</button>\n\n                  <div style=\"margin-top:10px;margin-bottom:0;color:grey;\">\n                    <ul class=\"breadcrumb\" style=\"color:grey;\">\n                      <li *ngFor=\"let ancestor of taskGroup.ancestors\">\n                        <span > <b>{{ancestor}}</b> </span>\n                      </li>\n                      <li class=\"active\">\n                        {{taskGroup.label}}\n                      </li>\n                    </ul>\n                  </div>\n\n                </div>\n            \n                <div class=\"panel-body\" [isAnimated]=\"false\" [collapse]=\"!visible[taskGroup.collectionId]\">\n                  <div *ngFor=\"let taskGroupType of taskGroup.groups; let grpi=index\">                  \n                    <div *ngIf=\"taskGroupType.tasks.length > 0\" [id]=\"'task'+ grpi\">\n\n                      <!-- Upload Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'UPLOAD'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Upload'\" ></tasks-panel>\n                      </div>\n\n                      <!-- Process Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'PROCESS'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Process'\" ></tasks-panel>\n                      </div>\n\n                      <!-- Store Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'STORE'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Store'\" ></tasks-panel>\n                      </div>\n                \n                    </div>\n                  </div>\n                </div>\n            </div>\n\n             <pagination-controls id=\"tasks-pg-ctrl\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n        \n        <div *ngIf=\"activeTab === 'success'\" class=\"tab-pane active\" id=\"success\">\n          <div class=\"panel-group\">\n            <div *ngFor=\"let taskGroup of taskPage.resultSet | paginate: {id: 'tasks-pg-ctrl', itemsPerPage: taskPage.pageSize, currentPage: taskPage.pageNumber, totalItems: taskPage.count }; let idx=index\" class=\"panel panel-default\" style=\"background: none;border: none;\">\n            \n                <div class=\"panel-heading clickable\" style=\"margin-top: 20px;background-color: #e9e9e9\">\n                  <h4 class=\"panel-title\" style=\"display: inline-block; vertical-align: middle;\">\n                    <a data-toggle=\"collapse\" (click)=\"setVisibility(taskGroup)\" [attr.aria-expanded]=\"!visible[taskGroup.collectionId]\"\n                      [attr.aria-controls]=\"'taskGroup'+ idx\">\n                      <h4>{{taskGroup.label}}</h4>\n                    </a>\n                  </h4>\n                  \n                  <span class=\"dot\" [ngClass]=\"{'success':taskGroup.status === 'Complete','warning':taskGroup.status === 'Warning', 'pending blink':taskGroup.status === 'Processing' || taskGroup.status === 'Running' || taskGroup.status === 'Pending' || taskGroup.status === 'Queued', 'fail':taskGroup.status === 'Failed'}\" ></span>\n\n                  <button class=\"btn btn-default pull-right\" (click)=\"handleGoto(taskGroup.collectionId)\">View Collection</button>\n\n                  <div style=\"margin-top:10px;margin-bottom:0;color:grey;\">\n                    <ul class=\"breadcrumb\" style=\"color:grey;\">\n                      <li *ngFor=\"let ancestor of taskGroup.ancestors\">\n                        <span > <b>{{ancestor}}</b> </span>\n                      </li>\n                      <li class=\"active\">\n                        {{taskGroup.label}}\n                      </li>\n                    </ul>\n                  </div>\n\n                </div>\n            \n                <div class=\"panel-body\" [isAnimated]=\"false\" [collapse]=\"!visible[taskGroup.collectionId]\">\n                \n                  <div *ngFor=\"let taskGroupType of taskGroup.groups; let grpi=index\">\n                    <div *ngIf=\"taskGroupType.tasks.length > 0\" [id]=\"'task'+ grpi\">\n\n                      <div *ngIf=\"taskGroupType.type === 'UPLOAD'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Upload'\" ></tasks-panel>\n                      </div>\n\n                      <div *ngIf=\"taskGroupType.type === 'PROCESS'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Process'\" ></tasks-panel>\n                      </div>\n\n                      <div *ngIf=\"taskGroupType.type === 'STORE'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Store'\" ></tasks-panel>\n                      </div>\n                \n                    </div>\n                  </div>\n                </div>\n            </div>\n\n             <pagination-controls id=\"tasks-pg-ctrl\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n\n        <div *ngIf=\"activeTab === 'all'\" class=\"tab-pane active\" id=\"all\">\n          <div class=\"panel-group\">\n            <div *ngFor=\"let taskGroup of taskPage.resultSet | paginate: {id: 'tasks-pg-ctrl', itemsPerPage: taskPage.pageSize, currentPage: taskPage.pageNumber, totalItems: taskPage.count }; let idx=index\" class=\"panel panel-default\" style=\"background: none;border: none;\">\n            \n                <div class=\"panel-heading clickable\" style=\"margin-top: 20px;background-color: #e9e9e9\">\n                  <h4 class=\"panel-title\" style=\"display: inline-block; vertical-align: middle;\">\n                    <a data-toggle=\"collapse\" (click)=\"setVisibility(taskGroup)\" [attr.aria-expanded]=\"!visible[taskGroup.collectionId]\"\n                      [attr.aria-controls]=\"'taskGroup'+ idx\">\n                      <h4>{{taskGroup.label}}</h4>\n                    </a>\n                  </h4>\n                  \n                  <span class=\"dot\" [ngClass]=\"{'success':taskGroup.status === 'Complete','warning':taskGroup.status === 'Warning', 'pending blink':taskGroup.status === 'Processing' || taskGroup.status === 'Running' || taskGroup.status === 'Pending' || taskGroup.status === 'Queued', 'fail':taskGroup.status === 'Failed'}\" ></span>\n\n                  <button class=\"btn btn-default pull-right\" (click)=\"handleGoto(taskGroup.collectionId)\">View Collection</button>\n\n                  <div style=\"margin-top:10px;margin-bottom:0;color:grey;\">\n                    <ul class=\"breadcrumb\" style=\"color:grey;\">\n                      <li *ngFor=\"let ancestor of taskGroup.ancestors\">\n                        <span > <b>{{ancestor}}</b> </span>\n                      </li>\n                      <li class=\"active\">\n                        {{taskGroup.label}}\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n            \n                <div class=\"panel-body\" [isAnimated]=\"false\" [collapse]=\"!visible[taskGroup.collectionId]\">                \n                  <div *ngFor=\"let taskGroupType of taskGroup.groups; let grpi=index\">\n                    <div *ngIf=\"taskGroupType.tasks.length > 0\" [id]=\"'task'+ grpi\" >\n\n                      <!-- Upload Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'UPLOAD'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Upload'\" ></tasks-panel>\n                      </div>\n\n                      <!-- Process Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'PROCESS'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Process'\" ></tasks-panel>\n                      </div>\n\n                      <!-- Store Tasks -->\n                      <div *ngIf=\"taskGroupType.type === 'STORE'\">\n                        <tasks-panel [taskGroupType]=\"taskGroupType\" [groupTypeId]=\"grpi\" [taskCategory]=\"'Store'\" ></tasks-panel>\n                      </div>\n                \n                    </div>\n                  </div>\n                </div>\n            </div>\n\n            <pagination-controls id=\"tasks-pg-ctrl\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n\n      </div>\n    </div>\n    <div class=\"col-sm-1\"></div>\n\n  </div>\n\n\n</div>\n\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { MetadataModalComponent } from './modal/metadata-modal.component';\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\nimport { LeafModalComponent } from './modal/leaf-modal.component';\nimport { PageResult } from '@shared/model/page';\n\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { Message, Task, TaskGroup } from '../model/management';\nimport { ManagementService } from '../service/management.service';\n\ndeclare var acp: any;\n\n\n@Component({\n\tselector: 'tasks',\n\ttemplateUrl: './tasks.component.html',\n\tstyleUrls: ['./tasks.css']\n})\nexport class TasksComponent implements OnInit {\n\n\tuserName: string = \"\";\n\ttotalTaskCount: number = 0;\n\tactiveTab: string = \"all\";\n\tshowSite: boolean = false;\n\tinitData: any;\n\tshowUploads: boolean = false;\n\tshowProcess: boolean = false;\n\tshowStore: boolean = false;\n\ttasks: any;\n\ttaskPage: PageResult<TaskGroup> = { count: 0, pageSize: 10, pageNumber: 1, resultSet: [] };\n\terrorStatuses = [\"Failed\", \"Processing\"];\n\tcompleteStatuses = [\"Complete\"];\n\tvisible: {};\n\n\tstatuses = [];\n\n    /*\n     * Token used to determine if a change has occured in the page before loading the polling values\n     */\n\ttoken: number = 0;\n\n    /*\n     * Reference to the modal current showing\n     */\n\tbsModalRef: BsModalRef;\n\n    /*\n     * List of messages\n     */\n\tmessages: PageResult<Message> = { count: 0, pageSize: 5, pageNumber: 1, resultSet: [] };\n\n    /*\n     * List of tasks\n     */\n\t// tasks: PageResult<Task>;\n\n\tnotifier: WebSocketSubject<{ type: string, content: any }>;\n\n\tconstructor(private managementService: ManagementService, private modalService: BsModalService) { }\n\n\tngOnInit(): void {\n\t\tthis.userName = this.managementService.getCurrentUser();\n\t\tthis.managementService.tasks([], this.taskPage.pageSize, this.taskPage.pageNumber, this.token).then(data => {\n\t\t\tthis.setTaskData(data);\n\t\t});\n\n\t\tthis.getMissingMetadata();\n\n\t\tlet baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + acp;\n\n\t\tthis.notifier = webSocket(baseUrl + '/websocket/notify');\n\t\tthis.notifier.subscribe(message => {\n\t\t\tif (message.type === 'JOB_CHANGE') {\n\t\t\t\tthis.managementService.tasks(this.statuses, this.taskPage.pageSize, this.taskPage.pageNumber, this.token).then(data => {\n\t\t\t\t\tif (data['token'] === this.token) {\n\t\t\t\t\t\tthis.updateTaskData(data);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t}\n\n\tngOnDestroy(): void {\n\n\t\tthis.notifier.complete();\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tthis.token++;\n\n\t\tthis.managementService.tasks(this.statuses, this.taskPage.pageSize, pageNumber, this.token).then(tasks => {\n\n\t\t\tthis.setTaskData(tasks);\n\t\t});\n\t}\n\n\tonTabClick(event: any, tab: string): void {\n\t\tthis.activeTab = tab;\n\t\tthis.taskPage = { count: 0, pageSize: 20, pageNumber: 1, resultSet: [] };\n\t\tthis.token++;\n\n\t\tif (tab === \"success\") {\n\t\t\tthis.statuses = this.completeStatuses;\n\t\t}\n\t\telse if (tab === \"action-required\") {\n\t\t\tthis.statuses = this.errorStatuses;\n\t\t}\n\t\telse if (tab === \"all\") {\n\t\t\tthis.statuses = [];\n\t\t}\n\n\t\tthis.managementService.tasks(this.statuses, this.taskPage.pageSize, this.taskPage.pageNumber, this.token).then(tasks => {\n\n\t\t\tthis.setTaskData(tasks);\n\t\t});\n\n\n\t\tif (!event.target.parentNode.classList.contains(\"active\")) {\n\n\t\t\tlet lis = event.target.parentNode.parentNode.getElementsByTagName(\"li\");\n\t\t\tfor (let i = 0; i < lis.length; i++) {\n\t\t\t\tlet li = lis[i];\n\n\t\t\t\tli.classList.forEach(cls => {\n\t\t\t\t\tif (cls === 'active') {\n\t\t\t\t\t\tli.classList.remove('active');\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tevent.target.parentNode.classList.add('active');\n\t\t}\n\t}\n\n\tsetTaskData(tasks: PageResult<TaskGroup>): void {\n\t\tthis.taskPage = tasks;\n\t\tthis.visible = {};\n\n\t\tthis.taskPage.resultSet.forEach(task => {\n\t\t\tthis.visible[task.collectionId] = false;\n\t\t});\n\t}\n\n\tsetGroupTasks(collection: TaskGroup, tasks: Task[]): void {\n\t\tcollection.groups = [];\n\t\tcollection.groups.push({ tasks: [], status: null, type: 'UPLOAD' });\n\t\tcollection.groups.push({ tasks: [], status: null, type: 'PROCESS' });\n\t\tcollection.groups.push({ tasks: [], status: null, type: 'STORE' });\n\n\n\t\tfor (let i = 0; i < tasks.length; i++) {\n\t\t\tlet task = tasks[i];\n\n\n\t\t\tif (task.type === 'gov.geoplatform.uasdm.bus.WorkflowTask') {\n\n\t\t\t\tlet taskGroupTypeIndex = collection.groups.findIndex(value => { return value.type === 'UPLOAD' });\n\n\t\t\t\tif (taskGroupTypeIndex === -1) {\n\t\t\t\t\tcollection.groups.push({ tasks: [task], status: task.status, type: 'UPLOAD' })\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcollection.groups[taskGroupTypeIndex].tasks.push(task);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (task.type === 'gov.geoplatform.uasdm.odm.ODMProcessingTask') {\n\n\t\t\t\tlet taskGroupTypeIndex = collection.groups.findIndex(value => { return value.type === 'PROCESS' });\n\n\t\t\t\tif (taskGroupTypeIndex === -1) {\n\t\t\t\t\tcollection.groups.push({ tasks: [task], status: task.status, type: 'PROCESS' })\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcollection.groups[taskGroupTypeIndex].tasks.push(task);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (task.type === 'gov.geoplatform.uasdm.odm.ODMUploadTask') {\n\n\t\t\t\tlet taskGroupTypeIndex = collection.groups.findIndex(value => { return value.type === 'STORE' });\n\n\t\t\t\tif (taskGroupTypeIndex === -1) {\n\t\t\t\t\tcollection.groups.push({ tasks: [task], status: task.status, type: 'STORE' })\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcollection.groups[taskGroupTypeIndex].tasks.push(task);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.setTaskGroupStatuses(collection);\n\t}\n\n\n\tsetTaskGroupStatuses(collection: TaskGroup): void {\n\n\t\tlet latestDate: Date = null;\n\n\t\tcollection.groups.forEach(group => {\n\n\t\t\tlet isLatestTask: boolean = false;\n\n\t\t\tif (group.tasks.length > 0) {\n\t\t\t\tconst sortedTasks = group.tasks.sort((a: any, b: any) =>\n\t\t\t\t\tnew Date(b.lastUpdatedDate).getTime() - new Date(a.lastUpdatedDate).getTime()\n\t\t\t\t);\n\n\t\t\t\tgroup.status = sortedTasks[0].status;\n\n\t\t\t\tconst firstDate: Date = new Date(sortedTasks[0].lastUpdatedDate);\n\n\t\t\t\tisLatestTask = (latestDate == null || latestDate.getTime() - firstDate.getTime() <= 0);\n\n\t\t\t\tif (isLatestTask) {\n\t\t\t\t\tlatestDate = firstDate;\n\t\t\t\t}\n\n\t\t\t\tif (group.status === 'Complete' && sortedTasks[0].actions.length > 0) {\n\t\t\t\t\tgroup.status = 'Warning';\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\n\tupdateTaskData(page: PageResult<TaskGroup>): void {\n\t\tthis.taskPage = page;\n\n\t\tthis.taskPage.resultSet.forEach(task => {\n\t\t\tif (this.visible[task.collectionId]) {\n\t\t\t\tthis.managementService.getTasks(task.collectionId).then(tasks => {\n\t\t\t\t\tthis.setGroupTasks(task, tasks);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tsetVisibility(taskGroup: TaskGroup): void {\n\t\tif (!this.visible[taskGroup.collectionId]) {\n\n\t\t\tthis.managementService.getTasks(taskGroup.collectionId).then(tasks => {\n\t\t\t\tthis.setGroupTasks(taskGroup, tasks);\n\n\t\t\t\tthis.visible[taskGroup.collectionId] = !this.visible[taskGroup.collectionId];\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.visible[taskGroup.collectionId] = !this.visible[taskGroup.collectionId];\n\t\t}\n\t}\n\n\n\thandleMessage(message: Message): void {\n\t\tthis.bsModalRef = this.modalService.show(MetadataModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\t\tthis.bsModalRef.content.init(message.collectionId);\n\n\t\tthis.bsModalRef.content.onMetadataChange.subscribe((collectionId: string) => {\n\n\t\t\tlet index = -1;\n\t\t\tfor (let i = 0; i < this.messages.resultSet.length; i++) {\n\t\t\t\tlet msg = this.messages.resultSet[i];\n\t\t\t\tif (msg.collectionId === collectionId) {\n\t\t\t\t\tindex = i;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (index >= 0) {\n\t\t\t\tthis.messages.resultSet.splice(index, 1);\n\t\t\t}\n\n\t\t});\n\n\t}\n\n\thandleGoto(collectionId: string): void {\n\t\t// let breadcrumbs = []\n\n\t\tthis.managementService.view(collectionId).then(response => {\n\t\t\tconst entity = response.item;\n\t\t\tconst breadcrumbs = response.breadcrumbs;\n\n\t\t\tthis.managementService.getItems(collectionId, null).then(nodes => {\n\t\t\t\tthis.bsModalRef = this.modalService.show(LeafModalComponent, {\n\t\t\t\t\tanimated: true,\n\t\t\t\t\tbackdrop: true,\n\t\t\t\t\tignoreBackdropClick: true,\n\t\t\t\t\tclass: 'leaf-modal'\n\t\t\t\t});\n\t\t\t\tthis.bsModalRef.content.init(entity, nodes, breadcrumbs);\n\t\t\t})\n\t\t})\n\t}\n\n\tremoveTask(task: Task): void {\n\n\t\tthis.bsModalRef = this.modalService.show(BasicConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = 'Are you sure you want to delete [' + task.label + '?';\n\t\tthis.bsModalRef.content.data = task;\n\t\tthis.bsModalRef.content.type = 'DANGER';\n\t\tthis.bsModalRef.content.submitText = 'Delete';\n\n\t\t(<BasicConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(task => {\n\t\t\tthis.deleteTask(task);\n\t\t});\n\n\t}\n\n\tdeleteTask(task: Task) {\n\t\tthis.managementService.removeTask(task.uploadId)\n\t\t\t.then(() => {\n\t\t\t\tlet pos = null;\n\t\t\t\tfor (let i = 0; i < this.tasks.resultSet.length; i++) {\n\t\t\t\t\tlet thisTask = this.tasks[i];\n\n\t\t\t\t\tif (thisTask.uploadId === task.uploadId) {\n\t\t\t\t\t\tpos = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (pos !== null) {\n\t\t\t\t\tthis.tasks.resultSet.splice(pos, 1);\n\t\t\t\t}\n\n\t\t\t\tthis.getMissingMetadata();\n\n\t\t\t\tthis.totalTaskCount = this.tasks.count;\n\n\t\t\t});\n\t}\n\n\tgetMissingMetadata(): void {\n\t\tthis.onMessagePageChange(this.messages.pageNumber);\n\t}\n\n\tonMessagePageChange(pageNumber: number): void {\n\t\tthis.managementService.getMissingMetadata(this.messages.pageSize, pageNumber).then(messages => {\n\t\t\tthis.messages = messages;\n\t\t});\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams, HttpBackend, HttpHandler } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\nimport { HttpBackendClient } from '@shared/service/http-backend-client.service';\n\nimport { PageResult } from '@shared/model/page';\nimport { Sensor } from '../model/sensor';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SensorService {\n\n    constructor( private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService ) { }\n\n    page( p: number ): Promise<PageResult<Sensor>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'number', p.toString() );\n\n        this.eventService.start();\n\n        return this.http\n            .get<PageResult<Sensor>>( acp + '/sensor/page', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    edit( oid: string ): Promise<Sensor> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Sensor>( acp + '/sensor/lock', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    newInstance(): Promise<Sensor> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Sensor>( acp + '/sensor/newInstance', JSON.stringify( {} ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    remove( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/sensor/remove', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    apply( sensor: Sensor ): Promise<Sensor> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<Sensor>( acp + '/sensor/apply', JSON.stringify( { sensor: sensor } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    unlock( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<void>( acp + '/sensor/unlock', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n}","<div *ngIf=\"sensor != null\" class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"error-container\">\n    <div class=\"label-holder\">\n      <strong>Error</strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"error-message\">{{message}}</p>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"modal-title-container\">\n    <h3>Sensor</h3>\n  </div>\n\n  <form #ngForm=\"ngForm\">\n    <div class=\"form-group\">\n      <label>Name</label>\n      <input [(ngModel)]=\"sensor.name\" name=\"name\" type=\"input\" class=\"form-control\" placeholder=\"Name\" [disabled]=\"!newInstance\" required />\n    </div>\n    <div class=\"form-group\">\n      <label>Label</label>\n      <input [(ngModel)]=\"sensor.displayLabel\" name=\"displayLabel\" type=\"input\" class=\"form-control\" placeholder=\"Display Label\" required />\n    </div>\n    <div class=\"form-group\">\n      <label>Type</label>\n      <input [(ngModel)]=\"sensor.sensorType\" name=\"sensorType\" type=\"input\" class=\"form-control\" placeholder=\"Type\" required />\n    </div>\n    <div class=\"form-group\">\n      <label>Model</label>\n      <input [(ngModel)]=\"sensor.model\" name=\"model\" type=\"input\" class=\"form-control\" placeholder=\"Model\" required />\n    </div>\n    <div class=\"form-group\">\n      <label>Wave Length</label>\n      <div *ngFor=\"let wavelength of waveLengths\">\n        <boolean-field [value]=\"sensor.waveLength && (-1 !== sensor.waveLength.indexOf(wavelength))\" [label]=\"wavelength\" (valueChange)=\"updateSelectedWaveLength(wavelength, $event)\"></boolean-field>\n      </div>\n    </div>\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <button type=\"button\" class=\"btn btn-default\" (click)=\"handleOnCancel()\">Cancel</button>\n      <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\" [disabled]=\"!ngForm.valid\">Apply</button>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { Sensor, WAVELENGTHS } from '@site/model/sensor';\nimport { SensorService } from '@site/service/sensor.service';\n\n\n@Component({\n\tselector: 'sensor',\n\ttemplateUrl: './sensor.component.html',\n\tstyleUrls: []\n})\nexport class SensorComponent implements OnInit {\n\tsensor: Sensor;\n\tnewInstance: boolean = false;\n\n\tmessage: string = null;\n\n\twaveLengths: string[] = WAVELENGTHS;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n\tpublic onSensorChange: Subject<Sensor>;\n\n\tconstructor(private service: SensorService, public bsModalRef: BsModalRef) { }\n\n\tngOnInit(): void {\n\t\tthis.onSensorChange = new Subject();\n\t}\n\n\thandleOnSubmit(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.apply(this.sensor).then(data => {\n\t\t\tthis.onSensorChange.next(data);\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\thandleOnCancel(): void {\n\t\tthis.message = null;\n\n\t\tif (this.newInstance) {\n\t\t\tthis.bsModalRef.hide();\n\t\t}\n\t\telse {\n\t\t\tthis.service.unlock(this.sensor.oid).then(data => {\n\t\t\t\tthis.bsModalRef.hide();\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t}\n\n\tupdateSelectedWaveLength(wavelength: string, checked: boolean): void {\n\n\t\tconst indexOf = this.sensor.waveLength.indexOf(wavelength)\n\n\t\tif (checked) {\n\n\t\t\tif (indexOf < 0) {\n\t\t\t\tthis.sensor.waveLength.push(wavelength);\n\n\t\t\t}\n\t\t} else {\n\t\t\tif (indexOf > -1) {\n\t\t\t\tthis.sensor.waveLength.splice(indexOf, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t  this.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div>\n    <uasdm-header></uasdm-header>\n\n    <div id=\"app-container\" class=\"container\">\n\n\t\t<h2>Sensors</h2>\n\n\t\t<pagination-controls *ngIf=\"res.resultSet.length > res.pageSize\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\t\t\n\t\t<div class=\"list-table-wrapper\">\n\t\t\t<table id=\"manage-sensors-table\"\n\t\t\t\tclass=\"list-table table table-bordered table-striped\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t<th class=\"label-column\">Name</th>\n\t\t\t\t\t\t<th class=\"label-column\">Label</th>\n\t\t\t\t\t\t<th class=\"label-column\">Type</th>\n\t\t\t\t\t\t<th class=\"label-column\">Model</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr *ngFor=\"let sensor of res.resultSet | paginate: { itemsPerPage: res.pageSize, currentPage: res.pageNumber, totalItems: res.count }\"\n\t\t\t\t\t\tclass=\"fade-ngRepeat-item\">\n\t\t\t\t\t\t<td class=\"button-column\">\n\t\t\t\t\t\t  <a class=\"fa fa-pencil-alt ico-edit\" (click)=\"edit(sensor)\" title=\"Edit sensor\"></a>\n\t\t\t\t\t\t  <a class=\"fa fa-trash-alt ico-remove\" (click)=\"onClickRemove(sensor)\" title=\"Remove sensor\"></a>\n\t\t\t\t\t    </td>\n\t\t\t\t\t\t<td class=\"label-column\">{{ sensor.name }}</td>\n\t\t\t\t\t\t<td class=\"label-column\">{{ sensor.displayLabel }}</td>\n\t\t\t\t\t\t<td class=\"label-column\">{{ sensor.sensorType }}</td>\n\t\t\t\t\t\t<td class=\"label-column\">{{ sensor.model }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td class=\"button-column\">\n\t\t\t\t\t\t  <a class=\"fa fa-plus\" (click)=\"newInstance()\" title=\"Add new sensor\"></a>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t\t\n\t\t<pagination-controls *ngIf=\"res.resultSet.length > res.pageSize\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\t</div>\n</div>","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\nimport { LocalizationService } from '@shared/service/localization.service';\n\nimport { PageResult } from '@shared/model/page';\nimport { Sensor } from '@site/model/sensor';\nimport { SensorService } from '@site/service/sensor.service';\nimport { SensorComponent } from './sensor.component';\n\ndeclare let acp: string;\n\n@Component( {\n    selector: 'sensors',\n    templateUrl: './sensors.component.html',\n    styles: ['./sensors.css']\n} )\nexport class SensorsComponent implements OnInit {\n    res: PageResult<Sensor> = {\n        resultSet: [],\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10\n    };\n    bsModalRef: BsModalRef;\n    message: string = null;\n\n    constructor(\n        private router: Router,\n        private service: SensorService,\n        private modalService: BsModalService,\n        private localizeService: LocalizationService\n    ) { }\n\n    ngOnInit(): void {\n        this.service.page( 1 ).then( res => {\n            this.res = res;\n        } );\n    }\n\n    remove( sensor: Sensor ): void {\n        this.service.remove( sensor.oid ).then( response => {\n            this.res.resultSet = this.res.resultSet.filter( h => h.oid !== sensor.oid );\n        } );\n    }\n\n    onClickRemove( sensor: Sensor ): void {\n        this.bsModalRef = this.modalService.show( BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = \"Are you sure you want to remove the sensor [\" + sensor.name + \"]\";\n\t\tthis.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = \"Delete\";\n\n        this.bsModalRef.content.onConfirm.subscribe( data => {\n            this.remove( sensor );\n        } );\n    }\n\n    edit( sensor: Sensor ): void {\n        this.service.edit( sensor.oid ).then( res => {\n            this.showModal( res, false );\n        } );\n    }\n\n    newInstance(): void {\n        this.service.newInstance().then( res => {\n            this.showModal( res, true );\n        } );\n    }\n\n    showModal( sensor: Sensor, newInstance: boolean ): void {\n        this.bsModalRef = this.modalService.show( SensorComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.sensor = sensor;\n        this.bsModalRef.content.newInstance = newInstance;\n\n        let that = this;\n        this.bsModalRef.content.onSensorChange.subscribe( data => {\n            this.onPageChange( this.res.pageNumber );\n        } );\n\n    }\n\n    onPageChange( pageNumber: number ): void {\n        this.service.page( pageNumber ).then( res => {\n            this.res = res;\n        } );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams, HttpBackend } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service/event.service';\nimport { HttpBackendClient } from '@shared/service/http-backend-client.service';\n\nimport { PageResult } from '@shared/model/page';\nimport { Platform } from '../model/platform';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class PlatformService {\n\n    constructor( private http: HttpClient, private noErrorHttpClient: HttpBackendClient, private eventService: EventService ) { }\n\n    page( p: number ): Promise<PageResult<Platform>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'number', p.toString() );\n\n        this.eventService.start();\n\n        return this.http\n            .get<PageResult<Platform>>( acp + '/platform/page', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    edit( oid: string ): Promise<Platform> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Platform>( acp + '/platform/lock', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    newInstance(): Promise<Platform> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Platform>( acp + '/platform/newInstance', JSON.stringify( {} ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    remove( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/platform/remove', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    apply( platform: Platform ): Promise<Platform> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<Platform>( acp + '/platform/apply', JSON.stringify( { platform: platform } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    unlock( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.noErrorHttpClient\n            .post<void>( acp + '/platform/unlock', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n}","<div *ngIf=\"platform != null\" class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"error-container\">\n    <div class=\"label-holder\">\n      <strong>Error</strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"error-message\">{{message}}</p>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"modal-title-container\">\n    <h3>Platform</h3>\n  </div>\n\n  <form #ngForm=\"ngForm\">\n    <div class=\"form-group\">\n      <label>Name</label>\n      <input [(ngModel)]=\"platform.name\" name=\"name\" type=\"input\" class=\"form-control\" placeholder=\"Name\" [disabled]=\"!newInstance\" required />\n    </div>\n    <div class=\"form-group\">\n      <label>Label</label>\n      <input [(ngModel)]=\"platform.displayLabel\" name=\"displayLabel\" type=\"input\" class=\"form-control\" placeholder=\"Display Label\" required />\n    </div>\n    <div class=\"form-group\">\n      <label>Type</label>\n      <select [(ngModel)]=\"platform.platformType\" name=\"platformType\" type=\"input\" class=\"form-control\" required>\n        <option></option> \n        <option>Fixed Wing</option>\n        <option>Hybrid</option>\n        <option>Multi-rotor</option>\n        <option>Helicopter</option>\n        <option>VTOL Fixed-wing</option>\n        <option>Quadcopter</option>\n      </select>\n    </div>\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <button type=\"button\" class=\"btn btn-default\" (click)=\"handleOnCancel()\">Cancel</button>\n      <button type=\"submit\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\" [disabled]=\"!ngForm.valid\">Apply</button>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { Platform } from '@site/model/platform';\nimport { PlatformService } from '@site/service/platform.service';\n\n\n@Component( {\n    selector: 'platform',\n    templateUrl: './platform.component.html',\n    styleUrls: []\n} )\nexport class PlatformComponent implements OnInit {\n    platform: Platform;\n    newInstance: boolean = false;\n\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onPlatformChange: Subject<Platform>;\n\n    constructor( private service: PlatformService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onPlatformChange = new Subject();\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.service.apply( this.platform ).then( data => {\n            this.onPlatformChange.next( data );\n            this.bsModalRef.hide();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    handleOnCancel(): void {\n        this.message = null;\n\n        if ( this.newInstance ) {\n            this.bsModalRef.hide();\n        }\n        else {\n            this.service.unlock( this.platform.oid ).then( data => {\n                this.bsModalRef.hide();\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n\t  this.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div>\n\t<uasdm-header></uasdm-header>\n\n\t<div id=\"app-container\" class=\"container\">\n\n\t\t<h2>Platforms</h2>\n\n\t\t<pagination-controls *ngIf=\"res.resultSet.length > res.pageSize\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\t\t\n\t\t<div class=\"list-table-wrapper\">\n\t\t\t<table id=\"manage-platforms-table\"\n\t\t\t\tclass=\"list-table table table-bordered table-striped\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t<th class=\"label-column\">Name</th>\n\t\t\t\t\t\t<th class=\"label-column\">Label</th>\n\t\t\t\t\t\t<th class=\"label-column\">Type</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr *ngFor=\"let platform of res.resultSet | paginate: { itemsPerPage: res.pageSize, currentPage: res.pageNumber, totalItems: res.count }\"\n\t\t\t\t\t\tclass=\"fade-ngRepeat-item\">\n\t\t\t\t\t\t<td class=\"button-column\">\n\t\t\t\t\t\t  <a class=\"fa fa-pencil-alt ico-edit\" (click)=\"edit(platform)\" title=\"Edit platform\"></a>\n\t\t\t\t\t\t  <a class=\"fa fa-trash-alt ico-remove\" (click)=\"onClickRemove(platform)\" title=\"Remove platform\"></a>\n\t\t\t\t\t    </td>\n\t\t\t\t\t\t<td class=\"label-column\">{{ platform.name }}</td>\n\t\t\t\t\t\t<td class=\"label-column\">{{ platform.displayLabel }}</td>\n\t\t\t\t\t\t<td class=\"label-column\">{{ platform.platformType }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td class=\"button-column\">\n\t\t\t\t\t\t  <a class=\"fa fa-plus\" (click)=\"newInstance()\" title=\"Add new platform\"></a>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t\t\n\t\t<pagination-controls *ngIf=\"res.resultSet.length > res.pageSize\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\t</div>\n</div>","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { BasicConfirmModalComponent } from '@shared/component/modal/basic-confirm-modal.component';\nimport { LocalizationService } from '@shared/service/localization.service';\nimport { PageResult } from '@shared/model/page';\n\nimport { Platform } from '@site/model/platform';\nimport { PlatformService } from '@site/service/platform.service';\nimport { PlatformComponent } from './platform.component';\n\ndeclare let acp: string;\n\n@Component( {\n    selector: 'platforms',\n    templateUrl: './platforms.component.html',\n    styles: ['./platforms.css']\n} )\nexport class PlatformsComponent implements OnInit {\n    res: PageResult<Platform> = {\n        resultSet: [],\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10\n    };\n    bsModalRef: BsModalRef;\n    message: string = null;\n\n    constructor(\n        private router: Router,\n        private service: PlatformService,\n        private modalService: BsModalService,\n        private localizeService: LocalizationService\n    ) { }\n\n    ngOnInit(): void {\n        this.service.page( 1 ).then( res => {\n            this.res = res;\n        } );\n    }\n\n    remove( platform: Platform ): void {\n        this.service.remove( platform.oid ).then( response => {\n            this.res.resultSet = this.res.resultSet.filter( h => h.oid !== platform.oid );\n        } );\n    }\n\n    onClickRemove( platform: Platform ): void {\n        this.bsModalRef = this.modalService.show( BasicConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = \"Are you sure you want to remove the platform [\" + platform.name + \"]\";\n\t\tthis.bsModalRef.content.type = 'DANGER';\n        this.bsModalRef.content.submitText = \"Delete\";\n\n        this.bsModalRef.content.onConfirm.subscribe( data => {\n            this.remove( platform );\n        } );\n    }\n\n    edit( platform: Platform ): void {\n        this.service.edit( platform.oid ).then( res => {\n            this.showModal( res, false );\n        } );\n    }\n\n    newInstance(): void {\n        this.service.newInstance().then( res => {\n            this.showModal( res, true );\n        } );\n    }\n\n    showModal( platform: Platform, newInstance: boolean ): void {\n        this.bsModalRef = this.modalService.show( PlatformComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.platform = platform;\n        this.bsModalRef.content.newInstance = newInstance;\n\n        let that = this;\n        this.bsModalRef.content.onPlatformChange.subscribe( data => {\n            this.onPageChange( this.res.pageNumber );\n        } );\n\n    }\n\n    onPageChange( pageNumber: number ): void {\n        this.service.page( pageNumber ).then( res => {\n            this.res = res;\n        } );\n    }\n}\n","import { Directive, Input } from \"@angular/core\";\r\nimport { AbstractControl, NG_VALIDATORS, Validator, ValidatorFn } from \"@angular/forms\";\r\n\r\nexport function forbiddenNameValidator( nameRe: RegExp ): ValidatorFn {\r\n    return ( control: AbstractControl ): { [key: string]: any } | null => {\r\n        const forbidden = nameRe.test( control.value );\r\n        return forbidden ? { 'forbiddenName': { value: control.value } } : null;\r\n    };\r\n}\r\n\r\n@Directive( {\r\n    selector: '[forbiddenName]',\r\n    providers: [{ provide: NG_VALIDATORS, useExisting: ForbiddenNameDirective, multi: true }]\r\n} )\r\nexport class ForbiddenNameDirective implements Validator {\r\n    validate( control: AbstractControl ): { [key: string]: any } | null {\r\n        return forbiddenNameValidator( new RegExp( /[\\W<>\\-+=!@#$%^&*?/\\\\']/gm  ) )( control );\r\n    }\r\n  }","import { Injectable } from \"@angular/core\";\r\nimport { CanDeactivate } from \"@angular/router\";\r\n\r\nimport { UploadComponent } from \"../component/upload.component\";\r\n\r\n@Injectable()\r\nexport class CanDeactivateGuardService implements CanDeactivate<UploadComponent> {\r\n  canDeactivate(component: UploadComponent): boolean {\r\n   \r\n    if(component.canDeactivate()){\r\n        if (confirm(\"An upload is currently in progress. Are you sure you want to leave?\")) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n  }\r\n}","import { NgModule, Injectable, Inject } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { Routes, RouterModule, Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { ProjectsComponent } from './component/projects.component';\nimport { UploadComponent } from './component/upload.component';\nimport { TasksComponent } from './component/tasks.component';\nimport { SensorsComponent } from './component/sensor/sensors.component';\nimport { PlatformsComponent } from './component/platform/platforms.component';\n\nimport { CanDeactivateGuardService } from \"./service/can.deactivate.guard.service\";\nimport { AuthGuard, AdminGuardService } from '../shared/service/guard.service';\n\nconst routes: Routes = [\n    {\n        path: '',\n        canActivate: [AuthGuard],\n        component: ProjectsComponent\n    },\n    {\n        path: 'viewer',\n        canActivate: [AuthGuard],\n        component: ProjectsComponent\n    },\n    {\n        path: 'upload',\n        component: UploadComponent,\n        canDeactivate: [CanDeactivateGuardService]\n    },\n    {\n        path: 'tasks',\n        canActivate: [AuthGuard],\n        component: TasksComponent\n    },\n    {\n        path: 'sensors',\n        canActivate: [AdminGuardService],\n        component: SensorsComponent,\n    },\n    {\n        path: 'platforms',\n        canActivate: [AdminGuardService],\n        component: PlatformsComponent,\n    }\n];\n\n@NgModule( {\n    imports: [RouterModule.forChild( routes )],\n    exports: [RouterModule],\n    providers: [{ provide: LocationStrategy, useClass: HashLocationStrategy }]\n} )\nexport class SiteRoutingModule { }","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n//import { TreeModule } from 'angular-tree-component';\n//import { ContextMenuModule } from 'ngx-contextmenu';\nimport { NgxFileDropModule } from 'ngx-file-drop';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { AccordionModule } from 'ngx-bootstrap/accordion';\nimport { TabsModule } from 'ngx-bootstrap/tabs';\nimport { AlertModule } from 'ngx-bootstrap/alert';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\nimport { MapAttributeComponent } from './component/map-attribute/map-attribute.component';\nimport { ProductPanelComponent } from './component/product-panel/product-panel.component';\nimport { EntityModalComponent } from './component/modal/entity-modal.component';\nimport { MetadataModalComponent } from './component/modal/metadata-modal.component';\nimport { ImagePreviewModalComponent } from './component/modal/image-preview-modal.component';\nimport { UploadModalComponent } from './component/modal/upload-modal.component';\nimport { LeafModalComponent } from './component/modal/leaf-modal.component';\nimport { AccessibleSupportModalComponent } from './component/modal/accessible-support-modal.component';\nimport { ProductModalComponent } from './component/modal/product-modal.component';\nimport { ProjectsComponent } from './component/projects.component';\nimport { UploadComponent } from './component/upload.component';\nimport { TasksComponent } from './component/tasks.component';\nimport { TasksPanelComponent } from './component/tasks/tasks-panel.component';\nimport { SensorsComponent } from './component/sensor/sensors.component';\nimport { SensorComponent } from './component/sensor/sensor.component';\nimport { PlatformsComponent } from './component/platform/platforms.component';\nimport { PlatformComponent } from './component/platform/platform.component';\n\n\nimport { ForbiddenNameDirective } from './directive/forbidden-name.directive';\nimport { OnlyNumber } from './directive/number-only.directive';\n\nimport { ProductService } from './service/product.service';\nimport { ManagementService } from './service/management.service';\nimport { MapService } from './service/map.service';\nimport { CanDeactivateGuardService } from './service/can.deactivate.guard.service';\nimport { SensorService } from './service/sensor.service';\nimport { PlatformService } from './service/platform.service';\nimport { MetadataService } from './service/metadata.service';\n\nimport { SiteRoutingModule } from './site-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tRouterModule,\n\t\tFormsModule,\n\t\tNgxPaginationModule,\n\t\t//        TreeModule,\n\t\t//        ContextMenuModule,\n\t\t//        ModalModule.forRoot(),\n\t\tAlertModule,\n\t\tBsDropdownModule,\n\t\tTypeaheadModule,\n\t\tAccordionModule,\n\t\tTabsModule.forRoot(),\n\t\tCollapseModule.forRoot(),\n\t\tSharedModule,\n\t\tSiteRoutingModule,\n\t\tNgxFileDropModule\n\t],\n\tdeclarations: [\n\t\tMapAttributeComponent,\n\t\tProductPanelComponent,\n\t\tEntityModalComponent,\n\t\tMetadataModalComponent,\n\t\tImagePreviewModalComponent,\n\t\tUploadModalComponent,\n\t\tLeafModalComponent,\n\t\tAccessibleSupportModalComponent,\n\t\tProductModalComponent,\n\t\tProjectsComponent,\n\t\tUploadComponent,\n\t\tTasksComponent,\n\t\tForbiddenNameDirective,\n\t\tOnlyNumber,\n\t\tSensorComponent,\n\t\tSensorsComponent,\n\t\tPlatformComponent,\n\t\tPlatformsComponent,\n\t\tTasksPanelComponent\n\t],\n\tproviders: [\n\t\tCanDeactivateGuardService,\n\t\tManagementService,\n\t\tProductService,\n\t\tMapService,\n\t\tSensorService,\n\t\tPlatformService,\n\t\tMetadataService\n\t],\n\tentryComponents: [\n\t\tUploadModalComponent,\n\t\tEntityModalComponent,\n\t\tImagePreviewModalComponent,\n\t\tMetadataModalComponent,\n\t\tSensorComponent,\n\t\tLeafModalComponent,\n\t\tProductModalComponent,\n\t\tPlatformComponent\n\t]\n})\nexport class SiteModule { }\n"],"sourceRoot":""}