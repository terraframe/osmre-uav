{"version":3,"sources":["webpack:///./src/app/shared/pipe/filter.pipe.ts","webpack:///./src/app/shared/service/date.service.ts","webpack:///./src/app/shared/service/progress.service.ts","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/app/shared/modal/step-indicator/modal-step-indicator.component.ts","webpack:///./src/app/shared/modal/step-indicator/modal-step-indicator.component.html","webpack:///./src/app/shared/pipe/keys.pipe.ts","webpack:///./src/app/shared/pipe/phone.pipe.ts","webpack:///./src/app/shared/model/modal.ts","webpack:///./src/app/shared/service/guard.service.ts","webpack:///./src/app/shared/service/http-backend-client.service.ts","webpack:///./src/app/shared/component/localize/localize.component.ts","webpack:///./src/app/shared/component/localize/localize.component.html","webpack:///./src/app/shared/service/auth.service.ts","webpack:///./src/app/shared/pipe/localize.pipe.ts","webpack:///./src/app/shared/service/event.service.ts","webpack:///./src/app/shared/component/password-strength-bar/password-strength-bar.component.ts","webpack:///./src/app/shared/component/password-strength-bar/password-strength-bar.component.html","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.ts","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.html","webpack:///./src/app/shared/component/profile/profile.component.ts","webpack:///./src/app/shared/component/profile/profile.component.html","webpack:///./src/app/shared/service/localization.service.ts","webpack:///./src/app/shared/service/profile.service.ts","webpack:///./src/app/shared/component/modal/basic-confirm-modal.component.ts","webpack:///./src/app/shared/component/modal/basic-confirm-modal.component.html","webpack:///./src/app/shared/component/modal/error-modal.component.ts","webpack:///./src/app/shared/component/modal/error-modal.component.html","webpack:///./src/app/shared/component/modal/notification-modal.component.ts","webpack:///./src/app/shared/component/modal/notification-modal.component.html","webpack:///./src/app/shared/component/header/header.component.ts","webpack:///./src/app/shared/component/header/header.component.html","webpack:///./src/app/shared/directive/must-match.directive.ts","webpack:///./src/app/shared/directive/password-validator.directive.ts","webpack:///./src/app/shared/service/session.service.ts","webpack:///./src/app/shared/component/boolean-field/boolean-field.component.ts","webpack:///./src/app/shared/component/boolean-field/boolean-field.component.html","webpack:///./src/app/shared/component/error-handler/error-handler.ts","webpack:///./src/app/shared/component/index.ts","webpack:///./src/app/shared/component/generic-table/generic-table.component.ts","webpack:///./src/app/shared/component/generic-table/generic-table.component.html","webpack:///./src/app/shared/pipe/idmdate.pipe.ts","webpack:///./src/app/shared/pipe/safe-html.pipe.ts","webpack:///./src/app/shared/directive/phone-number.directive.ts"],"names":["FilterPipe","items","prop","value","filter","it","DateService","localizationService","overlapMessage","this","decode","gapMessage","date","Date","getDateString","split","year","getFullYear","month","getMonth","dt","getDate","ProgressService","listeners","listener","push","indexOfItem","indexOf","splice","start","progress","complete","ngModule","providers","forRoot","ModalStepIndicatorComponent","changes","step","config","stepConfig","KeysPipe","args","keys","Array","key","PhonePipe","phoneUtil","getInstance","number","parseAndKeepRawInput","isValidNumber","format","INTERNATIONAL","ModalTypes","AdminGuardService","service","router","route","state","isAdmin","navigate","AuthGuard","isLoggedIn","HttpBackendClient","handler","super","LocalizeComponent","text","AuthService","user","loggedIn","userName","externalProfile","roles","check","cookieData","get","cookieDataJSON","JSON","parse","LocalizePipe","EventService","PasswordStrengthBarComponent","colors","pass","score","letters","i","length","variations","digits","test","lower","upper","nonWords","variationCount","Math","trunc","idx","col","password","currentValue","setBarColors","c","getColor","measureStrength","count","_n","LoadingBarComponent","showIndicator","registerListener","deregisterListener","ProfileComponent","authService","bsModalRef","profile","oid","username","firstName","lastName","email","changePassword","isExternalProfile","apply","then","hide","unlock","onSubmit","cancel","LocalizationService","bundle","com","runwaysdk","Localize","localize","index","lastIndexOf","temp","slice","ProfileService","eventService","http","headers","post","acp","toPromise","stringify","account","pipe","params","set","BasicConfirmModalComponent","message","subText","submitText","cancelText","type","warning","onConfirm","next","data","confirm","ErrorModalComponent","NotificationModalComponent","messageTitle","UasdmHeaderComponent","modalService","profileService","admin","notificationCount","context","getUserName","tasksCount","show","backdrop","class","content","MustMatchDirective","mustMatch","formGroup","controlName","matchingControlName","control","controls","matchingControl","errors","setErrors","provide","useExisting","multi","PasswordValidatorDirective","console","log","isValid","RegExp","passwordStrength","SessionService","setUser","BooleanFieldComponent","disabled","localizeLabelKey","label","valueChange","emit","toggle","err","unspecified","msg","error","localizedMessage","includes","status","getMessageFromError","GenericTableComponent","page","resultSet","pageNumber","pageSize","cols","baseUrl","click","loading","booleanOptions","event","refresh","subscribe","onPageChange","unsubscribe","setTimeout","finally","row","columnType","IdmDatePipe","locale","transformed","isValidDate","transform","getTimezoneName","today","short","toLocaleDateString","undefined","full","timeZoneName","shortIndex","substring","replace","Intl","DateTimeFormat","resolvedOptions","timeZone","d","isNaN","getTime","SafeHtmlPipe","sanitizer","bypassSecurityTrustResourceUrl","PhoneNumberValidatorDirective","phoneNumber","pNumber","e"],"mappings":"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","file":"0.chunk.js","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({name: 'filter'})\nexport class FilterPipe implements PipeTransform {\n    transform(items: any[], prop: string,  value: string): any[] {  \n      if (!items) return [];        \n      \n      return items.filter(it => it[prop] === value);\n    }\n}\n\n","import { Injectable } from '@angular/core';\n\nimport { LocalizationService } from './localization.service';\n\n@Injectable()\nexport class DateService {\n  overlapMessage = { \n    \"type\": \"ERROR\",  \n    \"message\":this.localizationService.decode(\"manage.versions.overlap.message\")\n  }\n  \n  gapMessage = {\n    \"type\": \"WARNING\",  \n    \"message\":this.localizationService.decode(\"manage.versions.gap.message\")\n  }\n\n  constructor(private localizationService: LocalizationService) {}\n  \n  public formatDateForDisplay(date: string | Date): string {\n    if(!date){\n      return \"\";\n    }\n    \n    if(date instanceof Date){\n      return this.getDateString(date);\n    }\n    else{\n      return date.split('T')[0];\n    }\n  }\n  \n  // @param value as yyyy-mm-dd\n  getDateFromDateString(value: string){\n    return new Date(+value.split(\"-\")[0], +value.split(\"-\")[1]-1, +value.split(\"-\")[2]);\n  }\n  \n  getDateString(date:Date): string {\n    if(date instanceof Date){\n      let year = date.getFullYear();\n      let month:number|string = date.getMonth()+1;\n      let dt:number|string = date.getDate();\n      \n      if (dt < 10) {\n        dt = '0' + dt;\n      }\n      if (month < 10) {\n        month = '0' + month;\n      }\n      \n      return year + \"-\" + month + \"-\" + dt;\n    }\n    \n    return null;\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { Progress } from '../model/progress';\n\nexport interface IProgressListener {\n  start(): void;\n  progress(progress:Progress):void;  \n  complete(): void;\n}\n\n@Injectable()\nexport class ProgressService {\n  private listeners: IProgressListener[] = [];\n  \n  public constructor() {}\n  \n  public registerListener(listener: IProgressListener): void {\n   this.listeners.push(listener);\n  }\n  \n  public deregisterListener(listener: IProgressListener): boolean {\n    let indexOfItem = this.listeners.indexOf(listener);\n\n    if (indexOfItem === -1) {\n      return false;\n    }\n\n    this.listeners.splice(indexOfItem, 1);\n\n    return true;\n  }\n  \n  public start(): void {\n    for (const listener of this.listeners) {\n      listener.start();\n    }\n  }\n  \n  public progress(progress:Progress):void {\n    for (const listener of this.listeners) {\n      listener.progress(progress);\n    }\t  \n  }  \n  \n  public complete(): void {\n    for (const listener of this.listeners) {\n      listener.complete();\n    }\n  }  \n}","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { CookieService } from 'ngx-cookie-service';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { AccordionModule } from 'ngx-bootstrap/accordion';\nimport { AlertModule } from 'ngx-bootstrap/alert';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\nimport { TableModule } from 'primeng/table';\nimport { SliderModule } from 'primeng/slider';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { MultiSelectModule } from 'primeng/multiselect';\nimport { ButtonModule } from 'primeng/button';\n\nimport { UasdmHeaderComponent } from './component/header/header.component';\nimport { LocalizeComponent } from './component/localize/localize.component';\nimport { LoadingBarComponent } from './component/loading-bar/loading-bar.component';\nimport { BooleanFieldComponent } from './component/boolean-field/boolean-field.component';\nimport { ProfileComponent } from './component/profile/profile.component';\nimport { ErrorModalComponent } from './component/modal/error-modal.component';\nimport { BasicConfirmModalComponent } from './component/modal/basic-confirm-modal.component';\nimport { NotificationModalComponent } from './component/modal/notification-modal.component';\nimport { ModalStepIndicatorComponent } from './modal/step-indicator/modal-step-indicator.component';\nimport { PasswordStrengthBarComponent } from './component/password-strength-bar/password-strength-bar.component';\nimport { GenericTableComponent } from './component/generic-table/generic-table.component';\n\nimport { LocalizePipe } from './pipe/localize.pipe';\nimport { KeysPipe } from './pipe/keys.pipe';\nimport { PhonePipe } from './pipe/phone.pipe';\nimport { FilterPipe } from './pipe/filter.pipe';\nimport { SafeHtmlPipe } from './pipe/safe-html.pipe';\nimport { IdmDatePipe } from './pipe/idmdate.pipe';\n\nimport { MustMatchDirective } from './directive/must-match.directive';\nimport { PhoneNumberValidatorDirective } from './directive/phone-number.directive'; \nimport { PasswordValidatorDirective } from './directive/password-validator.directive';\n\nimport { DateService } from './service/date.service';\nimport { ProgressService } from './service/progress.service';\nimport { EventService } from './service/event.service';\nimport { LocalizationService } from './service/localization.service';\nimport { AuthService } from './service/auth.service';\nimport { ProfileService } from './service/profile.service';\nimport { SessionService } from './service/session.service';\nimport { AdminGuardService, AuthGuard } from './service/guard.service';\nimport { HttpBackendClient } from './service/http-backend-client.service';\n\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tRouterModule,\n\t\tFormsModule,\n\t\tModalModule.forRoot(),\n\t\tAlertModule,\n\t\tBsDropdownModule,\n\t\tTypeaheadModule,\n\t\tAccordionModule,\n\t\tCollapseModule.forRoot(),\n\n        TableModule,\n\t\tSliderModule,\n\t\tDropdownModule,\n\t\tMultiSelectModule,\n\t\tButtonModule\n\t],\n\tdeclarations: [\n\t\tUasdmHeaderComponent,\n\t\tLoadingBarComponent,\n\t\tProfileComponent,\n\t\tBasicConfirmModalComponent,\n\t\tNotificationModalComponent,\n\t\tErrorModalComponent,\n\t\tLocalizeComponent,\n\t\tBooleanFieldComponent,\n\t\tModalStepIndicatorComponent,\n\t\tPasswordStrengthBarComponent,\n\t\tKeysPipe,\n\t\tLocalizePipe,\n\t\tPhonePipe,\n\t\tFilterPipe,\n\t\tSafeHtmlPipe,\n\t\tIdmDatePipe,\n\t\tMustMatchDirective,\n\t\tPhoneNumberValidatorDirective,\n\t\tPasswordValidatorDirective,\n\t\tGenericTableComponent\n\t],\n\texports: [\n\t\tUasdmHeaderComponent,\n\t\tLoadingBarComponent,\n\t\tBasicConfirmModalComponent,\n\t\tNotificationModalComponent,\n\t\tErrorModalComponent,\n\t\tBooleanFieldComponent,\n\t\tLocalizeComponent,\n\t\tModalStepIndicatorComponent,\n\t\tPasswordStrengthBarComponent,\n\t\tKeysPipe,\n\t\tLocalizePipe,\n\t\tPhonePipe,\n\t\tFilterPipe,\n\t\tSafeHtmlPipe,\n\t\tIdmDatePipe,\n\t\tMustMatchDirective,\n\t\tPhoneNumberValidatorDirective,\n\t\tPasswordValidatorDirective,\n\t\tGenericTableComponent\n\t],\n\tentryComponents: [\n\t\tErrorModalComponent,\n\t\tBasicConfirmModalComponent,\n\t\tNotificationModalComponent,\n\t\tLoadingBarComponent,\n\t\tProfileComponent\n\t]\n})\nexport class SharedModule {\n\tstatic forRoot(): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: SharedModule,\n\t\t\tproviders: [\n\t\t\t\tCookieService,\n\t\t\t\tAuthService,\n\t\t\t\tSessionService,\n\t\t\t\tProfileService,\n\t\t\t\tLocalizationService,\n\t\t\t\tEventService,\n\t\t\t\tProgressService,\n\t\t\t\tDateService,\n\t\t\t\tAdminGuardService,\n\t\t\t\tAuthGuard,\n\t\t\t\tHttpBackendClient\n\t\t\t]\n\t\t};\n\t}\n}","import { Component, Input, ChangeDetectionStrategy, SimpleChanges } from '@angular/core';\n\nimport { Step, StepConfig } from './modal-step-indicator';\n\nimport { \n    fadeInOnEnterAnimation,\n    fadeOutOnLeaveAnimation\n } from 'angular-animations';\n\n// HOW TO USE:\n// Set the component in a template:\n//\n//   <modal-step-indicator [stepConfig]=\"stepConfig\"></modal-step-indicator>\n//\n// Pass a stepConfig object to the compenent as an input param. Example object:\n//\n// this.modalStepConfig = {\"steps\": [\n//      {\"label\":\"Category\", \"active\":true, \"enabled\":false},\n//      {\"label\":\"Final\", \"active\":true, \"enabled\":true}\n// ]};\n\n@Component( { \n    selector: 'modal-step-indicator',\n    templateUrl: './modal-step-indicator.component.html',\n    styleUrls: ['./modal-step-indicator.css'],\n        animations: [\n        fadeInOnEnterAnimation(),\n        fadeOutOnLeaveAnimation() \n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n} )\nexport class ModalStepIndicatorComponent {\n\n    @Input() stepConfig: StepConfig\n\n    constructor( ) { \n\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    setActiveStep(step: Step):void {\n\n    }\n\n    setStepConfig(config: StepConfig):void {\n        this.stepConfig = config;\n    }\n}\n","<div class=\"step-indicator\" >\n    <ul *ngIf=\"stepConfig && stepConfig.steps && stepConfig.steps.length > 0\" class=\"list-inline nav nav-justified\">\n        <li [@fadeInOnEnter] class=\"nav-item\" [ngClass]=\"{'active':step.active, 'enabled':step.enabled}\" *ngFor=\"let step of stepConfig.steps\">{{step.label}}</li>\n    </ul>\n</div>","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'keys',\n  pure: false\n})\nexport class KeysPipe implements PipeTransform {\n  transform(value:any, args:string[]) : any {\n    let keys = new Array<any>();\n    for (let key in value) {\n      keys.push({key: key, value: value[key]});\n    }\n    return keys;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { PhoneNumberUtil, PhoneNumberFormat } from 'google-libphonenumber';\n\n\n@Pipe({\n\tname: 'phone'\n})\nexport class PhonePipe implements PipeTransform {\n\n\ttransform(value: any, args?: string): any {\n\t\tconst phoneUtil = PhoneNumberUtil.getInstance();\n\n\t\tif (value != null && value !== '') {\n\t\t\tconst number = phoneUtil.parseAndKeepRawInput(value, 'US');\n\n\t\t\tif (phoneUtil.isValidNumber(number)) {\n\t\t\t\treturn phoneUtil.format(number, PhoneNumberFormat.INTERNATIONAL);\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t}\n\n}\n","export enum ModalTypes {\n    \"warning\" = \"WARNING\",\n    \"danger\" = \"DANGER\"\n}","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router} from '@angular/router';\nimport { AuthService} from '../service/auth.service';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class AdminGuardService implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/profile' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isLoggedIn()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/login' ]);\n    \n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpBackend } from '@angular/common/http';\n\n@Injectable()\nexport class HttpBackendClient extends HttpClient {\n    constructor( handler: HttpBackend ) {\n        super( handler );\n    }\n}","import { Input, Component, OnInit } from '@angular/core';\n\nimport { LocalizationService } from '../../service/localization.service';\n\n@Component({\n  \n  selector: 'localize',\n  templateUrl: './localize.component.html',\n  styleUrls: []\n})\nexport class LocalizeComponent implements OnInit {\n  @Input() key: string;\n  text: string;\n    \n  constructor(private service: LocalizationService) { }\n\n  ngOnInit(): void {\n    this.text = this.service.decode(this.key);\n  }\n}\n","{{text}}","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\nimport { Injectable } from '@angular/core';\n\nimport { CookieService } from 'ngx-cookie-service';\nimport { User } from '../model/user';\n\n@Injectable()\nexport class AuthService {\n\tprivate user: User = {\n\t\tloggedIn: false,\n\t\tuserName: '',\n\t\texternalProfile: false,\n\t\troles: []\n\t};\n\n\tconstructor(private service: CookieService) {\n\n\t\tif (this.service.check(\"user\")) {\n\t\t\tlet cookieData: string = this.service.get(\"user\")\n\n\t\t\tlet cookieDataJSON: any = JSON.parse(cookieData);\n\n\t\t\tthis.user.userName = cookieDataJSON.userName;\n\t\t\tthis.user.roles = cookieDataJSON.roles;\n\t\t\tthis.user.externalProfile = cookieDataJSON.externalProfile;\n\t\t\tthis.user.loggedIn = true;\n\t\t}\n\t}\n\n\tsetUser(user: User): void {\n\t\tthis.user = user;\n\t}\n\n\tremoveUser(): void {\n\t\tthis.user = {\n\t\t\tloggedIn: false,\n\t\t\tuserName: '',\n\t\t\texternalProfile: false,\n\t\t\troles: []\n\t\t};\n\t}\n\n\tgetUserName(): string {\n\t\treturn this.user.userName;\n\t}\n\n\tisLoggedIn(): boolean {\n\t\treturn this.user.loggedIn;\n\t}\n\n\tisAdmin(): boolean {\n\t\treturn this.user.roles.indexOf(\"geoprism.admin.Administrator\") !== -1;\n\t}\n\t\n\tisExternalProfile(): boolean {\n\t  return this.user.externalProfile;\n\t}\n\n\tisWorker(): boolean {\n\t\treturn this.isAdmin() || this.user.roles.indexOf(\"geoprism.admin.DashboardBuilder\") !== -1;\n\t}\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { LocalizationService } from '../service/localization.service';\n\n@Pipe({name: 'localize'})\nexport class LocalizePipe implements PipeTransform {\n  constructor(private service: LocalizationService) { }\n\t\n  transform(value: string): string {\n    return this.service.decode(value);\n  }\n}\n\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nexport interface IEventListener {\r\n    start(): void;\r\n    complete(): void;\r\n}\r\n\r\n@Injectable()\r\nexport class EventService {\r\n    private listeners: IEventListener[] = [];\r\n\r\n    public constructor() { }\r\n\r\n    public registerListener( listener: IEventListener ): void {\r\n        this.listeners.push( listener );\r\n    }\r\n\r\n    public deregisterListener( listener: IEventListener ): boolean {\r\n        let indexOfItem = this.listeners.indexOf( listener );\r\n\r\n        if ( indexOfItem === -1 ) {\r\n            return false;\r\n        }\r\n\r\n        this.listeners.splice( indexOfItem, 1 );\r\n\r\n        return true;\r\n    }\r\n\r\n    public start(): void {\r\n        for ( const listener of this.listeners ) {\r\n            listener.start();\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for ( const listener of this.listeners ) {\r\n            listener.complete();\r\n        }\r\n    }\r\n}\r\n","\nimport { Component, OnChanges, Input, SimpleChange } from '@angular/core';\n\n@Component({\n\tselector: 'password-strength-bar',\n\ttemplateUrl: './password-strength-bar.component.html',\n\tstyleUrls: ['./password-strength-bar.component.css']\n})\nexport class PasswordStrengthBarComponent implements OnChanges {\n\n\t@Input() passwordToCheck: string;\n\tbar0: string;\n\tbar1: string;\n\tbar2: string;\n\tbar3: string;\n\tbar4: string;\n\n\tprivate colors = ['#F00', '#F90', '#FF0', '#9F0', '#0F0'];\n\n\tprivate static measureStrength(pass: string) {\n\t\tlet score = 0;\n\t\t// award every unique letter until 5 repetitions  \n\t\tlet letters = {};\n\t\tfor (let i = 0; i < pass.length; i++) {\n\t\t\tletters[pass[i]] = (letters[pass[i]] || 0) + 1;\n\t\t\tscore += 5.0 / letters[pass[i]];\n\t\t}\n\t\t// bonus points for mixing it up  \n\t\tlet variations = {\n\t\t\tdigits: /\\d/.test(pass),\n\t\t\tlower: /[a-z]/.test(pass),\n\t\t\tupper: /[A-Z]/.test(pass),\n\t\t\tnonWords: /\\W/.test(pass),\n\t\t};\n\n\t\tlet variationCount = 0;\n\t\tfor (let check in variations) {\n\t\t\tvariationCount += (variations[check]) ? 1 : 0;\n\t\t}\n\t\tscore += (variationCount - 1) * 10;\n\t\treturn Math.trunc(score);\n\t}\n\n\tprivate getColor(score: number) {\n\t\tlet idx = 0;\n\t\tif (score > 90) {\n\t\t\tidx = 4;\n\t\t} else if (score > 70) {\n\t\t\tidx = 3;\n\t\t} else if (score >= 40) {\n\t\t\tidx = 2;\n\t\t} else if (score >= 20) {\n\t\t\tidx = 1;\n\t\t}\n\t\treturn {\n\t\t\tidx: idx + 1,\n\t\t\tcol: this.colors[idx]\n\t\t};\n\t}\n\n\tngOnChanges(changes: { [propName: string]: SimpleChange }): void {\n\t\tvar password = changes['passwordToCheck'].currentValue;\n\t\tthis.setBarColors(5, '#DDD');\n\t\tif (password) {\n\t\t\tlet c = this.getColor(PasswordStrengthBarComponent.measureStrength(password));\n\t\t\tthis.setBarColors(c.idx, c.col);\n\t\t}\n\t}\n\tprivate setBarColors(count, col) {\n\t\tfor (let _n = 0; _n < count; _n++) {\n\t\t\tthis['bar' + _n] = col;\n\t\t}\n\t}\n\n}  \n","<div style=\"margin: 11px;\" id=\"strength\" #strength>\n    <ul id=\"strengthBar\">\n        <li class=\"point\" [style.background-color]=\"bar0\"></li>\n        <li class=\"point\" [style.background-color]=\"bar1\"></li>\n        <li class=\"point\" [style.background-color]=\"bar2\"></li>\n        <li class=\"point\" [style.background-color]=\"bar3\"></li>\n        <li class=\"point\" [style.background-color]=\"bar4\"></li>\n    </ul>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\nimport { EventService, IEventListener } from '../../service/event.service';\n\n@Component({\n  \n  selector: 'loading-bar',\n  templateUrl: './loading-bar.component.html',\n  styleUrls: []\n})\nexport class LoadingBarComponent implements OnInit, IEventListener {\n  showIndicator: boolean = false;\n\n  constructor(private service: EventService) { }\n\n  ngOnInit(): void {\n    this.service.registerListener(this);\n  }\n  \n  ngOnDestroy(): void {\n    this.service.deregisterListener(this);\n  }\n  \n  start(): void {\n    this.showIndicator = true;    \n  }\n  \n  complete(): void {\n    this.showIndicator = false;    \n  }    \n}\n","<div *ngIf=\"showIndicator\" class=\"standby-overlay\" style=\"height: 100%; width: 100%; z-index: 100;\">\n\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component} from '@angular/core';\n\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { Profile } from '../../model/profile';\nimport { ProfileService } from '../../service/profile.service';\n\nimport { AuthService } from '../../service/auth.service';\n\n\n@Component({  \n  selector: 'profile',\n  templateUrl: './profile.component.html',\n  styles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}']\n})\nexport class ProfileComponent {\n  public profile:Profile = {\n    oid: '',\n    username: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    changePassword:false    \n  };\n  \n  externalProfile: boolean = false;\n  \n  constructor(private authService: AuthService, private service:ProfileService, public bsModalRef: BsModalRef) {}\n  \n  ngOnInit(): void {\n    this.externalProfile = this.authService.isExternalProfile();\n  }\n  \n  onSubmit():void {\n    if(!this.profile.changePassword) {\n      delete this.profile.password;\n    }\n\t  \n    this.service.apply(this.profile).then(profile => {\n      this.bsModalRef.hide();\n    });\n  }  \n  \n  cancel():void {\n    if (!this.externalProfile)\n    {\n      this.service.unlock(this.profile.oid).then(profile => {\n        this.bsModalRef.hide();\n      });\n    }\n    else\n    {\n      this.bsModalRef.hide();\n    }\n  }  \n}\n","<div class=\"modal-body\">\n\n  <form #form=\"ngForm\" (ngSubmit)=\"form.valid && onSubmit()\" [mustMatch]=\"['password', 'certainPassword']\">\n    <div class=\"heading\">\n      <h3>User Profile</h3>\n    </div>\n    <hr>\n    <div class=\"form-group\">\n      <label>\n        <localize key=\"account.firstname\"></localize>\n      </label>\n      <input [disabled]=\"externalProfile\" type=\"text\" [(ngModel)]=\"profile.firstName\" name=\"firstname\" required>\n    </div>\n    <div class=\"form-group\">\n      <label>\n        <localize key=\"account.lastname\"></localize>\n      </label>\n      <input [disabled]=\"externalProfile\" type=\"text\" [(ngModel)]=\"profile.lastName\" name=\"lastname\" required>\n    </div>\n    <div class=\"form-group\">\n      <label>\n        <localize key=\"account.email\"></localize>\n      </label>\n      <input [disabled]=\"externalProfile\" type=\"email\" [(ngModel)]=\"profile.email\" name=\"email\" #aemail=\"ngModel\" required email>\n      <div *ngIf=\"aemail.errors?.email\" class=\"inline-error-message\">\n        <localize key=\"account.email.validation\"></localize>\n      </div>\n    </div>\n\n    <div class=\"heading\">\n      <h3>\n        <localize key=\"account.info.heading\"></localize>\n      </h3>\n    </div>\n    <hr>\n\n    <div class=\"form-group\">\n      <label>\n        <localize key=\"account.username\"></localize>\n      </label>\n      <input [disabled]=\"profile.username === 'admin' || externalProfile\" type=\"text\" [(ngModel)]=\"profile.username\" name=\"username\" required>\n    </div>\n\n    <div *ngIf=\"!externalProfile\" class=\"form-group\">\n      <boolean-field [(value)]=\"profile.changePassword\" [label]=\"'account.changePassword' | localize\"></boolean-field>\n    </div>\n\n    <div *ngIf=\"profile.changePassword && !externalProfile\">\n      <div class=\"form-group\">\n        <label>\n          <localize key=\"account.password\"></localize>\n        </label>\n        <input type=\"password\" [(ngModel)]=\"profile.password\" name=\"password\" #password=\"ngModel\" required minlength=\"5\" maxlength=\"50\" passwordValidator>\n        <password-strength-bar [passwordToCheck]=\"profile.password\"></password-strength-bar>\n        <div *ngIf=\"password.errors?.passwordStrength\" class=\"inline-error-message\">\n          The password must be at least 14 characters in length and must contain at least: Two uppercase letters [A-Z], two lowercase letters [a-z], two digits [0-9], and two special characters [e.g.: !@#$*&]\n        </div>                  \n      </div>\n      <div class=\"form-group\">\n        <label>\n          <localize key=\"account.certainPassword\"></localize>\n        </label>\n        <input type=\"password\" name=\"certainPassword\" [ngModel]=\"certainPassword\" #certainPassword=\"ngModel\" required />\n        <div *ngIf=\"certainPassword.errors && certainPassword.errors.mustMatch\" class=\"inline-error-message\">\n          <localize key=\"account.certainPassword.validation\"></localize>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n      <input *ngIf=\"!externalProfile\" type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n    </div>\n  </form>\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\n\ndeclare var com: any\n\n@Injectable()\nexport class LocalizationService {\n\n  public localize(bundle: string, key: string): string {\n    return com.runwaysdk.Localize.localize(bundle, key);\n  }\n    \n  public get(key: string): string {\n    return com.runwaysdk.Localize.get(key);\n  }\n  \n  public decode(key: string): string {\n    let index = key.lastIndexOf('.');\n    \n    if(index !== -1) {\n      \n      let temp = [key.slice(0, index), key.slice(index + 1)]\n    \n      return this.localize(temp[0], temp[1]);\n    }\n    else {\n      return this.get(key);\n    }\n  }\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from './event.service';\n\nimport { Profile } from '../model/profile';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ProfileService {\n\n    constructor( private eventService: EventService, private http: HttpClient ) { }\n\n    get(): Promise<Profile> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        return this.http\n            .post<Profile>( acp + '/account/get', { headers: headers } )\n            .toPromise()\n    }\n\n\n    apply( profile: Profile ): Promise<Profile> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Profile>( acp + '/account/apply', JSON.stringify( { account: profile } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n\n    unlock( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/account/unlock', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n\n    tasksCount(): Promise<{tasksCount:number}> {\n        \n        const statuses:string[] = ['Error', 'Failed'];\n\n        // status options: PROCESSING, COMPLETE, ERROR, QUEUED\n        let params: HttpParams = new HttpParams();\n        params = params.set('statuses', JSON.stringify(statuses));\n\n        return this.http\n            .get<{tasksCount:number}>(acp + '/project/tasks-count', { params: params })\n            .toPromise()\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { ModalTypes } from '../../model/modal';\n\n@Component( {\n    selector: 'basic-confirm-modal',\n    templateUrl: './basic-confirm-modal.component.html',\n    styleUrls: []\n} )\nexport class BasicConfirmModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string = 'Are you sure?';\n\n    @Input() subText: string = null;\n\n    @Input() data: any;\n\n    @Input() submitText: string = 'Submit';\n\n    @Input() cancelText: string = 'Cancel'; \n\n    @Input() type: ModalTypes = ModalTypes.warning;\n\n    /*\n     * Called on confirm\n     */\n    public onConfirm: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onConfirm = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onConfirm.next( this.data );\n    }\n}\n","<div>\n  <div class=\"modal-body\" style=\"margin-top: 30px; margin-bottom: 30px;\">\n    <p >{{message}}</p>\n    <p *ngIf=\"subText != null\" [innerHtml]=\"subText\"></p>\n  </div>\n  <div class=\"modal-footer\">\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">{{cancelText}}</button>\n      <button type=\"button\" (click)=\"confirm()\" [ngClass]=\"type === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">{{submitText}}</button>\n    </div>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\n@Component( {\n    selector: 'error-modal',\n    templateUrl: './error-modal.component.html',\n    styleUrls: ['./error-modal.css']\n} )\nexport class ErrorModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string = 'Unable to complete your action';\n\n    constructor( public bsModalRef: BsModalRef ) { }\n}\n","<div class=\"modal-body error-modal text-center\">\n    <form class=\"modal-form\">\n        <p>{{message}}</p>\n\n        <!-- <div class=\"row\"> -->\n            <div class=\"button-holder\">\n                <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Close</button>\n            </div>\n        <!-- </div> -->\n    </form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { ModalTypes } from '../../model/modal';\n\n@Component( {\n    selector: 'notification-modal',\n    templateUrl: './notification-modal.component.html',\n    styleUrls: []\n} )\nexport class NotificationModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string = '';\n    \n    @Input() messageTitle: string = '';\n\n    @Input() data: any;\n\n    @Input() submitText: string = 'Submit';\n\n    @Input() type: ModalTypes = ModalTypes.warning;\n\n    /*\n     * Called on confirm\n     */\n    public onConfirm: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onConfirm = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onConfirm.next( this.data );\n    }\n}\n","<div>\n  <div class=\"modal-body\" style=\"margin-top: 30px; margin-bottom: 30px;\">\n    <h1 *ngIf=\"messageTitle\" style=\"margin-top: 20px;margin-bottom: 10px;\">{{messageTitle}}</h1>\n    <p>{{message}}</p>\n  </div>\n  <div class=\"modal-footer\">\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <button type=\"button\" (click)=\"confirm()\" [ngClass]=\"type === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n        <span class=\"ui-button-text\">{{submitText}}</span>\n      </button>\n    </div>\n  </div>\n</div>","import { Component, Input } from '@angular/core';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ProfileService } from '../../service/profile.service';\nimport { ProfileComponent } from '../profile/profile.component';\n\nimport { AuthService } from '../../service/auth.service';\n\ndeclare var acp: any;\n\n@Component( {\n\n    selector: 'uasdm-header',\n    templateUrl: './header.component.html',\n    styleUrls: ['./header.css']\n} )\nexport class UasdmHeaderComponent {\n    context: string;\n    userName: string = \"\";\n    admin: boolean = false;\n    externalProfile: boolean = false;\n    bsModalRef: BsModalRef;\n    notificationCount: number = 0;\n\n    @Input() title: string;\n\n\n    constructor( private authService: AuthService, private modalService: BsModalService, private profileService: ProfileService ) {\n        this.context = acp;\n    }\n\n    ngOnInit(): void {\n\n        this.userName = this.authService.getUserName();\n        this.admin = this.authService.isAdmin();\n        this.externalProfile = this.authService.isExternalProfile();\n\n        this.profileService.tasksCount().then(data => {\n\n\t\t\tthis.notificationCount = data.tasksCount\n\n\t\t});\n    }\n\n    account(): void {\n        this.profileService.get().then( profile => {\n            this.bsModalRef = this.modalService.show( ProfileComponent, { backdrop: 'static', class: 'gray modal-lg' } );\n            this.bsModalRef.content.profile = profile;\n        } );\n    }\n\n}\n","<!-- HEADER AND NAVBAR -->\n<header>\n  <nav class=\"navbar navbar-default\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n        <a class=\"navbar-brand\" href=\"{{context}}/project/management#/menu\" title=\"Home\">\n          <img [src]=\"context + '/logo/view?id=logo'\" />\n        </a>\n        <!-- <p class=\"navbar-brand\" style=\"margin: 0;\" >{{title}}</p> -->\n      </div>\n\n      <ul class=\"nav navbar-nav navbar-right\">\n        <li dropdown>\n          <a class=\"dropdown-toggle\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" dropdownToggle>\n            <span class=\"glyphicon glyphicon-menu-hamburger\">\n              <span *ngIf=\"notificationCount > 0\" class=\"task-badge\" [ngClass]=\"{'double-digit': notificationCount > 9}\">{{notificationCount}}</span>\n            </span>\n          </a>\n\n          <ul *dropdownMenu class=\"dropdown-menu\">\n            <li role=\"menuitem\">\n              <a id=\"account-btn\" class=\"user-command-link link-active\" (click)=\"account()\">\n                <localize key=\"userDashboards.account\"></localize>\n              </a>\n            </li>\n            <li role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/site/tasks\" routerLinkActive=\"active\">Workflow Tasks</a>\n            </li>\n            <!-- <li role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/site/upload\" routerLinkActive=\"active\">Collection Upload</a>\n            </li> -->\n            <li role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/site/viewer\" routerLinkActive=\"active\">Site Viewer</a>\n            </li>\n            <li role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/site/report\" routerLinkActive=\"active\">Report</a>\n            </li>\n\n            <hr *ngIf=\"admin\">\n\n<!--             <li *ngIf=\"admin\" role=\"menuitem\"> -->\n<!--               <a class=\"dropdown-item\" routerLink=\"/admin/accounts\" routerLinkActive=\"active\"> -->\n<!--                 <i></i> -->\n<!--                 <localize key=\"accounts.link\"></localize> -->\n<!--               </a> -->\n<!--             </li> -->\n<!--             <li *ngIf=\"admin\" role=\"menuitem\"> -->\n<!--               <a class=\"dropdown-item\" routerLink=\"/admin/session-events\" routerLinkActive=\"active\"> -->\n<!--                 <i></i> -->\n<!--                 Session event log -->\n<!--               </a> -->\n<!--             </li>             -->\n<!--             <li *ngIf=\"admin\" role=\"menuitem\"> -->\n<!--               <a class=\"dropdown-item\" routerLink=\"/admin/logos\" routerLinkActive=\"active\"> -->\n<!--                 <i></i> -->\n<!--                 <localize key=\"Icons\"></localize> -->\n<!--               </a> -->\n<!--             </li> -->\n<!--             <li *ngIf=\"admin\" role=\"menuitem\"> -->\n<!--               <a class=\"dropdown-item\" routerLink=\"/admin/email\" routerLinkActive=\"active\"> -->\n<!--                 <i></i> -->\n<!--                 <localize key=\"email.link\"></localize> -->\n<!--               </a> -->\n<!--             </li> -->\n<!--             <li *ngIf=\"admin\" role=\"menuitem\"> -->\n<!--               <a class=\"dropdown-item\" routerLink=\"/site/platforms\" routerLinkActive=\"active\">Platforms</a> -->\n<!--             </li> -->\n<!--             <li *ngIf=\"admin\" role=\"menuitem\"> -->\n<!--               <a class=\"dropdown-item\" routerLink=\"/site/platform-manufacturers\" routerLinkActive=\"active\">Platform Manufacturers</a> -->\n<!--             </li> -->\n<!--             <li *ngIf=\"admin\" role=\"menuitem\"> -->\n<!--               <a class=\"dropdown-item\" routerLink=\"/site/platform-types\" routerLinkActive=\"active\">Platform Types</a> -->\n<!--             </li> -->\n<!--             <li *ngIf=\"admin\" role=\"menuitem\"> -->\n<!--               <a class=\"dropdown-item\" routerLink=\"/site/sensors\" routerLinkActive=\"active\">Sensors</a> -->\n<!--             </li> -->\n<!--             <li *ngIf=\"admin\" role=\"menuitem\"> -->\n<!--               <a class=\"dropdown-item\" routerLink=\"/site/sensor-types\" routerLinkActive=\"active\">Sensor Types</a> -->\n<!--             </li> -->\n            <li *ngIf=\"admin\" role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/site/uavs\" routerLinkActive=\"active\">UAV</a>\n            </li>\n<!--             <li *ngIf=\"admin\" role=\"menuitem\"> -->\n<!--               <a class=\"dropdown-item\" routerLink=\"/site/wave-lengths\" routerLinkActive=\"active\">Wave Lengths</a> -->\n<!--             </li> -->\n            <li *ngIf=\"admin\" role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/site/equipment\" routerLinkActive=\"active\">Equipment</a>\n            </li>\n            <li *ngIf=\"admin\" role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/admin/system-configuration\" routerLinkActive=\"active\">\n                <i></i>System Configuration\n              </a>\n            </li>\n            <li *ngIf=\"admin\" role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/admin/system-info\" routerLinkActive=\"active\">\n                <i></i>System Info\n              </a>\n            </li>\n\n            <hr>\n            <li role=\"menuitem\">\n              <a class=\"dropdown-item\" href=\"{{context}}/session/logout\">Log out</a>\n            </li>\n          </ul>\n        </li>\n      </ul>\n\n      <div class=\"navbar-right user-indicator\">\n        <p class=\"navbar-text\">\n          Logged in as <b style=\"color: white;\">{{userName}}</b>\n        </p>\n      </div>\n\n    </div>\n  </nav>\n</header>\n","import { Directive, Input } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidationErrors, FormGroup } from '@angular/forms';\n\n// custom validator to check that two fields match\nexport function MustMatch(controlName: string, matchingControlName: string) {\n\treturn (formGroup: FormGroup) => {\n\t\tconst control = formGroup.controls[controlName];\n\t\tconst matchingControl = formGroup.controls[matchingControlName];\n\n\t\t// return null if controls haven't initialised yet\n\t\tif (!control || !matchingControl) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// return null if another validator has already found an error on the matchingControl\n\t\tif (matchingControl.errors && !matchingControl.errors.mustMatch) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// set error on matchingControl if validation fails\n\t\tif (control.value !== matchingControl.value) {\n\t\t\tmatchingControl.setErrors({ mustMatch: true });\n\t\t} else {\n\t\t\tmatchingControl.setErrors(null);\n\t\t}\n\t}\n}\n\n@Directive({\n\tselector: '[mustMatch]',\n\tproviders: [{ provide: NG_VALIDATORS, useExisting: MustMatchDirective, multi: true }]\n})\nexport class MustMatchDirective implements Validator {\n\t@Input('mustMatch') mustMatch: string[] = [];\n\n\tvalidate(formGroup: FormGroup): ValidationErrors {\n\t\treturn MustMatch(this.mustMatch[0], this.mustMatch[1])(formGroup);\n\t}\n}","import { Validator, NG_VALIDATORS, AbstractControl } from '@angular/forms';\nimport { Directive } from '@angular/core';\n\n@Directive({\n\tselector: '[passwordValidator]',\n\tproviders: [{\n\t\tprovide: NG_VALIDATORS,\n\t\tuseExisting: PasswordValidatorDirective,\n\t\tmulti: true\n\t}]\n})\nexport class PasswordValidatorDirective implements Validator {\n\n\tvalidate(control: AbstractControl): { [key: string]: any } | null {\n\n\t\tconsole.log(\"Checking password strength\");\n\n\t\tif (control.value != null && control.value !== '') {\n\n\t\t\tlet isValid: boolean = true;\n\n\t\t\tif (!RegExp('(?=.*[0-9].*[0-9]).*').test(control.value)) {\n\t\t\t\tisValid = false;\n\t\t\t}\n\n\t\t\tif (!RegExp('(?=.*[a-z].*[a-z]).*').test(control.value)) {\n\t\t\t\tisValid = false;\n\t\t\t}\n\n\t\t\tif (!RegExp('(?=.*[A-Z].*[A-Z]).*').test(control.value)) {\n\t\t\t\tisValid = false;\n\t\t\t}\n\n\t\t\tif (!RegExp('(?=.*[~!@#$%^&*()_-].*[~!@#$%^&*()_-]).*').test(control.value)) {\n\t\t\t\tisValid = false;\n\t\t\t}\n\n\t\t\tif (isValid) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn { passwordStrength: true };\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from './event.service';\n\nimport { AuthService } from './auth.service';\nimport { User } from '../model/user';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SessionService {\n\n\tconstructor(private eventService: EventService, private http: HttpClient, private authService: AuthService) {\n\t}\n\n\tlogin(username: string, password: string): Promise<User> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<User>(acp + '/session/login', JSON.stringify({ username: username, password: password }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t\t\t.then((user: User) => {\n\t\t\t\tthis.authService.setUser(user);\n\n\t\t\t\treturn user;\n\t\t\t})\n\t}\n\n\tlogout(): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/session/logout', { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t\t\t.then(() => {\n\t\t\t\tthis.authService.setUser(null);\n\n\t\t\t\treturn;\n\t\t\t})\n\t}\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n\tselector: 'boolean-field',\n\ttemplateUrl: './boolean-field.component.html',\n\tstyles: ['.modal-form .holder .check-block .chk-area {margin: 10px 0px 0 0;}']\n})\nexport class BooleanFieldComponent {\n\n\t@Input() value: boolean = false;\n\t@Input() disabled: boolean = false;\n\t@Input() localizeLabelKey: string = \"\"; // localization key used to localize in the component template\n\t@Input() label: string = \"\"; // raw string input\n\n\t@Output() public valueChange = new EventEmitter<boolean>();\n\n\tconstructor() { }\n\n\ttoggle(): void {\n\t\tif (!this.disabled) {\n\t\t\tthis.value = !this.value;\n\n\t\t\tthis.valueChange.emit(this.value);\n\t\t}\n\t}\n}","<div>\n  <div class=\"check-block form-group\">\n    <div (click)=\"toggle()\" [ngClass]=\"{'chk-checked' : value, 'chk-disabled' : disabled}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n      <span></span>\n    </div>\n\n    <label *ngIf=\"label.length > 0\" class=\"checkbox-label\">{{label}}</label>\n    <label *ngIf=\"localizeLabelKey.length > 0\" class=\"checkbox-label\">\n      <localize key=\"{{localizeLabelKey}}\"></localize>\n    </label>\n  </div>\n  <!-- Force a line break somehow -->\n  <div class=\"row\">\n  </div>\n</div>","import { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { ErrorModalComponent } from '@shared/component';\n\nexport class ErrorHandler {\n    static getMessageFromError(err: any): string {\n    \n      var unspecified = \"An unspecified error has occurred.  Please try your operation again.  If the problem continues, alert your technical support staff.\";\n    \n      if (err == null)\n      {\n        return unspecified;\n      }\n      else\n      {\n        console.log(\"An error has occurred: \", err);\n      }\n      \n      let msg = null;\n      \n      if (err.error != null && (typeof err.error === 'object'))\n      {\n        msg = err.error.localizedMessage || err.error.message;\n      }\n      \n      if (msg == null)\n      {\n        msg = err.message || err.msg || err.localizedMessage;\n      }\n      \n      if (msg != null && msg.includes(\"##tferrormsg##\"))\n      {\n        var split = msg.split(\"##tferrormsg##\");\n        return split[2];\n      }\n      \n      if (msg == null)\n      {\n        msg = unspecified;\n      }\n      \n      return msg;\n    }\n    \n    static showErrorAsDialog(err: any, modalService: BsModalService): BsModalRef {\n      \n      if (err instanceof HttpErrorResponse && err.status == 401)\n      {\n        return null;\n      }\n      \n      let bsModalRef = modalService.show(ErrorModalComponent, { backdrop: true });\n      \n      bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n      \n      return bsModalRef;\n      \n    }\n}\n","import { ErrorHandler } from './error-handler/error-handler';\nimport { UasdmHeaderComponent } from './header/header.component';\nimport { LoadingBarComponent } from './loading-bar/loading-bar.component';\nimport { LocalizeComponent } from './localize/localize.component';\nimport { BasicConfirmModalComponent } from './modal/basic-confirm-modal.component';\nimport { ErrorModalComponent } from './modal/error-modal.component';\nimport { NotificationModalComponent } from './modal/notification-modal.component';\nimport { PasswordStrengthBarComponent } from './password-strength-bar/password-strength-bar.component';\nimport { ProfileComponent } from './profile/profile.component';\n\nexport const components: any[] = [\n\tErrorHandler,\n\tUasdmHeaderComponent,\n\tLoadingBarComponent,\n\tLocalizeComponent,\n\tBasicConfirmModalComponent,\n\tErrorModalComponent,\n\tNotificationModalComponent,\n\tPasswordStrengthBarComponent,\n\tProfileComponent\n];\n\nexport * from './error-handler/error-handler';\nexport * from './header/header.component';\nexport * from './loading-bar/loading-bar.component';\nexport * from './localize/localize.component';\nexport * from './modal/notification-modal.component';\nexport * from './modal/error-modal.component';\nexport * from './modal/basic-confirm-modal.component';\nexport * from './password-strength-bar/password-strength-bar.component';\nexport * from './profile/profile.component';\n","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { LazyLoadEvent } from 'primeng/api';\n\nimport { PageResult } from '@shared/model/page';\n\nimport { Subject } from 'rxjs';\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from '@shared/model/generic-table';\n@Component({\n    selector: 'generic-table',\n    templateUrl: './generic-table.component.html',\n    styleUrls: ['./generic-table.css']\n})\nexport class GenericTableComponent implements OnInit, OnDestroy {\n    page: PageResult<Object> = {\n        resultSet: [],\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10\n    };\n\n    @Input() cols: GenericTableColumn[] = [];\n\n    @Input() baseUrl: string = null;\n\n    @Input() config: GenericTableConfig;\n\n    @Input() refresh: Subject<void>;\n\n    @Output() click = new EventEmitter<TableEvent>();\n\n    loading: boolean = true;\n\n    booleanOptions: any = [];\n\n    event: LazyLoadEvent = null;\n\n    constructor() {\n        this.booleanOptions = [{ label: '', value: null }, { value: true, label: 'True' }, { value: false, label: 'False' }];\n    }\n\n    ngOnInit(): void {\n\n        if (this.refresh != null) {\n            this.refresh.subscribe(() => {\n                if (this.event != null) {\n                    this.onPageChange(this.event);\n                }\n            });\n        }\n    }\n\n    ngOnDestroy(): void {\n\n        if (this.refresh != null) {\n            this.refresh.unsubscribe(); 0\n        }\n    }\n\n    onPageChange(event: LazyLoadEvent): void {\n        this.loading = true;\n        this.event = event;\n\n        setTimeout(() => {\n            this.config.service.page(event, this.baseUrl).then(page => {\n                this.page = page;\n            }).finally(() => {\n                this.loading = false;\n            });\n        }, 1000);\n    }\n\n    onClick(type: string, row: Object, col: GenericTableColumn): void {\n        this.click.emit({\n            type: type,\n            row: row,\n            col: col\n        });\n    }\n\n    getColumnType(row: Object, col: GenericTableColumn): string {\n        if (col.columnType != null) {\n            return col.columnType(row);\n        }\n\n        return col.type;\n    }\n}\n","<div>\n\n\t<p-table #dt [columns]=\"cols\" [value]=\"page.resultSet\" [autoLayout]=\"true\" [scrollable]=\"true\" [resizableColumns]=\"true\" sortMode=\"multiple\"\n\t\tstyleClass=\"p-datatable-gridlines\" [lazy]=\"true\" (onLazyLoad)=\"onPageChange($event)\" [paginator]=\"true\"\n\t\t[totalRecords]=\"page.count\" [rows]=\"page.pageSize\" [loading]=\"loading\"\n\t\t[multiSortMeta]=\"config.sort != null ? [config.sort] : []\">\n    \n        <ng-template pTemplate=\"colgroup\" let-columns>\n            <colgroup>\n                <col *ngFor=\"let col of columns\">\n            </colgroup>\n        </ng-template>\n\n\t\t<ng-template pTemplate=\"header\" let-columns>\n\t\t\t<tr>\n\t\t\t\t<th *ngFor=\"let col of columns\" [pSortableColumn]=\"col.field\" [pSortableColumnDisabled]=\"col.type === 'STRING-ARRAY' || col.field === 'product'\" \n                    [ngClass]=\"{'actions-col' : col.type === 'ACTIONS', 'map-service-col' : col.type === 'STRING-ARRAY'}\" pResizableColumn>\n\t\t\t\t\t{{col.header}}\n\t\t\t\t\t<p-sortIcon *ngIf=\"col.sortable\" [field]=\"col.field\" ariaLabel=\"Activate to sort\" style=\"float:right;\"\n\t\t\t\t\t\tariaLabelDesc=\"Activate to sort in descending order\" ariaLabelAsc=\"Activate to sort in ascending order\">\n                    </p-sortIcon>\n\t\t\t\t</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<th *ngFor=\"let col of columns\" [ngSwitch]=\"col.type\">\n\t\t\t\t\t<ng-container *ngIf=\"col.filter !== false\" >\n\t\t\t\t\t\t<input *ngSwitchCase=\"'URL'\" pInputText type=\"text\" placeholder=\"Filter by URL...\"\n\t\t\t\t\t\t\t(input)=\"dt.filter($event.target.value, col.field, 'contains')\">\n\t\t\t\t\t\t<input *ngSwitchCase=\"'TEXT'\" pInputText type=\"text\" placeholder=\"Filter by text...\"\n\t\t\t\t\t\t\t(input)=\"dt.filter($event.target.value, col.field, 'contains')\">\n\t\t\t\t\t\t<input *ngSwitchCase=\"'NUMBER'\" pInputText type=\"number\" placeholder=\"Filter by number...\"\n\t\t\t\t\t\t\t(input)=\"dt.filter($event.target.value, col.field, 'equals')\">\n\t\t\t\t\t\t<p-dropdown *ngSwitchCase=\"'BOOLEAN'\" appendTo=\"body\" [options]=\"booleanOptions\" placeholder=\"Filter by category...\"\n\t\t\t\t\t\t\t(onChange)=\"dt.filter($event.value.value, col.field, 'equals')\" optionLabel=\"label\"\n\t\t\t\t\t\t\toptionValue=\"value\" [virtualScroll]=\"true\"></p-dropdown>\n\t\t\t\t\t</ng-container>\n\t\t\t\t</th>\n\t\t\t</tr>\n\t\t</ng-template>\n\n\t\t<ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\n\t\t\t<tr>\n\t\t\t\t<td *ngFor=\"let col of columns\" [ngSwitch]=\"getColumnType(rowData, col)\" class=\"ui-resizable-column\" [ngClass]=\"{'actions-col' : col.type === 'ACTIONS', 'map-service-col' : col.type === 'STRING-ARRAY'}\">\n\t\t\t\t\t<ng-container *ngSwitchCase=\"'URL'\">\n\t\t\t\t\t\t<a [routerLink]=\"['/' + col.baseUrl + '/' + rowData[col.urlField]]\">\n\t\t\t\t\t\t\t{{rowData[col.field]}}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-container *ngSwitchCase=\"'ACTIONS'\">\n\t\t\t\t\t\t<a *ngIf=\"config.view\" class=\"fa fa-eye ico-edit\" (click)=\"onClick('view', rowData, col)\"\n\t\t\t\t\t\t\t[title]=\"'View ' + config.label\"></a>\n\t\t\t\t\t\t<a *ngIf=\"config.edit\" class=\"fa fa-pencil-alt ico-edit\" (click)=\"onClick('edit', rowData, col)\"\n\t\t\t\t\t\t\t[title]=\"'Edit ' + config.label\"></a>\n\t\t\t\t\t\t<a *ngIf=\"config.remove\" class=\"fa fa-trash-alt ico-remove\"\n\t\t\t\t\t\t\t(click)=\"onClick('remove', rowData, col)\" [title]=\"'Remove ' + config.label\"></a>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-container *ngSwitchCase=\"'CONSTANT'\">\n\t\t\t\t\t\t<a *ngIf=\"rowData[col.field] != null\" (click)=\"onClick('custom', rowData, col)\">\n\t\t\t\t\t\t\t{{col.text}}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</ng-container>\n                    <ng-container *ngSwitchCase=\"'STRING-ARRAY'\">\n                        <ul>\n                            <li *ngFor=\"let service of rowData[col.field]; let i = index\">\n                                {{service}}\n                                <span *ngIf=\"i < rowData[col.field].length-1\">\n                                    <br>\n                                    <br>\n                                </span>\n                            </li>\n                        </ul>\n                    </ng-container>\n\t\t\t\t\t<ng-container *ngSwitchCase=\"'NONE'\">\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-container *ngSwitchDefault>\n\t\t\t\t\t\t{{rowData[col.field]}}\n\t\t\t\t\t</ng-container>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</ng-template>\n<!-- \t\t<ng-template pTemplate=\"paginatorleft\"> -->\n<!-- \t\t\t<p-button *ngIf=\"config.create\" type=\"button\" icon=\"pi pi-plus\" [style]=\"{'border':'solid 1px'}\" -->\n<!-- \t\t\t\tstyleClass=\"p-button-text\" [label]=\"'Add new ' + config.label\" (click)=\"onClick('create', null, null)\"> -->\n<!-- \t\t\t</p-button> -->\n<!-- \t\t</ng-template> -->\n\t</p-table>\n  \n    <div style=\"width:100%;text-align:right;\">\n        <button *ngIf=\"config.create\" (click)=\"onClick('create', null, null)\" style=\"margin: 10px 0 0;\" class=\"btn btn-primary\">Add new {{config.label}}</button>\n    </div>\n\n</div>","import { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n// https://github.com/angular/angular/blob/5.0.4/packages/common/src/pipes/date_pipe.ts#L137\n@Pipe({ name: 'idmdate' })\nexport class IdmDatePipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private locale: string) {}\n\n  transform(date: Date | string, format: string = \"MMM dd, yyyy hh:mm:ss\"): string {\n    date = new Date(date);\n    \n    let transformed: string = null;\n    if(this.isValidDate(date)){\n        transformed = new DatePipe(this.locale).transform(date, format);\n        \n        transformed = transformed + \" \" + this.getTimezoneName();\n    }\n    \n    return transformed;\n  }\n  \n  // https://stackoverflow.com/questions/9772955/how-can-i-get-the-timezone-name-in-javascript\n  private getTimezoneName() {\n    const today = new Date();\n    const short = today.toLocaleDateString(undefined);\n    const full = today.toLocaleDateString(undefined, { timeZoneName: 'short' });\n  \n    // Trying to remove date from the string in a locale-agnostic way\n    const shortIndex = full.indexOf(short);\n    if (shortIndex >= 0) {\n      const trimmed = full.substring(0, shortIndex) + full.substring(shortIndex + short.length);\n      \n      // by this time `trimmed` should be the timezone's name with some punctuation -\n      // trim it from both sides\n      return trimmed.replace(/^[\\s,.\\-:;]+|[\\s,.\\-:;]+$/g, '');\n  \n    } else {\n      // in some magic case when short representation of date is not present in the long one\n      return Intl.DateTimeFormat().resolvedOptions().timeZone;\n    }\n  }\n  \n  private isValidDate(d: Date) {\n    return d instanceof Date && !isNaN(d.getTime());\n  }\n}","import {Pipe, PipeTransform} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\n \n@Pipe({\n  name: 'safeHtml'\n})\nexport class SafeHtmlPipe implements PipeTransform {\n \n  constructor(private sanitizer: DomSanitizer) {\n  }\n \n  transform(value: any, args?: any): any {\n    return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n  }\n \n}","import { Validator, NG_VALIDATORS, AbstractControl } from '@angular/forms';\nimport { Directive } from '@angular/core';\nimport { PhoneNumberUtil } from 'google-libphonenumber';\n\n@Directive({\n\tselector: '[phoneNumber]',\n\tproviders: [{\n\t\tprovide: NG_VALIDATORS,\n\t\tuseExisting: PhoneNumberValidatorDirective,\n\t\tmulti: true\n\t}]\n})\nexport class PhoneNumberValidatorDirective implements Validator {\n\n\tvalidate(control: AbstractControl): { [key: string]: any } | null {\n\t\tif (control.value != null && control.value !== '') {\n\t\t\ttry {\n\t\t\t\tconst phoneUtil = PhoneNumberUtil.getInstance();\n\t\t\t\tconst phoneNumber = '' + control.value + '';\n\t\t\t\tconst pNumber = phoneUtil.parseAndKeepRawInput(phoneNumber, 'US');\n\t\t\t\tconst isValidNumber = phoneUtil.isValidNumber(pNumber);\n\n\t\t\t\tif (isValidNumber) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e, control.value);\n\t\t\t\treturn {\n\t\t\t\t\tphoneNumber: true\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tphoneNumber: true\n\t\t\t};\n\t\t}\n\n\t\treturn null;\n\t}\n}\n"],"sourceRoot":""}