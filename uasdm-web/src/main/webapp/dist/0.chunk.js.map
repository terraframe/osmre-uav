{"version":3,"sources":["webpack:///./src/app/shared/service/guard.service.ts","webpack:///./src/app/shared/service/http-backend-client.service.ts","webpack:///./src/app/shared/component/localize/localize.component.ts","webpack:///./src/app/shared/component/localize/localize.component.html","webpack:///./src/app/shared/pipe/localize.pipe.ts","webpack:///./src/app/shared/service/auth.service.ts","webpack:///./src/app/shared/service/event.service.ts","webpack:///./src/app/shared/service/profile.service.ts","webpack:///./src/app/shared/directive/must-match.directive.ts","webpack:///./src/app/shared/directive/password-validator.directive.ts","webpack:///./src/app/shared/component/password-strength-bar/password-strength-bar.component.ts","webpack:///./src/app/shared/component/password-strength-bar/password-strength-bar.component.html","webpack:///./src/app/shared/service/localization.service.ts","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.ts","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.html","webpack:///./src/app/shared/component/profile/profile.component.ts","webpack:///./src/app/shared/component/profile/profile.component.html","webpack:///./src/app/shared/component/modal/error-modal.component.ts","webpack:///./src/app/shared/component/modal/error-modal.component.html","webpack:///./src/app/shared/service/session.service.ts","webpack:///./src/app/shared/component/boolean-field/boolean-field.component.ts","webpack:///./src/app/shared/component/boolean-field/boolean-field.component.html","webpack:///./src/app/shared/component/modal/basic-confirm-modal.component.ts","webpack:///./src/app/shared/component/modal/basic-confirm-modal.component.html","webpack:///./src/app/shared/component/header/header.component.ts","webpack:///./src/app/shared/component/header/header.component.html","webpack:///./src/app/shared/pipe/safe-html.pipe.ts","webpack:///./src/app/shared/directive/phone-number.directive.ts","webpack:///./src/app/shared/component/modal/notification-modal.component.ts","webpack:///./src/app/shared/component/modal/notification-modal.component.html","webpack:///./src/app/shared/pipe/keys.pipe.ts","webpack:///./src/app/shared/pipe/filter.pipe.ts","webpack:///./src/app/shared/service/progress.service.ts","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/app/shared/modal/step-indicator/modal-step-indicator.component.ts","webpack:///./src/app/shared/modal/step-indicator/modal-step-indicator.component.html","webpack:///./src/app/shared/pipe/phone.pipe.ts","webpack:///./src/app/shared/model/modal.ts"],"names":["AdminGuardService","service","router","route","state","this","isAdmin","navigate","AuthGuard","isLoggedIn","HttpBackendClient","handler","super","LocalizeComponent","text","decode","key","LocalizePipe","value","AuthService","user","loggedIn","userName","roles","check","cookieData","get","cookieDataJSON","JSON","parse","indexOf","EventService","listeners","listener","push","indexOfItem","splice","start","complete","ProfileService","eventService","http","headers","post","acp","toPromise","profile","stringify","account","pipe","oid","params","set","MustMatchDirective","mustMatch","formGroup","controlName","matchingControlName","control","controls","matchingControl","errors","setErrors","provide","useExisting","multi","PasswordValidatorDirective","console","log","isValid","RegExp","test","passwordStrength","PasswordStrengthBarComponent","colors","pass","score","letters","i","length","variations","digits","lower","upper","nonWords","variationCount","Math","trunc","idx","col","changes","password","currentValue","setBarColors","c","getColor","measureStrength","count","_n","LocalizationService","bundle","com","runwaysdk","Localize","localize","index","lastIndexOf","temp","slice","LoadingBarComponent","showIndicator","registerListener","deregisterListener","ProfileComponent","bsModalRef","username","firstName","lastName","email","changePassword","apply","then","hide","unlock","onSubmit","cancel","ErrorModalComponent","message","SessionService","authService","setUser","BooleanFieldComponent","disabled","localizeLabelKey","label","valueChange","emit","toggle","BasicConfirmModalComponent","submitText","cancelText","type","warning","onConfirm","next","data","confirm","UasdmHeaderComponent","modalService","profileService","admin","notificationCount","context","getUserName","tasksCount","show","backdrop","class","content","SafeHtmlPipe","sanitizer","args","bypassSecurityTrustResourceUrl","PhoneNumberValidatorDirective","phoneUtil","getInstance","phoneNumber","pNumber","parseAndKeepRawInput","isValidNumber","e","Subject","KeysPipe","keys","Array","FilterPipe","items","prop","filter","it","ProgressService","progress","ngModule","providers","forRoot","ModalStepIndicatorComponent","step","config","stepConfig","PhonePipe","number","format","INTERNATIONAL","ModalTypes"],"mappings":"0FAAA,8FAOO,MAAMA,EAEX,YAAoBC,EAA6BC,GAA7B,KAAAD,UAA6B,KAAAC,SAEjD,YAAYC,EAA+BC,GAEzC,QAAIC,KAAKJ,QAAQK,YAIjBD,KAAKH,OAAOK,SAAS,CAAE,cAEhB,I,iCAZEP,GAAiB,sB,oBAAjBA,EAAiB,QAAjBA,EAAiB,OAiBvB,MAAMQ,EAEX,YAAoBP,EAA6BC,GAA7B,KAAAD,UAA6B,KAAAC,SAEjD,YAAYC,EAA+BC,GAEzC,QAAIC,KAAKJ,QAAQQ,eAIjBJ,KAAKH,OAAOK,SAAS,CAAE,YAEhB,I,iCAZEC,GAAS,sB,oBAATA,EAAS,QAATA,EAAS,Q,iCCxBtB,oDAIO,MAAME,UAA0B,IACnC,YAAaC,GACTC,MAAOD,I,iCAFFD,GAAiB,Y,oBAAjBA,EAAiB,QAAjBA,EAAiB,Q,gCCJ9B,qDAUO,MAAMG,EAIX,YAAoBZ,GAAA,KAAAA,UAEpB,WACEI,KAAKS,KAAOT,KAAKJ,QAAQc,OAAOV,KAAKW,M,iCAP5BH,GAAiB,Y,kBAAjBA,EAAiB,uFCV9B,Q,KAAA,c,mDCAA,qDAIO,MAAMI,EACX,YAAoBhB,GAAA,KAAAA,UAEpB,UAAUiB,GACR,OAAOb,KAAKJ,QAAQc,OAAOG,I,iCAJlBD,GAAY,Y,mCAAZA,EAAY,W,gCCJzB,qDAwBO,MAAME,EAOZ,YAAoBlB,GAEnB,GAFmB,KAAAA,UANZ,KAAAmB,KAAa,CACpBC,UAAU,EACVC,SAAU,GACVC,MAAO,IAKHlB,KAAKJ,QAAQuB,MAAM,QAAS,CAC/B,IAAIC,EAAqBpB,KAAKJ,QAAQyB,IAAI,QAEtCC,EAAsBC,KAAKC,MAAMJ,GAErCpB,KAAKe,KAAKE,SAAWK,EAAeL,SACpCjB,KAAKe,KAAKG,MAAQI,EAAeJ,MACjClB,KAAKe,KAAKC,UAAW,GAIvB,QAAQD,GACPf,KAAKe,KAAOA,EAGb,aACCf,KAAKe,KAAO,CACXC,UAAU,EACVC,SAAU,GACVC,MAAO,IAIT,cACC,OAAOlB,KAAKe,KAAKE,SAGlB,aACC,OAAOjB,KAAKe,KAAKC,SAGlB,UACC,OAAoE,IAA7DhB,KAAKe,KAAKG,MAAMO,QAAQ,gCAGhC,WACC,OAAOzB,KAAKC,YAA6E,IAAhED,KAAKe,KAAKG,MAAMO,QAAQ,oC,iCA7CtCX,GAAW,Y,oBAAXA,EAAW,QAAXA,EAAW,Q,gCCxBxB,6CASO,MAAMY,EAGT,cAFQ,KAAAC,UAA8B,GAI/B,iBAAkBC,GACrB5B,KAAK2B,UAAUE,KAAMD,GAGlB,mBAAoBA,GACvB,IAAIE,EAAc9B,KAAK2B,UAAUF,QAASG,GAE1C,OAAsB,IAAjBE,IAIL9B,KAAK2B,UAAUI,OAAQD,EAAa,IAE7B,GAGJ,QACH,IAAM,MAAMF,KAAY5B,KAAK2B,UACzBC,EAASI,QAIV,WACH,IAAM,MAAMJ,KAAY5B,KAAK2B,UACzBC,EAASK,Y,iCA7BRP,I,oBAAAA,EAAY,QAAZA,EAAY,Q,gCCTzB,qEAgCO,MAAMQ,EAET,YAAqBC,EAAoCC,GAApC,KAAAD,eAAoC,KAAAC,OAEzD,MAEI,IAAIC,EAAU,IAAI,IAAa,CAC3B,eAAgB,qBAGpB,OAAOrC,KAAKoC,KACPE,KAAeC,IAAM,eAAgB,CAAEF,QAASA,IAChDG,YAIT,MAAOC,GAEH,IAAIJ,EAAU,IAAI,IAAa,CAC3B,eAAgB,qBAKpB,OAFArC,KAAKmC,aAAaH,QAEXhC,KAAKoC,KACPE,KAAeC,IAAM,iBAAkBhB,KAAKmB,UAAW,CAAEC,QAASF,IAAa,CAAEJ,QAASA,IACnGO,KAAK,YAAS,KACd5C,KAAKmC,aAAaF,cAETO,YAGT,OAAQK,GAEJ,IAAIR,EAAU,IAAI,IAAa,CAC3B,eAAgB,qBAKpB,OAFArC,KAAKmC,aAAaH,QAEXhC,KAAKoC,KACPE,KAAYC,IAAM,kBAAmBhB,KAAKmB,UAAW,CAAEG,IAAKA,IAAS,CAAER,QAASA,IACzFO,KAAK,YAAS,KACd5C,KAAKmC,aAAaF,cAETO,YAGT,aAKI,IAAIM,EAAqB,IAAI,IAG7B,OAFAA,EAASA,EAAOC,IAAI,WAAYxB,KAAKmB,UAJX,CAAC,QAAS,YAM7B1C,KAAKoC,KACPf,IAAyBkB,IAAM,uBAAwB,CAAEO,OAAQA,IACjEN,a,iCA1DAN,GAAc,sB,oBAAdA,EAAc,QAAdA,EAAc,Q,gCChC3B,oDAgCO,MAAMc,EAJb,cAKqB,KAAAC,UAAsB,GAE1C,SAASC,GACR,OAhCwBC,EAgCPnD,KAAKiD,UAAU,GAhCaG,EAgCTpD,KAAKiD,UAAU,GA/B5CC,IACP,MAAMG,EAAUH,EAAUI,SAASH,GAC7BI,EAAkBL,EAAUI,SAASF,GAG3C,OAAKC,GAAYE,EAKbA,EAAgBC,SAAWD,EAAgBC,OAAOP,UAC9C,UAIJI,EAAQxC,QAAU0C,EAAgB1C,MACrC0C,EAAgBE,UAAU,CAAER,WAAW,IAEvCM,EAAgBE,UAAU,OAZnB,OAyB+CP,GAhClD,IAAmBC,EAAqBC,G,iCA4BlCJ,I,kBAAAA,EAAkB,8EAFnB,CAAC,CAAEU,QAAS,IAAeC,YAAaX,EAAoBY,OAAO,S,gCC9B/E,oDAWO,MAAMC,EAEZ,SAASR,GAIR,GAFAS,QAAQC,IAAI,8BAES,MAAjBV,EAAQxC,OAAmC,KAAlBwC,EAAQxC,MAAc,CAElD,IAAImD,GAAmB,EAkBvB,OAhBKC,OAAO,wBAAwBC,KAAKb,EAAQxC,SAChDmD,GAAU,GAGNC,OAAO,wBAAwBC,KAAKb,EAAQxC,SAChDmD,GAAU,GAGNC,OAAO,wBAAwBC,KAAKb,EAAQxC,SAChDmD,GAAU,GAGNC,OAAO,4CAA4CC,KAAKb,EAAQxC,SACpEmD,GAAU,GAGPA,EACI,KAGD,CAAEG,kBAAkB,GAG5B,OAAO,M,iCAjCIN,I,kBAAAA,EAA0B,uDAN3B,CAAC,CACXH,QAAS,IACTC,YAAaE,EACbD,OAAO,S,gCCPT,6CAOO,MAAMQ,EALb,cAcS,KAAAC,OAAS,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,QAE1C,uBAAuBC,GAC9B,IAAIC,EAAQ,EAERC,EAAU,GACd,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAChCD,EAAQF,EAAKG,KAAOD,EAAQF,EAAKG,KAAO,GAAK,EAC7CF,GAAS,EAAMC,EAAQF,EAAKG,IAG7B,IAAIE,EAAa,CAChBC,OAAQ,KAAKV,KAAKI,GAClBO,MAAO,QAAQX,KAAKI,GACpBQ,MAAO,QAAQZ,KAAKI,GACpBS,SAAU,KAAKb,KAAKI,IAGjBU,EAAiB,EACrB,IAAK,IAAI7D,KAASwD,EACjBK,GAAmBL,EAAWxD,GAAU,EAAI,EAG7C,OADAoD,GAAgC,IAAtBS,EAAiB,GACpBC,KAAKC,MAAMX,GAGX,SAASA,GAChB,IAAIY,EAAM,EAUV,OATIZ,EAAQ,GACXY,EAAM,EACIZ,EAAQ,GAClBY,EAAM,EACIZ,GAAS,GACnBY,EAAM,EACIZ,GAAS,KACnBY,EAAM,GAEA,CACNA,IAAKA,EAAM,EACXC,IAAKpF,KAAKqE,OAAOc,IAInB,YAAYE,GACX,IAAIC,EAAWD,EAAyB,gBAAEE,aAE1C,GADAvF,KAAKwF,aAAa,EAAG,QACjBF,EAAU,CACb,IAAIG,EAAIzF,KAAK0F,SAAStB,EAA6BuB,gBAAgBL,IACnEtF,KAAKwF,aAAaC,EAAEN,IAAKM,EAAEL,MAGrB,aAAaQ,EAAOR,GAC3B,IAAK,IAAIS,EAAK,EAAGA,EAAKD,EAAOC,IAC5B7F,KAAK,MAAQ6F,GAAMT,G,iCA9DThB,I,kBAAAA,EAA4B,4OCRzC,kBACI,eACI,eACA,eACA,eACA,eACA,eACJ,OACJ,Q,MAN0B,wCACA,wCACA,wCACA,wCACA,0C,uaCN1B,6CAwBO,MAAM0B,EAEJ,SAASC,EAAgBpF,GAC9B,OAAOqF,IAAIC,UAAUC,SAASC,SAASJ,EAAQpF,GAG1C,IAAIA,GACT,OAAOqF,IAAIC,UAAUC,SAAS7E,IAAIV,GAG7B,OAAOA,GACZ,IAAIyF,EAAQzF,EAAI0F,YAAY,KAE5B,IAAc,IAAXD,EAAc,CAEf,IAAIE,EAAO,CAAC3F,EAAI4F,MAAM,EAAGH,GAAQzF,EAAI4F,MAAMH,EAAQ,IAEnD,OAAOpG,KAAKmG,SAASG,EAAK,GAAIA,EAAK,IAGnC,OAAOtG,KAAKqB,IAAIV,I,iCApBTmF,I,oBAAAA,EAAmB,QAAnBA,EAAmB,Q,gCCxBhC,4D,qBCAA,gBDUO,MAAMU,EAGX,YAAoB5G,GAAA,KAAAA,UAFpB,KAAA6G,eAAyB,EAIzB,WACEzG,KAAKJ,QAAQ8G,iBAAiB1G,MAGhC,cACEA,KAAKJ,QAAQ+G,mBAAmB3G,MAGlC,QACEA,KAAKyG,eAAgB,EAGvB,WACEzG,KAAKyG,eAAgB,G,iCAlBZD,GAAmB,Y,kBAAnBA,EAAmB,+OCVhC,sB,KAAK,8B,oECAL,2H,sBCwBM,iBACE,sBACF,Q,sBA4BE,iBACE,mNACF,Q,sBAOA,iBACE,sBACF,Q,uCAlBJ,cACE,gBACE,gBACE,sBACF,OACA,sBAAuB,8EAAvB,OACA,mCACA,uBAGF,OACA,gBACE,gBACE,uBACF,OACA,uBACA,wBAGF,OACF,O,4CAf2B,2CACA,mDAClB,mEAQyC,0BACzC,mD,yDD/BN,MAAMI,EAWX,YAAoBhH,EAA+BiH,GAA/B,KAAAjH,UAA+B,KAAAiH,aAV5C,KAAApE,QAAkB,CACvBI,IAAK,GACLiE,SAAU,GACVxB,SAAU,GACVyB,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,gBAAe,GAKjB,WACMlH,KAAKyC,QAAQyE,uBACRlH,KAAKyC,QAAQ6C,SAGtBtF,KAAKJ,QAAQuH,MAAMnH,KAAKyC,SAAS2E,KAAK3E,IACpCzC,KAAK6G,WAAWQ,SAIpB,SACErH,KAAKJ,QAAQ0H,OAAOtH,KAAKyC,QAAQI,KAAKuE,KAAK3E,IACzCzC,KAAK6G,WAAWQ,U,iCAzBTT,GAAgB,sB,kBAAhBA,EAAgB,y0C,eChC7B,gBAEE,mBAAqB,0DAA0B,EAAAW,cAC7C,gBACE,aAAI,uBAAY,OAClB,OACA,aACA,gBACE,gBACE,qBACF,OACA,mBAAmB,kEAAnB,OACF,OACA,iBACE,iBACE,sBACF,OACA,mBAAmB,iEAAnB,OACF,OACA,iBACE,iBACE,sBACF,OACA,uBAAoB,8DAApB,OACA,wBAGF,OAEA,iBACE,cACE,uBACF,OACF,OACA,cAEA,iBACE,iBACE,uBACF,OACA,oBAA6D,iEAA7D,OACF,OAEA,iBACE,4BAAe,qE,oBAAiF,OAClG,OAEA,yBAsBA,kBACE,oBAAmF,gCAAS,EAAAC,Y,oBAA5F,OACA,oB,oBACF,OACF,OACF,O,mCAxE6D,qCASpC,4CAMA,2CAMC,wCACf,wDAgBE,sDAAyC,8BAIjC,+CAAkC,8CAG9C,8CAuBkB,mDACA,mDAAqC,uB,gQCvEhE,4DAQO,MAAMC,EAMT,YAAoBZ,GAAA,KAAAA,aAFX,KAAAa,QAAkB,kC,iCAJlBD,GAAmB,Y,kBAAnBA,EAAmB,gPCRhC,gBACI,iBACI,YAAG,QAAW,OAGV,gBACI,mBAA8C,gCAAS,EAAAZ,WAAA,UAAmB,gBAAK,OACnF,OAER,OACJ,Q,MARW,0B,0KCFX,6EAiCO,MAAMc,EAEZ,YAAoBxF,EAAoCC,EAA0BwF,GAA9D,KAAAzF,eAAoC,KAAAC,OAA0B,KAAAwF,cAGlF,MAAMd,EAAkBxB,GAEvB,IAAIjD,EAAU,IAAI,IAAY,CAC7B,eAAgB,qBAKjB,OAFArC,KAAKmC,aAAaH,QAEXhC,KAAKoC,KACVE,KAAWC,IAAM,iBAAkBhB,KAAKmB,UAAU,CAAEoE,SAAUA,EAAUxB,SAAUA,IAAa,CAAEjD,QAASA,IAC1GO,KAAK,YAAS,KACd5C,KAAKmC,aAAaF,cAElBO,YACA4E,KAAMrG,IACNf,KAAK4H,YAAYC,QAAQ9G,GAElBA,IAIV,SAEC,IAAIsB,EAAU,IAAI,IAAY,CAC7B,eAAgB,qBAKjB,OAFArC,KAAKmC,aAAaH,QAEXhC,KAAKoC,KACVE,KAAWC,IAAM,kBAAmB,CAAEF,QAASA,IAC/CO,KAAK,YAAS,KACd5C,KAAKmC,aAAaF,cAElBO,YACA4E,KAAK,KACLpH,KAAK4H,YAAYC,QAAQ,S,iCAzChBF,GAAc,gC,oBAAdA,EAAc,QAAdA,EAAc,Q,gCCjC3B,4D,yBCMI,kBAAuD,QAAS,Q,oBAAT,uB,yBACvD,kBACE,qBACF,Q,oBADY,wC,6CDDT,MAAMG,EASZ,cAPS,KAAAjH,OAAiB,EACjB,KAAAkH,UAAoB,EACpB,KAAAC,iBAA2B,GAC3B,KAAAC,MAAgB,GAER,KAAAC,YAAc,IAAI,IAInC,SACMlI,KAAK+H,WACT/H,KAAKa,OAASb,KAAKa,MAEnBb,KAAKkI,YAAYC,KAAKnI,KAAKa,S,iCAfjBiH,I,kBAAAA,EAAqB,4YCPlC,cACE,gBACE,gBAAK,gCAAS,EAAAM,YACZ,eACF,OAEA,wBACA,wBAGF,OAEA,gBAEF,Q,MAZ4B,0CAIjB,sCACA,mD,4NCPX,4EAUO,MAAMC,EAmBT,YAAoBxB,GAAA,KAAAA,aAfX,KAAAa,QAAkB,gBAIlB,KAAAY,WAAqB,SAErB,KAAAC,WAAqB,SAErB,KAAAC,KAAmB,IAAWC,QASvC,WACIzI,KAAK0I,UAAY,IAAI,IAGzB,UACI1I,KAAK6G,WAAWQ,OAChBrH,KAAK0I,UAAUC,KAAM3I,KAAK4I,O,iCA3BrBP,GAA0B,Y,kBAA1BA,EAA0B,ohBCVvC,cACE,gBACE,YAAG,QAAW,OAChB,OACA,gBACE,gBACE,mBAAsB,gCAAS,EAAAxB,WAAA,UAA0G,QAAc,OACvJ,mBAAsB,gCAAS,EAAAgC,aAAmJ,QAAc,OAClM,OACF,OACF,Q,MARO,wBAIwI,2BAC/F,qEAAwI,6B,oECPxL,2G,uECec,kBAA2G,QAAqB,Q,oBAAzE,gDAAoD,mC,qBAmB7G,a,sBAEA,gBACE,eACE,YACA,sBACF,OACF,Q,sBACA,gBACE,eACE,YACA,8BACF,OACF,Q,sBACA,gBACE,eACE,YACA,sBACF,OACF,Q,sBACA,gBACE,eACE,YACA,sBACF,OACF,Q,sBACA,gBACE,eAA8E,kBAAO,OACvF,Q,sBACA,gBACE,eAAgF,oBAAS,OAC3F,Q,sBACA,gBACE,eACE,YAAO,uBACT,OACF,Q,uCAnDF,gBACE,gBACE,eAA0D,4DACxD,sBACF,OACF,OACA,gBACE,eAA4E,yBAAc,OAC5F,OAIA,gBACE,eAA6E,sBAAW,OAC1F,OACA,uBAEA,uBAMA,uBAMA,uBAMA,uBAMA,uBAGA,uBAGA,uBAMA,cACA,iBACE,gBAA2D,mBAAO,OACpE,OACF,O,uBA1CM,8BAEA,6BAMA,6BAMA,6BAMA,6BAMA,6BAGA,6BAGA,6BAQuB,0DDzDhC,MAAMC,EAUT,YAAqBlB,EAAkCmB,EAAsCC,GAAxE,KAAApB,cAAkC,KAAAmB,eAAsC,KAAAC,iBAR7F,KAAA/H,SAAmB,GACnB,KAAAgI,OAAiB,EAEjB,KAAAC,kBAA4B,EAMxBlJ,KAAKmJ,QAAU5G,IAGnB,WAEIvC,KAAKiB,SAAWjB,KAAK4H,YAAYwB,cACjCpJ,KAAKiJ,MAAQjJ,KAAK4H,YAAY3H,UAE9BD,KAAKgJ,eAAeK,aAAajC,KAAKwB,IAE3C5I,KAAKkJ,kBAAoBN,EAAKS,aAK7B,UACIrJ,KAAKgJ,eAAe3H,MAAM+F,KAAM3E,IAC5BzC,KAAK6G,WAAa7G,KAAK+I,aAAaO,KAAM,IAAkB,CAAEC,SAAU,SAAUC,MAAO,kBACzFxJ,KAAK6G,WAAW4C,QAAQhH,QAAUA,K,iCA7BjCqG,GAAoB,gC,kBAApBA,EAAoB,8jDChBjC,iBACE,gBACE,gBACE,gBACE,cACE,gBACF,OAEF,OAEA,eACE,eACE,cACE,iBACE,wBACF,OACF,OAEA,wBA0DF,OACF,OAEA,kBACE,gBACE,0BAAa,gBAAyB,SAAY,OACpD,OACF,OAEF,OACF,OACF,Q,MAnFgC,mEACjB,wDASK,2CAmE4B,2B,qgBClFhD,qDAMO,MAAMY,EAEX,YAAoBC,GAAA,KAAAA,YAGpB,UAAU9I,EAAY+I,GACpB,OAAO5J,KAAK2J,UAAUE,+BAA+BhJ,I,iCAN5C6I,GAAY,Y,mCAAZA,EAAY,W,gCCNzB,4DAYO,MAAMI,EAEZ,SAASzG,GACR,GAAqB,MAAjBA,EAAQxC,OAAmC,KAAlBwC,EAAQxC,MAAc,CAClD,IACC,MAAMkJ,EAAY,kBAAgBC,cAC5BC,EAAc,GAAK5G,EAAQxC,MAC3BqJ,EAAUH,EAAUI,qBAAqBF,EAAa,MAG5D,GAFsBF,EAAUK,cAAcF,GAG7C,OAAO,KAEP,MAAOG,GAER,OADAvG,QAAQC,IAAIsG,EAAGhH,EAAQxC,OAChB,CACNoJ,aAAa,GAIf,MAAO,CACNA,aAAa,GAIf,OAAO,M,iCAzBIH,I,kBAAAA,EAA6B,iDAN9B,CAAC,CACXpG,QAAS,IACTC,YAAamG,EACblG,OAAO,S,kOCCF,MAAM,EAiBT,YAAoBiD,GAAA,KAAAA,aAbX,KAAAa,QAAkB,GAIlB,KAAAY,WAAqB,SAErB,KAAAE,KAAmB,IAAWC,QASvC,WACIzI,KAAK0I,UAAY,IAAI4B,EAAA,EAGzB,UACItK,KAAK6G,WAAWQ,OAChBrH,KAAK0I,UAAUC,KAAM3I,KAAK4I,O,iCAzBrB,GAA0B,Y,kBAA1B,EAA0B,8ZCVvC,cACE,gBACE,YAAG,QAAW,OAChB,OACA,gBACE,gBACE,mBAAsB,gCAAS,EAAAC,aAC7B,iBAA6B,QAAc,OAC7C,OACF,OACF,OACF,Q,MATO,wBAIyC,qEACX,6B,+DCD9B,MAAM0B,EACX,UAAU1J,EAAW+I,GACnB,IAAIY,EAAO,IAAIC,MACf,IAAK,IAAI9J,KAAOE,EACd2J,EAAK3I,KAAK,CAAClB,IAAKA,EAAKE,MAAOA,EAAMF,KAEpC,OAAO6J,G,iCANED,I,+BAAAA,EAAQ,U,YCFd,MAAMG,EACT,UAAUC,EAAcC,EAAe/J,GACrC,OAAK8J,EAEEA,EAAME,OAAOC,GAAMA,EAAGF,KAAU/J,GAFpB,I,iCAFZ6J,I,iCAAAA,EAAU,U,oCCQhB,MAAMK,EAGX,cAFQ,KAAApJ,UAAiC,GAIlC,iBAAiBC,GACvB5B,KAAK2B,UAAUE,KAAKD,GAGd,mBAAmBA,GACxB,IAAIE,EAAc9B,KAAK2B,UAAUF,QAAQG,GAEzC,OAAqB,IAAjBE,IAIJ9B,KAAK2B,UAAUI,OAAOD,EAAa,IAE5B,GAGF,QACL,IAAK,MAAMF,KAAY5B,KAAK2B,UAC1BC,EAASI,QAIN,SAASgJ,GACd,IAAK,MAAMpJ,KAAY5B,KAAK2B,UAC1BC,EAASoJ,SAASA,GAIf,WACL,IAAK,MAAMpJ,KAAY5B,KAAK2B,UAC1BC,EAASK,Y,iCAnCF8I,I,oBAAAA,EAAe,QAAfA,EAAe,O,8DC0FrB,MAAM,EACZ,iBACC,MAAO,CACNE,SAAU,EACVC,UAAW,CACV,IACA,IACA,IACA,IACA,IACA,IACAH,EACA,IACA,IACA,O,kBAdS,I,+CAAA,IAAY,SA1Df,CACR,IACA,IACA,IACA,IAAYI,UACZ,IACA,IACA,IACA,IACA,IAAeA,e,gDAiDJ,EAAY,eA9CvB,IACA,IACA,IACA,IACA,EACA,IACA,IACA,IACA,IACA,IACAZ,EACA,IACA,IACAG,EACA,IACA,IACA,IACA,KAA0B,SA5B1B,IACA,IACA,IAAW,IAEX,IACA,IACA,IACA,IAAe,cAwBf,IACA,IACA,IACA,EACA,IACA,IACA,IACA,IACA,IACAH,EACA,IACA,IACAG,EACA,IACA,IACA,IACA,Q,gCC5FF,4D,2ECEQ,eAAuI,QAAc,Q,yBAAjJ,8BAAgB,wCAAmH,uB,yBAD3I,eACI,qBACJ,Q,oBADqG,4CD6BlG,MAAMU,EAIT,eAIA,YAIA,YAAY/F,IAIZ,eAIA,cAAcgG,IAId,cAAcC,GACVtL,KAAKuL,WAAaD,G,iCAzBbF,I,kBAAAA,EAA2B,2UC/BxC,gBACI,qBAGJ,Q,MAHQ,qF,wjBDwBY,CACZ,cACA,gBACH,qB,gCE5BL,qDAOO,MAAMI,EAEZ,UAAU3K,EAAY+I,GACrB,MAAMG,EAAY,kBAAgBC,cAElC,GAAa,MAATnJ,GAA2B,KAAVA,EAAc,CAClC,MAAM4K,EAAS1B,EAAUI,qBAAqBtJ,EAAO,MAErD,GAAIkJ,EAAUK,cAAcqB,GAC3B,OAAO1B,EAAU2B,OAAOD,EAAQ,oBAAkBE,eAIpD,OAAO9K,G,iCAbI2K,I,gCAAAA,EAAS,W,gCCPtB,IAAYI,EAAZ,2CAAYA,GACR,oBACA,kBAFJ,CAAYA,MAAU","file":"0.chunk.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router} from '@angular/router';\nimport { AuthService} from '../service/auth.service';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class AdminGuardService implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/profile' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isLoggedIn()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/login' ]);\n    \n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpBackend } from '@angular/common/http';\n\n@Injectable()\nexport class HttpBackendClient extends HttpClient {\n    constructor( handler: HttpBackend ) {\n        super( handler );\n    }\n}","import { Input, Component, OnInit } from '@angular/core';\n\nimport { LocalizationService } from '../../service/localization.service';\n\n@Component({\n  \n  selector: 'localize',\n  templateUrl: './localize.component.html',\n  styleUrls: []\n})\nexport class LocalizeComponent implements OnInit {\n  @Input() key: string;\n  text: string;\n    \n  constructor(private service: LocalizationService) { }\n\n  ngOnInit(): void {\n    this.text = this.service.decode(this.key);\n  }\n}\n","{{text}}","import { Pipe, PipeTransform } from '@angular/core';\nimport { LocalizationService } from '../service/localization.service';\n\n@Pipe({name: 'localize'})\nexport class LocalizePipe implements PipeTransform {\n  constructor(private service: LocalizationService) { }\n\t\n  transform(value: string): string {\n    return this.service.decode(value);\n  }\n}\n\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\nimport { Injectable } from '@angular/core';\n\nimport { CookieService } from 'ngx-cookie-service';\nimport { User } from '../model/user';\n\n@Injectable()\nexport class AuthService {\n\tprivate user: User = {\n\t\tloggedIn: false,\n\t\tuserName: '',\n\t\troles: []\n\t};\n\n\tconstructor(private service: CookieService) {\n\n\t\tif (this.service.check(\"user\")) {\n\t\t\tlet cookieData: string = this.service.get(\"user\")\n\n\t\t\tlet cookieDataJSON: any = JSON.parse(cookieData);\n\n\t\t\tthis.user.userName = cookieDataJSON.userName;\n\t\t\tthis.user.roles = cookieDataJSON.roles;\n\t\t\tthis.user.loggedIn = true;\n\t\t}\n\t}\n\n\tsetUser(user: User): void {\n\t\tthis.user = user;\n\t}\n\n\tremoveUser(): void {\n\t\tthis.user = {\n\t\t\tloggedIn: false,\n\t\t\tuserName: '',\n\t\t\troles: []\n\t\t};\n\t}\n\n\tgetUserName(): string {\n\t\treturn this.user.userName;\n\t}\n\n\tisLoggedIn(): boolean {\n\t\treturn this.user.loggedIn;\n\t}\n\n\tisAdmin(): boolean {\n\t\treturn this.user.roles.indexOf(\"geoprism.admin.Administrator\") !== -1;\n\t}\n\n\tisWorker(): boolean {\n\t\treturn this.isAdmin() || this.user.roles.indexOf(\"geoprism.admin.DashboardBuilder\") !== -1;\n\t}\n}\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nexport interface IEventListener {\r\n    start(): void;\r\n    complete(): void;\r\n}\r\n\r\n@Injectable()\r\nexport class EventService {\r\n    private listeners: IEventListener[] = [];\r\n\r\n    public constructor() { }\r\n\r\n    public registerListener( listener: IEventListener ): void {\r\n        this.listeners.push( listener );\r\n    }\r\n\r\n    public deregisterListener( listener: IEventListener ): boolean {\r\n        let indexOfItem = this.listeners.indexOf( listener );\r\n\r\n        if ( indexOfItem === -1 ) {\r\n            return false;\r\n        }\r\n\r\n        this.listeners.splice( indexOfItem, 1 );\r\n\r\n        return true;\r\n    }\r\n\r\n    public start(): void {\r\n        for ( const listener of this.listeners ) {\r\n            listener.start();\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for ( const listener of this.listeners ) {\r\n            listener.complete();\r\n        }\r\n    }\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from './event.service';\n\nimport { Profile } from '../model/profile';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ProfileService {\n\n    constructor( private eventService: EventService, private http: HttpClient ) { }\n\n    get(): Promise<Profile> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        return this.http\n            .post<Profile>( acp + '/account/get', { headers: headers } )\n            .toPromise()\n    }\n\n\n    apply( profile: Profile ): Promise<Profile> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Profile>( acp + '/account/apply', JSON.stringify( { account: profile } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n\n    unlock( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/account/unlock', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n\n    tasksCount(): Promise<{tasksCount:number}> {\n        \n        const statuses:string[] = ['Error', 'Failed'];\n\n        // status options: PROCESSING, COMPLETE, ERROR, QUEUED\n        let params: HttpParams = new HttpParams();\n        params = params.set('statuses', JSON.stringify(statuses));\n\n        return this.http\n            .get<{tasksCount:number}>(acp + '/project/tasks-count', { params: params })\n            .toPromise()\n    }\n}\n","import { Directive, Input } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidationErrors, FormGroup } from '@angular/forms';\n\n// custom validator to check that two fields match\nexport function MustMatch(controlName: string, matchingControlName: string) {\n\treturn (formGroup: FormGroup) => {\n\t\tconst control = formGroup.controls[controlName];\n\t\tconst matchingControl = formGroup.controls[matchingControlName];\n\n\t\t// return null if controls haven't initialised yet\n\t\tif (!control || !matchingControl) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// return null if another validator has already found an error on the matchingControl\n\t\tif (matchingControl.errors && !matchingControl.errors.mustMatch) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// set error on matchingControl if validation fails\n\t\tif (control.value !== matchingControl.value) {\n\t\t\tmatchingControl.setErrors({ mustMatch: true });\n\t\t} else {\n\t\t\tmatchingControl.setErrors(null);\n\t\t}\n\t}\n}\n\n@Directive({\n\tselector: '[mustMatch]',\n\tproviders: [{ provide: NG_VALIDATORS, useExisting: MustMatchDirective, multi: true }]\n})\nexport class MustMatchDirective implements Validator {\n\t@Input('mustMatch') mustMatch: string[] = [];\n\n\tvalidate(formGroup: FormGroup): ValidationErrors {\n\t\treturn MustMatch(this.mustMatch[0], this.mustMatch[1])(formGroup);\n\t}\n}","import { Validator, NG_VALIDATORS, AbstractControl } from '@angular/forms';\nimport { Directive } from '@angular/core';\n\n@Directive({\n\tselector: '[passwordValidator]',\n\tproviders: [{\n\t\tprovide: NG_VALIDATORS,\n\t\tuseExisting: PasswordValidatorDirective,\n\t\tmulti: true\n\t}]\n})\nexport class PasswordValidatorDirective implements Validator {\n\n\tvalidate(control: AbstractControl): { [key: string]: any } | null {\n\n\t\tconsole.log(\"Checking password strength\");\n\n\t\tif (control.value != null && control.value !== '') {\n\n\t\t\tlet isValid: boolean = true;\n\n\t\t\tif (!RegExp('(?=.*[0-9].*[0-9]).*').test(control.value)) {\n\t\t\t\tisValid = false;\n\t\t\t}\n\n\t\t\tif (!RegExp('(?=.*[a-z].*[a-z]).*').test(control.value)) {\n\t\t\t\tisValid = false;\n\t\t\t}\n\n\t\t\tif (!RegExp('(?=.*[A-Z].*[A-Z]).*').test(control.value)) {\n\t\t\t\tisValid = false;\n\t\t\t}\n\n\t\t\tif (!RegExp('(?=.*[~!@#$%^&*()_-].*[~!@#$%^&*()_-]).*').test(control.value)) {\n\t\t\t\tisValid = false;\n\t\t\t}\n\n\t\t\tif (isValid) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn { passwordStrength: true };\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","\nimport { Component, OnChanges, Input, SimpleChange } from '@angular/core';\n\n@Component({\n\tselector: 'password-strength-bar',\n\ttemplateUrl: './password-strength-bar.component.html',\n\tstyleUrls: ['./password-strength-bar.component.css']\n})\nexport class PasswordStrengthBarComponent implements OnChanges {\n\n\t@Input() passwordToCheck: string;\n\tbar0: string;\n\tbar1: string;\n\tbar2: string;\n\tbar3: string;\n\tbar4: string;\n\n\tprivate colors = ['#F00', '#F90', '#FF0', '#9F0', '#0F0'];\n\n\tprivate static measureStrength(pass: string) {\n\t\tlet score = 0;\n\t\t// award every unique letter until 5 repetitions  \n\t\tlet letters = {};\n\t\tfor (let i = 0; i < pass.length; i++) {\n\t\t\tletters[pass[i]] = (letters[pass[i]] || 0) + 1;\n\t\t\tscore += 5.0 / letters[pass[i]];\n\t\t}\n\t\t// bonus points for mixing it up  \n\t\tlet variations = {\n\t\t\tdigits: /\\d/.test(pass),\n\t\t\tlower: /[a-z]/.test(pass),\n\t\t\tupper: /[A-Z]/.test(pass),\n\t\t\tnonWords: /\\W/.test(pass),\n\t\t};\n\n\t\tlet variationCount = 0;\n\t\tfor (let check in variations) {\n\t\t\tvariationCount += (variations[check]) ? 1 : 0;\n\t\t}\n\t\tscore += (variationCount - 1) * 10;\n\t\treturn Math.trunc(score);\n\t}\n\n\tprivate getColor(score: number) {\n\t\tlet idx = 0;\n\t\tif (score > 90) {\n\t\t\tidx = 4;\n\t\t} else if (score > 70) {\n\t\t\tidx = 3;\n\t\t} else if (score >= 40) {\n\t\t\tidx = 2;\n\t\t} else if (score >= 20) {\n\t\t\tidx = 1;\n\t\t}\n\t\treturn {\n\t\t\tidx: idx + 1,\n\t\t\tcol: this.colors[idx]\n\t\t};\n\t}\n\n\tngOnChanges(changes: { [propName: string]: SimpleChange }): void {\n\t\tvar password = changes['passwordToCheck'].currentValue;\n\t\tthis.setBarColors(5, '#DDD');\n\t\tif (password) {\n\t\t\tlet c = this.getColor(PasswordStrengthBarComponent.measureStrength(password));\n\t\t\tthis.setBarColors(c.idx, c.col);\n\t\t}\n\t}\n\tprivate setBarColors(count, col) {\n\t\tfor (let _n = 0; _n < count; _n++) {\n\t\t\tthis['bar' + _n] = col;\n\t\t}\n\t}\n\n}  \n","<div style=\"margin: 11px;\" id=\"strength\" #strength>\n    <ul id=\"strengthBar\">\n        <li class=\"point\" [style.background-color]=\"bar0\"></li>\n        <li class=\"point\" [style.background-color]=\"bar1\"></li>\n        <li class=\"point\" [style.background-color]=\"bar2\"></li>\n        <li class=\"point\" [style.background-color]=\"bar3\"></li>\n        <li class=\"point\" [style.background-color]=\"bar4\"></li>\n    </ul>\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\n\ndeclare var com: any\n\n@Injectable()\nexport class LocalizationService {\n\n  public localize(bundle: string, key: string): string {\n    return com.runwaysdk.Localize.localize(bundle, key);\n  }\n    \n  public get(key: string): string {\n    return com.runwaysdk.Localize.get(key);\n  }\n  \n  public decode(key: string): string {\n    let index = key.lastIndexOf('.');\n    \n    if(index !== -1) {\n      \n      let temp = [key.slice(0, index), key.slice(index + 1)]\n    \n      return this.localize(temp[0], temp[1]);\n    }\n    else {\n      return this.get(key);\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\nimport { EventService, IEventListener } from '../../service/event.service';\n\n@Component({\n  \n  selector: 'loading-bar',\n  templateUrl: './loading-bar.component.html',\n  styleUrls: []\n})\nexport class LoadingBarComponent implements OnInit, IEventListener {\n  showIndicator: boolean = false;\n\n  constructor(private service: EventService) { }\n\n  ngOnInit(): void {\n    this.service.registerListener(this);\n  }\n  \n  ngOnDestroy(): void {\n    this.service.deregisterListener(this);\n  }\n  \n  start(): void {\n    this.showIndicator = true;    \n  }\n  \n  complete(): void {\n    this.showIndicator = false;    \n  }    \n}\n","<div *ngIf=\"showIndicator\" class=\"standby-overlay\" style=\"height: 100%; width: 100%; z-index: 100;\">\n\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component} from '@angular/core';\n\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { Profile } from '../../model/profile';\nimport { ProfileService } from '../../service/profile.service';\n\n\n@Component({  \n  selector: 'profile',\n  templateUrl: './profile.component.html',\n  styles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}']\n})\nexport class ProfileComponent {\n  public profile:Profile = {\n    oid: '',\n    username: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    changePassword:false    \n  };\n  \n  constructor(private service:ProfileService, public bsModalRef: BsModalRef) {}\n  \n  onSubmit():void {\n    if(!this.profile.changePassword) {\n      delete this.profile.password;\n    }\n\t  \n    this.service.apply(this.profile).then(profile => {\n      this.bsModalRef.hide();\n    });\n  }  \n  \n  cancel():void {\n    this.service.unlock(this.profile.oid).then(profile => {\n      this.bsModalRef.hide();\n    });\n  }  \n}\n","<div class=\"modal-body\">\n\n  <form #form=\"ngForm\" (ngSubmit)=\"form.valid && onSubmit()\" [mustMatch]=\"['password', 'certainPassword']\">\n    <div class=\"heading\">\n      <h3>User Profile</h3>\n    </div>\n    <hr>\n    <div class=\"form-group\">\n      <label>\n        <localize key=\"account.firstname\"></localize>\n      </label>\n      <input type=\"text\" [(ngModel)]=\"profile.firstName\" name=\"firstname\" required>\n    </div>\n    <div class=\"form-group\">\n      <label>\n        <localize key=\"account.lastname\"></localize>\n      </label>\n      <input type=\"text\" [(ngModel)]=\"profile.lastName\" name=\"lastname\" required>\n    </div>\n    <div class=\"form-group\">\n      <label>\n        <localize key=\"account.email\"></localize>\n      </label>\n      <input type=\"email\" [(ngModel)]=\"profile.email\" name=\"email\" #aemail=\"ngModel\" required email>\n      <div *ngIf=\"aemail.errors?.email\" class=\"inline-error-message\">\n        <localize key=\"account.email.validation\"></localize>\n      </div>\n    </div>\n\n    <div class=\"heading\">\n      <h3>\n        <localize key=\"account.info.heading\"></localize>\n      </h3>\n    </div>\n    <hr>\n\n    <div class=\"form-group\">\n      <label>\n        <localize key=\"account.username\"></localize>\n      </label>\n      <input [disabled]=\"profile.username === 'admin'\" type=\"text\" [(ngModel)]=\"profile.username\" name=\"username\" required>\n    </div>\n\n    <div class=\"form-group\">\n      <boolean-field [(value)]=\"profile.changePassword\" [label]=\"'account.changePassword' | localize\"></boolean-field>\n    </div>\n\n    <div *ngIf=\"profile.changePassword\">\n      <div class=\"form-group\">\n        <label>\n          <localize key=\"account.password\"></localize>\n        </label>\n        <input type=\"password\" [(ngModel)]=\"profile.password\" name=\"password\" #password=\"ngModel\" required minlength=\"5\" maxlength=\"50\" passwordValidator>\n        <password-strength-bar [passwordToCheck]=\"profile.password\"></password-strength-bar>\n        <div *ngIf=\"password.errors?.passwordStrength\" class=\"inline-error-message\">\n          The password must be at least 14 characters in length and must contain at least: Two uppercase letters [A-Z], two lowercase letters [a-z], two digits [0-9], and two special characters [e.g.: !@#$*&]\n        </div>                  \n      </div>\n      <div class=\"form-group\">\n        <label>\n          <localize key=\"account.certainPassword\"></localize>\n        </label>\n        <input type=\"password\" name=\"certainPassword\" [ngModel]=\"certainPassword\" #certainPassword=\"ngModel\" required />\n        <div *ngIf=\"certainPassword.errors && certainPassword.errors.mustMatch\" class=\"inline-error-message\">\n          <localize key=\"account.certainPassword.validation\"></localize>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n      <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n    </div>\n  </form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\n@Component( {\n    selector: 'error-modal',\n    templateUrl: './error-modal.component.html',\n    styleUrls: ['./error-modal.css']\n} )\nexport class ErrorModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string = 'Unable to complete your action';\n\n    constructor( public bsModalRef: BsModalRef ) { }\n}\n","<div class=\"modal-body error-modal text-center\">\n    <form class=\"modal-form\">\n        <p>{{message}}</p>\n\n        <!-- <div class=\"row\"> -->\n            <div class=\"button-holder\">\n                <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Close</button>\n            </div>\n        <!-- </div> -->\n    </form>\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from './event.service';\n\nimport { AuthService } from './auth.service';\nimport { User } from '../model/user';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SessionService {\n\n\tconstructor(private eventService: EventService, private http: HttpClient, private authService: AuthService) {\n\t}\n\n\tlogin(username: string, password: string): Promise<User> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<User>(acp + '/session/login', JSON.stringify({ username: username, password: password }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t\t\t.then((user: User) => {\n\t\t\t\tthis.authService.setUser(user);\n\n\t\t\t\treturn user;\n\t\t\t})\n\t}\n\n\tlogout(): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/session/logout', { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t\t\t.then(() => {\n\t\t\t\tthis.authService.setUser(null);\n\n\t\t\t\treturn;\n\t\t\t})\n\t}\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n\tselector: 'boolean-field',\n\ttemplateUrl: './boolean-field.component.html',\n\tstyles: ['.modal-form .holder .check-block .chk-area {margin: 10px 0px 0 0;}']\n})\nexport class BooleanFieldComponent {\n\n\t@Input() value: boolean = false;\n\t@Input() disabled: boolean = false;\n\t@Input() localizeLabelKey: string = \"\"; // localization key used to localize in the component template\n\t@Input() label: string = \"\"; // raw string input\n\n\t@Output() public valueChange = new EventEmitter<boolean>();\n\n\tconstructor() { }\n\n\ttoggle(): void {\n\t\tif (!this.disabled) {\n\t\t\tthis.value = !this.value;\n\n\t\t\tthis.valueChange.emit(this.value);\n\t\t}\n\t}\n}","<div>\n  <div class=\"check-block form-group\">\n    <div (click)=\"toggle()\" [ngClass]=\"{'chk-checked' : value}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n      <span></span>\n    </div>\n\n    <label *ngIf=\"label.length > 0\" class=\"checkbox-label\">{{label}}</label>\n    <label *ngIf=\"localizeLabelKey.length > 0\" class=\"checkbox-label\">\n      <localize key=\"{{localizeLabelKey}}\"></localize>\n    </label>\n  </div>\n  <!-- Force a line break somehow -->\n  <div class=\"row\">\n  </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { ModalTypes } from '../../model/modal';\n\n@Component( {\n    selector: 'basic-confirm-modal',\n    templateUrl: './basic-confirm-modal.component.html',\n    styleUrls: []\n} )\nexport class BasicConfirmModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string = 'Are you sure?';\n\n    @Input() data: any;\n\n    @Input() submitText: string = 'Submit';\n\n    @Input() cancelText: string = 'Cancel'; \n\n    @Input() type: ModalTypes = ModalTypes.warning;\n\n    /*\n     * Called on confirm\n     */\n    public onConfirm: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onConfirm = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onConfirm.next( this.data );\n    }\n}\n","<div>\n  <div class=\"modal-body\" style=\"margin-top: 30px; margin-bottom: 30px;\">\n    <p>{{message}}</p>\n  </div>\n  <div class=\"modal-footer\">\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">{{cancelText}}</button>\n      <button type=\"button\" (click)=\"confirm()\" [ngClass]=\"type === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">{{submitText}}</button>\n    </div>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ProfileService } from '../../service/profile.service';\nimport { ProfileComponent } from '../profile/profile.component';\n\nimport { AuthService } from '../../service/auth.service';\n\ndeclare var acp: any;\n\n@Component( {\n\n    selector: 'uasdm-header',\n    templateUrl: './header.component.html',\n    styleUrls: ['./header.css']\n} )\nexport class UasdmHeaderComponent {\n    context: string;\n    userName: string = \"\";\n    admin: boolean = false;\n    bsModalRef: BsModalRef;\n    notificationCount: number = 0;\n\n    @Input() title: string;\n\n\n    constructor( private authService: AuthService, private modalService: BsModalService, private profileService: ProfileService ) {\n        this.context = acp;\n    }\n\n    ngOnInit(): void {\n\n        this.userName = this.authService.getUserName();\n        this.admin = this.authService.isAdmin();\n\n        this.profileService.tasksCount().then(data => {\n\n\t\t\tthis.notificationCount = data.tasksCount\n\n\t\t});\n    }\n\n    account(): void {\n        this.profileService.get().then( profile => {\n            this.bsModalRef = this.modalService.show( ProfileComponent, { backdrop: 'static', class: 'gray modal-lg' } );\n            this.bsModalRef.content.profile = profile;\n        } );\n    }\n\n}\n","<!-- HEADER AND NAVBAR -->\n<header>\n  <nav class=\"navbar navbar-default\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n        <a class=\"navbar-brand\" href=\"{{context}}/project/management#/menu\" title=\"Home\">\n          <img [src]=\"context + '/logo/view?id=logo'\" />\n        </a>\n        <!-- <p class=\"navbar-brand\" style=\"margin: 0;\" >{{title}}</p> -->\n      </div>\n\n      <ul class=\"nav navbar-nav navbar-right\">\n        <li dropdown>\n          <a class=\"dropdown-toggle\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" dropdownToggle>\n            <span class=\"glyphicon glyphicon-menu-hamburger\">\n              <span *ngIf=\"notificationCount > 0\" class=\"task-badge\" [ngClass]=\"{'double-digit': notificationCount > 9}\">{{notificationCount}}</span>\n            </span>\n          </a>\n\n          <ul *dropdownMenu class=\"dropdown-menu\">\n            <li role=\"menuitem\">\n              <a id=\"account-btn\" class=\"user-command-link link-active\" (click)=\"account()\">\n                <localize key=\"userDashboards.account\"></localize>\n              </a>\n            </li>\n            <li role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/site/tasks\" routerLinkActive=\"active\">Workflow Tasks</a>\n            </li>\n            <!-- <li role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/site/upload\" routerLinkActive=\"active\">Collection Upload</a>\n            </li> -->\n            <li role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/site/viewer\" routerLinkActive=\"active\">Site Viewer</a>\n            </li>\n            <hr *ngIf=\"admin\">\n\n            <li *ngIf=\"admin\" role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/admin/accounts\" routerLinkActive=\"active\">\n                <i></i>\n                <localize key=\"accounts.link\"></localize>\n              </a>\n            </li>\n            <li *ngIf=\"admin\" role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/admin/session-events\" routerLinkActive=\"active\">\n                <i></i>\n                Session event log\n              </a>\n            </li>            \n            <li *ngIf=\"admin\" role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/admin/logos\" routerLinkActive=\"active\">\n                <i></i>\n                <localize key=\"Icons\"></localize>\n              </a>\n            </li>\n            <li *ngIf=\"admin\" role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/admin/email\" routerLinkActive=\"active\">\n                <i></i>\n                <localize key=\"email.link\"></localize>\n              </a>\n            </li>\n            <li *ngIf=\"admin\" role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/site/sensors\" routerLinkActive=\"active\">Sensors</a>\n            </li>\n            <li *ngIf=\"admin\" role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/site/platforms\" routerLinkActive=\"active\">Platforms</a>\n            </li>\n            <li *ngIf=\"admin\" role=\"menuitem\">\n              <a class=\"dropdown-item\" routerLink=\"/admin/system-info\" routerLinkActive=\"active\">\n                <i></i>System Info\n              </a>\n            </li>\n\n            <hr>\n            <li role=\"menuitem\">\n              <a class=\"dropdown-item\" href=\"{{context}}/session/logout\">Log out</a>\n            </li>\n          </ul>\n        </li>\n      </ul>\n\n      <div class=\"navbar-right user-indicator\">\n        <p class=\"navbar-text\">\n          Logged in as <b style=\"color: white;\">{{userName}}</b>\n        </p>\n      </div>\n\n    </div>\n  </nav>\n</header>\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\n \n@Pipe({\n  name: 'safeHtml'\n})\nexport class SafeHtmlPipe implements PipeTransform {\n \n  constructor(private sanitizer: DomSanitizer) {\n  }\n \n  transform(value: any, args?: any): any {\n    return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n  }\n \n}","import { Validator, NG_VALIDATORS, AbstractControl } from '@angular/forms';\nimport { Directive } from '@angular/core';\nimport { PhoneNumberUtil } from 'google-libphonenumber';\n\n@Directive({\n\tselector: '[phoneNumber]',\n\tproviders: [{\n\t\tprovide: NG_VALIDATORS,\n\t\tuseExisting: PhoneNumberValidatorDirective,\n\t\tmulti: true\n\t}]\n})\nexport class PhoneNumberValidatorDirective implements Validator {\n\n\tvalidate(control: AbstractControl): { [key: string]: any } | null {\n\t\tif (control.value != null && control.value !== '') {\n\t\t\ttry {\n\t\t\t\tconst phoneUtil = PhoneNumberUtil.getInstance();\n\t\t\t\tconst phoneNumber = '' + control.value + '';\n\t\t\t\tconst pNumber = phoneUtil.parseAndKeepRawInput(phoneNumber, 'US');\n\t\t\t\tconst isValidNumber = phoneUtil.isValidNumber(pNumber);\n\n\t\t\t\tif (isValidNumber) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e, control.value);\n\t\t\t\treturn {\n\t\t\t\t\tphoneNumber: true\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tphoneNumber: true\n\t\t\t};\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { ModalTypes } from '../../model/modal';\n\n@Component( {\n    selector: 'notification-modal',\n    templateUrl: './notification-modal.component.html',\n    styleUrls: []\n} )\nexport class NotificationModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string = '';\n\n    @Input() data: any;\n\n    @Input() submitText: string = 'Submit';\n\n    @Input() type: ModalTypes = ModalTypes.warning;\n\n    /*\n     * Called on confirm\n     */\n    public onConfirm: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onConfirm = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onConfirm.next( this.data );\n    }\n}\n","<div>\n  <div class=\"modal-body\" style=\"margin-top: 30px; margin-bottom: 30px;\">\n    <p>{{message}}</p>\n  </div>\n  <div class=\"modal-footer\">\n    <div class=\"btn-holder\" style=\"text-align: right;\">\n      <button type=\"button\" (click)=\"confirm()\" [ngClass]=\"type === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n        <span class=\"ui-button-text\">{{submitText}}</span>\n      </button>\n    </div>\n  </div>\n</div>","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'keys',\n  pure: false\n})\nexport class KeysPipe implements PipeTransform {\n  transform(value:any, args:string[]) : any {\n    let keys = new Array<any>();\n    for (let key in value) {\n      keys.push({key: key, value: value[key]});\n    }\n    return keys;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({name: 'filter'})\nexport class FilterPipe implements PipeTransform {\n    transform(items: any[], prop: string,  value: string): any[] {  \n      if (!items) return [];        \n      \n      return items.filter(it => it[prop] === value);\n    }\n}\n\n","import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { Progress } from '../model/progress';\n\nexport interface IProgressListener {\n  start(): void;\n  progress(progress:Progress):void;  \n  complete(): void;\n}\n\n@Injectable()\nexport class ProgressService {\n  private listeners: IProgressListener[] = [];\n  \n  public constructor() {}\n  \n  public registerListener(listener: IProgressListener): void {\n   this.listeners.push(listener);\n  }\n  \n  public deregisterListener(listener: IProgressListener): boolean {\n    let indexOfItem = this.listeners.indexOf(listener);\n\n    if (indexOfItem === -1) {\n      return false;\n    }\n\n    this.listeners.splice(indexOfItem, 1);\n\n    return true;\n  }\n  \n  public start(): void {\n    for (const listener of this.listeners) {\n      listener.start();\n    }\n  }\n  \n  public progress(progress:Progress):void {\n    for (const listener of this.listeners) {\n      listener.progress(progress);\n    }\t  \n  }  \n  \n  public complete(): void {\n    for (const listener of this.listeners) {\n      listener.complete();\n    }\n  }  \n}","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { CookieService } from 'ngx-cookie-service';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { AccordionModule } from 'ngx-bootstrap/accordion';\nimport { AlertModule } from 'ngx-bootstrap/alert';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\nimport { UasdmHeaderComponent } from './component/header/header.component';\nimport { LocalizeComponent } from './component/localize/localize.component';\nimport { LoadingBarComponent } from './component/loading-bar/loading-bar.component';\nimport { BooleanFieldComponent } from './component/boolean-field/boolean-field.component';\nimport { ProfileComponent } from './component/profile/profile.component';\nimport { ErrorModalComponent } from './component/modal/error-modal.component';\nimport { BasicConfirmModalComponent } from './component/modal/basic-confirm-modal.component';\nimport { NotificationModalComponent } from './component/modal/notification-modal.component';\nimport { ModalStepIndicatorComponent } from './modal/step-indicator/modal-step-indicator.component';\nimport { PasswordStrengthBarComponent } from './component/password-strength-bar/password-strength-bar.component';\n\nimport { LocalizePipe } from './pipe/localize.pipe';\nimport { KeysPipe } from './pipe/keys.pipe';\nimport { PhonePipe } from './pipe/phone.pipe';\nimport { FilterPipe } from './pipe/filter.pipe';\nimport { SafeHtmlPipe } from './pipe/safe-html.pipe';\n\nimport { MustMatchDirective } from './directive/must-match.directive';\nimport { PhoneNumberValidatorDirective } from './directive/phone-number.directive'; \nimport { PasswordValidatorDirective } from './directive/password-validator.directive';\n\nimport { ProgressService } from './service/progress.service';\nimport { EventService } from './service/event.service';\nimport { LocalizationService } from './service/localization.service';\nimport { AuthService } from './service/auth.service';\nimport { ProfileService } from './service/profile.service';\nimport { SessionService } from './service/session.service';\nimport { AdminGuardService, AuthGuard } from './service/guard.service';\nimport { HttpBackendClient } from './service/http-backend-client.service';\n\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tRouterModule,\n\t\tFormsModule,\n\t\tModalModule.forRoot(),\n\t\tAlertModule,\n\t\tBsDropdownModule,\n\t\tTypeaheadModule,\n\t\tAccordionModule,\n\t\tCollapseModule.forRoot()\n\t],\n\tdeclarations: [\n\t\tUasdmHeaderComponent,\n\t\tLoadingBarComponent,\n\t\tProfileComponent,\n\t\tBasicConfirmModalComponent,\n\t\tNotificationModalComponent,\n\t\tErrorModalComponent,\n\t\tLocalizeComponent,\n\t\tBooleanFieldComponent,\n\t\tModalStepIndicatorComponent,\n\t\tPasswordStrengthBarComponent,\n\t\tKeysPipe,\n\t\tLocalizePipe,\n\t\tPhonePipe,\n\t\tFilterPipe,\n\t\tSafeHtmlPipe,\n\t\tMustMatchDirective,\n\t\tPhoneNumberValidatorDirective,\n\t\tPasswordValidatorDirective\n\t],\n\texports: [\n\t\tUasdmHeaderComponent,\n\t\tLoadingBarComponent,\n\t\tBasicConfirmModalComponent,\n\t\tNotificationModalComponent,\n\t\tErrorModalComponent,\n\t\tBooleanFieldComponent,\n\t\tLocalizeComponent,\n\t\tModalStepIndicatorComponent,\n\t\tPasswordStrengthBarComponent,\n\t\tKeysPipe,\n\t\tLocalizePipe,\n\t\tPhonePipe,\n\t\tFilterPipe,\n\t\tSafeHtmlPipe,\n\t\tMustMatchDirective,\n\t\tPhoneNumberValidatorDirective,\n\t\tPasswordValidatorDirective\n\t],\n\tentryComponents: [\n\t\tErrorModalComponent,\n\t\tBasicConfirmModalComponent,\n\t\tNotificationModalComponent,\n\t\tLoadingBarComponent,\n\t\tProfileComponent\n\t]\n})\nexport class SharedModule {\n\tstatic forRoot(): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: SharedModule,\n\t\t\tproviders: [\n\t\t\t\tCookieService,\n\t\t\t\tAuthService,\n\t\t\t\tSessionService,\n\t\t\t\tProfileService,\n\t\t\t\tLocalizationService,\n\t\t\t\tEventService,\n\t\t\t\tProgressService,\n\t\t\t\tAdminGuardService,\n\t\t\t\tAuthGuard,\n\t\t\t\tHttpBackendClient\n\t\t\t]\n\t\t};\n\t}\n}","import { Component, Input, ChangeDetectionStrategy, SimpleChanges } from '@angular/core';\n\nimport { Step, StepConfig } from './modal-step-indicator';\n\nimport { \n    fadeInOnEnterAnimation,\n    fadeOutOnLeaveAnimation\n } from 'angular-animations';\n\n// HOW TO USE:\n// Set the component in a template:\n//\n//   <modal-step-indicator [stepConfig]=\"stepConfig\"></modal-step-indicator>\n//\n// Pass a stepConfig object to the compenent as an input param. Example object:\n//\n// this.modalStepConfig = {\"steps\": [\n//      {\"label\":\"Category\", \"active\":true, \"enabled\":false},\n//      {\"label\":\"Final\", \"active\":true, \"enabled\":true}\n// ]};\n\n@Component( { \n    selector: 'modal-step-indicator',\n    templateUrl: './modal-step-indicator.component.html',\n    styleUrls: ['./modal-step-indicator.css'],\n        animations: [\n        fadeInOnEnterAnimation(),\n        fadeOutOnLeaveAnimation() \n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n} )\nexport class ModalStepIndicatorComponent {\n\n    @Input() stepConfig: StepConfig\n\n    constructor( ) { \n\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    setActiveStep(step: Step):void {\n\n    }\n\n    setStepConfig(config: StepConfig):void {\n        this.stepConfig = config;\n    }\n}\n","<div class=\"step-indicator\" >\n    <ul *ngIf=\"stepConfig && stepConfig.steps && stepConfig.steps.length > 0\" class=\"list-inline nav nav-justified\">\n        <li [@fadeInOnEnter] class=\"nav-item\" [ngClass]=\"{'active':step.active, 'enabled':step.enabled}\" *ngFor=\"let step of stepConfig.steps\">{{step.label}}</li>\n    </ul>\n</div>","import { Pipe, PipeTransform } from '@angular/core';\nimport { PhoneNumberUtil, PhoneNumberFormat } from 'google-libphonenumber';\n\n\n@Pipe({\n\tname: 'phone'\n})\nexport class PhonePipe implements PipeTransform {\n\n\ttransform(value: any, args?: string): any {\n\t\tconst phoneUtil = PhoneNumberUtil.getInstance();\n\n\t\tif (value != null && value !== '') {\n\t\t\tconst number = phoneUtil.parseAndKeepRawInput(value, 'US');\n\n\t\t\tif (phoneUtil.isValidNumber(number)) {\n\t\t\t\treturn phoneUtil.format(number, PhoneNumberFormat.INTERNATIONAL);\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t}\n\n}\n","export enum ModalTypes {\n    \"warning\" = \"WARNING\",\n    \"danger\" = \"DANGER\"\n}"],"sourceRoot":""}