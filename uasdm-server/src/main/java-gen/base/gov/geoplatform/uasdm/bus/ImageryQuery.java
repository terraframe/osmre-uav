package gov.geoplatform.uasdm.bus;

@com.runwaysdk.business.ClassSignature(hash = -1697573698)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Imagery.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class ImageryQuery extends gov.geoplatform.uasdm.bus.UasComponentQuery

{

  public ImageryQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
    super(componentQueryFactory);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public ImageryQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
    super(valueQuery);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return gov.geoplatform.uasdm.bus.Imagery.CLASS;
  }
  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends Imagery> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<Imagery>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition project()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_project()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition project(gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery)
  {
    return this.getBusinessQuery().isChildIn(projectHasImageryQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_project(gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(projectHasImageryQuery);
  }

  public com.runwaysdk.query.Condition project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(projectQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(projectQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery, gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery)
  {
    projectHasImageryQuery.AND(projectHasImageryQuery.hasParent(projectQuery));
    return this.getBusinessQuery().isChildIn(projectHasImageryQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery, gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery)
  {
    projectHasImageryQuery.AND(projectHasImageryQuery.hasParent(projectQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(projectHasImageryQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_project()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_project()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_project(gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery)
  {
    return this.getBusinessQuery().isNotChildIn(projectHasImageryQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_project(gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(projectHasImageryQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(projectQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(projectQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery, gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery)
  {
    projectHasImageryQuery.AND(projectHasImageryQuery.hasParent(projectQuery));
    return this.getBusinessQuery().isNotChildIn(projectHasImageryQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery, gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery)
  {
    projectHasImageryQuery.AND(projectHasImageryQuery.hasParent(projectQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(projectHasImageryQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface ImageryQueryReferenceIF extends gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF
  {


    public com.runwaysdk.query.BasicCondition EQ(gov.geoplatform.uasdm.bus.Imagery imagery);

    public com.runwaysdk.query.BasicCondition NE(gov.geoplatform.uasdm.bus.Imagery imagery);


  public com.runwaysdk.query.Condition project();
  public com.runwaysdk.query.Condition project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery);

  public com.runwaysdk.query.Condition project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery, gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery);


  public com.runwaysdk.query.Condition SUBSELECT_project();
  public com.runwaysdk.query.Condition SUBSELECT_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery);

  public com.runwaysdk.query.Condition SUBSELECT_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery, gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery);


  public com.runwaysdk.query.Condition NOT_IN_project();
  public com.runwaysdk.query.Condition NOT_IN_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery);

  public com.runwaysdk.query.Condition NOT_IN_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery, gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_project();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery, gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class ImageryQueryReference extends gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReference
 implements ImageryQueryReferenceIF

  {

  public ImageryQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(gov.geoplatform.uasdm.bus.Imagery imagery)
    {
      if(imagery == null) return this.EQ((java.lang.String)null);
      return this.EQ(imagery.getOid());
    }

    public com.runwaysdk.query.BasicCondition NE(gov.geoplatform.uasdm.bus.Imagery imagery)
    {
      if(imagery == null) return this.NE((java.lang.String)null);
      return this.NE(imagery.getOid());
    }


  public com.runwaysdk.query.Condition project()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_project()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition project(gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery)
  {
    return this.isChildIn(projectHasImageryQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_project(gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery)
  {
    return this.isChildIn_SUBSELECT(projectHasImageryQuery);
  }

  public com.runwaysdk.query.Condition project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(projectQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(projectQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery, gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery)
  {
    projectHasImageryQuery.AND(projectHasImageryQuery.hasParent(projectQuery));
    return this.isChildIn(projectHasImageryQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery, gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery)
  {
    projectHasImageryQuery.AND(projectHasImageryQuery.hasParent(projectQuery));
    return this.isChildIn_SUBSELECT(projectHasImageryQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_project()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_project()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_project(gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery)
  {
    return this.isNotChildIn(projectHasImageryQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_project(gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery)
  {
    return this.isNotChildIn_SUBSELECT(projectHasImageryQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(projectQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(projectQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery, gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery)
  {
    projectHasImageryQuery.AND(projectHasImageryQuery.hasParent(projectQuery));
    return this.isNotChildIn(projectHasImageryQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_project(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery, gov.geoplatform.uasdm.bus.ProjectHasImageryQuery projectHasImageryQuery)
  {
    projectHasImageryQuery.AND(projectHasImageryQuery.hasParent(projectQuery));
    return this.isNotChildIn_SUBSELECT(projectHasImageryQuery);
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface ImageryQueryMultiReferenceIF extends gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryMultiReferenceIF
  {


    public com.runwaysdk.query.Condition containsAny(gov.geoplatform.uasdm.bus.Imagery ... imagery);
    public com.runwaysdk.query.Condition notContainsAny(gov.geoplatform.uasdm.bus.Imagery ... imagery);
    public com.runwaysdk.query.Condition containsAll(gov.geoplatform.uasdm.bus.Imagery ... imagery);
    public com.runwaysdk.query.Condition notContainsAll(gov.geoplatform.uasdm.bus.Imagery ... imagery);
    public com.runwaysdk.query.Condition containsExactly(gov.geoplatform.uasdm.bus.Imagery ... imagery);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class ImageryQueryMultiReference extends gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryMultiReference
 implements ImageryQueryMultiReferenceIF

  {

  public ImageryQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(gov.geoplatform.uasdm.bus.Imagery ... imagery)  {

      String[] itemIdArray = new String[imagery.length]; 

      for (int i=0; i<imagery.length; i++)
      {
        itemIdArray[i] = imagery[i].getOid();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(gov.geoplatform.uasdm.bus.Imagery ... imagery)  {

      String[] itemIdArray = new String[imagery.length]; 

      for (int i=0; i<imagery.length; i++)
      {
        itemIdArray[i] = imagery[i].getOid();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(gov.geoplatform.uasdm.bus.Imagery ... imagery)  {

      String[] itemIdArray = new String[imagery.length]; 

      for (int i=0; i<imagery.length; i++)
      {
        itemIdArray[i] = imagery[i].getOid();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(gov.geoplatform.uasdm.bus.Imagery ... imagery)  {

      String[] itemIdArray = new String[imagery.length]; 

      for (int i=0; i<imagery.length; i++)
      {
        itemIdArray[i] = imagery[i].getOid();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(gov.geoplatform.uasdm.bus.Imagery ... imagery)  {

      String[] itemIdArray = new String[imagery.length]; 

      for (int i=0; i<imagery.length; i++)
      {
        itemIdArray[i] = imagery[i].getOid();
      }

      return this.containsExactly(itemIdArray);
  }
  }
}
