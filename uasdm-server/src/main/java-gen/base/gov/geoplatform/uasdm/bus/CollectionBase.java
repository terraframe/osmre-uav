/**
 * Copyright 2020 The Department of Interior
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.geoplatform.uasdm.bus;

@com.runwaysdk.business.ClassSignature(hash = 1599470764)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Collection.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class CollectionBase extends gov.geoplatform.uasdm.bus.UasComponent
{
  public final static String CLASS = "gov.geoplatform.uasdm.bus.Collection";
  public static java.lang.String IMAGEHEIGHT = "imageHeight";
  public static java.lang.String IMAGEWIDTH = "imageWidth";
  public static java.lang.String METADATAUPLOADED = "metadataUploaded";
  public static java.lang.String PLATFORM = "platform";
  public static java.lang.String PRIVILEGETYPE = "privilegeType";
  public static java.lang.String SENSOR = "sensor";
  private static final long serialVersionUID = 1599470764;
  
  public CollectionBase()
  {
    super();
  }
  
  public Integer getImageHeight()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(IMAGEHEIGHT));
  }
  
  public void validateImageHeight()
  {
    this.validateAttribute(IMAGEHEIGHT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getImageHeightMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(IMAGEHEIGHT);
  }
  
  public void setImageHeight(Integer value)
  {
    if(value == null)
    {
      setValue(IMAGEHEIGHT, "");
    }
    else
    {
      setValue(IMAGEHEIGHT, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getImageWidth()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(IMAGEWIDTH));
  }
  
  public void validateImageWidth()
  {
    this.validateAttribute(IMAGEWIDTH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getImageWidthMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(IMAGEWIDTH);
  }
  
  public void setImageWidth(Integer value)
  {
    if(value == null)
    {
      setValue(IMAGEWIDTH, "");
    }
    else
    {
      setValue(IMAGEWIDTH, java.lang.Integer.toString(value));
    }
  }
  
  public Boolean getMetadataUploaded()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(METADATAUPLOADED));
  }
  
  public void validateMetadataUploaded()
  {
    this.validateAttribute(METADATAUPLOADED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getMetadataUploadedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(METADATAUPLOADED);
  }
  
  public void setMetadataUploaded(Boolean value)
  {
    if(value == null)
    {
      setValue(METADATAUPLOADED, "");
    }
    else
    {
      setValue(METADATAUPLOADED, java.lang.Boolean.toString(value));
    }
  }
  
  public gov.geoplatform.uasdm.bus.Platform getPlatform()
  {
    if (getValue(PLATFORM).trim().equals(""))
    {
      return null;
    }
    else
    {
      return gov.geoplatform.uasdm.bus.Platform.get(getValue(PLATFORM));
    }
  }
  
  public String getPlatformOid()
  {
    return getValue(PLATFORM);
  }
  
  public void validatePlatform()
  {
    this.validateAttribute(PLATFORM);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getPlatformMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(PLATFORM);
  }
  
  public void setPlatform(gov.geoplatform.uasdm.bus.Platform value)
  {
    if(value == null)
    {
      setValue(PLATFORM, "");
    }
    else
    {
      setValue(PLATFORM, value.getOid());
    }
  }
  
  public void setPlatformId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(PLATFORM, "");
    }
    else
    {
      setValue(PLATFORM, oid);
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.bus.AllPrivilegeType> getPrivilegeType()
  {
    return (java.util.List<gov.geoplatform.uasdm.bus.AllPrivilegeType>) getEnumValues(PRIVILEGETYPE);
  }
  
  public void addPrivilegeType(gov.geoplatform.uasdm.bus.AllPrivilegeType value)
  {
    if(value != null)
    {
      addEnumItem(PRIVILEGETYPE, value.getOid());
    }
  }
  
  public void removePrivilegeType(gov.geoplatform.uasdm.bus.AllPrivilegeType value)
  {
    if(value != null)
    {
      removeEnumItem(PRIVILEGETYPE, value.getOid());
    }
  }
  
  public void clearPrivilegeType()
  {
    clearEnum(PRIVILEGETYPE);
  }
  
  public void validatePrivilegeType()
  {
    this.validateAttribute(PRIVILEGETYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF getPrivilegeTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF)mdClassIF.definesAttribute(PRIVILEGETYPE);
  }
  
  public gov.geoplatform.uasdm.bus.Sensor getSensor()
  {
    if (getValue(SENSOR).trim().equals(""))
    {
      return null;
    }
    else
    {
      return gov.geoplatform.uasdm.bus.Sensor.get(getValue(SENSOR));
    }
  }
  
  public String getSensorOid()
  {
    return getValue(SENSOR);
  }
  
  public void validateSensor()
  {
    this.validateAttribute(SENSOR);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getSensorMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(SENSOR);
  }
  
  public void setSensor(gov.geoplatform.uasdm.bus.Sensor value)
  {
    if(value == null)
    {
      setValue(SENSOR, "");
    }
    else
    {
      setValue(SENSOR, value.getOid());
    }
  }
  
  public void setSensorId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(SENSOR, "");
    }
    else
    {
      setValue(SENSOR, oid);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static CollectionQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    CollectionQuery query = new CollectionQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public gov.geoplatform.uasdm.bus.MissionHasCollection addMission(gov.geoplatform.uasdm.bus.Mission mission)
  {
    return (gov.geoplatform.uasdm.bus.MissionHasCollection) addParent(mission, gov.geoplatform.uasdm.bus.MissionHasCollection.CLASS);
  }
  
  public void removeMission(gov.geoplatform.uasdm.bus.Mission mission)
  {
    removeAllParents(mission, gov.geoplatform.uasdm.bus.MissionHasCollection.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends gov.geoplatform.uasdm.bus.Mission> getAllMission()
  {
    return (com.runwaysdk.query.OIterator<? extends gov.geoplatform.uasdm.bus.Mission>) getParents(gov.geoplatform.uasdm.bus.MissionHasCollection.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends gov.geoplatform.uasdm.bus.MissionHasCollection> getAllMissionRel()
  {
    return (com.runwaysdk.query.OIterator<? extends gov.geoplatform.uasdm.bus.MissionHasCollection>) getParentRelationships(gov.geoplatform.uasdm.bus.MissionHasCollection.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public gov.geoplatform.uasdm.bus.MissionHasCollection getMissionRel(gov.geoplatform.uasdm.bus.Mission mission)
  {
    com.runwaysdk.query.OIterator<? extends gov.geoplatform.uasdm.bus.MissionHasCollection> iterator = (com.runwaysdk.query.OIterator<? extends gov.geoplatform.uasdm.bus.MissionHasCollection>) getRelationshipsWithParent(mission, gov.geoplatform.uasdm.bus.MissionHasCollection.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static Collection get(String oid)
  {
    return (Collection) com.runwaysdk.business.Business.get(oid);
  }
  
  public static Collection getByKey(String key)
  {
    return (Collection) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static Collection lock(java.lang.String oid)
  {
    Collection _instance = Collection.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static Collection unlock(java.lang.String oid)
  {
    Collection _instance = Collection.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
