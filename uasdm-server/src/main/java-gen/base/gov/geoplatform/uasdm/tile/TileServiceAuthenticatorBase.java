/**
 * Copyright 2020 The Department of Interior
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.geoplatform.uasdm.tile;

@com.runwaysdk.business.ClassSignature(hash = -1508910807)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to TileServiceAuthenticator.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class TileServiceAuthenticatorBase extends com.runwaysdk.business.Util
{
  public final static String CLASS = "gov.geoplatform.uasdm.tile.TileServiceAuthenticator";
  public final static java.lang.String OID = "oid";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = -1508910807;
  
  public TileServiceAuthenticatorBase()
  {
    super();
  }
  
  public String getOid()
  {
    return getValue(OID);
  }
  
  public void validateOid()
  {
    this.validateAttribute(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.tile.TileServiceAuthenticator.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static TileServiceAuthenticator get(String oid)
  {
    return (TileServiceAuthenticator) com.runwaysdk.business.Util.get(oid);
  }
  
  public void authenticate()
  {
    String msg = "This method should never be invoked.  It should be overwritten in gov.geoplatform.uasdm.tile.TileServiceAuthenticator.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void authenticate(java.lang.String oid)
  {
    TileServiceAuthenticator _instance = TileServiceAuthenticator.get(oid);
    _instance.authenticate();
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
