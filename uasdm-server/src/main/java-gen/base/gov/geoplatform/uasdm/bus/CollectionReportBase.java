/**
 * Copyright 2020 The Department of Interior
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.geoplatform.uasdm.bus;

@com.runwaysdk.business.ClassSignature(hash = -740452033)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to CollectionReport.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class CollectionReportBase extends com.runwaysdk.business.Business
{
  public final static String CLASS = "gov.geoplatform.uasdm.bus.CollectionReport";
  public static java.lang.String ACTOR = "actor";
  public static java.lang.String ALLSTORAGESIZE = "allStorageSize";
  public static java.lang.String BUREAU = "bureau";
  public static java.lang.String BUREAUNAME = "bureauName";
  public static java.lang.String COLLECTION = "collection";
  public static java.lang.String COLLECTIONDATE = "collectionDate";
  public static java.lang.String COLLECTIONNAME = "collectionName";
  public static java.lang.String CREATEDATE = "createDate";
  public static java.lang.String CREATEDBY = "createdBy";
  public static java.lang.String DELETEDATE = "deleteDate";
  public static java.lang.String DOWNLOADCOUNTS = "downloadCounts";
  public static java.lang.String ENTITYDOMAIN = "entityDomain";
  public static java.lang.String EROSARCHIVED = "erosArchived";
  public static java.lang.String EROSMETADATACOMPLETE = "erosMetadataComplete";
  public static java.lang.String EXISTS = "exists";
  public static java.lang.String FAAIDNUMBER = "faaIdNumber";
  public static java.lang.String GEOMETRY = "geometry";
  public static java.lang.String HILLSHADE = "hillshade";
  public static java.lang.String KEYNAME = "keyName";
  public static java.lang.String LASTUPDATEDATE = "lastUpdateDate";
  public static java.lang.String LASTUPDATEDBY = "lastUpdatedBy";
  public static java.lang.String LOCKEDBY = "lockedBy";
  public static java.lang.String MISSION = "mission";
  public static java.lang.String MISSIONNAME = "missionName";
  public static java.lang.String ODMPROCESSING = "odmProcessing";
  public static java.lang.String OID = "oid";
  public static java.lang.String ORTHOMOSAIC = "orthomosaic";
  public static java.lang.String OWNER = "owner";
  public static java.lang.String PLATFORM = "platform";
  public static java.lang.String PLATFORMNAME = "platformName";
  public static java.lang.String POINTCLOUD = "pointCloud";
  public static java.lang.String PRODUCT = "product";
  public static java.lang.String PRODUCTSLINK = "productsLink";
  public static java.lang.String PRODUCTSSHARED = "productsShared";
  public static java.lang.String PROJECT = "project";
  public static java.lang.String PROJECTNAME = "projectName";
  public static java.lang.String RAWIMAGESCOUNT = "rawImagesCount";
  public static java.lang.String RAWIMAGESLINK = "rawImagesLink";
  public static java.lang.String SENSOR = "sensor";
  public static java.lang.String SENSORNAME = "sensorName";
  public static java.lang.String SEQ = "seq";
  public static java.lang.String SERIALNUMBER = "serialNumber";
  public static java.lang.String SITE = "site";
  public static java.lang.String SITEMASTER = "siteMaster";
  public static java.lang.String SITENAME = "siteName";
  public static java.lang.String TYPE = "type";
  public static java.lang.String UAV = "uav";
  public static java.lang.String USERNAME = "userName";
  public static java.lang.String VIDEO = "video";
  private static final long serialVersionUID = -740452033;
  
  public CollectionReportBase()
  {
    super();
  }
  
  public com.runwaysdk.system.Actor getActor()
  {
    if (getValue(ACTOR).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.Actor.get(getValue(ACTOR));
    }
  }
  
  public String getActorOid()
  {
    return getValue(ACTOR);
  }
  
  public void validateActor()
  {
    this.validateAttribute(ACTOR);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getActorMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(ACTOR);
  }
  
  public void setActor(com.runwaysdk.system.Actor value)
  {
    if(value == null)
    {
      setValue(ACTOR, "");
    }
    else
    {
      setValue(ACTOR, value.getOid());
    }
  }
  
  public void setActorId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(ACTOR, "");
    }
    else
    {
      setValue(ACTOR, oid);
    }
  }
  
  public Long getAllStorageSize()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(ALLSTORAGESIZE));
  }
  
  public void validateAllStorageSize()
  {
    this.validateAttribute(ALLSTORAGESIZE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getAllStorageSizeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(ALLSTORAGESIZE);
  }
  
  public void setAllStorageSize(Long value)
  {
    if(value == null)
    {
      setValue(ALLSTORAGESIZE, "");
    }
    else
    {
      setValue(ALLSTORAGESIZE, java.lang.Long.toString(value));
    }
  }
  
  public gov.geoplatform.uasdm.bus.Bureau getBureau()
  {
    if (getValue(BUREAU).trim().equals(""))
    {
      return null;
    }
    else
    {
      return gov.geoplatform.uasdm.bus.Bureau.get(getValue(BUREAU));
    }
  }
  
  public String getBureauOid()
  {
    return getValue(BUREAU);
  }
  
  public void validateBureau()
  {
    this.validateAttribute(BUREAU);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getBureauMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(BUREAU);
  }
  
  public void setBureau(gov.geoplatform.uasdm.bus.Bureau value)
  {
    if(value == null)
    {
      setValue(BUREAU, "");
    }
    else
    {
      setValue(BUREAU, value.getOid());
    }
  }
  
  public void setBureauId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(BUREAU, "");
    }
    else
    {
      setValue(BUREAU, oid);
    }
  }
  
  public String getBureauName()
  {
    return getValue(BUREAUNAME);
  }
  
  public void validateBureauName()
  {
    this.validateAttribute(BUREAUNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getBureauNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(BUREAUNAME);
  }
  
  public void setBureauName(String value)
  {
    if(value == null)
    {
      setValue(BUREAUNAME, "");
    }
    else
    {
      setValue(BUREAUNAME, value);
    }
  }
  
  public gov.geoplatform.uasdm.graph.Collection getCollection()
  {
    return (gov.geoplatform.uasdm.graph.Collection)com.runwaysdk.business.graph.VertexObject.get("gov.geoplatform.uasdm.graph.Collection", getValue(COLLECTION));
  }
  
  public void validateCollection()
  {
    this.validateAttribute(COLLECTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getCollectionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(COLLECTION);
  }
  
  public void setCollection(gov.geoplatform.uasdm.graph.Collection value)
  {
    if(value == null)
    {
      setValue(COLLECTION, "");
    }
    else
    {
      setValue(COLLECTION, value.getOid());
    }
  }
  
  public java.util.Date getCollectionDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(COLLECTIONDATE));
  }
  
  public void validateCollectionDate()
  {
    this.validateAttribute(COLLECTIONDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateDAOIF getCollectionDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateDAOIF)mdClassIF.definesAttribute(COLLECTIONDATE);
  }
  
  public void setCollectionDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(COLLECTIONDATE, "");
    }
    else
    {
      setValue(COLLECTIONDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getCollectionName()
  {
    return getValue(COLLECTIONNAME);
  }
  
  public void validateCollectionName()
  {
    this.validateAttribute(COLLECTIONNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getCollectionNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(COLLECTIONNAME);
  }
  
  public void setCollectionName(String value)
  {
    if(value == null)
    {
      setValue(COLLECTIONNAME, "");
    }
    else
    {
      setValue(COLLECTIONNAME, value);
    }
  }
  
  public java.util.Date getCreateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(CREATEDATE));
  }
  
  public void validateCreateDate()
  {
    this.validateAttribute(CREATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getCreateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(CREATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getCreatedBy()
  {
    if (getValue(CREATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(CREATEDBY));
    }
  }
  
  public String getCreatedByOid()
  {
    return getValue(CREATEDBY);
  }
  
  public void validateCreatedBy()
  {
    this.validateAttribute(CREATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getCreatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(CREATEDBY);
  }
  
  public java.util.Date getDeleteDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(DELETEDATE));
  }
  
  public void validateDeleteDate()
  {
    this.validateAttribute(DELETEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateDAOIF getDeleteDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateDAOIF)mdClassIF.definesAttribute(DELETEDATE);
  }
  
  public void setDeleteDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(DELETEDATE, "");
    }
    else
    {
      setValue(DELETEDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public Long getDownloadCounts()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(DOWNLOADCOUNTS));
  }
  
  public void validateDownloadCounts()
  {
    this.validateAttribute(DOWNLOADCOUNTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getDownloadCountsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(DOWNLOADCOUNTS);
  }
  
  public void setDownloadCounts(Long value)
  {
    if(value == null)
    {
      setValue(DOWNLOADCOUNTS, "");
    }
    else
    {
      setValue(DOWNLOADCOUNTS, java.lang.Long.toString(value));
    }
  }
  
  public com.runwaysdk.system.metadata.MdDomain getEntityDomain()
  {
    if (getValue(ENTITYDOMAIN).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdDomain.get(getValue(ENTITYDOMAIN));
    }
  }
  
  public String getEntityDomainOid()
  {
    return getValue(ENTITYDOMAIN);
  }
  
  public void validateEntityDomain()
  {
    this.validateAttribute(ENTITYDOMAIN);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getEntityDomainMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(ENTITYDOMAIN);
  }
  
  public void setEntityDomain(com.runwaysdk.system.metadata.MdDomain value)
  {
    if(value == null)
    {
      setValue(ENTITYDOMAIN, "");
    }
    else
    {
      setValue(ENTITYDOMAIN, value.getOid());
    }
  }
  
  public void setEntityDomainId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(ENTITYDOMAIN, "");
    }
    else
    {
      setValue(ENTITYDOMAIN, oid);
    }
  }
  
  public Boolean getErosArchived()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(EROSARCHIVED));
  }
  
  public void validateErosArchived()
  {
    this.validateAttribute(EROSARCHIVED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getErosArchivedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(EROSARCHIVED);
  }
  
  public void setErosArchived(Boolean value)
  {
    if(value == null)
    {
      setValue(EROSARCHIVED, "");
    }
    else
    {
      setValue(EROSARCHIVED, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getErosMetadataComplete()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(EROSMETADATACOMPLETE));
  }
  
  public void validateErosMetadataComplete()
  {
    this.validateAttribute(EROSMETADATACOMPLETE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getErosMetadataCompleteMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(EROSMETADATACOMPLETE);
  }
  
  public void setErosMetadataComplete(Boolean value)
  {
    if(value == null)
    {
      setValue(EROSMETADATACOMPLETE, "");
    }
    else
    {
      setValue(EROSMETADATACOMPLETE, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getExists()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(EXISTS));
  }
  
  public void validateExists()
  {
    this.validateAttribute(EXISTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getExistsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(EXISTS);
  }
  
  public void setExists(Boolean value)
  {
    if(value == null)
    {
      setValue(EXISTS, "");
    }
    else
    {
      setValue(EXISTS, java.lang.Boolean.toString(value));
    }
  }
  
  public String getFaaIdNumber()
  {
    return getValue(FAAIDNUMBER);
  }
  
  public void validateFaaIdNumber()
  {
    this.validateAttribute(FAAIDNUMBER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getFaaIdNumberMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(FAAIDNUMBER);
  }
  
  public void setFaaIdNumber(String value)
  {
    if(value == null)
    {
      setValue(FAAIDNUMBER, "");
    }
    else
    {
      setValue(FAAIDNUMBER, value);
    }
  }
  
  public org.locationtech.jts.geom.Point getGeometry()
  {
    return (org.locationtech.jts.geom.Point)getObjectValue(GEOMETRY);
  }
  
  public void validateGeometry()
  {
    this.validateAttribute(GEOMETRY);
  }
  
  public static com.runwaysdk.gis.dataaccess.MdAttributePointDAOIF getGeometryMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.gis.dataaccess.MdAttributePointDAOIF)mdClassIF.definesAttribute(GEOMETRY);
  }
  
  public void setGeometry(org.locationtech.jts.geom.Point value)
  {
    if(value == null)
    {
      setValue(GEOMETRY, "");
    }
    else
    {
      setValue(GEOMETRY, value);
    }
  }
  
  public Boolean getHillshade()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(HILLSHADE));
  }
  
  public void validateHillshade()
  {
    this.validateAttribute(HILLSHADE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getHillshadeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(HILLSHADE);
  }
  
  public void setHillshade(Boolean value)
  {
    if(value == null)
    {
      setValue(HILLSHADE, "");
    }
    else
    {
      setValue(HILLSHADE, java.lang.Boolean.toString(value));
    }
  }
  
  public String getKeyName()
  {
    return getValue(KEYNAME);
  }
  
  public void validateKeyName()
  {
    this.validateAttribute(KEYNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getKeyNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(KEYNAME);
  }
  
  public void setKeyName(String value)
  {
    if(value == null)
    {
      setValue(KEYNAME, "");
    }
    else
    {
      setValue(KEYNAME, value);
    }
  }
  
  public java.util.Date getLastUpdateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(LASTUPDATEDATE));
  }
  
  public void validateLastUpdateDate()
  {
    this.validateAttribute(LASTUPDATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getLastUpdateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(LASTUPDATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getLastUpdatedBy()
  {
    if (getValue(LASTUPDATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(LASTUPDATEDBY));
    }
  }
  
  public String getLastUpdatedByOid()
  {
    return getValue(LASTUPDATEDBY);
  }
  
  public void validateLastUpdatedBy()
  {
    this.validateAttribute(LASTUPDATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getLastUpdatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LASTUPDATEDBY);
  }
  
  public com.runwaysdk.system.SingleActor getLockedBy()
  {
    if (getValue(LOCKEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(LOCKEDBY));
    }
  }
  
  public String getLockedByOid()
  {
    return getValue(LOCKEDBY);
  }
  
  public void validateLockedBy()
  {
    this.validateAttribute(LOCKEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getLockedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LOCKEDBY);
  }
  
  public gov.geoplatform.uasdm.graph.Mission getMission()
  {
    return (gov.geoplatform.uasdm.graph.Mission)com.runwaysdk.business.graph.VertexObject.get("gov.geoplatform.uasdm.graph.Mission", getValue(MISSION));
  }
  
  public void validateMission()
  {
    this.validateAttribute(MISSION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getMissionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(MISSION);
  }
  
  public void setMission(gov.geoplatform.uasdm.graph.Mission value)
  {
    if(value == null)
    {
      setValue(MISSION, "");
    }
    else
    {
      setValue(MISSION, value.getOid());
    }
  }
  
  public String getMissionName()
  {
    return getValue(MISSIONNAME);
  }
  
  public void validateMissionName()
  {
    this.validateAttribute(MISSIONNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getMissionNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(MISSIONNAME);
  }
  
  public void setMissionName(String value)
  {
    if(value == null)
    {
      setValue(MISSIONNAME, "");
    }
    else
    {
      setValue(MISSIONNAME, value);
    }
  }
  
  public String getOdmProcessing()
  {
    return getValue(ODMPROCESSING);
  }
  
  public void validateOdmProcessing()
  {
    this.validateAttribute(ODMPROCESSING);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getOdmProcessingMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ODMPROCESSING);
  }
  
  public void setOdmProcessing(String value)
  {
    if(value == null)
    {
      setValue(ODMPROCESSING, "");
    }
    else
    {
      setValue(ODMPROCESSING, value);
    }
  }
  
  public String getOid()
  {
    return getValue(OID);
  }
  
  public void validateOid()
  {
    this.validateAttribute(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public Boolean getOrthomosaic()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ORTHOMOSAIC));
  }
  
  public void validateOrthomosaic()
  {
    this.validateAttribute(ORTHOMOSAIC);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getOrthomosaicMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ORTHOMOSAIC);
  }
  
  public void setOrthomosaic(Boolean value)
  {
    if(value == null)
    {
      setValue(ORTHOMOSAIC, "");
    }
    else
    {
      setValue(ORTHOMOSAIC, java.lang.Boolean.toString(value));
    }
  }
  
  public com.runwaysdk.system.Actor getOwner()
  {
    if (getValue(OWNER).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.Actor.get(getValue(OWNER));
    }
  }
  
  public String getOwnerOid()
  {
    return getValue(OWNER);
  }
  
  public void validateOwner()
  {
    this.validateAttribute(OWNER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getOwnerMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(OWNER);
  }
  
  public void setOwner(com.runwaysdk.system.Actor value)
  {
    if(value == null)
    {
      setValue(OWNER, "");
    }
    else
    {
      setValue(OWNER, value.getOid());
    }
  }
  
  public void setOwnerId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(OWNER, "");
    }
    else
    {
      setValue(OWNER, oid);
    }
  }
  
  public gov.geoplatform.uasdm.graph.Platform getPlatform()
  {
    return (gov.geoplatform.uasdm.graph.Platform)com.runwaysdk.business.graph.VertexObject.get("gov.geoplatform.uasdm.graph.Platform", getValue(PLATFORM));
  }
  
  public void validatePlatform()
  {
    this.validateAttribute(PLATFORM);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getPlatformMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(PLATFORM);
  }
  
  public void setPlatform(gov.geoplatform.uasdm.graph.Platform value)
  {
    if(value == null)
    {
      setValue(PLATFORM, "");
    }
    else
    {
      setValue(PLATFORM, value.getOid());
    }
  }
  
  public String getPlatformName()
  {
    return getValue(PLATFORMNAME);
  }
  
  public void validatePlatformName()
  {
    this.validateAttribute(PLATFORMNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getPlatformNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(PLATFORMNAME);
  }
  
  public void setPlatformName(String value)
  {
    if(value == null)
    {
      setValue(PLATFORMNAME, "");
    }
    else
    {
      setValue(PLATFORMNAME, value);
    }
  }
  
  public Boolean getPointCloud()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(POINTCLOUD));
  }
  
  public void validatePointCloud()
  {
    this.validateAttribute(POINTCLOUD);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getPointCloudMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(POINTCLOUD);
  }
  
  public void setPointCloud(Boolean value)
  {
    if(value == null)
    {
      setValue(POINTCLOUD, "");
    }
    else
    {
      setValue(POINTCLOUD, java.lang.Boolean.toString(value));
    }
  }
  
  public gov.geoplatform.uasdm.graph.Product getProduct()
  {
    return (gov.geoplatform.uasdm.graph.Product)com.runwaysdk.business.graph.VertexObject.get("gov.geoplatform.uasdm.graph.Product", getValue(PRODUCT));
  }
  
  public void validateProduct()
  {
    this.validateAttribute(PRODUCT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getProductMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(PRODUCT);
  }
  
  public void setProduct(gov.geoplatform.uasdm.graph.Product value)
  {
    if(value == null)
    {
      setValue(PRODUCT, "");
    }
    else
    {
      setValue(PRODUCT, value.getOid());
    }
  }
  
  public String getProductsLink()
  {
    return getValue(PRODUCTSLINK);
  }
  
  public void validateProductsLink()
  {
    this.validateAttribute(PRODUCTSLINK);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getProductsLinkMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(PRODUCTSLINK);
  }
  
  public void setProductsLink(String value)
  {
    if(value == null)
    {
      setValue(PRODUCTSLINK, "");
    }
    else
    {
      setValue(PRODUCTSLINK, value);
    }
  }
  
  public Boolean getProductsShared()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PRODUCTSSHARED));
  }
  
  public void validateProductsShared()
  {
    this.validateAttribute(PRODUCTSSHARED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getProductsSharedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(PRODUCTSSHARED);
  }
  
  public void setProductsShared(Boolean value)
  {
    if(value == null)
    {
      setValue(PRODUCTSSHARED, "");
    }
    else
    {
      setValue(PRODUCTSSHARED, java.lang.Boolean.toString(value));
    }
  }
  
  public gov.geoplatform.uasdm.graph.Project getProject()
  {
    return (gov.geoplatform.uasdm.graph.Project)com.runwaysdk.business.graph.VertexObject.get("gov.geoplatform.uasdm.graph.Project", getValue(PROJECT));
  }
  
  public void validateProject()
  {
    this.validateAttribute(PROJECT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getProjectMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(PROJECT);
  }
  
  public void setProject(gov.geoplatform.uasdm.graph.Project value)
  {
    if(value == null)
    {
      setValue(PROJECT, "");
    }
    else
    {
      setValue(PROJECT, value.getOid());
    }
  }
  
  public String getProjectName()
  {
    return getValue(PROJECTNAME);
  }
  
  public void validateProjectName()
  {
    this.validateAttribute(PROJECTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getProjectNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(PROJECTNAME);
  }
  
  public void setProjectName(String value)
  {
    if(value == null)
    {
      setValue(PROJECTNAME, "");
    }
    else
    {
      setValue(PROJECTNAME, value);
    }
  }
  
  public Integer getRawImagesCount()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(RAWIMAGESCOUNT));
  }
  
  public void validateRawImagesCount()
  {
    this.validateAttribute(RAWIMAGESCOUNT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getRawImagesCountMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(RAWIMAGESCOUNT);
  }
  
  public void setRawImagesCount(Integer value)
  {
    if(value == null)
    {
      setValue(RAWIMAGESCOUNT, "");
    }
    else
    {
      setValue(RAWIMAGESCOUNT, java.lang.Integer.toString(value));
    }
  }
  
  public String getRawImagesLink()
  {
    return getValue(RAWIMAGESLINK);
  }
  
  public void validateRawImagesLink()
  {
    this.validateAttribute(RAWIMAGESLINK);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getRawImagesLinkMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(RAWIMAGESLINK);
  }
  
  public void setRawImagesLink(String value)
  {
    if(value == null)
    {
      setValue(RAWIMAGESLINK, "");
    }
    else
    {
      setValue(RAWIMAGESLINK, value);
    }
  }
  
  public gov.geoplatform.uasdm.graph.Sensor getSensor()
  {
    return (gov.geoplatform.uasdm.graph.Sensor)com.runwaysdk.business.graph.VertexObject.get("gov.geoplatform.uasdm.graph.Sensor", getValue(SENSOR));
  }
  
  public void validateSensor()
  {
    this.validateAttribute(SENSOR);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getSensorMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(SENSOR);
  }
  
  public void setSensor(gov.geoplatform.uasdm.graph.Sensor value)
  {
    if(value == null)
    {
      setValue(SENSOR, "");
    }
    else
    {
      setValue(SENSOR, value.getOid());
    }
  }
  
  public String getSensorName()
  {
    return getValue(SENSORNAME);
  }
  
  public void validateSensorName()
  {
    this.validateAttribute(SENSORNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getSensorNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(SENSORNAME);
  }
  
  public void setSensorName(String value)
  {
    if(value == null)
    {
      setValue(SENSORNAME, "");
    }
    else
    {
      setValue(SENSORNAME, value);
    }
  }
  
  public Long getSeq()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(SEQ));
  }
  
  public void validateSeq()
  {
    this.validateAttribute(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public String getSerialNumber()
  {
    return getValue(SERIALNUMBER);
  }
  
  public void validateSerialNumber()
  {
    this.validateAttribute(SERIALNUMBER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getSerialNumberMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(SERIALNUMBER);
  }
  
  public void setSerialNumber(String value)
  {
    if(value == null)
    {
      setValue(SERIALNUMBER, "");
    }
    else
    {
      setValue(SERIALNUMBER, value);
    }
  }
  
  public gov.geoplatform.uasdm.graph.Site getSite()
  {
    return (gov.geoplatform.uasdm.graph.Site)com.runwaysdk.business.graph.VertexObject.get("gov.geoplatform.uasdm.graph.Site", getValue(SITE));
  }
  
  public void validateSite()
  {
    this.validateAttribute(SITE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getSiteMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(SITE);
  }
  
  public void setSite(gov.geoplatform.uasdm.graph.Site value)
  {
    if(value == null)
    {
      setValue(SITE, "");
    }
    else
    {
      setValue(SITE, value.getOid());
    }
  }
  
  public String getSiteMaster()
  {
    return getValue(SITEMASTER);
  }
  
  public void validateSiteMaster()
  {
    this.validateAttribute(SITEMASTER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getSiteMasterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(SITEMASTER);
  }
  
  public String getSiteName()
  {
    return getValue(SITENAME);
  }
  
  public void validateSiteName()
  {
    this.validateAttribute(SITENAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getSiteNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(SITENAME);
  }
  
  public void setSiteName(String value)
  {
    if(value == null)
    {
      setValue(SITENAME, "");
    }
    else
    {
      setValue(SITENAME, value);
    }
  }
  
  public String getType()
  {
    return getValue(TYPE);
  }
  
  public void validateType()
  {
    this.validateAttribute(TYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(TYPE);
  }
  
  public gov.geoplatform.uasdm.graph.UAV getUav()
  {
    return (gov.geoplatform.uasdm.graph.UAV)com.runwaysdk.business.graph.VertexObject.get("gov.geoplatform.uasdm.graph.UAV", getValue(UAV));
  }
  
  public void validateUav()
  {
    this.validateAttribute(UAV);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getUavMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(UAV);
  }
  
  public void setUav(gov.geoplatform.uasdm.graph.UAV value)
  {
    if(value == null)
    {
      setValue(UAV, "");
    }
    else
    {
      setValue(UAV, value.getOid());
    }
  }
  
  public String getUserName()
  {
    return getValue(USERNAME);
  }
  
  public void validateUserName()
  {
    this.validateAttribute(USERNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getUserNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(USERNAME);
  }
  
  public void setUserName(String value)
  {
    if(value == null)
    {
      setValue(USERNAME, "");
    }
    else
    {
      setValue(USERNAME, value);
    }
  }
  
  public Boolean getVideo()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(VIDEO));
  }
  
  public void validateVideo()
  {
    this.validateAttribute(VIDEO);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getVideoMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.CollectionReport.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(VIDEO);
  }
  
  public void setVideo(Boolean value)
  {
    if(value == null)
    {
      setValue(VIDEO, "");
    }
    else
    {
      setValue(VIDEO, java.lang.Boolean.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static CollectionReportQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    CollectionReportQuery query = new CollectionReportQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static CollectionReport get(String oid)
  {
    return (CollectionReport) com.runwaysdk.business.Business.get(oid);
  }
  
  public static CollectionReport getByKey(String key)
  {
    return (CollectionReport) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static CollectionReport lock(java.lang.String oid)
  {
    CollectionReport _instance = CollectionReport.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static CollectionReport unlock(java.lang.String oid)
  {
    CollectionReport _instance = CollectionReport.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
