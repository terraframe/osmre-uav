package gov.geoplatform.uasdm.datamanagement;

@com.runwaysdk.business.ClassSignature(hash = -851878859)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to UasComponent.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class UasComponentQuery extends com.runwaysdk.query.GeneratedBusinessQuery

{

  public UasComponentQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public UasComponentQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return gov.geoplatform.uasdm.datamanagement.UasComponent.CLASS;
  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.datamanagement.UasComponent.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.datamanagement.UasComponent.ENTITYDOMAIN, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.datamanagement.UasComponent.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.datamanagement.UasComponent.ENTITYDOMAIN, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.datamanagement.UasComponent.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.datamanagement.UasComponent.LOCKEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.datamanagement.UasComponent.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.datamanagement.UasComponent.LOCKEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getName()
  {
    return getName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.NAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.NAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableUUID getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableUUID)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableUUID)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.OID, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.datamanagement.UasComponent.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.datamanagement.UasComponent.OWNER, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.datamanagement.UasComponent.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.datamanagement.UasComponent.OWNER, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getS3location()
  {
    return getS3location(null);

  }
 
  public com.runwaysdk.query.SelectableChar getS3location(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.S3LOCATION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getS3location(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.S3LOCATION, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.datamanagement.UasComponent.TYPE, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.datamanagement.UasComponent.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.datamanagement.UasComponent.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.datamanagement.UasComponent.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends UasComponent> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<UasComponent>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition component()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_component()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition component(gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    return this.getBusinessQuery().isChildIn(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_component(gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(uasComponentQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(uasComponentQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    componentHasComponentQuery.AND(componentHasComponentQuery.hasParent(uasComponentQuery));
    return this.getBusinessQuery().isChildIn(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    componentHasComponentQuery.AND(componentHasComponentQuery.hasParent(uasComponentQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(componentHasComponentQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_component()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_component()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_component(gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    return this.getBusinessQuery().isNotChildIn(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_component(gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(uasComponentQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(uasComponentQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    componentHasComponentQuery.AND(componentHasComponentQuery.hasParent(uasComponentQuery));
    return this.getBusinessQuery().isNotChildIn(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    componentHasComponentQuery.AND(componentHasComponentQuery.hasParent(uasComponentQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(componentHasComponentQuery);
  }


  public com.runwaysdk.query.Condition components()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_components()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition components(gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    return this.getBusinessQuery().isParentIn(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_components(gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(uasComponentQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(uasComponentQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    componentHasComponentQuery.AND(componentHasComponentQuery.hasChild(uasComponentQuery));
    return this.getBusinessQuery().isParentIn(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    componentHasComponentQuery.AND(componentHasComponentQuery.hasChild(uasComponentQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(componentHasComponentQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_components()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_components()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_components(gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    return this.getBusinessQuery().isNotParentIn(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_components(gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(uasComponentQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(uasComponentQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    componentHasComponentQuery.AND(componentHasComponentQuery.hasChild(uasComponentQuery));
    return this.getBusinessQuery().isNotParentIn(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    componentHasComponentQuery.AND(componentHasComponentQuery.hasChild(uasComponentQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(componentHasComponentQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface UasComponentQueryReferenceIF extends com.runwaysdk.query.SelectableReference
  {

    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getName();
    public com.runwaysdk.query.SelectableChar getName(String alias);
    public com.runwaysdk.query.SelectableChar getName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableUUID getOid();
    public com.runwaysdk.query.SelectableUUID getOid(String alias);
    public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getS3location();
    public com.runwaysdk.query.SelectableChar getS3location(String alias);
    public com.runwaysdk.query.SelectableChar getS3location(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(gov.geoplatform.uasdm.datamanagement.UasComponent uasComponent);

    public com.runwaysdk.query.BasicCondition NE(gov.geoplatform.uasdm.datamanagement.UasComponent uasComponent);


  public com.runwaysdk.query.Condition components();

  public com.runwaysdk.query.Condition components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery);

  public com.runwaysdk.query.Condition components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery);


  public com.runwaysdk.query.Condition SUBSELECT_components();

  public com.runwaysdk.query.Condition SUBSELECT_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery);

  public com.runwaysdk.query.Condition SUBSELECT_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery);


  public com.runwaysdk.query.Condition NOT_IN_components();

  public com.runwaysdk.query.Condition NOT_IN_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery);

  public com.runwaysdk.query.Condition NOT_IN_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_components();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery);


  public com.runwaysdk.query.Condition component();
  public com.runwaysdk.query.Condition component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery);

  public com.runwaysdk.query.Condition component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery);


  public com.runwaysdk.query.Condition SUBSELECT_component();
  public com.runwaysdk.query.Condition SUBSELECT_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery);

  public com.runwaysdk.query.Condition SUBSELECT_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery);


  public com.runwaysdk.query.Condition NOT_IN_component();
  public com.runwaysdk.query.Condition NOT_IN_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery);

  public com.runwaysdk.query.Condition NOT_IN_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_component();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class UasComponentQueryReference extends com.runwaysdk.query.AttributeReference
 implements UasComponentQueryReferenceIF

  {

  public UasComponentQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(gov.geoplatform.uasdm.datamanagement.UasComponent uasComponent)
    {
      if(uasComponent == null) return this.EQ((java.lang.String)null);
      return this.EQ(uasComponent.getOid());
    }

    public com.runwaysdk.query.BasicCondition NE(gov.geoplatform.uasdm.datamanagement.UasComponent uasComponent)
    {
      if(uasComponent == null) return this.NE((java.lang.String)null);
      return this.NE(uasComponent.getOid());
    }

  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getName()
  {
    return getName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.NAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.NAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableUUID getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.OID, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getS3location()
  {
    return getS3location(null);

  }
 
  public com.runwaysdk.query.SelectableChar getS3location(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.S3LOCATION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getS3location(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.S3LOCATION, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.TYPE, alias, displayLabel);

  }

  public com.runwaysdk.query.Condition components()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_components()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition components(gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    return this.isParentIn(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_components(gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    return this.isParentIn_SUBSELECT(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(uasComponentQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(uasComponentQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    componentHasComponentQuery.AND(componentHasComponentQuery.hasChild(uasComponentQuery));
    return this.isParentIn(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    componentHasComponentQuery.AND(componentHasComponentQuery.hasChild(uasComponentQuery));
    return this.isParentIn_SUBSELECT(componentHasComponentQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_components()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_components()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_components(gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    return this.isNotParentIn(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_components(gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    return this.isNotParentIn_SUBSELECT(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(uasComponentQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(uasComponentQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    componentHasComponentQuery.AND(componentHasComponentQuery.hasChild(uasComponentQuery));
    return this.isNotParentIn(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_components(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    componentHasComponentQuery.AND(componentHasComponentQuery.hasChild(uasComponentQuery));
    return this.isNotParentIn_SUBSELECT(componentHasComponentQuery);
  }


  public com.runwaysdk.query.Condition component()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_component()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition component(gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    return this.isChildIn(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_component(gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    return this.isChildIn_SUBSELECT(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(uasComponentQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(uasComponentQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    componentHasComponentQuery.AND(componentHasComponentQuery.hasParent(uasComponentQuery));
    return this.isChildIn(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    componentHasComponentQuery.AND(componentHasComponentQuery.hasParent(uasComponentQuery));
    return this.isChildIn_SUBSELECT(componentHasComponentQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_component()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_component()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_component(gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    return this.isNotChildIn(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_component(gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    return this.isNotChildIn_SUBSELECT(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(uasComponentQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.datamanagement.ComponentHasComponent.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(uasComponentQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    componentHasComponentQuery.AND(componentHasComponentQuery.hasParent(uasComponentQuery));
    return this.isNotChildIn(componentHasComponentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_component(gov.geoplatform.uasdm.datamanagement.UasComponentQuery uasComponentQuery, gov.geoplatform.uasdm.datamanagement.ComponentHasComponentQuery componentHasComponentQuery)
  {
    componentHasComponentQuery.AND(componentHasComponentQuery.hasParent(uasComponentQuery));
    return this.isNotChildIn_SUBSELECT(componentHasComponentQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.datamanagement.UasComponent.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.datamanagement.UasComponent.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.datamanagement.UasComponent.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface UasComponentQueryMultiReferenceIF extends com.runwaysdk.query.SelectableMultiReference
  {

    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getName();
    public com.runwaysdk.query.SelectableChar getName(String alias);
    public com.runwaysdk.query.SelectableChar getName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableUUID getOid();
    public com.runwaysdk.query.SelectableUUID getOid(String alias);
    public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getS3location();
    public com.runwaysdk.query.SelectableChar getS3location(String alias);
    public com.runwaysdk.query.SelectableChar getS3location(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);

    public com.runwaysdk.query.Condition containsAny(gov.geoplatform.uasdm.datamanagement.UasComponent ... uasComponent);
    public com.runwaysdk.query.Condition notContainsAny(gov.geoplatform.uasdm.datamanagement.UasComponent ... uasComponent);
    public com.runwaysdk.query.Condition containsAll(gov.geoplatform.uasdm.datamanagement.UasComponent ... uasComponent);
    public com.runwaysdk.query.Condition notContainsAll(gov.geoplatform.uasdm.datamanagement.UasComponent ... uasComponent);
    public com.runwaysdk.query.Condition containsExactly(gov.geoplatform.uasdm.datamanagement.UasComponent ... uasComponent);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class UasComponentQueryMultiReference extends com.runwaysdk.query.AttributeMultiReference
 implements UasComponentQueryMultiReferenceIF

  {

  public UasComponentQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(gov.geoplatform.uasdm.datamanagement.UasComponent ... uasComponent)  {

      String[] itemIdArray = new String[uasComponent.length]; 

      for (int i=0; i<uasComponent.length; i++)
      {
        itemIdArray[i] = uasComponent[i].getOid();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(gov.geoplatform.uasdm.datamanagement.UasComponent ... uasComponent)  {

      String[] itemIdArray = new String[uasComponent.length]; 

      for (int i=0; i<uasComponent.length; i++)
      {
        itemIdArray[i] = uasComponent[i].getOid();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(gov.geoplatform.uasdm.datamanagement.UasComponent ... uasComponent)  {

      String[] itemIdArray = new String[uasComponent.length]; 

      for (int i=0; i<uasComponent.length; i++)
      {
        itemIdArray[i] = uasComponent[i].getOid();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(gov.geoplatform.uasdm.datamanagement.UasComponent ... uasComponent)  {

      String[] itemIdArray = new String[uasComponent.length]; 

      for (int i=0; i<uasComponent.length; i++)
      {
        itemIdArray[i] = uasComponent[i].getOid();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(gov.geoplatform.uasdm.datamanagement.UasComponent ... uasComponent)  {

      String[] itemIdArray = new String[uasComponent.length]; 

      for (int i=0; i<uasComponent.length; i++)
      {
        itemIdArray[i] = uasComponent[i].getOid();
      }

      return this.containsExactly(itemIdArray);
  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getName()
  {
    return getName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.NAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.NAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableUUID getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.OID, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getS3location()
  {
    return getS3location(null);

  }
 
  public com.runwaysdk.query.SelectableChar getS3location(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.S3LOCATION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getS3location(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.S3LOCATION, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.datamanagement.UasComponent.TYPE, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(gov.geoplatform.uasdm.datamanagement.UasComponent.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.datamanagement.UasComponent.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.datamanagement.UasComponent.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.datamanagement.UasComponent.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.datamanagement.UasComponent.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }
}
