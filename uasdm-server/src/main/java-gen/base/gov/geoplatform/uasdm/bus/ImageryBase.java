package gov.geoplatform.uasdm.bus;

@com.runwaysdk.business.ClassSignature(hash = -1757814827)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Imagery.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ImageryBase extends gov.geoplatform.uasdm.bus.UasComponent
{
  public final static String CLASS = "gov.geoplatform.uasdm.bus.Imagery";
  private static final long serialVersionUID = -1757814827;
  
  public ImageryBase()
  {
    super();
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ImageryQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    ImageryQuery query = new ImageryQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public gov.geoplatform.uasdm.bus.ProjectHasImagery addProject(gov.geoplatform.uasdm.bus.Project project)
  {
    return (gov.geoplatform.uasdm.bus.ProjectHasImagery) addParent(project, gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);
  }
  
  public void removeProject(gov.geoplatform.uasdm.bus.Project project)
  {
    removeAllParents(project, gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends gov.geoplatform.uasdm.bus.Project> getAllProject()
  {
    return (com.runwaysdk.query.OIterator<? extends gov.geoplatform.uasdm.bus.Project>) getParents(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends gov.geoplatform.uasdm.bus.ProjectHasImagery> getAllProjectRel()
  {
    return (com.runwaysdk.query.OIterator<? extends gov.geoplatform.uasdm.bus.ProjectHasImagery>) getParentRelationships(gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public gov.geoplatform.uasdm.bus.ProjectHasImagery getProjectRel(gov.geoplatform.uasdm.bus.Project project)
  {
    com.runwaysdk.query.OIterator<? extends gov.geoplatform.uasdm.bus.ProjectHasImagery> iterator = (com.runwaysdk.query.OIterator<? extends gov.geoplatform.uasdm.bus.ProjectHasImagery>) getRelationshipsWithParent(project, gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static Imagery get(String oid)
  {
    return (Imagery) com.runwaysdk.business.Business.get(oid);
  }
  
  public static Imagery getByKey(String key)
  {
    return (Imagery) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static Imagery lock(java.lang.String oid)
  {
    Imagery _instance = Imagery.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static Imagery unlock(java.lang.String oid)
  {
    Imagery _instance = Imagery.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
