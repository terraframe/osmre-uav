package gov.geoplatform.uasdm.bus;

@com.runwaysdk.business.ClassSignature(hash = 428458116)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to DuplicateComponentException.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class DuplicateComponentExceptionBase extends com.runwaysdk.business.SmartException
{
  public final static String CLASS = "gov.geoplatform.uasdm.bus.DuplicateComponentException";
  public static java.lang.String CHILDCOMPONENTLABEL = "childComponentLabel";
  public static java.lang.String CHILDNAME = "childName";
  public static java.lang.String OID = "oid";
  public static java.lang.String PARENTNAME = "parentName";
  private static final long serialVersionUID = 428458116;
  
  public DuplicateComponentExceptionBase()
  {
    super();
  }
  
  public DuplicateComponentExceptionBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public DuplicateComponentExceptionBase(java.lang.String developerMessage, java.lang.Throwable cause)
  {
    super(developerMessage, cause);
  }
  
  public DuplicateComponentExceptionBase(java.lang.Throwable cause)
  {
    super(cause);
  }
  
  public String getChildComponentLabel()
  {
    return getValue(CHILDCOMPONENTLABEL);
  }
  
  public void validateChildComponentLabel()
  {
    this.validateAttribute(CHILDCOMPONENTLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getChildComponentLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.DuplicateComponentException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(CHILDCOMPONENTLABEL);
  }
  
  public void setChildComponentLabel(String value)
  {
    if(value == null)
    {
      setValue(CHILDCOMPONENTLABEL, "");
    }
    else
    {
      setValue(CHILDCOMPONENTLABEL, value);
    }
  }
  
  public String getChildName()
  {
    return getValue(CHILDNAME);
  }
  
  public void validateChildName()
  {
    this.validateAttribute(CHILDNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getChildNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.DuplicateComponentException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(CHILDNAME);
  }
  
  public void setChildName(String value)
  {
    if(value == null)
    {
      setValue(CHILDNAME, "");
    }
    else
    {
      setValue(CHILDNAME, value);
    }
  }
  
  public String getOid()
  {
    return getValue(OID);
  }
  
  public void validateOid()
  {
    this.validateAttribute(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.DuplicateComponentException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public String getParentName()
  {
    return getValue(PARENTNAME);
  }
  
  public void validateParentName()
  {
    this.validateAttribute(PARENTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getParentNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.DuplicateComponentException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(PARENTNAME);
  }
  
  public void setParentName(String value)
  {
    if(value == null)
    {
      setValue(PARENTNAME, "");
    }
    else
    {
      setValue(PARENTNAME, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{childComponentLabel}", this.getChildComponentLabel());
    message = replace(message, "{childName}", this.getChildName());
    message = replace(message, "{oid}", this.getOid());
    message = replace(message, "{parentName}", this.getParentName());
    return message;
  }
  
}
