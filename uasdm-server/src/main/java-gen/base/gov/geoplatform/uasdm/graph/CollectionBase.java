package gov.geoplatform.uasdm.graph;

@com.runwaysdk.business.ClassSignature(hash = 1732615370)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Collection.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class CollectionBase extends gov.geoplatform.uasdm.graph.UasComponent
{
  public final static String CLASS = "gov.geoplatform.uasdm.graph.Collection";
  public final static java.lang.String ACQUISITIONDATEEND = "acquisitionDateEnd";
  public final static java.lang.String ACQUISITIONDATESTART = "acquisitionDateStart";
  public final static java.lang.String AREACOVERED = "areaCovered";
  public final static java.lang.String COLLECTIONDATE = "collectionDate";
  public final static java.lang.String COLLECTIONENDDATE = "collectionEndDate";
  public final static java.lang.String COLLECTIONSENSOR = "collectionSensor";
  public final static java.lang.String EASTBOUND = "eastBound";
  public final static java.lang.String EXIFINCLUDED = "exifIncluded";
  public final static java.lang.String FLYINGHEIGHT = "flyingHeight";
  public final static java.lang.String IMAGEHEIGHT = "imageHeight";
  public final static java.lang.String IMAGEWIDTH = "imageWidth";
  public final static java.lang.String METADATAUPLOADED = "metadataUploaded";
  public final static java.lang.String NORTHBOUND = "northBound";
  public final static java.lang.String NUMBEROFFLIGHTS = "numberOfFlights";
  public final static java.lang.String PERCENTENDLAP = "percentEndLap";
  public final static java.lang.String PERCENTSIDELAP = "percentSideLap";
  public final static java.lang.String POCEMAIL = "pocEmail";
  public final static java.lang.String POCNAME = "pocName";
  public final static java.lang.String PRIVILEGETYPE = "privilegeType";
  public final static java.lang.String SOUTHBOUND = "southBound";
  public final static java.lang.String UAV = "uav";
  public final static java.lang.String WEATHERCONDITIONS = "weatherConditions";
  public final static java.lang.String WESTBOUND = "westBound";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = 1732615370;
  
  public CollectionBase()
  {
    super();
  }
  
  public java.util.Date getAcquisitionDateEnd()
  {
    return (java.util.Date) this.getObjectValue(ACQUISITIONDATEEND);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateDAOIF getAcquisitionDateEndMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateDAOIF)mdClassIF.definesAttribute(ACQUISITIONDATEEND);
  }
  
  public void setAcquisitionDateEnd(java.util.Date value)
  {
    this.setValue(ACQUISITIONDATEEND, value);
  }
  
  public java.util.Date getAcquisitionDateStart()
  {
    return (java.util.Date) this.getObjectValue(ACQUISITIONDATESTART);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateDAOIF getAcquisitionDateStartMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateDAOIF)mdClassIF.definesAttribute(ACQUISITIONDATESTART);
  }
  
  public void setAcquisitionDateStart(java.util.Date value)
  {
    this.setValue(ACQUISITIONDATESTART, value);
  }
  
  public java.math.BigDecimal getAreaCovered()
  {
    return (java.math.BigDecimal) this.getObjectValue(AREACOVERED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF getAreaCoveredMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF)mdClassIF.definesAttribute(AREACOVERED);
  }
  
  public void setAreaCovered(java.math.BigDecimal value)
  {
    this.setValue(AREACOVERED, value);
  }
  
  public java.util.Date getCollectionDate()
  {
    return (java.util.Date) this.getObjectValue(COLLECTIONDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateDAOIF getCollectionDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateDAOIF)mdClassIF.definesAttribute(COLLECTIONDATE);
  }
  
  public void setCollectionDate(java.util.Date value)
  {
    this.setValue(COLLECTIONDATE, value);
  }
  
  public java.util.Date getCollectionEndDate()
  {
    return (java.util.Date) this.getObjectValue(COLLECTIONENDDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getCollectionEndDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(COLLECTIONENDDATE);
  }
  
  public void setCollectionEndDate(java.util.Date value)
  {
    this.setValue(COLLECTIONENDDATE, value);
  }
  
  public gov.geoplatform.uasdm.graph.Sensor getCollectionSensor()
  {
    return (gov.geoplatform.uasdm.graph.Sensor) this.getObjectValue(COLLECTIONSENSOR);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getCollectionSensorMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(COLLECTIONSENSOR);
  }
  
  public void setCollectionSensor(gov.geoplatform.uasdm.graph.Sensor value)
  {
    this.setValue(COLLECTIONSENSOR, value);
  }
  
  public java.math.BigDecimal getEastBound()
  {
    return (java.math.BigDecimal) this.getObjectValue(EASTBOUND);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF getEastBoundMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF)mdClassIF.definesAttribute(EASTBOUND);
  }
  
  public void setEastBound(java.math.BigDecimal value)
  {
    this.setValue(EASTBOUND, value);
  }
  
  public Boolean getExifIncluded()
  {
    return (Boolean) this.getObjectValue(EXIFINCLUDED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getExifIncludedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(EXIFINCLUDED);
  }
  
  public void setExifIncluded(Boolean value)
  {
    this.setValue(EXIFINCLUDED, value);
  }
  
  public Integer getFlyingHeight()
  {
    return (Integer) this.getObjectValue(FLYINGHEIGHT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getFlyingHeightMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(FLYINGHEIGHT);
  }
  
  public void setFlyingHeight(Integer value)
  {
    this.setValue(FLYINGHEIGHT, value);
  }
  
  public Integer getImageHeight()
  {
    return (Integer) this.getObjectValue(IMAGEHEIGHT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getImageHeightMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(IMAGEHEIGHT);
  }
  
  public void setImageHeight(Integer value)
  {
    this.setValue(IMAGEHEIGHT, value);
  }
  
  public Integer getImageWidth()
  {
    return (Integer) this.getObjectValue(IMAGEWIDTH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getImageWidthMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(IMAGEWIDTH);
  }
  
  public void setImageWidth(Integer value)
  {
    this.setValue(IMAGEWIDTH, value);
  }
  
  public Boolean getMetadataUploaded()
  {
    return (Boolean) this.getObjectValue(METADATAUPLOADED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getMetadataUploadedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(METADATAUPLOADED);
  }
  
  public void setMetadataUploaded(Boolean value)
  {
    this.setValue(METADATAUPLOADED, value);
  }
  
  public java.math.BigDecimal getNorthBound()
  {
    return (java.math.BigDecimal) this.getObjectValue(NORTHBOUND);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF getNorthBoundMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF)mdClassIF.definesAttribute(NORTHBOUND);
  }
  
  public void setNorthBound(java.math.BigDecimal value)
  {
    this.setValue(NORTHBOUND, value);
  }
  
  public Integer getNumberOfFlights()
  {
    return (Integer) this.getObjectValue(NUMBEROFFLIGHTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getNumberOfFlightsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(NUMBEROFFLIGHTS);
  }
  
  public void setNumberOfFlights(Integer value)
  {
    this.setValue(NUMBEROFFLIGHTS, value);
  }
  
  public Integer getPercentEndLap()
  {
    return (Integer) this.getObjectValue(PERCENTENDLAP);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getPercentEndLapMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(PERCENTENDLAP);
  }
  
  public void setPercentEndLap(Integer value)
  {
    this.setValue(PERCENTENDLAP, value);
  }
  
  public Integer getPercentSideLap()
  {
    return (Integer) this.getObjectValue(PERCENTSIDELAP);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getPercentSideLapMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(PERCENTSIDELAP);
  }
  
  public void setPercentSideLap(Integer value)
  {
    this.setValue(PERCENTSIDELAP, value);
  }
  
  public String getPocEmail()
  {
    return (String) this.getObjectValue(POCEMAIL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getPocEmailMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(POCEMAIL);
  }
  
  public void setPocEmail(String value)
  {
    this.setValue(POCEMAIL, value);
  }
  
  public String getPocName()
  {
    return (String) this.getObjectValue(POCNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getPocNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(POCNAME);
  }
  
  public void setPocName(String value)
  {
    this.setValue(POCNAME, value);
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.bus.AllPrivilegeType> getPrivilegeType()
  {
    return (java.util.List<gov.geoplatform.uasdm.bus.AllPrivilegeType>) getEnumValues(PRIVILEGETYPE);
  }
  
  public void addPrivilegeType(gov.geoplatform.uasdm.bus.AllPrivilegeType value)
  {
    if(value != null)
    {
      addEnumItem(PRIVILEGETYPE, value.getOid());
    }
  }
  
  public void removePrivilegeType(gov.geoplatform.uasdm.bus.AllPrivilegeType value)
  {
    if(value != null)
    {
      removeEnumItem(PRIVILEGETYPE, value.getOid());
    }
  }
  
  public void clearPrivilegeType()
  {
    clearEnum(PRIVILEGETYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF getPrivilegeTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF)mdClassIF.definesAttribute(PRIVILEGETYPE);
  }
  
  public java.math.BigDecimal getSouthBound()
  {
    return (java.math.BigDecimal) this.getObjectValue(SOUTHBOUND);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF getSouthBoundMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF)mdClassIF.definesAttribute(SOUTHBOUND);
  }
  
  public void setSouthBound(java.math.BigDecimal value)
  {
    this.setValue(SOUTHBOUND, value);
  }
  
  public gov.geoplatform.uasdm.graph.UAV getUav()
  {
    return (gov.geoplatform.uasdm.graph.UAV) this.getObjectValue(UAV);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getUavMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(UAV);
  }
  
  public void setUav(gov.geoplatform.uasdm.graph.UAV value)
  {
    this.setValue(UAV, value);
  }
  
  public String getWeatherConditions()
  {
    return (String) this.getObjectValue(WEATHERCONDITIONS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getWeatherConditionsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(WEATHERCONDITIONS);
  }
  
  public void setWeatherConditions(String value)
  {
    this.setValue(WEATHERCONDITIONS, value);
  }
  
  public java.math.BigDecimal getWestBound()
  {
    return (java.math.BigDecimal) this.getObjectValue(WESTBOUND);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF getWestBoundMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF)mdClassIF.definesAttribute(WESTBOUND);
  }
  
  public void setWestBound(java.math.BigDecimal value)
  {
    this.setValue(WESTBOUND, value);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.business.graph.EdgeObject addMissionHasCollectionParent(gov.geoplatform.uasdm.graph.Mission mission)
  {
    return super.addParent(mission, "gov.geoplatform.uasdm.graph.MissionHasCollection");
  }
  
  public void removeMissionHasCollectionParent(gov.geoplatform.uasdm.graph.Mission mission)
  {
    super.removeParent(mission, "gov.geoplatform.uasdm.graph.MissionHasCollection");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Mission> getMissionHasCollectionParentMissions()
  {
    return super.getParents("gov.geoplatform.uasdm.graph.MissionHasCollection", gov.geoplatform.uasdm.graph.Mission.class);
  }
  
  public static Collection get(String oid)
  {
    return (Collection) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
