package gov.geoplatform.uasdm.graph;

@com.runwaysdk.business.ClassSignature(hash = -2021737723)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Collection.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class CollectionBase extends gov.geoplatform.uasdm.graph.UasComponent
{
  public final static String CLASS = "gov.geoplatform.uasdm.graph.Collection";
  public static java.lang.String IMAGEHEIGHT = "imageHeight";
  public static java.lang.String IMAGEWIDTH = "imageWidth";
  public static java.lang.String METADATAUPLOADED = "metadataUploaded";
  public static java.lang.String PLATFORM = "platform";
  public static java.lang.String PRIVILEGETYPE = "privilegeType";
  public static java.lang.String SENSOR = "sensor";
  private static final long serialVersionUID = -2021737723;
  
  public CollectionBase()
  {
    super();
  }
  
  public Integer getImageHeight()
  {
    return (Integer) this.getValue(IMAGEHEIGHT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getImageHeightMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(IMAGEHEIGHT);
  }
  
  public void setImageHeight(Integer value)
  {
    this.setValue(IMAGEHEIGHT, value);
  }
  
  public Integer getImageWidth()
  {
    return (Integer) this.getValue(IMAGEWIDTH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getImageWidthMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(IMAGEWIDTH);
  }
  
  public void setImageWidth(Integer value)
  {
    this.setValue(IMAGEWIDTH, value);
  }
  
  public Boolean getMetadataUploaded()
  {
    return (Boolean) this.getValue(METADATAUPLOADED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getMetadataUploadedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(METADATAUPLOADED);
  }
  
  public void setMetadataUploaded(Boolean value)
  {
    this.setValue(METADATAUPLOADED, value);
  }
  
  public gov.geoplatform.uasdm.bus.Platform getPlatform()
  {
    if (getValue(PLATFORM) == null)
    {
      return null;
    }
    else
    {
      return gov.geoplatform.uasdm.bus.Platform.get( (String) this.getValue(PLATFORM));
    }
  }
  
  public String getPlatformOid()
  {
    return (String) this.getValue(PLATFORM);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getPlatformMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(PLATFORM);
  }
  
  public void setPlatform(gov.geoplatform.uasdm.bus.Platform value)
  {
    this.setValue(PLATFORM, value.getOid());
  }
  
  public void setPlatformId(java.lang.String oid)
  {
    this.setValue(PLATFORM, oid);
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.bus.AllPrivilegeType> getPrivilegeType()
  {
    return (java.util.List<gov.geoplatform.uasdm.bus.AllPrivilegeType>) getEnumValues(PRIVILEGETYPE);
  }
  
  public void addPrivilegeType(gov.geoplatform.uasdm.bus.AllPrivilegeType value)
  {
    if(value != null)
    {
      addEnumItem(PRIVILEGETYPE, value.getOid());
    }
  }
  
  public void removePrivilegeType(gov.geoplatform.uasdm.bus.AllPrivilegeType value)
  {
    if(value != null)
    {
      removeEnumItem(PRIVILEGETYPE, value.getOid());
    }
  }
  
  public void clearPrivilegeType()
  {
    clearEnum(PRIVILEGETYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF getPrivilegeTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF)mdClassIF.definesAttribute(PRIVILEGETYPE);
  }
  
  public gov.geoplatform.uasdm.bus.Sensor getSensor()
  {
    if (getValue(SENSOR) == null)
    {
      return null;
    }
    else
    {
      return gov.geoplatform.uasdm.bus.Sensor.get( (String) this.getValue(SENSOR));
    }
  }
  
  public String getSensorOid()
  {
    return (String) this.getValue(SENSOR);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getSensorMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Collection.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(SENSOR);
  }
  
  public void setSensor(gov.geoplatform.uasdm.bus.Sensor value)
  {
    this.setValue(SENSOR, value.getOid());
  }
  
  public void setSensorId(java.lang.String oid)
  {
    this.setValue(SENSOR, oid);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public void addMissionHasCollectionParent(gov.geoplatform.uasdm.graph.Mission mission)
  {
    super.addParent(mission, "gov.geoplatform.uasdm.graph.MissionHasCollection");
  }
  
  public void removeMissionHasCollectionParent(gov.geoplatform.uasdm.graph.Mission mission)
  {
    super.addParent(mission, "gov.geoplatform.uasdm.graph.MissionHasCollection");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Mission> getMissionHasCollectionParentMissions()
  {
    return super.getParents("gov.geoplatform.uasdm.graph.MissionHasCollection", gov.geoplatform.uasdm.graph.Mission.class);
  }
  
  public static Collection get(String oid)
  {
    return (Collection) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
