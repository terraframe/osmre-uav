package gov.geoplatform.uasdm.account;

@com.runwaysdk.business.ClassSignature(hash = -211048831)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to UserImportProblem.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class UserImportProblemBase extends com.runwaysdk.business.SmartException
{
  public final static String CLASS = "gov.geoplatform.uasdm.account.UserImportProblem";
  public final static java.lang.String LINE = "line";
  public final static java.lang.String OID = "oid";
  public final static java.lang.String REASON = "reason";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = -211048831;
  
  public UserImportProblemBase()
  {
    super();
  }
  
  public UserImportProblemBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public UserImportProblemBase(java.lang.String developerMessage, java.lang.Throwable cause)
  {
    super(developerMessage, cause);
  }
  
  public UserImportProblemBase(java.lang.Throwable cause)
  {
    super(cause);
  }
  
  public Integer getLine()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(LINE));
  }
  
  public void validateLine()
  {
    this.validateAttribute(LINE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getLineMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.account.UserImportProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(LINE);
  }
  
  public void setLine(Integer value)
  {
    if(value == null)
    {
      setValue(LINE, "");
    }
    else
    {
      setValue(LINE, java.lang.Integer.toString(value));
    }
  }
  
  public String getOid()
  {
    return getValue(OID);
  }
  
  public void validateOid()
  {
    this.validateAttribute(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.account.UserImportProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public String getReason()
  {
    return getValue(REASON);
  }
  
  public void validateReason()
  {
    this.validateAttribute(REASON);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getReasonMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.account.UserImportProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(REASON);
  }
  
  public void setReason(String value)
  {
    if(value == null)
    {
      setValue(REASON, "");
    }
    else
    {
      setValue(REASON, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{line}", this.getLine());
    message = replace(message, "{oid}", this.getOid());
    message = replace(message, "{reason}", this.getReason());
    return message;
  }
  
}
