/**
 * Copyright 2020 The Department of Interior
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.geoplatform.uasdm.bus;

@com.runwaysdk.business.ClassSignature(hash = -266810511)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MissingUploadMessage.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MissingUploadMessageBase extends gov.geoplatform.uasdm.bus.AbstractMessage
{
  public final static String CLASS = "gov.geoplatform.uasdm.bus.MissingUploadMessage";
  public static java.lang.String COMPONENT = "component";
  private static final long serialVersionUID = -266810511;
  
  public MissingUploadMessageBase()
  {
    super();
  }
  
  public String getComponent()
  {
    return getValue(COMPONENT);
  }
  
  public void validateComponent()
  {
    this.validateAttribute(COMPONENT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getComponentMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.MissingUploadMessage.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(COMPONENT);
  }
  
  public void setComponent(String value)
  {
    if(value == null)
    {
      setValue(COMPONENT, "");
    }
    else
    {
      setValue(COMPONENT, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static MissingUploadMessageQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    MissingUploadMessageQuery query = new MissingUploadMessageQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static MissingUploadMessage get(String oid)
  {
    return (MissingUploadMessage) com.runwaysdk.business.Business.get(oid);
  }
  
  public static MissingUploadMessage getByKey(String key)
  {
    return (MissingUploadMessage) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static MissingUploadMessage lock(java.lang.String oid)
  {
    MissingUploadMessage _instance = MissingUploadMessage.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static MissingUploadMessage unlock(java.lang.String oid)
  {
    MissingUploadMessage _instance = MissingUploadMessage.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
