/**
 * Copyright 2020 The Department of Interior
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.geoplatform.uasdm.graph;

@com.runwaysdk.business.ClassSignature(hash = 1683954891)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to UserAccessEntity.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class UserAccessEntityBase extends com.runwaysdk.business.graph.VertexObject
{
  public final static String CLASS = "gov.geoplatform.uasdm.graph.UserAccessEntity";
  public final static java.lang.String OID = "oid";
  public final static java.lang.String SEQ = "seq";
  public final static java.lang.String USER = "user";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = 1683954891;
  
  public UserAccessEntityBase()
  {
    super();
  }
  
  public String getOid()
  {
    return (String) this.getObjectValue(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.UserAccessEntity.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public Long getSeq()
  {
    return (Long) this.getObjectValue(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.UserAccessEntity.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public void setSeq(Long value)
  {
    this.setValue(SEQ, value);
  }
  
  public net.geoprism.GeoprismUser getUser()
  {
    if (this.getObjectValue(USER) == null)
    {
      return null;
    }
    else
    {
      return net.geoprism.GeoprismUser.get( (String) this.getObjectValue(USER));
    }
  }
  
  public String getUserOid()
  {
    return (String) this.getObjectValue(USER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getUserMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.UserAccessEntity.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(USER);
  }
  
  public void setUser(net.geoprism.GeoprismUser value)
  {
    this.setValue(USER, value.getOid());
  }
  
  public void setUserId(java.lang.String oid)
  {
    this.setValue(USER, oid);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.business.graph.EdgeObject addUserHasAccessChild(gov.geoplatform.uasdm.graph.UasComponent uasComponent)
  {
    return super.addChild(uasComponent, "gov.geoplatform.uasdm.graph.UserHasAccess");
  }
  
  public void removeUserHasAccessChild(gov.geoplatform.uasdm.graph.UasComponent uasComponent)
  {
    super.removeChild(uasComponent, "gov.geoplatform.uasdm.graph.UserHasAccess");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.UasComponent> getUserHasAccessChildUasComponents()
  {
    return super.getChildren("gov.geoplatform.uasdm.graph.UserHasAccess",gov.geoplatform.uasdm.graph.UasComponent.class);
  }
  
  public static UserAccessEntity get(String oid)
  {
    return (UserAccessEntity) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
