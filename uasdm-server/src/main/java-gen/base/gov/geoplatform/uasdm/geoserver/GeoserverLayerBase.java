package gov.geoplatform.uasdm.geoserver;

@com.runwaysdk.business.ClassSignature(hash = 237407381)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to GeoserverLayer.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class GeoserverLayerBase extends com.runwaysdk.business.graph.VertexObject
{
  public final static String CLASS = "gov.geoplatform.uasdm.geoserver.GeoserverLayer";
  public static java.lang.String DIRTY = "dirty";
  public static java.lang.String ISPUBLIC = "isPublic";
  public static java.lang.String LAYERKEY = "layerKey";
  public static java.lang.String OID = "oid";
  public static java.lang.String SEQ = "seq";
  public static java.lang.String STORENAME = "storeName";
  public static java.lang.String WORKSPACE = "workspace";
  private static final long serialVersionUID = 237407381;
  
  public GeoserverLayerBase()
  {
    super();
  }
  
  public Boolean getDirty()
  {
    return (Boolean) this.getObjectValue(DIRTY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getDirtyMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.geoserver.GeoserverLayer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(DIRTY);
  }
  
  public void setDirty(Boolean value)
  {
    this.setValue(DIRTY, value);
  }
  
  public Boolean getIsPublic()
  {
    return (Boolean) this.getObjectValue(ISPUBLIC);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsPublicMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.geoserver.GeoserverLayer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISPUBLIC);
  }
  
  public void setIsPublic(Boolean value)
  {
    this.setValue(ISPUBLIC, value);
  }
  
  public String getLayerKey()
  {
    return (String) this.getObjectValue(LAYERKEY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getLayerKeyMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.geoserver.GeoserverLayer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(LAYERKEY);
  }
  
  public void setLayerKey(String value)
  {
    this.setValue(LAYERKEY, value);
  }
  
  public String getOid()
  {
    return (String) this.getObjectValue(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.geoserver.GeoserverLayer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public Long getSeq()
  {
    return (Long) this.getObjectValue(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.geoserver.GeoserverLayer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public void setSeq(Long value)
  {
    this.setValue(SEQ, value);
  }
  
  public String getStoreName()
  {
    return (String) this.getObjectValue(STORENAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getStoreNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.geoserver.GeoserverLayer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(STORENAME);
  }
  
  public void setStoreName(String value)
  {
    this.setValue(STORENAME, value);
  }
  
  public String getWorkspace()
  {
    return (String) this.getObjectValue(WORKSPACE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getWorkspaceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.geoserver.GeoserverLayer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(WORKSPACE);
  }
  
  public void setWorkspace(String value)
  {
    this.setValue(WORKSPACE, value);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.business.graph.EdgeObject addDocumentHasLayerParent(gov.geoplatform.uasdm.graph.Document document)
  {
    return super.addParent(document, "gov.geoplatform.uasdm.geoserver.DocumentHasLayer");
  }
  
  public void removeDocumentHasLayerParent(gov.geoplatform.uasdm.graph.Document document)
  {
    super.removeParent(document, "gov.geoplatform.uasdm.geoserver.DocumentHasLayer");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Document> getDocumentHasLayerParentDocuments()
  {
    return super.getParents("gov.geoplatform.uasdm.geoserver.DocumentHasLayer", gov.geoplatform.uasdm.graph.Document.class);
  }
  
  public static GeoserverLayer get(String oid)
  {
    return (GeoserverLayer) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
