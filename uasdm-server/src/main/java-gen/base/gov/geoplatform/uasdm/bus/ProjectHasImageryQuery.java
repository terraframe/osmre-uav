package gov.geoplatform.uasdm.bus;

@com.runwaysdk.business.ClassSignature(hash = -1193065595)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ProjectHasImagery.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class ProjectHasImageryQuery extends gov.geoplatform.uasdm.bus.ComponentHasComponentQuery
{

  public ProjectHasImageryQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super(componentQueryFactory);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.RelationshipQuery relationshipQuery = componentQueryFactory.relationshipQuery(this.getClassType());

       this.setRelationshipQuery(relationshipQuery);
    }
  }

  public ProjectHasImageryQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
    super(valueQuery);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.RelationshipQuery relationshipQuery = new com.runwaysdk.business.RelationshipQuery(valueQuery, this.getClassType());

       this.setRelationshipQuery(relationshipQuery);
    }
  }

  public String getClassType()
  {
    return gov.geoplatform.uasdm.bus.ProjectHasImagery.CLASS;
  }
  /**
   * Restricts the query to include objects that are children in this relationship.
   * @param imageryQuery
   * @return Condition restricting objects that are children in this relationship.
   */
   public com.runwaysdk.query.Condition hasChild(gov.geoplatform.uasdm.bus.ImageryQuery imageryQuery)
   {
     return this.getRelationshipQuery().hasChild(imageryQuery);
   }
  /**
   * Restricts the query to include objects that are children in this relationship.
   * @param imageryQuery
   * @return Condition restricting objects that are children in this relationship.
   */
   public com.runwaysdk.query.Condition doesNotHaveChild(gov.geoplatform.uasdm.bus.ImageryQuery imageryQuery)
   {
     return this.getRelationshipQuery().doesNotHaveChild(imageryQuery);
   }
  /**
   * Restricts the query to include objects that are parents in this relationship.
   * @param projectQuery
   * @return Condition restricting objects that are parents in this relationship.
   */
   public com.runwaysdk.query.Condition hasParent(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery)
   {
     return this.getRelationshipQuery().hasParent(projectQuery);
   }
  /**
   * Restricts the query to include objects that are parents in this relationship.
   * @param projectQuery
   * @return Condition restricting objects that are parents in this relationship.
   */
   public com.runwaysdk.query.Condition doesNotHaveParent(gov.geoplatform.uasdm.bus.ProjectQuery projectQuery)
   {
     return this.getRelationshipQuery().doesNotHaveParent(projectQuery);
   }
  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends ProjectHasImagery> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.RelationshipIterator<ProjectHasImagery>(this.getComponentQuery().getMdEntityIF(), this.getRelationshipQuery(), columnInfoMap, results);
  }

}
