/**
 * Copyright 2020 The Department of Interior
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.geoplatform.uasdm.graph;

@com.runwaysdk.business.ClassSignature(hash = 44710905)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Sensor.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class SensorBase extends com.runwaysdk.business.graph.VertexObject
{
  public final static String CLASS = "gov.geoplatform.uasdm.graph.Sensor";
  public static java.lang.String DATECREATED = "dateCreated";
  public static java.lang.String DATEUPDATED = "dateUpdated";
  public static java.lang.String DESCRIPTION = "description";
  public static java.lang.String MODEL = "model";
  public static java.lang.String NAME = "name";
  public static java.lang.String OID = "oid";
  public static java.lang.String PIXELSIZEHEIGHT = "pixelSizeHeight";
  public static java.lang.String PIXELSIZEWIDTH = "pixelSizeWidth";
  public static java.lang.String SENSORHEIGHT = "sensorHeight";
  public static java.lang.String SENSORTYPE = "sensorType";
  public static java.lang.String SENSORWIDTH = "sensorWidth";
  public static java.lang.String SEQ = "seq";
  private static final long serialVersionUID = 44710905;
  
  public SensorBase()
  {
    super();
  }
  
  public java.util.Date getDateCreated()
  {
    return (java.util.Date) this.getObjectValue(DATECREATED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateDAOIF getDateCreatedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Sensor.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateDAOIF)mdClassIF.definesAttribute(DATECREATED);
  }
  
  public void setDateCreated(java.util.Date value)
  {
    this.setValue(DATECREATED, value);
  }
  
  public java.util.Date getDateUpdated()
  {
    return (java.util.Date) this.getObjectValue(DATEUPDATED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateDAOIF getDateUpdatedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Sensor.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateDAOIF)mdClassIF.definesAttribute(DATEUPDATED);
  }
  
  public void setDateUpdated(java.util.Date value)
  {
    this.setValue(DATEUPDATED, value);
  }
  
  public String getDescription()
  {
    return (String) this.getObjectValue(DESCRIPTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getDescriptionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Sensor.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(DESCRIPTION);
  }
  
  public void setDescription(String value)
  {
    this.setValue(DESCRIPTION, value);
  }
  
  public String getModel()
  {
    return (String) this.getObjectValue(MODEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getModelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Sensor.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(MODEL);
  }
  
  public void setModel(String value)
  {
    this.setValue(MODEL, value);
  }
  
  public String getName()
  {
    return (String) this.getObjectValue(NAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Sensor.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(NAME);
  }
  
  public void setName(String value)
  {
    this.setValue(NAME, value);
  }
  
  public String getOid()
  {
    return (String) this.getObjectValue(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Sensor.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public Integer getPixelSizeHeight()
  {
    return (Integer) this.getObjectValue(PIXELSIZEHEIGHT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getPixelSizeHeightMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Sensor.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(PIXELSIZEHEIGHT);
  }
  
  public void setPixelSizeHeight(Integer value)
  {
    this.setValue(PIXELSIZEHEIGHT, value);
  }
  
  public Integer getPixelSizeWidth()
  {
    return (Integer) this.getObjectValue(PIXELSIZEWIDTH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getPixelSizeWidthMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Sensor.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(PIXELSIZEWIDTH);
  }
  
  public void setPixelSizeWidth(Integer value)
  {
    this.setValue(PIXELSIZEWIDTH, value);
  }
  
  public Integer getSensorHeight()
  {
    return (Integer) this.getObjectValue(SENSORHEIGHT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getSensorHeightMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Sensor.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(SENSORHEIGHT);
  }
  
  public void setSensorHeight(Integer value)
  {
    this.setValue(SENSORHEIGHT, value);
  }
  
  public gov.geoplatform.uasdm.graph.SensorType getSensorType()
  {
    return (gov.geoplatform.uasdm.graph.SensorType) this.getObjectValue(SENSORTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getSensorTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Sensor.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(SENSORTYPE);
  }
  
  public void setSensorType(gov.geoplatform.uasdm.graph.SensorType value)
  {
    this.setValue(SENSORTYPE, value);
  }
  
  public Integer getSensorWidth()
  {
    return (Integer) this.getObjectValue(SENSORWIDTH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getSensorWidthMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Sensor.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(SENSORWIDTH);
  }
  
  public void setSensorWidth(Integer value)
  {
    this.setValue(SENSORWIDTH, value);
  }
  
  public Long getSeq()
  {
    return (Long) this.getObjectValue(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Sensor.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public void setSeq(Long value)
  {
    this.setValue(SEQ, value);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.business.graph.EdgeObject addSensorHasWaveLengthChild(gov.geoplatform.uasdm.graph.WaveLength waveLength)
  {
    return super.addChild(waveLength, "gov.geoplatform.uasdm.graph.SensorHasWaveLength");
  }
  
  public void removeSensorHasWaveLengthChild(gov.geoplatform.uasdm.graph.WaveLength waveLength)
  {
    super.removeChild(waveLength, "gov.geoplatform.uasdm.graph.SensorHasWaveLength");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.WaveLength> getSensorHasWaveLengthChildWaveLengths()
  {
    return super.getChildren("gov.geoplatform.uasdm.graph.SensorHasWaveLength",gov.geoplatform.uasdm.graph.WaveLength.class);
  }
  
  public com.runwaysdk.business.graph.EdgeObject addPlatformHasSensorParent(gov.geoplatform.uasdm.graph.Platform platform)
  {
    return super.addParent(platform, "gov.geoplatform.uasdm.graph.PlatformHasSensor");
  }
  
  public void removePlatformHasSensorParent(gov.geoplatform.uasdm.graph.Platform platform)
  {
    super.removeParent(platform, "gov.geoplatform.uasdm.graph.PlatformHasSensor");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Platform> getPlatformHasSensorParentPlatforms()
  {
    return super.getParents("gov.geoplatform.uasdm.graph.PlatformHasSensor", gov.geoplatform.uasdm.graph.Platform.class);
  }
  
  public static Sensor get(String oid)
  {
    return (Sensor) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
