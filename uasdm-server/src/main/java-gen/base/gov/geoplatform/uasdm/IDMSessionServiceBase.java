package gov.geoplatform.uasdm;

@com.runwaysdk.business.ClassSignature(hash = 1351568956)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to IDMSessionService.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class IDMSessionServiceBase extends com.runwaysdk.business.Util
{
  public final static String CLASS = "gov.geoplatform.uasdm.IDMSessionService";
  public static java.lang.String OID = "oid";
  private static final long serialVersionUID = 1351568956;
  
  public IDMSessionServiceBase()
  {
    super();
  }
  
  public String getOid()
  {
    return getValue(OID);
  }
  
  public void validateOid()
  {
    this.validateAttribute(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.IDMSessionService.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static IDMSessionService get(String oid)
  {
    return (IDMSessionService) com.runwaysdk.business.Util.get(oid);
  }
  
  public static java.lang.String keycloakLogin(java.lang.String userJson, java.lang.String roles, java.lang.String locales)
  {
    String msg = "This method should never be invoked.  It should be overwritten in gov.geoplatform.uasdm.IDMSessionService.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
