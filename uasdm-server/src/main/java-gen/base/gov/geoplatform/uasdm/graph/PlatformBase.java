package gov.geoplatform.uasdm.graph;

@com.runwaysdk.business.ClassSignature(hash = 805892914)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Platform.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class PlatformBase extends com.runwaysdk.business.graph.VertexObject
{
  public final static String CLASS = "gov.geoplatform.uasdm.graph.Platform";
  public static java.lang.String DATECREATED = "dateCreated";
  public static java.lang.String DATEUPDATED = "dateUpdated";
  public static java.lang.String DESCRIPTION = "description";
  public static java.lang.String MANUFACTURER = "manufacturer";
  public static java.lang.String NAME = "name";
  public static java.lang.String OID = "oid";
  public static java.lang.String PLATFORMTYPE = "platformType";
  public static java.lang.String SEQ = "seq";
  private static final long serialVersionUID = 805892914;
  
  public PlatformBase()
  {
    super();
  }
  
  public java.util.Date getDateCreated()
  {
    return (java.util.Date) this.getObjectValue(DATECREATED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateDAOIF getDateCreatedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Platform.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateDAOIF)mdClassIF.definesAttribute(DATECREATED);
  }
  
  public void setDateCreated(java.util.Date value)
  {
    this.setValue(DATECREATED, value);
  }
  
  public java.util.Date getDateUpdated()
  {
    return (java.util.Date) this.getObjectValue(DATEUPDATED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateDAOIF getDateUpdatedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Platform.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateDAOIF)mdClassIF.definesAttribute(DATEUPDATED);
  }
  
  public void setDateUpdated(java.util.Date value)
  {
    this.setValue(DATEUPDATED, value);
  }
  
  public String getDescription()
  {
    return (String) this.getObjectValue(DESCRIPTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getDescriptionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Platform.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(DESCRIPTION);
  }
  
  public void setDescription(String value)
  {
    this.setValue(DESCRIPTION, value);
  }
  
  public gov.geoplatform.uasdm.graph.PlatformManufacturer getManufacturer()
  {
    return (gov.geoplatform.uasdm.graph.PlatformManufacturer) this.getObjectValue(MANUFACTURER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getManufacturerMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Platform.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(MANUFACTURER);
  }
  
  public void setManufacturer(gov.geoplatform.uasdm.graph.PlatformManufacturer value)
  {
    this.setValue(MANUFACTURER, value);
  }
  
  public String getName()
  {
    return (String) this.getObjectValue(NAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Platform.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(NAME);
  }
  
  public void setName(String value)
  {
    this.setValue(NAME, value);
  }
  
  public String getOid()
  {
    return (String) this.getObjectValue(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Platform.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public gov.geoplatform.uasdm.graph.PlatformType getPlatformType()
  {
    return (gov.geoplatform.uasdm.graph.PlatformType) this.getObjectValue(PLATFORMTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getPlatformTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Platform.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(PLATFORMTYPE);
  }
  
  public void setPlatformType(gov.geoplatform.uasdm.graph.PlatformType value)
  {
    this.setValue(PLATFORMTYPE, value);
  }
  
  public Long getSeq()
  {
    return (Long) this.getObjectValue(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Platform.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public void setSeq(Long value)
  {
    this.setValue(SEQ, value);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.business.graph.EdgeObject addPlatformHasSensorChild(gov.geoplatform.uasdm.graph.Sensor sensor)
  {
    return super.addChild(sensor, "gov.geoplatform.uasdm.graph.PlatformHasSensor");
  }
  
  public void removePlatformHasSensorChild(gov.geoplatform.uasdm.graph.Sensor sensor)
  {
    super.removeChild(sensor, "gov.geoplatform.uasdm.graph.PlatformHasSensor");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Sensor> getPlatformHasSensorChildSensors()
  {
    return super.getChildren("gov.geoplatform.uasdm.graph.PlatformHasSensor",gov.geoplatform.uasdm.graph.Sensor.class);
  }
  
  public static Platform get(String oid)
  {
    return (Platform) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
