package gov.geoplatform.uasdm.graph;

@com.runwaysdk.business.ClassSignature(hash = 1315485387)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Project.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ProjectBase extends gov.geoplatform.uasdm.graph.UasComponent
{
  public final static String CLASS = "gov.geoplatform.uasdm.graph.Project";
  private static final long serialVersionUID = 1315485387;
  
  public ProjectBase()
  {
    super();
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public void addProjectHasMissionChild(gov.geoplatform.uasdm.graph.Mission mission)
  {
    super.addChild(mission, "gov.geoplatform.uasdm.graph.ProjectHasMission");
  }
  
  public void removeProjectHasMissionChild(gov.geoplatform.uasdm.graph.Mission mission)
  {
    super.addChild(mission, "gov.geoplatform.uasdm.graph.ProjectHasMission");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Mission> getProjectHasMissionChildMissions()
  {
    return super.getChildren("gov.geoplatform.uasdm.graph.ProjectHasMission",gov.geoplatform.uasdm.graph.Mission.class);
  }
  
  public void addSiteHasProjectParent(gov.geoplatform.uasdm.graph.Site site)
  {
    super.addParent(site, "gov.geoplatform.uasdm.graph.SiteHasProject");
  }
  
  public void removeSiteHasProjectParent(gov.geoplatform.uasdm.graph.Site site)
  {
    super.addParent(site, "gov.geoplatform.uasdm.graph.SiteHasProject");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Site> getSiteHasProjectParentSites()
  {
    return super.getParents("gov.geoplatform.uasdm.graph.SiteHasProject", gov.geoplatform.uasdm.graph.Site.class);
  }
  
  public static Project get(String oid)
  {
    return (Project) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
