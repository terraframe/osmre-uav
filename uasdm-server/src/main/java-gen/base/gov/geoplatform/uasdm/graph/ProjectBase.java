/**
 * Copyright 2020 The Department of Interior
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.geoplatform.uasdm.graph;

@com.runwaysdk.business.ClassSignature(hash = 1768487994)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Project.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ProjectBase extends gov.geoplatform.uasdm.graph.UasComponent
{
  public final static String CLASS = "gov.geoplatform.uasdm.graph.Project";
  public final static java.lang.String PROJECTTYPE = "projectType";
  public final static java.lang.String RESTRICTED = "restricted";
  public final static java.lang.String SHORTNAME = "shortName";
  public final static java.lang.String SUNSETDATE = "sunsetDate";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = 1768487994;
  
  public ProjectBase()
  {
    super();
  }
  
  public String getProjectType()
  {
    return (String) this.getObjectValue(PROJECTTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getProjectTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Project.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(PROJECTTYPE);
  }
  
  public void setProjectType(String value)
  {
    this.setValue(PROJECTTYPE, value);
  }
  
  public Boolean getRestricted()
  {
    return (Boolean) this.getObjectValue(RESTRICTED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getRestrictedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Project.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(RESTRICTED);
  }
  
  public void setRestricted(Boolean value)
  {
    this.setValue(RESTRICTED, value);
  }
  
  public String getShortName()
  {
    return (String) this.getObjectValue(SHORTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getShortNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Project.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(SHORTNAME);
  }
  
  public void setShortName(String value)
  {
    this.setValue(SHORTNAME, value);
  }
  
  public java.util.Date getSunsetDate()
  {
    return (java.util.Date) this.getObjectValue(SUNSETDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateDAOIF getSunsetDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Project.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateDAOIF)mdClassIF.definesAttribute(SUNSETDATE);
  }
  
  public void setSunsetDate(java.util.Date value)
  {
    this.setValue(SUNSETDATE, value);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.business.graph.EdgeObject addProjectHasImageryChild(gov.geoplatform.uasdm.graph.Imagery imagery)
  {
    return super.addChild(imagery, "gov.geoplatform.uasdm.graph.ProjectHasImagery");
  }
  
  public void removeProjectHasImageryChild(gov.geoplatform.uasdm.graph.Imagery imagery)
  {
    super.removeChild(imagery, "gov.geoplatform.uasdm.graph.ProjectHasImagery");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Imagery> getProjectHasImageryChildImagerys()
  {
    return super.getChildren("gov.geoplatform.uasdm.graph.ProjectHasImagery",gov.geoplatform.uasdm.graph.Imagery.class);
  }
  
  public com.runwaysdk.business.graph.EdgeObject addProjectHasMissionChild(gov.geoplatform.uasdm.graph.Mission mission)
  {
    return super.addChild(mission, "gov.geoplatform.uasdm.graph.ProjectHasMission");
  }
  
  public void removeProjectHasMissionChild(gov.geoplatform.uasdm.graph.Mission mission)
  {
    super.removeChild(mission, "gov.geoplatform.uasdm.graph.ProjectHasMission");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Mission> getProjectHasMissionChildMissions()
  {
    return super.getChildren("gov.geoplatform.uasdm.graph.ProjectHasMission",gov.geoplatform.uasdm.graph.Mission.class);
  }
  
  public com.runwaysdk.business.graph.EdgeObject addSiteHasProjectParent(gov.geoplatform.uasdm.graph.Site site)
  {
    return super.addParent(site, "gov.geoplatform.uasdm.graph.SiteHasProject");
  }
  
  public void removeSiteHasProjectParent(gov.geoplatform.uasdm.graph.Site site)
  {
    super.removeParent(site, "gov.geoplatform.uasdm.graph.SiteHasProject");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Site> getSiteHasProjectParentSites()
  {
    return super.getParents("gov.geoplatform.uasdm.graph.SiteHasProject", gov.geoplatform.uasdm.graph.Site.class);
  }
  
  public static Project get(String oid)
  {
    return (Project) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
