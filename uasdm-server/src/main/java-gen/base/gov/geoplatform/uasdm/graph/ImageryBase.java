/**
 * Copyright 2020 The Department of Interior
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.geoplatform.uasdm.graph;

@com.runwaysdk.business.ClassSignature(hash = 1892499277)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Imagery.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ImageryBase extends gov.geoplatform.uasdm.graph.UasComponent
{
  public final static String CLASS = "gov.geoplatform.uasdm.graph.Imagery";
  public static java.lang.String IMAGEHEIGHT = "imageHeight";
  public static java.lang.String IMAGEWIDTH = "imageWidth";
  private static final long serialVersionUID = 1892499277;
  
  public ImageryBase()
  {
    super();
  }
  
  public Integer getImageHeight()
  {
    return (Integer) this.getObjectValue(IMAGEHEIGHT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getImageHeightMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Imagery.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(IMAGEHEIGHT);
  }
  
  public void setImageHeight(Integer value)
  {
    this.setValue(IMAGEHEIGHT, value);
  }
  
  public Integer getImageWidth()
  {
    return (Integer) this.getObjectValue(IMAGEWIDTH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getImageWidthMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Imagery.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(IMAGEWIDTH);
  }
  
  public void setImageWidth(Integer value)
  {
    this.setValue(IMAGEWIDTH, value);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public void addProjectHasImageryParent(gov.geoplatform.uasdm.graph.Project project)
  {
    super.addParent(project, "gov.geoplatform.uasdm.graph.ProjectHasImagery");
  }
  
  public void removeProjectHasImageryParent(gov.geoplatform.uasdm.graph.Project project)
  {
    super.addParent(project, "gov.geoplatform.uasdm.graph.ProjectHasImagery");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Project> getProjectHasImageryParentProjects()
  {
    return super.getParents("gov.geoplatform.uasdm.graph.ProjectHasImagery", gov.geoplatform.uasdm.graph.Project.class);
  }
  
  public static Imagery get(String oid)
  {
    return (Imagery) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
