/**
 * Copyright 2020 The Department of Interior
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.geoplatform.uasdm;

@com.runwaysdk.business.ClassSignature(hash = -705802859)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ImageryProcessingJob.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ImageryProcessingJobBase extends com.runwaysdk.system.scheduler.ExecutableJob
{
  public final static String CLASS = "gov.geoplatform.uasdm.ImageryProcessingJob";
  public final static java.lang.String CONFIGURATIONJSON = "configurationJson";
  public final static java.lang.String IMAGERYFILE = "imageryFile";
  public final static java.lang.String OUTFILENAMEPREFIX = "outFileNamePrefix";
  public final static java.lang.String PROCESSUPLOAD = "processUpload";
  public final static java.lang.String UPLOADTARGET = "uploadTarget";
  public final static java.lang.String WORKFLOWTASK = "workflowTask";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = -705802859;
  
  public ImageryProcessingJobBase()
  {
    super();
  }
  
  public String getConfigurationJson()
  {
    return getValue(CONFIGURATIONJSON);
  }
  
  public void validateConfigurationJson()
  {
    this.validateAttribute(CONFIGURATIONJSON);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getConfigurationJsonMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.ImageryProcessingJob.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(CONFIGURATIONJSON);
  }
  
  public void setConfigurationJson(String value)
  {
    if(value == null)
    {
      setValue(CONFIGURATIONJSON, "");
    }
    else
    {
      setValue(CONFIGURATIONJSON, value);
    }
  }
  
  public String getImageryFile()
  {
    return getValue(IMAGERYFILE);
  }
  
  public void validateImageryFile()
  {
    this.validateAttribute(IMAGERYFILE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeFileDAOIF getImageryFileMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.ImageryProcessingJob.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeFileDAOIF)mdClassIF.definesAttribute(IMAGERYFILE);
  }
  
  public void setImageryFile(String value)
  {
    if(value == null)
    {
      setValue(IMAGERYFILE, "");
    }
    else
    {
      setValue(IMAGERYFILE, value);
    }
  }
  
  public String getOutFileNamePrefix()
  {
    return getValue(OUTFILENAMEPREFIX);
  }
  
  public void validateOutFileNamePrefix()
  {
    this.validateAttribute(OUTFILENAMEPREFIX);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getOutFileNamePrefixMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.ImageryProcessingJob.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(OUTFILENAMEPREFIX);
  }
  
  public void setOutFileNamePrefix(String value)
  {
    if(value == null)
    {
      setValue(OUTFILENAMEPREFIX, "");
    }
    else
    {
      setValue(OUTFILENAMEPREFIX, value);
    }
  }
  
  public Boolean getProcessUpload()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PROCESSUPLOAD));
  }
  
  public void validateProcessUpload()
  {
    this.validateAttribute(PROCESSUPLOAD);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getProcessUploadMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.ImageryProcessingJob.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(PROCESSUPLOAD);
  }
  
  public void setProcessUpload(Boolean value)
  {
    if(value == null)
    {
      setValue(PROCESSUPLOAD, "");
    }
    else
    {
      setValue(PROCESSUPLOAD, java.lang.Boolean.toString(value));
    }
  }
  
  public String getUploadTarget()
  {
    return getValue(UPLOADTARGET);
  }
  
  public void validateUploadTarget()
  {
    this.validateAttribute(UPLOADTARGET);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getUploadTargetMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.ImageryProcessingJob.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(UPLOADTARGET);
  }
  
  public void setUploadTarget(String value)
  {
    if(value == null)
    {
      setValue(UPLOADTARGET, "");
    }
    else
    {
      setValue(UPLOADTARGET, value);
    }
  }
  
  public gov.geoplatform.uasdm.bus.AbstractWorkflowTask getWorkflowTask()
  {
    if (getValue(WORKFLOWTASK).trim().equals(""))
    {
      return null;
    }
    else
    {
      return gov.geoplatform.uasdm.bus.AbstractWorkflowTask.get(getValue(WORKFLOWTASK));
    }
  }
  
  public String getWorkflowTaskOid()
  {
    return getValue(WORKFLOWTASK);
  }
  
  public void validateWorkflowTask()
  {
    this.validateAttribute(WORKFLOWTASK);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getWorkflowTaskMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.ImageryProcessingJob.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(WORKFLOWTASK);
  }
  
  public void setWorkflowTask(gov.geoplatform.uasdm.bus.AbstractWorkflowTask value)
  {
    if(value == null)
    {
      setValue(WORKFLOWTASK, "");
    }
    else
    {
      setValue(WORKFLOWTASK, value.getOid());
    }
  }
  
  public void setWorkflowTaskId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(WORKFLOWTASK, "");
    }
    else
    {
      setValue(WORKFLOWTASK, oid);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ImageryProcessingJobQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    ImageryProcessingJobQuery query = new ImageryProcessingJobQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static ImageryProcessingJob get(String oid)
  {
    return (ImageryProcessingJob) com.runwaysdk.business.Business.get(oid);
  }
  
  public static ImageryProcessingJob getByKey(String key)
  {
    return (ImageryProcessingJob) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static ImageryProcessingJob lock(java.lang.String oid)
  {
    ImageryProcessingJob _instance = ImageryProcessingJob.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static ImageryProcessingJob unlock(java.lang.String oid)
  {
    ImageryProcessingJob _instance = ImageryProcessingJob.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
