package gov.geoplatform.uasdm.graph;

@com.runwaysdk.business.ClassSignature(hash = -1513620269)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Document.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class DocumentBase extends com.runwaysdk.business.graph.VertexObject
{
  public final static String CLASS = "gov.geoplatform.uasdm.graph.Document";
  public static java.lang.String NAME = "name";
  public static java.lang.String OID = "oid";
  public static java.lang.String S3LOCATION = "s3location";
  public static java.lang.String SEQ = "seq";
  private static final long serialVersionUID = -1513620269;
  
  public DocumentBase()
  {
    super();
  }
  
  public String getName()
  {
    return (String) this.getObjectValue(NAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Document.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(NAME);
  }
  
  public void setName(String value)
  {
    this.setValue(NAME, value);
  }
  
  public String getOid()
  {
    return (String) this.getObjectValue(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Document.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public String getS3location()
  {
    return (String) this.getObjectValue(S3LOCATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getS3locationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Document.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(S3LOCATION);
  }
  
  public void setS3location(String value)
  {
    this.setValue(S3LOCATION, value);
  }
  
  public Long getSeq()
  {
    return (Long) this.getObjectValue(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Document.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public void setSeq(Long value)
  {
    this.setValue(SEQ, value);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public void addDocumentGeneratedProductChild(gov.geoplatform.uasdm.graph.Product product)
  {
    super.addChild(product, "gov.geoplatform.uasdm.graph.DocumentGeneratedProduct");
  }
  
  public void removeDocumentGeneratedProductChild(gov.geoplatform.uasdm.graph.Product product)
  {
    super.addChild(product, "gov.geoplatform.uasdm.graph.DocumentGeneratedProduct");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Product> getDocumentGeneratedProductChildProducts()
  {
    return super.getChildren("gov.geoplatform.uasdm.graph.DocumentGeneratedProduct",gov.geoplatform.uasdm.graph.Product.class);
  }
  
  public void addComponentHasDocumentParent(gov.geoplatform.uasdm.graph.UasComponent uasComponent)
  {
    super.addParent(uasComponent, "gov.geoplatform.uasdm.graph.ComponentHasDocument");
  }
  
  public void removeComponentHasDocumentParent(gov.geoplatform.uasdm.graph.UasComponent uasComponent)
  {
    super.addParent(uasComponent, "gov.geoplatform.uasdm.graph.ComponentHasDocument");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.UasComponent> getComponentHasDocumentParentUasComponents()
  {
    return super.getParents("gov.geoplatform.uasdm.graph.ComponentHasDocument", gov.geoplatform.uasdm.graph.UasComponent.class);
  }
  
  public void addProductHasDocumentParent(gov.geoplatform.uasdm.graph.Product product)
  {
    super.addParent(product, "gov.geoplatform.uasdm.graph.ProductHasDocument");
  }
  
  public void removeProductHasDocumentParent(gov.geoplatform.uasdm.graph.Product product)
  {
    super.addParent(product, "gov.geoplatform.uasdm.graph.ProductHasDocument");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Product> getProductHasDocumentParentProducts()
  {
    return super.getParents("gov.geoplatform.uasdm.graph.ProductHasDocument", gov.geoplatform.uasdm.graph.Product.class);
  }
  
  public static Document get(String oid)
  {
    return (Document) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
