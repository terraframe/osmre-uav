/**
 * Copyright 2020 The Department of Interior
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.geoplatform.uasdm.graph;

@com.runwaysdk.business.ClassSignature(hash = -401805993)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Product.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ProductBase extends com.runwaysdk.business.graph.VertexObject
{
  public final static String CLASS = "gov.geoplatform.uasdm.graph.Product";
  public final static java.lang.String BOUNDINGBOX = "boundingBox";
  public final static java.lang.String LASTUPDATEDATE = "lastUpdateDate";
  public final static java.lang.String LOCKED = "locked";
  public final static java.lang.String LOCKEDBY = "lockedBy";
  public final static java.lang.String NAME = "name";
  public final static java.lang.String OID = "oid";
  public final static java.lang.String PRIMARY = "primary";
  public final static java.lang.String PRODUCTNAME = "productName";
  public final static java.lang.String PUBLISHED = "published";
  public final static java.lang.String SEQ = "seq";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = -401805993;
  
  public ProductBase()
  {
    super();
  }
  
  public String getBoundingBox()
  {
    return (String) this.getObjectValue(BOUNDINGBOX);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getBoundingBoxMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Product.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(BOUNDINGBOX);
  }
  
  public void setBoundingBox(String value)
  {
    this.setValue(BOUNDINGBOX, value);
  }
  
  public java.util.Date getLastUpdateDate()
  {
    return (java.util.Date) this.getObjectValue(LASTUPDATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getLastUpdateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Product.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(LASTUPDATEDATE);
  }
  
  public void setLastUpdateDate(java.util.Date value)
  {
    this.setValue(LASTUPDATEDATE, value);
  }
  
  public Boolean getLocked()
  {
    return (Boolean) this.getObjectValue(LOCKED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getLockedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Product.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(LOCKED);
  }
  
  public void setLocked(Boolean value)
  {
    this.setValue(LOCKED, value);
  }
  
  public com.runwaysdk.system.SingleActor getLockedBy()
  {
    if (this.getObjectValue(LOCKEDBY) == null)
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get( (String) this.getObjectValue(LOCKEDBY));
    }
  }
  
  public String getLockedByOid()
  {
    return (String) this.getObjectValue(LOCKEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getLockedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Product.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LOCKEDBY);
  }
  
  public void setLockedBy(com.runwaysdk.system.SingleActor value)
  {
    this.setValue(LOCKEDBY, value.getOid());
  }
  
  public void setLockedById(java.lang.String oid)
  {
    this.setValue(LOCKEDBY, oid);
  }
  
  public String getName()
  {
    return (String) this.getObjectValue(NAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Product.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(NAME);
  }
  
  public void setName(String value)
  {
    this.setValue(NAME, value);
  }
  
  public String getOid()
  {
    return (String) this.getObjectValue(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Product.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public Boolean getPrimary()
  {
    return (Boolean) this.getObjectValue(PRIMARY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getPrimaryMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Product.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(PRIMARY);
  }
  
  public void setPrimary(Boolean value)
  {
    this.setValue(PRIMARY, value);
  }
  
  public String getProductName()
  {
    return (String) this.getObjectValue(PRODUCTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getProductNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Product.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(PRODUCTNAME);
  }
  
  public void setProductName(String value)
  {
    this.setValue(PRODUCTNAME, value);
  }
  
  public Boolean getPublished()
  {
    return (Boolean) this.getObjectValue(PUBLISHED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getPublishedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Product.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(PUBLISHED);
  }
  
  public void setPublished(Boolean value)
  {
    this.setValue(PUBLISHED, value);
  }
  
  public Long getSeq()
  {
    return (Long) this.getObjectValue(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Product.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public void setSeq(Long value)
  {
    this.setValue(SEQ, value);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.business.graph.EdgeObject addProductHasDocumentChild(gov.geoplatform.uasdm.graph.Document document)
  {
    return super.addChild(document, "gov.geoplatform.uasdm.graph.ProductHasDocument");
  }
  
  public void removeProductHasDocumentChild(gov.geoplatform.uasdm.graph.Document document)
  {
    super.removeChild(document, "gov.geoplatform.uasdm.graph.ProductHasDocument");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Document> getProductHasDocumentChildDocuments()
  {
    return super.getChildren("gov.geoplatform.uasdm.graph.ProductHasDocument",gov.geoplatform.uasdm.graph.Document.class);
  }
  
  public com.runwaysdk.business.graph.EdgeObject addComponentHasProductParent(gov.geoplatform.uasdm.graph.UasComponent uasComponent)
  {
    return super.addParent(uasComponent, "gov.geoplatform.uasdm.graph.ComponentHasProduct");
  }
  
  public void removeComponentHasProductParent(gov.geoplatform.uasdm.graph.UasComponent uasComponent)
  {
    super.removeParent(uasComponent, "gov.geoplatform.uasdm.graph.ComponentHasProduct");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.UasComponent> getComponentHasProductParentUasComponents()
  {
    return super.getParents("gov.geoplatform.uasdm.graph.ComponentHasProduct", gov.geoplatform.uasdm.graph.UasComponent.class);
  }
  
  public com.runwaysdk.business.graph.EdgeObject addDocumentGeneratedProductParent(gov.geoplatform.uasdm.graph.Document document)
  {
    return super.addParent(document, "gov.geoplatform.uasdm.graph.DocumentGeneratedProduct");
  }
  
  public void removeDocumentGeneratedProductParent(gov.geoplatform.uasdm.graph.Document document)
  {
    super.removeParent(document, "gov.geoplatform.uasdm.graph.DocumentGeneratedProduct");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Document> getDocumentGeneratedProductParentDocuments()
  {
    return super.getParents("gov.geoplatform.uasdm.graph.DocumentGeneratedProduct", gov.geoplatform.uasdm.graph.Document.class);
  }
  
  public static Product get(String oid)
  {
    return (Product) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
