/**
 * Copyright 2020 The Department of Interior
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.geoplatform.uasdm.bus;

@com.runwaysdk.business.ClassSignature(hash = -1230834459)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Document.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class DocumentQuery extends com.runwaysdk.query.GeneratedBusinessQuery

{

  public DocumentQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public DocumentQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return gov.geoplatform.uasdm.bus.Document.CLASS;
  }
  public gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF getComponent()
  {
    return getComponent(null);

  }
 
  public gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF getComponent(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.bus.Document.COMPONENT);

    return (gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.bus.Document.COMPONENT, mdAttributeIF, this, alias, null);

  }
 
  public gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF getComponent(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.bus.Document.COMPONENT);

    return (gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.bus.Document.COMPONENT, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.bus.Document.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.bus.Document.CREATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.bus.Document.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.bus.Document.CREATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.bus.Document.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.bus.Document.ENTITYDOMAIN, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.bus.Document.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.bus.Document.ENTITYDOMAIN, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.bus.Document.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.bus.Document.LOCKEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.bus.Document.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.bus.Document.LOCKEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getName()
  {
    return getName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.NAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.NAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableUUID getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableUUID)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableUUID)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.OID, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.bus.Document.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.bus.Document.OWNER, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(gov.geoplatform.uasdm.bus.Document.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(gov.geoplatform.uasdm.bus.Document.OWNER, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getS3location()
  {
    return getS3location(null);

  }
 
  public com.runwaysdk.query.SelectableChar getS3location(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.S3LOCATION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getS3location(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.S3LOCATION, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(gov.geoplatform.uasdm.bus.Document.TYPE, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(gov.geoplatform.uasdm.bus.Document.COMPONENT)) 
    {
       return new gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.bus.Document.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.bus.Document.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.bus.Document.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.bus.Document.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends Document> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<Document>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition product()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProductHasDocument.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_product()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProductHasDocument.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition product(gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery)
  {
    return this.getBusinessQuery().isChildIn(productHasDocumentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_product(gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(productHasDocumentQuery);
  }

  public com.runwaysdk.query.Condition product(gov.geoplatform.uasdm.bus.ProductQuery productQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProductHasDocument.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(productQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProductHasDocument.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(productQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition product(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery)
  {
    productHasDocumentQuery.AND(productHasDocumentQuery.hasParent(productQuery));
    return this.getBusinessQuery().isChildIn(productHasDocumentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery)
  {
    productHasDocumentQuery.AND(productHasDocumentQuery.hasParent(productQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(productHasDocumentQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_product()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProductHasDocument.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_product()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProductHasDocument.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_product(gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery)
  {
    return this.getBusinessQuery().isNotChildIn(productHasDocumentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_product(gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(productHasDocumentQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProductHasDocument.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(productQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProductHasDocument.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(productQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery)
  {
    productHasDocumentQuery.AND(productHasDocumentQuery.hasParent(productQuery));
    return this.getBusinessQuery().isNotChildIn(productHasDocumentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery)
  {
    productHasDocumentQuery.AND(productHasDocumentQuery.hasParent(productQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(productHasDocumentQuery);
  }


  public com.runwaysdk.query.Condition generatedProducts()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.DocumentGeneratedProduct.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_generatedProducts()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.DocumentGeneratedProduct.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition generatedProducts(gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery)
  {
    return this.getBusinessQuery().isParentIn(documentGeneratedProductQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_generatedProducts(gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(documentGeneratedProductQuery);
  }

  public com.runwaysdk.query.Condition generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.DocumentGeneratedProduct.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(productQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.DocumentGeneratedProduct.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(productQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery)
  {
    documentGeneratedProductQuery.AND(documentGeneratedProductQuery.hasChild(productQuery));
    return this.getBusinessQuery().isParentIn(documentGeneratedProductQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery)
  {
    documentGeneratedProductQuery.AND(documentGeneratedProductQuery.hasChild(productQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(documentGeneratedProductQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_generatedProducts()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.DocumentGeneratedProduct.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_generatedProducts()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.DocumentGeneratedProduct.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_generatedProducts(gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery)
  {
    return this.getBusinessQuery().isNotParentIn(documentGeneratedProductQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_generatedProducts(gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(documentGeneratedProductQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.DocumentGeneratedProduct.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(productQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.DocumentGeneratedProduct.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(productQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery)
  {
    documentGeneratedProductQuery.AND(documentGeneratedProductQuery.hasChild(productQuery));
    return this.getBusinessQuery().isNotParentIn(documentGeneratedProductQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery)
  {
    documentGeneratedProductQuery.AND(documentGeneratedProductQuery.hasChild(productQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(documentGeneratedProductQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface DocumentQueryReferenceIF extends com.runwaysdk.query.SelectableReference
  {

    public gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF getComponent();
    public gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF getComponent(String alias);
    public gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF getComponent(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getName();
    public com.runwaysdk.query.SelectableChar getName(String alias);
    public com.runwaysdk.query.SelectableChar getName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableUUID getOid();
    public com.runwaysdk.query.SelectableUUID getOid(String alias);
    public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getS3location();
    public com.runwaysdk.query.SelectableChar getS3location(String alias);
    public com.runwaysdk.query.SelectableChar getS3location(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(gov.geoplatform.uasdm.bus.Document document);

    public com.runwaysdk.query.BasicCondition NE(gov.geoplatform.uasdm.bus.Document document);


  public com.runwaysdk.query.Condition generatedProducts();

  public com.runwaysdk.query.Condition generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery);

  public com.runwaysdk.query.Condition generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery);


  public com.runwaysdk.query.Condition SUBSELECT_generatedProducts();

  public com.runwaysdk.query.Condition SUBSELECT_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery);

  public com.runwaysdk.query.Condition SUBSELECT_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery);


  public com.runwaysdk.query.Condition NOT_IN_generatedProducts();

  public com.runwaysdk.query.Condition NOT_IN_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery);

  public com.runwaysdk.query.Condition NOT_IN_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_generatedProducts();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery);


  public com.runwaysdk.query.Condition product();
  public com.runwaysdk.query.Condition product(gov.geoplatform.uasdm.bus.ProductQuery productQuery);

  public com.runwaysdk.query.Condition product(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery);


  public com.runwaysdk.query.Condition SUBSELECT_product();
  public com.runwaysdk.query.Condition SUBSELECT_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery);

  public com.runwaysdk.query.Condition SUBSELECT_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery);


  public com.runwaysdk.query.Condition NOT_IN_product();
  public com.runwaysdk.query.Condition NOT_IN_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery);

  public com.runwaysdk.query.Condition NOT_IN_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_product();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class DocumentQueryReference extends com.runwaysdk.query.AttributeReference
 implements DocumentQueryReferenceIF

  {

  public DocumentQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(gov.geoplatform.uasdm.bus.Document document)
    {
      if(document == null) return this.EQ((java.lang.String)null);
      return this.EQ(document.getOid());
    }

    public com.runwaysdk.query.BasicCondition NE(gov.geoplatform.uasdm.bus.Document document)
    {
      if(document == null) return this.NE((java.lang.String)null);
      return this.NE(document.getOid());
    }

  public gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF getComponent()
  {
    return getComponent(null);

  }
 
  public gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF getComponent(String alias)
  {
    return (gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.COMPONENT, alias, null);

  }
 
  public gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF getComponent(String alias, String displayLabel)
  {
    return (gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.COMPONENT,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(gov.geoplatform.uasdm.bus.Document.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(gov.geoplatform.uasdm.bus.Document.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getName()
  {
    return getName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.NAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.NAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableUUID getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(gov.geoplatform.uasdm.bus.Document.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(gov.geoplatform.uasdm.bus.Document.OID, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getS3location()
  {
    return getS3location(null);

  }
 
  public com.runwaysdk.query.SelectableChar getS3location(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.S3LOCATION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getS3location(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.S3LOCATION, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(gov.geoplatform.uasdm.bus.Document.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(gov.geoplatform.uasdm.bus.Document.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.TYPE, alias, displayLabel);

  }

  public com.runwaysdk.query.Condition generatedProducts()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.DocumentGeneratedProduct.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_generatedProducts()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.DocumentGeneratedProduct.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition generatedProducts(gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery)
  {
    return this.isParentIn(documentGeneratedProductQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_generatedProducts(gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery)
  {
    return this.isParentIn_SUBSELECT(documentGeneratedProductQuery);
  }

  public com.runwaysdk.query.Condition generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.DocumentGeneratedProduct.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(productQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.DocumentGeneratedProduct.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(productQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery)
  {
    documentGeneratedProductQuery.AND(documentGeneratedProductQuery.hasChild(productQuery));
    return this.isParentIn(documentGeneratedProductQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery)
  {
    documentGeneratedProductQuery.AND(documentGeneratedProductQuery.hasChild(productQuery));
    return this.isParentIn_SUBSELECT(documentGeneratedProductQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_generatedProducts()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.DocumentGeneratedProduct.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_generatedProducts()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.DocumentGeneratedProduct.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_generatedProducts(gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery)
  {
    return this.isNotParentIn(documentGeneratedProductQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_generatedProducts(gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery)
  {
    return this.isNotParentIn_SUBSELECT(documentGeneratedProductQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.DocumentGeneratedProduct.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(productQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.DocumentGeneratedProduct.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(productQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery)
  {
    documentGeneratedProductQuery.AND(documentGeneratedProductQuery.hasChild(productQuery));
    return this.isNotParentIn(documentGeneratedProductQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_generatedProducts(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.DocumentGeneratedProductQuery documentGeneratedProductQuery)
  {
    documentGeneratedProductQuery.AND(documentGeneratedProductQuery.hasChild(productQuery));
    return this.isNotParentIn_SUBSELECT(documentGeneratedProductQuery);
  }


  public com.runwaysdk.query.Condition product()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProductHasDocument.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_product()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProductHasDocument.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition product(gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery)
  {
    return this.isChildIn(productHasDocumentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_product(gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery)
  {
    return this.isChildIn_SUBSELECT(productHasDocumentQuery);
  }

  public com.runwaysdk.query.Condition product(gov.geoplatform.uasdm.bus.ProductQuery productQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProductHasDocument.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(productQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProductHasDocument.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(productQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition product(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery)
  {
    productHasDocumentQuery.AND(productHasDocumentQuery.hasParent(productQuery));
    return this.isChildIn(productHasDocumentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery)
  {
    productHasDocumentQuery.AND(productHasDocumentQuery.hasParent(productQuery));
    return this.isChildIn_SUBSELECT(productHasDocumentQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_product()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProductHasDocument.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_product()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProductHasDocument.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_product(gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery)
  {
    return this.isNotChildIn(productHasDocumentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_product(gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery)
  {
    return this.isNotChildIn_SUBSELECT(productHasDocumentQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProductHasDocument.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(productQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(gov.geoplatform.uasdm.bus.ProductHasDocument.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(productQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery)
  {
    productHasDocumentQuery.AND(productHasDocumentQuery.hasParent(productQuery));
    return this.isNotChildIn(productHasDocumentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_product(gov.geoplatform.uasdm.bus.ProductQuery productQuery, gov.geoplatform.uasdm.bus.ProductHasDocumentQuery productHasDocumentQuery)
  {
    productHasDocumentQuery.AND(productHasDocumentQuery.hasParent(productQuery));
    return this.isNotChildIn_SUBSELECT(productHasDocumentQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(gov.geoplatform.uasdm.bus.Document.COMPONENT)) 
    {
       return new gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.bus.Document.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.bus.Document.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.bus.Document.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.bus.Document.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface DocumentQueryMultiReferenceIF extends com.runwaysdk.query.SelectableMultiReference
  {

    public gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF getComponent();
    public gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF getComponent(String alias);
    public gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF getComponent(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getName();
    public com.runwaysdk.query.SelectableChar getName(String alias);
    public com.runwaysdk.query.SelectableChar getName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableUUID getOid();
    public com.runwaysdk.query.SelectableUUID getOid(String alias);
    public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getS3location();
    public com.runwaysdk.query.SelectableChar getS3location(String alias);
    public com.runwaysdk.query.SelectableChar getS3location(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);

    public com.runwaysdk.query.Condition containsAny(gov.geoplatform.uasdm.bus.Document ... document);
    public com.runwaysdk.query.Condition notContainsAny(gov.geoplatform.uasdm.bus.Document ... document);
    public com.runwaysdk.query.Condition containsAll(gov.geoplatform.uasdm.bus.Document ... document);
    public com.runwaysdk.query.Condition notContainsAll(gov.geoplatform.uasdm.bus.Document ... document);
    public com.runwaysdk.query.Condition containsExactly(gov.geoplatform.uasdm.bus.Document ... document);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class DocumentQueryMultiReference extends com.runwaysdk.query.AttributeMultiReference
 implements DocumentQueryMultiReferenceIF

  {

  public DocumentQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(gov.geoplatform.uasdm.bus.Document ... document)  {

      String[] itemIdArray = new String[document.length]; 

      for (int i=0; i<document.length; i++)
      {
        itemIdArray[i] = document[i].getOid();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(gov.geoplatform.uasdm.bus.Document ... document)  {

      String[] itemIdArray = new String[document.length]; 

      for (int i=0; i<document.length; i++)
      {
        itemIdArray[i] = document[i].getOid();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(gov.geoplatform.uasdm.bus.Document ... document)  {

      String[] itemIdArray = new String[document.length]; 

      for (int i=0; i<document.length; i++)
      {
        itemIdArray[i] = document[i].getOid();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(gov.geoplatform.uasdm.bus.Document ... document)  {

      String[] itemIdArray = new String[document.length]; 

      for (int i=0; i<document.length; i++)
      {
        itemIdArray[i] = document[i].getOid();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(gov.geoplatform.uasdm.bus.Document ... document)  {

      String[] itemIdArray = new String[document.length]; 

      for (int i=0; i<document.length; i++)
      {
        itemIdArray[i] = document[i].getOid();
      }

      return this.containsExactly(itemIdArray);
  }
  public gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF getComponent()
  {
    return getComponent(null);

  }
 
  public gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF getComponent(String alias)
  {
    return (gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.COMPONENT, alias, null);

  }
 
  public gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF getComponent(String alias, String displayLabel)
  {
    return (gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.COMPONENT,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(gov.geoplatform.uasdm.bus.Document.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(gov.geoplatform.uasdm.bus.Document.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getName()
  {
    return getName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.NAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.NAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableUUID getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(gov.geoplatform.uasdm.bus.Document.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(gov.geoplatform.uasdm.bus.Document.OID, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(gov.geoplatform.uasdm.bus.Document.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getS3location()
  {
    return getS3location(null);

  }
 
  public com.runwaysdk.query.SelectableChar getS3location(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.S3LOCATION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getS3location(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.S3LOCATION, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(gov.geoplatform.uasdm.bus.Document.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(gov.geoplatform.uasdm.bus.Document.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(gov.geoplatform.uasdm.bus.Document.TYPE, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(gov.geoplatform.uasdm.bus.Document.COMPONENT)) 
    {
       return new gov.geoplatform.uasdm.bus.UasComponentQuery.UasComponentQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.bus.Document.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.bus.Document.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.bus.Document.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.bus.Document.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(gov.geoplatform.uasdm.bus.Document.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }
}
