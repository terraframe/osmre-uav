/**
 * Copyright 2020 The Department of Interior
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.geoplatform.uasdm.bus;

@com.runwaysdk.business.ClassSignature(hash = -1742746183)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MissionHasCollection.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class MissionHasCollectionQuery extends gov.geoplatform.uasdm.bus.ComponentHasComponentQuery
{

  public MissionHasCollectionQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super(componentQueryFactory);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.RelationshipQuery relationshipQuery = componentQueryFactory.relationshipQuery(this.getClassType());

       this.setRelationshipQuery(relationshipQuery);
    }
  }

  public MissionHasCollectionQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
    super(valueQuery);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.RelationshipQuery relationshipQuery = new com.runwaysdk.business.RelationshipQuery(valueQuery, this.getClassType());

       this.setRelationshipQuery(relationshipQuery);
    }
  }

  public String getClassType()
  {
    return gov.geoplatform.uasdm.bus.MissionHasCollection.CLASS;
  }
  /**
   * Restricts the query to include objects that are children in this relationship.
   * @param collectionQuery
   * @return Condition restricting objects that are children in this relationship.
   */
   public com.runwaysdk.query.Condition hasChild(gov.geoplatform.uasdm.bus.CollectionQuery collectionQuery)
   {
     return this.getRelationshipQuery().hasChild(collectionQuery);
   }
  /**
   * Restricts the query to include objects that are children in this relationship.
   * @param collectionQuery
   * @return Condition restricting objects that are children in this relationship.
   */
   public com.runwaysdk.query.Condition doesNotHaveChild(gov.geoplatform.uasdm.bus.CollectionQuery collectionQuery)
   {
     return this.getRelationshipQuery().doesNotHaveChild(collectionQuery);
   }
  /**
   * Restricts the query to include objects that are parents in this relationship.
   * @param missionQuery
   * @return Condition restricting objects that are parents in this relationship.
   */
   public com.runwaysdk.query.Condition hasParent(gov.geoplatform.uasdm.bus.MissionQuery missionQuery)
   {
     return this.getRelationshipQuery().hasParent(missionQuery);
   }
  /**
   * Restricts the query to include objects that are parents in this relationship.
   * @param missionQuery
   * @return Condition restricting objects that are parents in this relationship.
   */
   public com.runwaysdk.query.Condition doesNotHaveParent(gov.geoplatform.uasdm.bus.MissionQuery missionQuery)
   {
     return this.getRelationshipQuery().doesNotHaveParent(missionQuery);
   }
  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends MissionHasCollection> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.RelationshipIterator<MissionHasCollection>(this.getComponentQuery().getMdEntityIF(), this.getRelationshipQuery(), columnInfoMap, results);
  }

}
