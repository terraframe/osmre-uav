/**
 * Copyright 2020 The Department of Interior
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.geoplatform.uasdm.graph;

@com.runwaysdk.business.ClassSignature(hash = -797951450)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to UasComponent.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class UasComponentBase extends com.runwaysdk.business.graph.VertexObject
{
  public final static String CLASS = "gov.geoplatform.uasdm.graph.UasComponent";
  public final static java.lang.String DESCRIPTION = "description";
  public final static java.lang.String FOLDERNAME = "folderName";
  public final static java.lang.String GEOPOINT = "geoPoint";
  public final static java.lang.String ISPRIVATE = "isPrivate";
  public final static java.lang.String NAME = "name";
  public final static java.lang.String OID = "oid";
  public final static java.lang.String OWNER = "owner";
  public final static java.lang.String S3LOCATION = "s3location";
  public final static java.lang.String SEQ = "seq";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = -797951450;
  
  public UasComponentBase()
  {
    super();
  }
  
  public String getDescription()
  {
    return (String) this.getObjectValue(DESCRIPTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getDescriptionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.UasComponent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(DESCRIPTION);
  }
  
  public void setDescription(String value)
  {
    this.setValue(DESCRIPTION, value);
  }
  
  public String getFolderName()
  {
    return (String) this.getObjectValue(FOLDERNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getFolderNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.UasComponent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(FOLDERNAME);
  }
  
  public void setFolderName(String value)
  {
    this.setValue(FOLDERNAME, value);
  }
  
  public org.locationtech.jts.geom.Point getGeoPoint()
  {
    return (org.locationtech.jts.geom.Point) this.getObjectValue(GEOPOINT);
  }
  
  public static com.runwaysdk.gis.dataaccess.MdAttributePointDAOIF getGeoPointMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.UasComponent.CLASS);
    return (com.runwaysdk.gis.dataaccess.MdAttributePointDAOIF)mdClassIF.definesAttribute(GEOPOINT);
  }
  
  public void setGeoPoint(org.locationtech.jts.geom.Point value)
  {
    this.setValue(GEOPOINT, value);
  }
  
  public Boolean getIsPrivate()
  {
    return (Boolean) this.getObjectValue(ISPRIVATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsPrivateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.UasComponent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISPRIVATE);
  }
  
  public void setIsPrivate(Boolean value)
  {
    this.setValue(ISPRIVATE, value);
  }
  
  public String getName()
  {
    return (String) this.getObjectValue(NAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.UasComponent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(NAME);
  }
  
  public void setName(String value)
  {
    this.setValue(NAME, value);
  }
  
  public String getOid()
  {
    return (String) this.getObjectValue(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.UasComponent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public com.runwaysdk.system.Actor getOwner()
  {
    if (this.getObjectValue(OWNER) == null)
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.Actor.get( (String) this.getObjectValue(OWNER));
    }
  }
  
  public String getOwnerOid()
  {
    return (String) this.getObjectValue(OWNER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getOwnerMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.UasComponent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(OWNER);
  }
  
  public void setOwner(com.runwaysdk.system.Actor value)
  {
    this.setValue(OWNER, value.getOid());
  }
  
  public void setOwnerId(java.lang.String oid)
  {
    this.setValue(OWNER, oid);
  }
  
  public String getS3location()
  {
    return (String) this.getObjectValue(S3LOCATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getS3locationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.UasComponent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(S3LOCATION);
  }
  
  public void setS3location(String value)
  {
    this.setValue(S3LOCATION, value);
  }
  
  public Long getSeq()
  {
    return (Long) this.getObjectValue(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.UasComponent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public void setSeq(Long value)
  {
    this.setValue(SEQ, value);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.business.graph.EdgeObject addComponentHasDocumentChild(gov.geoplatform.uasdm.graph.Document document)
  {
    return super.addChild(document, "gov.geoplatform.uasdm.graph.ComponentHasDocument");
  }
  
  public void removeComponentHasDocumentChild(gov.geoplatform.uasdm.graph.Document document)
  {
    super.removeChild(document, "gov.geoplatform.uasdm.graph.ComponentHasDocument");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Document> getComponentHasDocumentChildDocuments()
  {
    return super.getChildren("gov.geoplatform.uasdm.graph.ComponentHasDocument",gov.geoplatform.uasdm.graph.Document.class);
  }
  
  public com.runwaysdk.business.graph.EdgeObject addComponentHasProductChild(gov.geoplatform.uasdm.graph.Product product)
  {
    return super.addChild(product, "gov.geoplatform.uasdm.graph.ComponentHasProduct");
  }
  
  public void removeComponentHasProductChild(gov.geoplatform.uasdm.graph.Product product)
  {
    super.removeChild(product, "gov.geoplatform.uasdm.graph.ComponentHasProduct");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Product> getComponentHasProductChildProducts()
  {
    return super.getChildren("gov.geoplatform.uasdm.graph.ComponentHasProduct",gov.geoplatform.uasdm.graph.Product.class);
  }
  
  public com.runwaysdk.business.graph.EdgeObject addUserHasAccessParent(gov.geoplatform.uasdm.graph.UserAccessEntity userAccessEntity)
  {
    return super.addParent(userAccessEntity, "gov.geoplatform.uasdm.graph.UserHasAccess");
  }
  
  public void removeUserHasAccessParent(gov.geoplatform.uasdm.graph.UserAccessEntity userAccessEntity)
  {
    super.removeParent(userAccessEntity, "gov.geoplatform.uasdm.graph.UserHasAccess");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.UserAccessEntity> getUserHasAccessParentUserAccessEntitys()
  {
    return super.getParents("gov.geoplatform.uasdm.graph.UserHasAccess", gov.geoplatform.uasdm.graph.UserAccessEntity.class);
  }
  
  public static UasComponent get(String oid)
  {
    return (UasComponent) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
