package gov.geoplatform.uasdm.graph;

@com.runwaysdk.business.ClassSignature(hash = 1114062349)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Site.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class SiteBase extends gov.geoplatform.uasdm.graph.UasComponent
{
  public final static String CLASS = "gov.geoplatform.uasdm.graph.Site";
  public final static java.lang.String BUREAU = "bureau";
  public final static java.lang.String ORGANIZATION = "organization";
  public final static java.lang.String OTHERBUREAUTXT = "otherBureauTxt";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = 1114062349;
  
  public SiteBase()
  {
    super();
  }
  
  public gov.geoplatform.uasdm.bus.Bureau getBureau()
  {
    if (this.getObjectValue(BUREAU) == null)
    {
      return null;
    }
    else
    {
      return gov.geoplatform.uasdm.bus.Bureau.get( (String) this.getObjectValue(BUREAU));
    }
  }
  
  public String getBureauOid()
  {
    return (String) this.getObjectValue(BUREAU);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getBureauMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Site.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(BUREAU);
  }
  
  public void setBureau(gov.geoplatform.uasdm.bus.Bureau value)
  {
    this.setValue(BUREAU, value.getOid());
  }
  
  public void setBureauId(java.lang.String oid)
  {
    this.setValue(BUREAU, oid);
  }
  
  public net.geoprism.registry.graph.GraphOrganization getOrganization()
  {
    return (net.geoprism.registry.graph.GraphOrganization) this.getObjectValue(ORGANIZATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getOrganizationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Site.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(ORGANIZATION);
  }
  
  public void setOrganization(net.geoprism.registry.graph.GraphOrganization value)
  {
    this.setValue(ORGANIZATION, value);
  }
  
  public String getOtherBureauTxt()
  {
    return (String) this.getObjectValue(OTHERBUREAUTXT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getOtherBureauTxtMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.graph.Site.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(OTHERBUREAUTXT);
  }
  
  public void setOtherBureauTxt(String value)
  {
    this.setValue(OTHERBUREAUTXT, value);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.business.graph.EdgeObject addSiteHasProjectChild(gov.geoplatform.uasdm.graph.Project project)
  {
    return super.addChild(project, "gov.geoplatform.uasdm.graph.SiteHasProject");
  }
  
  public void removeSiteHasProjectChild(gov.geoplatform.uasdm.graph.Project project)
  {
    super.removeChild(project, "gov.geoplatform.uasdm.graph.SiteHasProject");
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<gov.geoplatform.uasdm.graph.Project> getSiteHasProjectChildProjects()
  {
    return super.getChildren("gov.geoplatform.uasdm.graph.SiteHasProject",gov.geoplatform.uasdm.graph.Project.class);
  }
  
  public static Site get(String oid)
  {
    return (Site) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
