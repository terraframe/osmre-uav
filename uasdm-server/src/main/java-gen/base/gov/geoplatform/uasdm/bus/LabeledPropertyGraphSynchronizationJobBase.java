package gov.geoplatform.uasdm.bus;

@com.runwaysdk.business.ClassSignature(hash = -1889608962)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to LabeledPropertyGraphSynchronizationJob.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class LabeledPropertyGraphSynchronizationJobBase extends com.runwaysdk.system.scheduler.ExecutableJob
{
  public final static String CLASS = "gov.geoplatform.uasdm.bus.LabeledPropertyGraphSynchronizationJob";
  public final static java.lang.String SYNCHRONIZATION = "synchronization";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = -1889608962;
  
  public LabeledPropertyGraphSynchronizationJobBase()
  {
    super();
  }
  
  public net.geoprism.graph.LabeledPropertyGraphSynchronization getSynchronization()
  {
    if (getValue(SYNCHRONIZATION).trim().equals(""))
    {
      return null;
    }
    else
    {
      return net.geoprism.graph.LabeledPropertyGraphSynchronization.get(getValue(SYNCHRONIZATION));
    }
  }
  
  public String getSynchronizationOid()
  {
    return getValue(SYNCHRONIZATION);
  }
  
  public void validateSynchronization()
  {
    this.validateAttribute(SYNCHRONIZATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getSynchronizationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.LabeledPropertyGraphSynchronizationJob.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(SYNCHRONIZATION);
  }
  
  public void setSynchronization(net.geoprism.graph.LabeledPropertyGraphSynchronization value)
  {
    if(value == null)
    {
      setValue(SYNCHRONIZATION, "");
    }
    else
    {
      setValue(SYNCHRONIZATION, value.getOid());
    }
  }
  
  public void setSynchronizationId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(SYNCHRONIZATION, "");
    }
    else
    {
      setValue(SYNCHRONIZATION, oid);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static LabeledPropertyGraphSynchronizationJobQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    LabeledPropertyGraphSynchronizationJobQuery query = new LabeledPropertyGraphSynchronizationJobQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static LabeledPropertyGraphSynchronizationJob get(String oid)
  {
    return (LabeledPropertyGraphSynchronizationJob) com.runwaysdk.business.Business.get(oid);
  }
  
  public static LabeledPropertyGraphSynchronizationJob getByKey(String key)
  {
    return (LabeledPropertyGraphSynchronizationJob) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static LabeledPropertyGraphSynchronizationJob lock(java.lang.String oid)
  {
    LabeledPropertyGraphSynchronizationJob _instance = LabeledPropertyGraphSynchronizationJob.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static LabeledPropertyGraphSynchronizationJob unlock(java.lang.String oid)
  {
    LabeledPropertyGraphSynchronizationJob _instance = LabeledPropertyGraphSynchronizationJob.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
