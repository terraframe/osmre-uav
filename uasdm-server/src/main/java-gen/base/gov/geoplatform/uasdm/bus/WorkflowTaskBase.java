package gov.geoplatform.uasdm.bus;

@com.runwaysdk.business.ClassSignature(hash = -2068068643)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to WorkflowTask.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class WorkflowTaskBase extends gov.geoplatform.uasdm.bus.AbstractUploadTask
{
  public final static String CLASS = "gov.geoplatform.uasdm.bus.WorkflowTask";
  public static java.lang.String COMPONENT = "component";
  private static final long serialVersionUID = -2068068643;
  
  public WorkflowTaskBase()
  {
    super();
  }
  
  public gov.geoplatform.uasdm.bus.UasComponent getComponent()
  {
    if (getValue(COMPONENT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return gov.geoplatform.uasdm.bus.UasComponent.get(getValue(COMPONENT));
    }
  }
  
  public String getComponentOid()
  {
    return getValue(COMPONENT);
  }
  
  public void validateComponent()
  {
    this.validateAttribute(COMPONENT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getComponentMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.WorkflowTask.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(COMPONENT);
  }
  
  public void setComponent(gov.geoplatform.uasdm.bus.UasComponent value)
  {
    if(value == null)
    {
      setValue(COMPONENT, "");
    }
    else
    {
      setValue(COMPONENT, value.getOid());
    }
  }
  
  public void setComponentId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(COMPONENT, "");
    }
    else
    {
      setValue(COMPONENT, oid);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static WorkflowTaskQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    WorkflowTaskQuery query = new WorkflowTaskQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static WorkflowTask get(String oid)
  {
    return (WorkflowTask) com.runwaysdk.business.Business.get(oid);
  }
  
  public static WorkflowTask getByKey(String key)
  {
    return (WorkflowTask) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static WorkflowTask lock(java.lang.String oid)
  {
    WorkflowTask _instance = WorkflowTask.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static WorkflowTask unlock(java.lang.String oid)
  {
    WorkflowTask _instance = WorkflowTask.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
