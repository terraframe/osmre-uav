/**
 * Copyright 2020 The Department of Interior
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package gov.geoplatform.uasdm.bus;

@com.runwaysdk.business.ClassSignature(hash = -1848749839)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to WorkflowTask.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class WorkflowTaskBase extends gov.geoplatform.uasdm.bus.AbstractUploadTask
{
  public final static String CLASS = "gov.geoplatform.uasdm.bus.WorkflowTask";
  public static java.lang.String COMPONENT = "component";
  public static java.lang.String PROCESSDEM = "processDem";
  public static java.lang.String PROCESSORTHO = "processOrtho";
  public static java.lang.String PROCESSPTCLOUD = "processPtcloud";
  public static java.lang.String UPLOADTARGET = "uploadTarget";
  public static java.lang.String WORKFLOWTYPE = "workflowType";
  private static final long serialVersionUID = -1848749839;
  
  public WorkflowTaskBase()
  {
    super();
  }
  
  public String getComponent()
  {
    return getValue(COMPONENT);
  }
  
  public void validateComponent()
  {
    this.validateAttribute(COMPONENT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getComponentMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.WorkflowTask.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(COMPONENT);
  }
  
  public void setComponent(String value)
  {
    if(value == null)
    {
      setValue(COMPONENT, "");
    }
    else
    {
      setValue(COMPONENT, value);
    }
  }
  
  public Boolean getProcessDem()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PROCESSDEM));
  }
  
  public void validateProcessDem()
  {
    this.validateAttribute(PROCESSDEM);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getProcessDemMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.WorkflowTask.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(PROCESSDEM);
  }
  
  public void setProcessDem(Boolean value)
  {
    if(value == null)
    {
      setValue(PROCESSDEM, "");
    }
    else
    {
      setValue(PROCESSDEM, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getProcessOrtho()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PROCESSORTHO));
  }
  
  public void validateProcessOrtho()
  {
    this.validateAttribute(PROCESSORTHO);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getProcessOrthoMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.WorkflowTask.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(PROCESSORTHO);
  }
  
  public void setProcessOrtho(Boolean value)
  {
    if(value == null)
    {
      setValue(PROCESSORTHO, "");
    }
    else
    {
      setValue(PROCESSORTHO, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getProcessPtcloud()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PROCESSPTCLOUD));
  }
  
  public void validateProcessPtcloud()
  {
    this.validateAttribute(PROCESSPTCLOUD);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getProcessPtcloudMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.WorkflowTask.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(PROCESSPTCLOUD);
  }
  
  public void setProcessPtcloud(Boolean value)
  {
    if(value == null)
    {
      setValue(PROCESSPTCLOUD, "");
    }
    else
    {
      setValue(PROCESSPTCLOUD, java.lang.Boolean.toString(value));
    }
  }
  
  public String getUploadTarget()
  {
    return getValue(UPLOADTARGET);
  }
  
  public void validateUploadTarget()
  {
    this.validateAttribute(UPLOADTARGET);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getUploadTargetMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.WorkflowTask.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(UPLOADTARGET);
  }
  
  public void setUploadTarget(String value)
  {
    if(value == null)
    {
      setValue(UPLOADTARGET, "");
    }
    else
    {
      setValue(UPLOADTARGET, value);
    }
  }
  
  public String getWorkflowType()
  {
    return getValue(WORKFLOWTYPE);
  }
  
  public void validateWorkflowType()
  {
    this.validateAttribute(WORKFLOWTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getWorkflowTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(gov.geoplatform.uasdm.bus.WorkflowTask.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(WORKFLOWTYPE);
  }
  
  public void setWorkflowType(String value)
  {
    if(value == null)
    {
      setValue(WORKFLOWTYPE, "");
    }
    else
    {
      setValue(WORKFLOWTYPE, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static WorkflowTaskQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    WorkflowTaskQuery query = new WorkflowTaskQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static WorkflowTask get(String oid)
  {
    return (WorkflowTask) com.runwaysdk.business.Business.get(oid);
  }
  
  public static WorkflowTask getByKey(String key)
  {
    return (WorkflowTask) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static WorkflowTask lock(java.lang.String oid)
  {
    WorkflowTask _instance = WorkflowTask.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static WorkflowTask unlock(java.lang.String oid)
  {
    WorkflowTask _instance = WorkflowTask.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
